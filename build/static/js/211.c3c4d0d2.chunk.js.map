{"version":3,"file":"static/js/211.c3c4d0d2.chunk.js","mappings":"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","sources":["features/patient-reports/delivery-queue/components/molecules/report-delivery-list.components.tsx","features/patient-reports/delivery-queue/components/molecules/table-bootstrap.components.tsx","features/patient-reports/delivery-queue/components/molecules/order-delivered-list.components.tsx","features/patient-reports/delivery-queue/components/molecules/modal-generate-reports.component.tsx","features/patient-reports/delivery-queue/screens/delivery-queue.screen.tsx"],"sourcesContent":["import React, {useState} from 'react';\nimport {observer} from 'mobx-react';\nimport {\n  Tooltip,\n  Icons,\n  textFilter,\n  customFilter,\n  DateFilter,\n  NumberFilter,\n} from '@/library/components';\nimport dayjs from 'dayjs';\nimport {TableBootstrap} from './table-bootstrap.components';\nimport * as Material from '@mui/material';\n\nlet labId;\nlet externalLabId;\nlet employeeCode;\nlet visitId;\nlet deliveryId;\nlet deliveryDate;\nlet reportDate;\nlet deliveryStatus;\nlet reportType;\nlet deliveryMode;\nlet destination;\nlet comments;\nlet startDate;\nlet endDate;\nlet errorMsg;\nlet clientCode;\nlet clientName;\nlet registrationLocation;\nlet registrationLocationCode;\nlet doctorCode;\nlet doctorName;\nlet qrCode;\nlet pdf;\nlet enteredBy;\nlet userComments;\n\ninterface ReportDeliveryProps {\n  data: any;\n  totalSize: number;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  isPagination?: boolean;\n  onUpdate?: (selectedItem: any) => void;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (value: any, dataField: string, id: string) => void;\n  onPageSizeChange?: (page: number, totalSize: number) => void;\n  onUpdateDeliveryStatus?: () => void;\n  onMedicalReport: (labId: string) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n  onClickRow?: (item: any, index: number) => void;\n}\n\nexport const ReportDeliveryList = observer((props: ReportDeliveryProps) => {\n  const [selectedItem, setSelectedItem] = useState<any>({});\n  return (\n    <>\n      <div style={{position: 'relative'}}>\n        <TableBootstrap\n          id='_id'\n          data={props.data}\n          totalSize={props.totalSize}\n          selectedItem={selectedItem}\n          isPagination={props.isPagination}\n          columns={[\n            {\n              dataField: '_id',\n              text: 'Id',\n              hidden: true,\n              csvExport: false,\n            },\n            {\n              dataField: 'labId',\n              text: 'Lab Id',\n              sort: true,\n              editable: false,\n              headerClasses: 'textHeader5',\n              filter: textFilter({\n                getFilter: filter => {\n                  labId = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'externalLabId',\n              text: 'External Lab Id',\n              sort: true,\n              editable: false,\n              headerClasses: 'textHeader5',\n              filter: textFilter({\n                getFilter: filter => {\n                  externalLabId = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'employeeCode',\n              text: 'Employee Code',\n              sort: true,\n              editable: false,\n              headerClasses: 'textHeader5',\n              filter: textFilter({\n                getFilter: filter => {\n                  employeeCode = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'deliveryId',\n              text: 'Delivery Id',\n              sort: true,\n              editable: false,\n              headerClasses: 'textHeader5',\n              filter: customFilter({\n                getFilter: filter => {\n                  deliveryId = filter;\n                },\n              }),\n              filterRenderer: (onFilter, column) => (\n                <NumberFilter onFilter={onFilter} column={column} />\n              ),\n            },\n            {\n              dataField: 'deliveryDate',\n              text: 'Delivery Date',\n              sort: true,\n              editable: false,\n              headerClasses: 'textHeader11',\n              filter: customFilter({\n                getFilter: filter => {\n                  deliveryDate = filter;\n                },\n              }),\n              filterRenderer: (onFilter, column) => (\n                <DateFilter onFilter={onFilter} column={column} />\n              ),\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    {row.deliveryDate\n                      ? dayjs(row.deliveryDate).format('YYYY-MM-DD')\n                      : ''}\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'reportDate',\n              text: 'Report Date',\n              sort: true,\n              editable: false,\n              headerClasses: 'textHeader11',\n              filter: customFilter({\n                getFilter: filter => {\n                  reportDate = filter;\n                },\n              }),\n              filterRenderer: (onFilter, column) => (\n                <DateFilter onFilter={onFilter} column={column} />\n              ),\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    {row.reportDate\n                      ? dayjs(row.reportDate).format('YYYY-MM-DD')\n                      : ''}\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'deliveryStatus',\n              text: 'Delivery Status',\n              sort: true,\n              editable: false,\n              headerClasses: 'textHeader5',\n              filter: textFilter({\n                getFilter: filter => {\n                  deliveryStatus = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'reportType',\n              text: 'Report Type',\n              sort: true,\n              editable: false,\n              headerClasses: 'textHeader5',\n              filter: textFilter({\n                getFilter: filter => {\n                  reportType = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'deliveryMode',\n              text: 'Delivery Mode',\n              sort: true,\n              editable: false,\n              headerClasses: 'textHeader5',\n              filter: textFilter({\n                getFilter: filter => {\n                  deliveryMode = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'destination',\n              text: 'Destination',\n              sort: true,\n              editable: false,\n              headerClasses: 'textHeader5',\n              filter: textFilter({\n                getFilter: filter => {\n                  destination = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'comments',\n              text: 'Comments',\n              sort: true,\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n              headerClasses: 'textHeader5',\n              filter: textFilter({\n                getFilter: filter => {\n                  comments = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'startDate',\n              text: 'Start Date',\n              sort: true,\n              editable: false,\n              headerClasses: 'textHeader11',\n              filter: customFilter({\n                getFilter: filter => {\n                  startDate = filter;\n                },\n              }),\n              filterRenderer: (onFilter, column) => (\n                <DateFilter onFilter={onFilter} column={column} />\n              ),\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    {row.startDate\n                      ? dayjs(row.startDate).format('YYYY-MM-DD')\n                      : ''}\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'endDate',\n              text: 'End Date',\n              sort: true,\n              editable: false,\n              headerClasses: 'textHeader11',\n              filter: customFilter({\n                getFilter: filter => {\n                  endDate = filter;\n                },\n              }),\n              filterRenderer: (onFilter, column) => (\n                <DateFilter onFilter={onFilter} column={column} />\n              ),\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    {row.endDate ? dayjs(row.endDate).format('YYYY-MM-DD') : ''}\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'errorMsg',\n              text: 'Error Msg',\n              sort: true,\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n              headerClasses: 'textHeader5',\n              filter: textFilter({\n                getFilter: filter => {\n                  errorMsg = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'clientCode',\n              text: 'Client Code',\n              sort: true,\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n              headerClasses: 'textHeader5',\n              filter: textFilter({\n                getFilter: filter => {\n                  clientCode = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'clientName',\n              text: 'Client Name',\n              sort: true,\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n              headerClasses: 'textHeader5',\n              filter: textFilter({\n                getFilter: filter => {\n                  clientName = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'registrationLocation',\n              text: 'Registration Location',\n              sort: true,\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n              headerClasses: 'textHeader8',\n              filter: textFilter({\n                getFilter: filter => {\n                  registrationLocation = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'registrationLocationCode',\n              text: 'Registration Location Code',\n              sort: true,\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n              headerClasses: 'textHeader8',\n              filter: textFilter({\n                getFilter: filter => {\n                  registrationLocationCode = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'doctorCode',\n              text: 'Doctor Code',\n              sort: true,\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n              headerClasses: 'textHeader5',\n              filter: textFilter({\n                getFilter: filter => {\n                  doctorCode = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'doctorName',\n              text: 'Doctor Name',\n              sort: true,\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n              headerClasses: 'textHeader5',\n              filter: textFilter({\n                getFilter: filter => {\n                  doctorName = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'qrCode',\n              text: 'Qr Code',\n              sort: true,\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n              headerClasses: 'textHeader5',\n              filter: textFilter({\n                getFilter: filter => {\n                  qrCode = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'pdf',\n              text: 'PDF',\n              sort: true,\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n              headerClasses: 'textHeader5',\n              filter: textFilter({\n                getFilter: filter => {\n                  pdf = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'enteredBy',\n              text: 'Entered By',\n              sort: true,\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n              headerClasses: 'textHeader5',\n              filter: textFilter({\n                getFilter: filter => {\n                  enteredBy = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'userComments',\n              text: 'User Comments',\n              sort: true,\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n              headerClasses: 'textHeader5',\n              filter: textFilter({\n                getFilter: filter => {\n                  userComments = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'operation',\n              text: 'Action',\n              editable: false,\n              csvExport: false,\n              hidden: !props.isDelete,\n              formatter: (cellContent, row) => (\n                <>\n                  <div className='flex flex-row'>\n                    <Tooltip tooltipText='Cancel' position='bottom'>\n                      <Icons.IconContext\n                        color='#fff'\n                        size='20'\n                        onClick={() =>\n                          props.onUpdate &&\n                          props.onUpdate({\n                            type: 'cancel',\n                            visitId: row?.visitId,\n                            show: true,\n                            id: row._id,\n                            title: 'Are you sure?',\n                            body: 'Cancel item',\n                          })\n                        }\n                      >\n                        {Icons.getIconTag(Icons.IconGi.GiCancel)}\n                      </Icons.IconContext>\n                    </Tooltip>\n                    <Tooltip tooltipText='Hold' position='bottom'>\n                      <Icons.IconContext\n                        color='#fff'\n                        size='20'\n                        onClick={() =>\n                          props.onUpdate &&\n                          props.onUpdate({\n                            type: 'hold',\n                            visitId: row?.visitId,\n                            show: true,\n                            id: row._id,\n                            title: 'Are you sure?',\n                            body: 'Hold item',\n                          })\n                        }\n                      >\n                        {Icons.getIconTag(Icons.Iconmd.MdBackHand)}\n                      </Icons.IconContext>\n                    </Tooltip>\n\n                    <Tooltip tooltipText='Delivery Status'>\n                      <Icons.IconContext\n                        color='#ffffff'\n                        size='20'\n                        onClick={() =>\n                          props.onUpdate &&\n                          props.onUpdate({\n                            type: 'generatePdf',\n                            visitId: row?.visitId,\n                            show: true,\n                            id: row._id,\n                            title: 'Are you sure?',\n                            body: 'Generate pdf status update',\n                          })\n                        }\n                      >\n                        {Icons.getIconTag(Icons.IconTb.TbExchange)}\n                      </Icons.IconContext>\n                    </Tooltip>\n                    <Tooltip tooltipText='Medical Report'>\n                      <Icons.IconContext\n                        color='#ffffff'\n                        size='20'\n                        onClick={() =>\n                          props.onMedicalReport &&\n                          props.onMedicalReport(row?.labId)\n                        }\n                      >\n                        {Icons.getIconTag(Icons.IconBs.BsFilePdf)}\n                      </Icons.IconContext>\n                    </Tooltip>\n                  </div>\n                </>\n              ),\n              headerClasses: 'sticky right-0  bg-gray-500 text-white z-50',\n              classes: (cell, row, rowIndex, colIndex) => {\n                return 'sticky right-0 bg-gray-500';\n              },\n              style: (cell, row, rowIndex, colIndex) => {\n                return {\n                  zIndex: props.data?.length - rowIndex,\n                };\n              },\n            },\n          ]}\n          isEditModify={props.isEditModify}\n          isSelectRow={true}\n          fileName='Report Delivery'\n          onSelectedRow={rows => {\n            props.onSelectedRow &&\n              props.onSelectedRow(rows.map((item: any) => item._id));\n          }}\n          onUpdateItem={(value: any, dataField: string, id: string) => {\n            props.onUpdateItem && props.onUpdateItem(value, dataField, id);\n          }}\n          onPageSizeChange={(page, size) => {\n            props.onPageSizeChange && props.onPageSizeChange(page, size);\n          }}\n          onFilter={(type, filter, page, size) => {\n            props.onFilter && props.onFilter(type, filter, page, size);\n          }}\n          clearAllFilter={() => {\n            labId('');\n            externalLabId('');\n            employeeCode('');\n            deliveryId('');\n            deliveryDate();\n            reportDate();\n            deliveryStatus('');\n            reportType('');\n            deliveryMode('');\n            destination('');\n            comments('');\n            startDate();\n            endDate();\n            errorMsg('');\n            clientCode('');\n            clientName('');\n            registrationLocation('');\n            registrationLocationCode('');\n            doctorCode('');\n            doctorName('');\n            qrCode('');\n            pdf('');\n            enteredBy('');\n            userComments('');\n          }}\n          onClickRow={(item, index) => {\n            setSelectedItem(item);\n            props.onClickRow && props.onClickRow(item, index);\n          }}\n          onUpdateDeliveryStatus={() => {\n            props.onUpdateDeliveryStatus && props.onUpdateDeliveryStatus();\n          }}\n        />\n      </div>\n    </>\n  );\n});\n","/* eslint-disable */\nimport React, {useState} from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport _ from 'lodash';\nimport ToolkitProvider, {\n  Search,\n  CSVExport,\n} from 'react-bootstrap-table2-toolkit/dist/react-bootstrap-table2-toolkit';\nimport cellEditFactory from 'react-bootstrap-table2-editor';\nimport paginationFactory, {\n  PaginationProvider,\n  PaginationListStandalone,\n  SizePerPageDropdownStandalone,\n  PaginationTotalStandalone,\n} from 'react-bootstrap-table2-paginator';\nimport filterFactory from 'react-bootstrap-table2-filter';\nimport dayjs from 'dayjs';\nimport '@/library/components/organisms/style.css';\nimport {debounce} from '@/core-utils';\n\nimport {Buttons, Icons, Tooltip} from '@/library/components';\n\nconst {SearchBar, ClearSearchButton} = Search;\nconst {ExportCSVButton} = CSVExport;\n\ninterface TableBootstrapProps {\n  id: string;\n  data: any;\n  totalSize?: number;\n  searchPlaceholder?: string;\n  page?: number;\n  sizePerPage?: number;\n  columns: any;\n  fileName: string;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  isSelectRow?: boolean;\n  selectedItem?: any;\n  isPagination?: boolean;\n  onDelete?: (selectedItem: any) => void;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (value: any, dataField: string, id: string) => void;\n  onPageSizeChange?: (page: number, limit: number) => void;\n  onUpdateDeliveryStatus?: () => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n  clearAllFilter?: () => void;\n  onClickRow?: (item: any, index: number) => void;\n}\nexport const TableBootstrap = ({\n  id,\n  data,\n  totalSize = 10,\n  searchPlaceholder = 'Search...',\n  page = 0,\n  sizePerPage = 10,\n  columns,\n  fileName,\n  isEditModify,\n  isSelectRow,\n  selectedItem,\n  isPagination = true,\n  onSelectedRow,\n  onUpdateItem,\n  onPageSizeChange,\n  onUpdateDeliveryStatus,\n  onFilter,\n  clearAllFilter,\n  onClickRow,\n}: TableBootstrapProps) => {\n  const [selectedRow, setSelectedRow] = useState<any[]>();\n  const [isFilterOpen, setIsFilterOpen] = useState<boolean>(false);\n\n  const customTotal = (from, to, size) => {\n    return (\n      <>\n        <div className='clearfix' />\n        <span>\n          Showing {from} to {to} of {size} Results\n        </span>\n      </>\n    );\n  };\n\n  const sizePerPageRenderer = ({\n    options,\n    currSizePerPage,\n    onSizePerPageChange,\n  }) => (\n    <div className='btn-group items-center' role='group'>\n      <input\n        type='number'\n        min='0'\n        placeholder='No'\n        onChange={(e: any) => {\n          if (e.target.value) {\n            onSizePerPageChange(e.target.value);\n          }\n        }}\n        className='mr-2 ml-2 leading-4 p-2 w-14 focus:outline-none focus:ring block  shadow-sm sm:text-base border border-gray-300 rounded-md'\n      />\n      {options.map(option => (\n        <button\n          key={option.text}\n          type='button'\n          onClick={() => onSizePerPageChange(option.page)}\n          className={`btn  ${\n            currSizePerPage === `${option.page}` ? 'bg-primary' : 'bg-grey'\n          }`}\n        >\n          {option.text}\n        </button>\n      ))}\n    </div>\n  );\n  const options = {\n    cutome: true,\n    totalSize: totalSize,\n    paginationSize: 5,\n    pageStartIndex: 0,\n    firstPageText: '<<',\n    prePageText: '<',\n    nextPageText: '>',\n    lastPageText: '>>',\n    disablePageTitle: true,\n    paginationTotalRenderer: customTotal,\n    hideSizePerPage: true,\n    showTotal: false,\n    alwaysShowAllBtns: true,\n    sizePerPageList: [\n      {\n        text: '10',\n        value: 10,\n      },\n      {\n        text: '20',\n        value: 20,\n      },\n      {\n        text: '30',\n        value: 30,\n      },\n      {\n        text: '40',\n        value: 40,\n      },\n      {\n        text: '50',\n        value: 50,\n      },\n    ],\n    hidePageListOnlyOnePage: true,\n    sizePerPageRenderer: sizePerPageRenderer,\n  };\n  let searchProps: any = {\n    placeholder: searchPlaceholder,\n  };\n\n  const handleTableChange = (\n    type,\n    {\n      data,\n      cellEdit,\n      page,\n      sizePerPage,\n      filters,\n      sortField,\n      sortOrder,\n      searchText,\n    },\n  ) => {\n    // console.log({type});\n    if (type === 'cellEdit' && isEditModify) {\n      onUpdateItem &&\n        onUpdateItem(cellEdit.newValue, cellEdit.dataField, cellEdit.rowId);\n    }\n    if (type === 'pagination' && _.isEmpty(filters)) {\n      // if (sizePerPage > totalSize) return alert(\"You have not more records.\")\n      // if (page * sizePerPage > totalSize) return alert(\"You have not more records.\")\n      onPageSizeChange && onPageSizeChange(page, sizePerPage);\n    }\n    if (type === 'filter' || (type === 'pagination' && !_.isEmpty(filters))) {\n      if (type === 'pagination') {\n        if (sizePerPage > totalSize) return alert('You have not more records.');\n        if (page * sizePerPage > totalSize)\n          return alert('You have not more records.');\n      }\n      let filter: any = {};\n      for (const [key, value] of Object.entries(filters)) {\n        const values: any = value;\n        const object = {[key]: values.filterVal};\n        filter = Object.assign(filter, object);\n      }\n      if (onFilter)\n        debounce(() => {\n          onFilter(\n            type,\n            filter,\n            type === 'filter' && page === 1 ? 0 : page,\n            sizePerPage,\n          );\n        });\n    }\n    if (type === 'search') {\n      debounce(() => {\n        onFilter && onFilter(type, {srText: searchText}, page, sizePerPage);\n      });\n    }\n    if (type === 'sort') {\n      let result;\n      if (sortOrder === 'asc') {\n        result = data.sort((a, b) => {\n          if (a[sortField] > b[sortField]) {\n            return 1;\n          } else if (b[sortField] > a[sortField]) {\n            return -1;\n          }\n          return 0;\n        });\n      } else {\n        result = data.sort((a, b) => {\n          if (a[sortField] > b[sortField]) {\n            return -1;\n          } else if (b[sortField] > a[sortField]) {\n            return 1;\n          }\n          return 0;\n        });\n      }\n    }\n  };\n\n  const CustomToggleList = ({columns, onColumnToggle, toggles}) => (\n    <div className='btn-group btn-group-toggle' data-toggle='buttons'>\n      {columns\n        .map(column => ({\n          ...column,\n          toggle: toggles[column.dataField],\n        }))\n        .map((column, index) => {\n          if (index > 0) {\n            return (\n              <button\n                type='button'\n                key={column.dataField}\n                className={` btn btn-primary  btn-sm whitespace-nowrap ${\n                  column.toggle ? 'active' : ''\n                }`}\n                data-toggle='button'\n                aria-pressed={column.toggle ? 'true' : 'false'}\n                onClick={() => onColumnToggle(column.dataField)}\n              >\n                {column.text}\n              </button>\n            );\n          }\n        })}\n    </div>\n  );\n\n  const rowEvents = {\n    onClick: (e, row, rowIndex) => {\n      onClickRow && onClickRow(row, rowIndex);\n    },\n  };\n\n  const rowStyle = (row, rowIndex) => {\n    if (row._id == selectedItem?._id) {\n      return {backgroundColor: '#a9a9a9'};\n    }\n  };\n\n  return (\n    <PaginationProvider\n      pagination={paginationFactory(\n        totalSize !== 0 ? options : {page, sizePerPage, totalSize},\n      )}\n      keyField={id}\n      columns={columns}\n      data={data}\n    >\n      {({paginationProps, paginationTableProps}) => (\n        <ToolkitProvider\n          keyField={id}\n          bootstrap4\n          data={data}\n          columns={columns}\n          search\n          exportCSV={{\n            fileName: `${fileName}_${dayjs(new Date()).format(\n              'YYYY-MM-DD HH:mm',\n            )}.csv`,\n            noAutoBOM: false,\n            blobType: 'text/csv;charset=ansi',\n            exportAll: false,\n            onlyExportFiltered: true,\n          }}\n          columnToggle\n        >\n          {props => (\n            <div>\n              <div className='flex items-center gap-2'>\n                <SearchBar\n                  {...searchProps}\n                  {...props.searchProps}\n                  onChange={value => {\n                    console.log({value});\n                  }}\n                  style={{marginTop: 10}}\n                />\n                <ClearSearchButton\n                  className={`inline-flex bg-gray-500 items-center small outline shadow-sm  font-medium  disabled:opacity-50 disabled:cursor-not-allowed text-center h-9 text-white`}\n                  {...props.searchProps}\n                />\n                <button\n                  className={`px-2 focus:outline-none bg-gray-500 items-center  outline shadow-sm  font-medium  text-center rounded-md h-9 text-white`}\n                  onClick={clearAllFilter}\n                >\n                  Clear all filters\n                </button>\n                <ExportCSVButton\n                  className={`inline-flex bg-gray-500 items-center  small outline shadow-sm  font-medium  disabled:opacity-50 disabled:cursor-not-allowed text-center h-9 text-white`}\n                  {...props.csvProps}\n                >\n                  Export CSV!!\n                </ExportCSVButton>\n                {isFilterOpen ? (\n                  <Buttons.Button\n                    size='medium'\n                    type='outline'\n                    onClick={() => {\n                      setIsFilterOpen(!isFilterOpen);\n                    }}\n                  >\n                    <Icons.IconFa.FaChevronUp />\n                  </Buttons.Button>\n                ) : (\n                  <Buttons.Button\n                    size='medium'\n                    type='outline'\n                    onClick={() => {\n                      setIsFilterOpen(!isFilterOpen);\n                    }}\n                  >\n                    <Icons.IconFa.FaChevronDown />\n                  </Buttons.Button>\n                )}\n                <Tooltip\n                  tooltipText='All records delivery status update'\n                  position='top'\n                >\n                  <Buttons.Button\n                    size='medium'\n                    type='outline'\n                    onClick={() => {\n                      onUpdateDeliveryStatus && onUpdateDeliveryStatus();\n                    }}\n                  >\n                    <Icons.IconTb.TbExchange />\n                  </Buttons.Button>\n                </Tooltip>\n              </div>\n              {isFilterOpen && (\n                <div className={'mb-2 overflow-auto h-10'}>\n                  <CustomToggleList\n                    contextual='primary'\n                    className='list-custom-class'\n                    btnClassName='list-btn-custom-class'\n                    {...props.columnToggleProps}\n                  />\n                </div>\n              )}\n              <div className='scrollTable'>\n                <BootstrapTable\n                  remote\n                  {...props.baseProps}\n                  noDataIndication='Table is Empty'\n                  hover\n                  {...paginationTableProps}\n                  filter={filterFactory()}\n                  headerClasses='bg-gray-500 text-white whitespace-nowrap'\n                  onTableChange={handleTableChange}\n                  rowEvents={rowEvents}\n                  rowStyle={rowStyle}\n                />\n              </div>\n              {isPagination && (\n                <>\n                  <div className='flex items-center gap-2 mt-2'>\n                    <SizePerPageDropdownStandalone\n                      {...Object.assign(\n                        {},\n                        {...paginationProps, hideSizePerPage: false},\n                      )}\n                    />\n                    <PaginationListStandalone {...paginationProps} />\n                  </div>\n                  <div className='flex items-center gap-2 mt-2'>\n                    <PaginationTotalStandalone {...paginationProps} />\n                  </div>\n                </>\n              )}\n            </div>\n          )}\n        </ToolkitProvider>\n      )}\n    </PaginationProvider>\n  );\n};\n","import React from 'react';\nimport {observer} from 'mobx-react';\nimport {\n  NumberFilter,\n  textFilter,\n  customFilter,\n  Form,\n  Tooltip,\n  Icons,\n} from '@/library/components';\nimport {Confirm} from '@/library/models';\nimport dayjs from 'dayjs';\nimport {TableBootstrap} from './table-bootstrap.components';\n\ninterface OrderDeliveredProps {\n  data: any;\n  totalSize: number;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  onDelete?: (selectedItem: Confirm) => void;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (value: any, dataField: string, id: string) => void;\n  onPageSizeChange?: (page: number, totalSize: number) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n}\n\nexport const OrderDeliveredList = observer((props: OrderDeliveredProps) => {\n  return (\n    <>\n      <div style={{position: 'relative'}}>\n        <TableBootstrap\n          id='_id'\n          data={props.data}\n          totalSize={props.totalSize}\n          columns={[\n            {\n              dataField: '_id',\n              text: 'Id',\n              hidden: true,\n              csvExport: false,\n            },\n            {\n              dataField: 'deliveryId',\n              text: 'Delivery Id',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'labId',\n              text: 'Lab Id',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'orderId',\n              text: 'Order Id',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'panelCode',\n              text: 'Panel Code',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'panelName',\n              text: 'Panel Name',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'testCode',\n              text: 'Test Code',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'testName',\n              text: 'Test Name',\n              sort: true,\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n            },\n            {\n              dataField: 'analyteCode',\n              text: 'Analyte Code',\n              sort: true,\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n            },\n            {\n              dataField: 'analyteName',\n              text: 'Analyte Name',\n              sort: true,\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n            },\n            {\n              dataField: 'rep',\n              text: 'Rep',\n              sort: true,\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n            },\n            {\n              dataField: 'delivered',\n              text: 'Delivered',\n              sort: true,\n              csvFormatter: (col, row) =>\n                `${row.delivered ? (row.delivered ? 'Yes' : 'No') : 'No'}`,\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <Form.Toggle disabled={true} value={row.delivered} />\n                  </>\n                );\n              },\n            },\n          ]}\n          isEditModify={props.isEditModify}\n          isSelectRow={true}\n          fileName='Order Delivered'\n          onSelectedRow={rows => {\n            props.onSelectedRow &&\n              props.onSelectedRow(rows.map((item: any) => item._id));\n          }}\n          onUpdateItem={(value: any, dataField: string, id: string) => {\n            props.onUpdateItem && props.onUpdateItem(value, dataField, id);\n          }}\n          onPageSizeChange={(page, size) => {\n            props.onPageSizeChange && props.onPageSizeChange(page, size);\n          }}\n          onFilter={(type, filter, page, size) => {\n            props.onFilter && props.onFilter(type, filter, page, size);\n          }}\n          clearAllFilter={() => {}}\n        />\n      </div>\n    </>\n  );\n});\n","/* eslint-disable  */\nimport React, {useEffect, useState} from 'react';\nimport {Container} from 'reactstrap';\nimport _ from 'lodash';\nimport {Icons, Tooltip, Form} from '@components';\nimport {pdf} from '@react-pdf/renderer';\nimport {\n  PdfTPRTemp0001,\n  PdfTPRTemp0002,\n  PdfTPRTemp0003,\n  PdfTemp0004,\n  PdfTemp0005,\n  PdfTemp0006,\n} from '@/features/report-builder/report-template/components';\nimport {saveAs} from 'file-saver';\nimport {SocialIcon} from 'react-social-icons';\nimport printjs from 'print-js';\n\ninterface ModalGenerateReportsProps {\n  show?: boolean;\n  title?: string;\n  data?: any;\n  onClick: (data: any, item: any, index: number) => void;\n  onClose: () => void;\n  onReceiptUpload: (file: any, type: string) => void;\n}\n\nexport const ModalGenerateReports = ({\n  show = false,\n  data,\n  onClose,\n  onReceiptUpload,\n}: ModalGenerateReportsProps) => {\n  const [reportList, setReportList] = useState<any>();\n  const [showModal, setShowModal] = React.useState(show);\n  const [reportType, setReportType] = useState('withHeader');\n\n  useEffect(() => {\n    setShowModal(show);\n  }, [show]);\n\n  useEffect(() => {\n    if (data) {\n      let newObj = _.mapKeys(data, (value, key) => key.split(' -')[0]);\n      setReportList(newObj);\n      console.log({newObj});\n    }\n  }, [data]);\n\n  const getReports = reports => {\n    return (\n      <>\n        {reports['TEMP0004'] && <PdfTemp0004 data={{}} />}\n        {reports['TEMP0004'] && <PdfTemp0005 data={{}} />}\n      </>\n    );\n  };\n\n  // const sharePdfLink = async (type: string) => {\n  //   const doc = <PdfTemp0006 data={data} />;\n  //   const asPdf = pdf(doc);\n  //   asPdf.updateContainer(doc);\n  //   const blob: any = await asPdf.toBlob();\n  //   blob.name = 'Medical-Report.pdf';\n  //   onReceiptUpload(blob, type);\n  // };\n\n  return (\n    <Container>\n      {showModal && (\n        <>\n          <div className='justify-center items-center  overflow-x-hidden overflow-y-auto fixed inset-0 z-50 outline-none focus:outline-none'>\n            <div className='relative w-auto my-6 mx-auto max-w-3xl'>\n              <div className='border-0 rounded-lg shadow-lg relative flex flex-col w-full bg-white outline-none focus:outline-none'>\n                <div className='flex items-start justify-between p-3 border-b border-solid border-gray-300 rounded-t'>\n                  <h3 className='text-3xl font-semibold'>\n                    {'Generate Reports'}\n                  </h3>\n                  <button\n                    className='p-1  border-0 text-black opacity-1 ml-6 float-right text-3xl leading-none font-semibold outline-none focus:outline-none'\n                    onClick={() => {\n                      setShowModal(false);\n                      onClose && onClose();\n                    }}\n                  >\n                    <span className=' text-black h-6 w-6 text-2xl block outline-none focus:outline-none'>\n                      ×\n                    </span>\n                  </button>\n                </div>\n                <div className='relative p-2 flex-auto'>\n                  <div className='flex flex-row items-center justify-center gap-2'>\n                    {data && (\n                      <div className='flex flex-col gap-3'>\n                        <Form.InputRadio\n                          label='Report Type'\n                          labelStyle={{fontWeight: 'bold', fontSize: 16}}\n                          value={reportType}\n                          values={[\n                            {value: 'withHeader', label: 'With Header'},\n                            {value: 'withoutHeader', label: 'Without Header'},\n                          ]}\n                          onChange={value => {\n                            setReportType(value);\n                          }}\n                        />\n                        <div className='flex flex-row content-center justify-center gap-2'>\n                          <Tooltip tooltipText='Download'>\n                            <Icons.IconContext\n                              color='#fff'\n                              size='25'\n                              style={{\n                                backgroundColor: '#808080',\n                                width: 32,\n                                height: 32,\n                                borderRadius: 16,\n                                align: 'center',\n                                padding: 4,\n                              }}\n                              onClick={async () => {\n                                // const doc = <PdfTemp0006 data={data} />;\n                                // const asPdf = pdf(doc);\n                                // asPdf.updateContainer(doc);\n                                // const blob = await asPdf.toBlob();\n                                // saveAs(blob, 'MedicalReport.pdf');\n                                getReports(reportList);\n                              }}\n                            >\n                              {Icons.getIconTag(\n                                Icons.Iconhi.HiOutlineFolderDownload,\n                              )}\n                            </Icons.IconContext>\n                          </Tooltip>\n                          {reportList && getReports(reportList)}\n                          {/* <Tooltip tooltipText='Print'>\n                            <Icons.IconContext\n                              color='#fff'\n                              size='25'\n                              style={{\n                                backgroundColor: '#808080',\n                                width: 32,\n                                height: 32,\n                                borderRadius: 16,\n                                align: 'center',\n                                padding: 4,\n                              }}\n                              onClick={async () => {\n                                const blob = await pdf(\n                                  <PdfTemp0006 data={data} />,\n                                ).toBlob();\n                                const blobURL = URL.createObjectURL(blob);\n                                printjs(blobURL);\n                              }}\n                            >\n                              {Icons.getIconTag(Icons.IconBi.BiPrinter)}\n                            </Icons.IconContext>\n                          </Tooltip> */}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n                <div className='flex items-center justify-end p-3 border-t border-solid border-gray-300 rounded-b'>\n                  <button\n                    className='text-red-500 background-transparent font-bold uppercase px-6 py-2 text-sm outline-none focus:outline-none mr-1 mb-1'\n                    type='button'\n                    style={{transition: 'all .15s ease'}}\n                    onClick={() => {\n                      setShowModal(false);\n                      onClose && onClose();\n                    }}\n                  >\n                    Close\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className='opacity-25 fixed inset-0 z-40 bg-black'></div>\n        </>\n      )}\n    </Container>\n  );\n};\n","import React, {useState, useCallback, useEffect, useMemo} from 'react';\nimport {observer} from 'mobx-react';\nimport _ from 'lodash';\nimport {\n  ModalConfirm,\n  Header,\n  PageHeading,\n  PageHeadingLabDetails,\n  Toast,\n} from '@/library/components';\nimport {debounce} from '@/core-utils';\nimport {useForm, Controller} from 'react-hook-form';\nimport {RouterFlow} from '@/flows';\nimport {\n  ReportDeliveryList,\n  OrderDeliveredList,\n  ModalGenerateReports,\n} from '../components';\nimport '@/library/assets/css/accordion.css';\nimport {useStores} from '@/stores';\nimport 'react-accessible-accordion/dist/fancy-example.css';\nimport {toJS} from 'mobx';\n\nconst DeliveryQueue = observer(() => {\n  const {\n    loading,\n    deliveryQueueStore,\n    routerStore,\n    loginStore,\n    receiptStore,\n    reportSettingStore,\n  } = useStores();\n\n  const {\n    control,\n    handleSubmit,\n    formState: {errors},\n    setValue,\n  } = useForm();\n  const [modalConfirm, setModalConfirm] = useState<any>();\n  const [modalGenerateReports, setModalGenerateReports] = useState<any>();\n  const [receiptPath, setReceiptPath] = useState<string>();\n\n  const getDeliveryList = () => {\n    const loginDetails = loginStore.login;\n    if (loginDetails?.role == 'SYSADMIN') {\n      deliveryQueueStore.deliveryQueueService.listDeliveryQueue();\n      return;\n    }\n    if (loginDetails?.role == 'CORPORATE_PORTAL') {\n      deliveryQueueStore.deliveryQueueService\n        .findByFields({\n          input: {\n            filter: {\n              clientCode: loginDetails.lab,\n            },\n          },\n        })\n        .then(res => {\n          if (res.findByFieldsDeliveryQueue.success) {\n            deliveryQueueStore.updateReportDeliveryList({\n              deliveryQueues: {\n                data: res.findByFieldsDeliveryQueue?.data,\n                paginatorInfo: {\n                  count: res.findByFieldsDeliveryQueue?.data?.length,\n                },\n              },\n            });\n          }\n        });\n      return;\n    } else {\n      Toast.warning({\n        message:\n          \"😞 You don't have access permission for delivery queue. Please contact to admin\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    getDeliveryList();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const getValue = value =>\n    typeof value === 'string' ? value.toUpperCase() : value;\n\n  const filterPlainArray = (array, filters) => {\n    const filterKeys = Object.keys(filters);\n    // console.log({filterKeys});\n    return array.filter(item => {\n      console.log({item});\n      return filterKeys.every(key => {\n        console.log({key});\n        if (!filters[key].length) return true;\n        return filters[key].find(\n          filter => getValue(filter) === getValue(item[key]),\n        );\n      });\n    });\n  };\n\n  // userModule =\"Corporate Portal\"\n  const reportDeliveryList = useMemo(\n    () => (\n      <ReportDeliveryList\n        data={deliveryQueueStore.reportDeliveryList || []}\n        totalSize={deliveryQueueStore.reportDeliveryListCount}\n        isPagination={loginStore.login?.role == 'SYSADMIN' ? true : false}\n        isDelete={RouterFlow.checkPermission(\n          routerStore.userPermission,\n          'Delete',\n        )}\n        isEditModify={RouterFlow.checkPermission(\n          routerStore.userPermission,\n          'Edit/Modify',\n        )}\n        onUpdate={selectedItem => setModalConfirm(selectedItem)}\n        onPageSizeChange={(page, limit) => {\n          deliveryQueueStore.deliveryQueueService.listDeliveryQueue(\n            page,\n            limit,\n          );\n        }}\n        onFilter={(type, filter, page, limit) => {\n          if (loginStore.login?.role == 'SYSADMIN') {\n            deliveryQueueStore.deliveryQueueService.filter({\n              input: {type, filter, page, limit},\n            });\n          } else {\n            if (type == 'filter') {\n              console.log({\n                list: filterPlainArray(\n                  deliveryQueueStore.reportDeliveryListCopy,\n                  filter,\n                ),\n              });\n            } else {\n              if (filter.srText == '') {\n                return deliveryQueueStore.updateReportDeliveryList(\n                  deliveryQueueStore.reportDeliveryListCopy,\n                );\n              }\n              const list = deliveryQueueStore.reportDeliveryListCopy;\n              const data = list?.filter(res => {\n                return JSON.stringify(res)\n                  .toLocaleLowerCase()\n                  .match(filter.srText?.toLocaleLowerCase());\n              });\n              deliveryQueueStore.updateReportDeliveryList(data);\n            }\n          }\n        }}\n        onClickRow={(item, index) => {\n          deliveryQueueStore.updateOrderDeliveredList([item]);\n        }}\n        onUpdateDeliveryStatus={() => {\n          setModalConfirm({\n            type: 'updateAllDeliveryStatus',\n            ids: deliveryQueueStore.reportDeliveryList?.map(item => item._id),\n            visitId: deliveryQueueStore.reportDeliveryList?.map(\n              item => item.visitId,\n            ),\n            show: true,\n            title: 'Are you sure?',\n            body: 'All generate pdf status update',\n          });\n        }}\n        onMedicalReport={labId => {\n          deliveryQueueStore.deliveryQueueService\n            .listPatientReports(labId)\n            .then(res => {\n              if (res.getPatientReports.success) {\n                let patientResultList: any[] = [];\n                res.getPatientReports.data?.patientResultList?.filter(item => {\n                  if (item.reportTemplate) {\n                    patientResultList.push({\n                      ...res.getPatientReports.data,\n                      patientResult: item,\n                    });\n                  }\n                });\n                const uniqByPatientResult = _.uniqBy(\n                  res.getPatientReports.data?.patientResultList,\n                  (item: any) => {\n                    return item.reportTemplate;\n                  },\n                );\n                const reportTemplateList: any[] = [];\n                uniqByPatientResult.filter(item => {\n                  reportTemplateList.push(item?.reportTemplate.split(' -')[0]);\n                });\n                if (reportTemplateList?.length > 0) {\n                  reportSettingStore.templatePatientResultService\n                    .getTempPatientResultListByTempCodes({\n                      input: {\n                        filter: {\n                          reportTemplateList,\n                        },\n                      },\n                    })\n                    .then(res => {\n                      patientResultList = patientResultList.filter(item => {\n                        const reportSettings =\n                          res.getTempPatientResultListByTempCodes.list.find(\n                            e =>\n                              e.templateCode ==\n                              item.patientResult.reportTemplate.split(' -')[0],\n                          );\n                        return Object.assign(item, {reportSettings});\n                      });\n                      const grouped = _.groupBy(\n                        patientResultList,\n                        item => item.patientResult.reportTemplate,\n                      );\n                      setModalGenerateReports({\n                        show: true,\n                        data: grouped,\n                      });\n                    });\n                }\n              } else {\n                alert(res.getPatientReports.message);\n              }\n            });\n        }}\n      />\n    ),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [deliveryQueueStore.reportDeliveryList],\n  );\n\n  return (\n    <>\n      <Header>\n        <PageHeading title={routerStore.selectedComponents?.title || ''} />\n        <PageHeadingLabDetails store={loginStore} />\n      </Header>\n      <div className='p-3 rounded-lg shadow-xl overflow-auto'>\n        <span className='font-bold text-lg underline'>Report Delivery</span>\n        {reportDeliveryList}\n      </div>\n      <div className='p-3 rounded-lg shadow-xl overflow-auto'>\n        <span className='font-bold text-lg underline'>Order Delivered</span>\n        <OrderDeliveredList\n          data={deliveryQueueStore.orderDeliveredList || []}\n          totalSize={deliveryQueueStore.orderDeliveredListCount}\n          isDelete={RouterFlow.checkPermission(\n            routerStore.userPermission,\n            'Delete',\n          )}\n          isEditModify={RouterFlow.checkPermission(\n            routerStore.userPermission,\n            'Edit/Modify',\n          )}\n          onDelete={selectedItem => setModalConfirm(selectedItem)}\n          onSelectedRow={rows => {\n            setModalConfirm({\n              show: true,\n              type: 'delete',\n              id: rows,\n              title: 'Are you sure?',\n              body: 'Delete selected items!',\n            });\n          }}\n          onUpdateItem={(value: any, dataField: string, id: string) => {\n            setModalConfirm({\n              show: true,\n              type: 'update',\n              data: {value, dataField, id},\n              title: 'Are you sure?',\n              body: 'Update items!',\n            });\n          }}\n          onPageSizeChange={(page, limit) => {\n            // bannerStore.fetchListBanner(page, limit);\n          }}\n          onFilter={(type, filter, page, limit) => {\n            // bannerStore.BannerService.filter({\n            //   input: {type, filter, page, limit},\n            // });\n          }}\n        />\n        <ModalConfirm\n          {...modalConfirm}\n          click={(type?: string) => {\n            if (type == 'cancel' || type == 'hold' || type == 'generatePdf') {\n              deliveryQueueStore.deliveryQueueService\n                .updateDeliveryQueue({\n                  input: {\n                    _id: modalConfirm.id,\n                    visitId: modalConfirm?.visitId,\n                    deliveryStatus:\n                      type == 'cancel'\n                        ? 'Cancel'\n                        : type == 'hold'\n                        ? 'Hold'\n                        : 'Done',\n                  },\n                })\n                .then(res => {\n                  setModalConfirm({show: false});\n                  if (res.updateDeliveryQueue.success) {\n                    Toast.success({\n                      message: `😊 ${res.updateDeliveryQueue.message}`,\n                    });\n                    deliveryQueueStore.deliveryQueueService.listDeliveryQueue();\n                  }\n                });\n            } else {\n              deliveryQueueStore.deliveryQueueService\n                .updateDeliveryQueueByVisitIds({\n                  input: {\n                    filter: {\n                      ids: modalConfirm?.ids,\n                      visitId: modalConfirm?.visitId,\n                      deliveryStatus: 'Done',\n                    },\n                  },\n                })\n                .then(res => {\n                  setModalConfirm({show: false});\n                  if (res.updateByVisitIdsDeliveryQueue.success) {\n                    Toast.success({\n                      message: `😊 ${res.updateByVisitIdsDeliveryQueue.message}`,\n                    });\n                    deliveryQueueStore.deliveryQueueService.listDeliveryQueue();\n                  }\n                });\n            }\n          }}\n          onClose={() => {\n            setModalConfirm({show: false});\n          }}\n        />\n\n        <ModalGenerateReports\n          {...modalGenerateReports}\n          onClose={() => {\n            setModalGenerateReports({show: false});\n          }}\n          onReceiptUpload={(file, type) => {\n            // if (!receiptPath) {\n            //   receiptStore.receiptService\n            //     .paymentReceiptUpload({input: {file}})\n            //     .then(res => {\n            //       if (res.paymentReceiptUpload.success) {\n            //         setReceiptPath(res.paymentReceiptUpload?.receiptPath);\n            //         window.open(\n            //           `${type} ${res.paymentReceiptUpload?.receiptPath}`,\n            //           '_blank',\n            //         );\n            //       }\n            //     });\n            // } else {\n            //   window.open(type + receiptPath, '_blank');\n            // }\n          }}\n        />\n      </div>\n    </>\n  );\n});\n\nexport default DeliveryQueue;\n"],"names":["labId","externalLabId","employeeCode","deliveryId","deliveryDate","reportDate","deliveryStatus","reportType","deliveryMode","destination","comments","startDate","endDate","errorMsg","clientCode","clientName","registrationLocation","registrationLocationCode","doctorCode","doctorName","qrCode","pdf","enteredBy","userComments","SearchBar","Search","ClearSearchButton","ExportCSVButton","CSVExport","TableBootstrap","id","data","totalSize","searchPlaceholder","page","sizePerPage","columns","fileName","isEditModify","selectedItem","isSelectRow","isPagination","onUpdateItem","onSelectedRow","onPageSizeChange","onUpdateDeliveryStatus","onFilter","clearAllFilter","onClickRow","useState","isFilterOpen","setIsFilterOpen","options","cutome","paginationSize","pageStartIndex","firstPageText","prePageText","nextPageText","lastPageText","disablePageTitle","paginationTotalRenderer","from","to","size","className","hideSizePerPage","showTotal","alwaysShowAllBtns","sizePerPageList","text","value","hidePageListOnlyOnePage","sizePerPageRenderer","currSizePerPage","onSizePerPageChange","role","type","min","placeholder","onChange","e","target","map","option","onClick","searchProps","handleTableChange","cellEdit","filters","sortField","sortOrder","searchText","newValue","dataField","rowId","_","alert","filter","Object","entries","key","values","object","filterVal","assign","debounce","srText","sort","a","b","CustomToggleList","onColumnToggle","toggles","column","toggle","index","rowEvents","row","rowIndex","rowStyle","_id","backgroundColor","pagination","paginationFactory","keyField","paginationProps","paginationTableProps","bootstrap4","search","exportCSV","dayjs","Date","format","noAutoBOM","blobType","exportAll","onlyExportFiltered","columnToggle","props","console","log","style","marginTop","csvProps","tooltipText","position","contextual","btnClassName","columnToggleProps","remote","baseProps","noDataIndication","hover","filterFactory","headerClasses","onTableChange","ReportDeliveryList","observer","setSelectedItem","hidden","csvExport","editable","textFilter","getFilter","customFilter","filterRenderer","formatter","cell","csvFormatter","col","isDelete","cellContent","color","onUpdate","visitId","show","title","body","Icons","onMedicalReport","classes","colIndex","zIndex","length","rows","item","OrderDeliveredList","delivered","disabled","ModalGenerateReports","onClose","onReceiptUpload","reportList","setReportList","React","showModal","setShowModal","setReportType","useEffect","newObj","split","getReports","reports","label","labelStyle","fontWeight","fontSize","width","height","borderRadius","align","padding","transition","DeliveryQueue","useStores","deliveryQueueStore","loading","routerStore","loginStore","reportSettingStore","receiptStore","useForm","control","handleSubmit","formState","errors","setValue","modalConfirm","setModalConfirm","modalGenerateReports","setModalGenerateReports","loginDetails","login","Toast","message","deliveryQueueService","findByFields","input","lab","then","res","findByFieldsDeliveryQueue","success","updateReportDeliveryList","deliveryQueues","paginatorInfo","count","listDeliveryQueue","getDeliveryList","getValue","toUpperCase","filterPlainArray","array","filterKeys","keys","every","find","reportDeliveryList","useMemo","reportDeliveryListCount","RouterFlow","userPermission","limit","list","reportDeliveryListCopy","JSON","stringify","toLocaleLowerCase","match","updateOrderDeliveredList","ids","listPatientReports","getPatientReports","patientResultList","reportTemplate","push","patientResult","uniqByPatientResult","reportTemplateList","templatePatientResultService","getTempPatientResultListByTempCodes","reportSettings","templateCode","grouped","selectedComponents","store","orderDeliveredList","orderDeliveredListCount","onDelete","click","updateDeliveryQueue","updateDeliveryQueueByVisitIds","updateByVisitIdsDeliveryQueue","file"],"sourceRoot":""}