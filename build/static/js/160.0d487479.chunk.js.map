{"version":3,"file":"static/js/160.0d487479.chunk.js","mappings":"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","sources":["features/settings/shortcut-menu/screens/short-cut-menu.screen.tsx"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {observer} from 'mobx-react';\nimport {\n  Header,\n  PageHeading,\n  PageHeadingLabDetails,\n  Buttons,\n  Icons,\n  List,\n  Svg,\n  Toast,\n} from '@/library/components';\nimport {DragDropContext, Droppable, Draggable} from 'react-beautiful-dnd';\n\nimport {useStores} from '@/stores';\n\nconst grid = 8;\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? 'lightblue' : 'none',\n  display: 'flex',\n  //flexWrap:'none',\n  padding: grid,\n  overflow: 'auto',\n});\n\nconst ShortcutMenu = observer(() => {\n  const {loginStore, shortcutMenuStore, routerStore} = useStores();\n  useEffect(() => {\n    const list: any[] = [];\n    routerStore.userRouter?.filter(item => {\n      item.children.filter((children: any) => {\n        const userShortcutMenu =\n          loginStore.login?.shortcutMenu &&\n          loginStore.login?.shortcutMenu[loginStore.login.role || ''] &&\n          loginStore.login?.shortcutMenu[loginStore.login.role || ''].filter(\n            userItem =>\n              userItem.category === item.name &&\n              userItem.name === children.name,\n          );\n\n        if (userShortcutMenu && userShortcutMenu?.length > 0) {\n          children.selected = true;\n        } else {\n          children.selected = false;\n        }\n        children.category = item.name;\n        list.push(children);\n      });\n    });\n    shortcutMenuStore.updateShortcutMenu(list);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const onItemSelect = (item: any, index: number) => {\n    const list = shortcutMenuStore.shortcutMenuList;\n    if (list) {\n      list[index].selected = !list[index].selected;\n    }\n\n    shortcutMenuStore.updateShortcutMenu(list);\n  };\n\n  const handleOnDragEnd = (result: any) => {\n    const items = Array.from(\n      (loginStore.login?.shortcutMenu &&\n        loginStore.login?.shortcutMenu[loginStore.login.role || '']) ||\n        [],\n    );\n    const [reorderedItem] = items.splice(result.source.index, 1);\n    items.splice(result.destination.index, 0, reorderedItem);\n\n    loginStore.updateLogin({\n      ...loginStore.login,\n      shortcutMenu: {[loginStore.login?.role || '']: items},\n    });\n    shortcutMenuStore.updateDragDrop(true);\n  };\n  return (\n    <>\n      <Header>\n        <PageHeading title={routerStore.selectedComponents?.title || ''} />\n        <PageHeadingLabDetails store={loginStore} />\n      </Header>\n      {loginStore.login?.shortcutMenu &&\n        loginStore.login?.shortcutMenu[loginStore.login.role || ''] &&\n        loginStore.login?.shortcutMenu &&\n        loginStore.login?.shortcutMenu[loginStore.login.role || ''].length >\n          0 && (\n          <div>\n            <label className='mt-2'>Active:</label>\n            <DragDropContext onDragEnd={handleOnDragEnd}>\n              <Droppable droppableId='characters' direction='horizontal'>\n                {(provided, snapshot) => (\n                  <ul\n                    style={getListStyle(snapshot.isDraggingOver)}\n                    // className=\"grid grid-cols-1 p-2\"\n                    {...provided.droppableProps}\n                    ref={provided.innerRef}\n                  >\n                    {loginStore.login?.shortcutMenu &&\n                      loginStore.login?.shortcutMenu[\n                        loginStore.login.role || ''\n                      ].map((item, index) => (\n                        <>\n                          <Draggable\n                            key={item.title}\n                            draggableId={item.title}\n                            index={index}\n                          >\n                            {(provided, snapshot) => (\n                              <div\n                                className='flex items-center bg-blue-500  p-2 m-2 rounded-md'\n                                ref={provided.innerRef}\n                                {...provided.draggableProps}\n                                {...provided.dragHandleProps}\n                              >\n                                <Icons.IconContext color='#fff' size='22'>\n                                  {Icons.getIconTag(\n                                    Icons.getIcons(item.icon) ||\n                                      Icons.IconBs.BsList,\n                                  )}\n                                </Icons.IconContext>\n                                <li className='m-2 text-white'>{item.title}</li>\n                              </div>\n                            )}\n                          </Draggable>\n                        </>\n                      ))}\n                  </ul>\n                )}\n              </Droppable>\n            </DragDropContext>\n            {shortcutMenuStore.isDragDropList && (\n              <div className='flex items-center justify-center'>\n                <Buttons.Button\n                  size='medium'\n                  type='solid'\n                  icon={Svg.Save}\n                  onClick={() => {\n                    shortcutMenuStore.ShortcutMenuService.updateShortcutMenu({\n                      input: {\n                        userRole: loginStore.login?.role,\n                        selectedList:\n                          loginStore.login?.shortcutMenu &&\n                          loginStore.login?.shortcutMenu[\n                            loginStore.login.role || ''\n                          ],\n                        _id: loginStore.login?._id,\n                      },\n                    }).then(res => {\n                      if (res.updateShortcutMenu.success) {\n                        Toast.success({\n                          message: `😊 ${res.updateShortcutMenu.message}`,\n                        });\n                        shortcutMenuStore.updateDragDrop(false);\n                      } else {\n                        Toast.error({\n                          message: '😔Please try agian.',\n                        });\n                      }\n                    });\n                  }}\n                >\n                  Update\n                </Buttons.Button>\n                <br /> <br />\n              </div>\n            )}\n          </div>\n        )}\n\n      <hr />\n      <div className='flex-wrap'>\n        <label className='mt-2'>List:</label>\n        <ul className='grid grid-cols-6 p-2'>\n          {shortcutMenuStore.shortcutMenuList &&\n            shortcutMenuStore.shortcutMenuList?.map((item, index) => (\n              <>\n                <div className='flex items-center bg-gray-500  p-2 m-2 rounded-md '>\n                  <input\n                    type='checkbox'\n                    className='mr-2'\n                    name={item.name}\n                    value={item.name}\n                    checked={item.selected}\n                    onChange={() => onItemSelect(item, index)}\n                  />\n\n                  <Icons.IconContext color='#fff' size='22'>\n                    {Icons.getIconTag(\n                      Icons.getIcons(item.icon) || Icons.IconBs.BsList,\n                    )}\n                  </Icons.IconContext>\n                  <li className='m-2 text-white'>{item.title}</li>\n                </div>\n              </>\n            ))}\n        </ul>\n        <br />\n        <List direction='row' space={3} align='center'>\n          <Buttons.Button\n            size='medium'\n            type='solid'\n            icon={Svg.Save}\n            onClick={() => {\n              const selectedList = shortcutMenuStore.shortcutMenuList?.filter(\n                item => item.selected === true,\n              );\n              const userRole = loginStore.login?.role;\n              if (selectedList && selectedList?.length > 0) {\n                shortcutMenuStore.ShortcutMenuService.updateShortcutMenu({\n                  input: {\n                    userRole,\n                    selectedList: selectedList,\n                    _id: loginStore.login?._id,\n                  },\n                }).then(res => {\n                  if (res.updateShortcutMenu.success) {\n                    Toast.success({\n                      message: `😊 ${res.updateShortcutMenu.message}`,\n                    });\n                    loginStore.updateLogin({\n                      ...loginStore.login,\n                      shortcutMenu: res.updateShortcutMenu.data.shortcutMenu,\n                    });\n                  } else {\n                    Toast.error({\n                      message: '😔Please try agian.',\n                    });\n                  }\n                });\n              }\n            }}\n          >\n            Update\n          </Buttons.Button>\n        </List>\n      </div>\n    </>\n  );\n});\n\nexport default ShortcutMenu;\n"],"names":["ShortcutMenu","observer","useStores","loginStore","shortcutMenuStore","routerStore","useEffect","list","userRouter","filter","item","children","userShortcutMenu","login","shortcutMenu","role","userItem","category","name","length","selected","push","updateShortcutMenu","title","selectedComponents","store","className","onDragEnd","result","items","Array","from","splice","source","index","reorderedItem","destination","updateLogin","updateDragDrop","droppableId","direction","provided","snapshot","isDraggingOver","style","background","display","padding","overflow","droppableProps","ref","innerRef","map","draggableId","draggableProps","dragHandleProps","color","size","Icons","icon","isDragDropList","type","Svg","onClick","ShortcutMenuService","input","userRole","selectedList","_id","then","res","success","Toast","message","shortcutMenuList","value","checked","onChange","onItemSelect","space","align","data"],"sourceRoot":""}