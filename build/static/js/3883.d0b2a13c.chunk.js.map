{"version":3,"file":"static/js/3883.d0b2a13c.chunk.js","mappings":"2KAcIA,EACAC,EACAC,EACAC,EAEAC,EACAC,EACAC,EACAC,EACAC,EAEAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,E,kPCnBIC,EAAiCC,EAAAA,OAAjCD,UAAWE,EAAsBD,EAAAA,OAAtBC,kBACXC,EAAoBC,EAAAA,UAApBD,gBAgCKE,GAAuB,SAAHC,GAsBC,IArBhCC,EAAED,EAAFC,GACAC,EAAIF,EAAJE,KAAIC,EAAAH,EACJI,UAAAA,OAAS,IAAAD,EAAG,GAAEA,EAAAE,EAAAL,EACdM,kBAAAA,OAAiB,IAAAD,EAAG,YAAWA,EAAAE,EAAAP,EAC/BQ,KAAAA,OAAI,IAAAD,EAAG,EAACA,EAAAE,EAAAT,EACRU,YAAAA,OAAW,IAAAD,EAAG,GAAEA,EAChBE,EAAOX,EAAPW,QACAC,EAAQZ,EAARY,SACAC,EAAYb,EAAZa,aAKAC,GAJWd,EAAXe,YACYf,EAAZgB,aAAYhB,EACZiB,aACajB,EAAbkB,cACYlB,EAAZc,cACAK,EAAgBnB,EAAhBmB,iBACAC,EAAsBpB,EAAtBoB,uBACAC,EAAQrB,EAARqB,SACAC,EAAYtB,EAAZsB,aACAC,EAAcvB,EAAduB,eAEAC,GADUxB,EAAVyB,WACiBzB,EAAjBwB,mBAEAE,GAAsCC,EAAAA,EAAAA,YAAiBC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GACvDI,GADkBF,EAAA,GAAgBA,EAAA,IACMD,EAAAA,EAAAA,WAAkB,IAAMI,GAAAF,EAAAA,EAAAA,GAAAC,EAAA,GAAzDE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GACpCG,GAA4CP,EAAAA,EAAAA,UAAS,MAAKQ,GAAAN,EAAAA,EAAAA,GAAAK,EAAA,GAapDE,GAbeD,EAAA,GAAmBA,EAAA,GAarB,CACjB,CAAEE,KAAM,OAAQC,MAAO,OAAQC,MAAO,SACtC,CAAEF,KAAM,UAAWC,MAAO,UAAWC,MAAO,QAC5C,CAAEF,KAAM,GAAIC,MAAO,MAAOC,MAAO,SAkC7BC,EAAU,CACdC,QAAQ,EACRrC,UAAWA,EACXsC,eAAgB,EAChBC,eAAgB,EAChBC,cAAe,KACfC,YAAa,IACbC,aAAc,IACdC,aAAc,KACdC,kBAAkB,EAClBC,wBA1DkB,SAACC,EAAMC,EAAIC,GAC7B,OACEC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,cACfJ,EAAAA,EAAAA,MAAA,QAAAE,SAAA,CAAM,WACKL,EAAK,OAAKC,EAAG,OAAKC,EAAK,gBAIxC,EAkDEM,iBAAiB,EACjBC,WAAW,EACXC,mBAAmB,EACnBC,gBAAiB,CACf,CACEC,KAAM,KACNxB,MAAO,IAET,CACEwB,KAAM,KACNxB,MAAO,IAET,CACEwB,KAAM,KACNxB,MAAO,IAET,CACEwB,KAAM,KACNxB,MAAO,IAET,CACEwB,KAAM,KACNxB,MAAO,KAGXyB,yBAAyB,EACzBC,oBApE0B,SAAHC,GAAA,IACvBzB,EAAOyB,EAAPzB,QACA0B,EAAeD,EAAfC,gBACAC,EAAmBF,EAAnBE,oBAAmB,OAEnBd,EAAAA,EAAAA,MAAA,OAAKI,UAAU,yBAAyBW,KAAK,QAAOb,SAAA,EAClDC,EAAAA,EAAAA,KAAA,SACEa,KAAK,SACLC,IAAI,IACJC,YAAY,KACZC,SAAU,SAACC,GACLA,EAAEC,OAAOpC,OACX6B,EAAoBM,EAAEC,OAAOpC,MAEjC,EACAmB,UAAU,+HAEXjB,EAAQmC,KAAI,SAAAC,GAAM,OACjBpB,EAAAA,EAAAA,KAAA,UAEEa,KAAK,SACLQ,QAAS,kBAAMV,EAAoBS,EAAOpE,KAAK,EAC/CiD,UAAS,QAAAqB,OACPZ,IAAe,GAAAY,OAAQF,EAAOpE,MAAS,aAAe,WACrD+C,SAEFqB,EAAOd,MAPHc,EAAOd,KAQL,MAEP,GAyCJiB,EAAmB,CACrBR,YAAajE,GAGT0E,EAAoB,SACxBX,EAAIY,GAWA,IATF/E,EAAI+E,EAAJ/E,KACAgF,EAAQD,EAARC,SACA1E,EAAIyE,EAAJzE,KACAE,EAAWuE,EAAXvE,YACAyE,EAAOF,EAAPE,QACAC,EAASH,EAATG,UACAC,EAASJ,EAATI,UACAC,EAAUL,EAAVK,WAaF,GATa,aAATjB,GAAuBxD,GACzBC,GACEA,EAAaoE,EAASK,SAAUL,EAASM,UAAWN,EAASO,OAEpD,eAATpB,GAAyBqB,IAAAA,QAAUP,IAGrChE,GAAoBA,EAAiBX,EAAME,GAEhC,WAAT2D,GAA+B,eAATA,IAA0BqB,IAAAA,QAAUP,GAAW,CACvE,GAAa,eAATd,EAAuB,CACzB,GAAI3D,EAAcN,EAAW,OAAOuF,MAAM,8BAC1C,GAAInF,EAAOE,EAAcN,EACvB,OAAOuF,MAAM,6BACjB,CAEA,IADA,IAAIC,EAAc,CAAC,EACnBC,EAAA,EAAAC,EAA2BC,OAAOC,QAAQb,GAAQU,EAAAC,EAAAG,OAAAJ,IAAE,CAA/C,IAAAK,GAAArE,EAAAA,EAAAA,GAAAiE,EAAAD,GAAA,GAAOM,EAAGD,EAAA,GACPE,EADcF,EAAA,GAEdG,GAAMC,EAAAA,EAAAA,GAAA,GAAMH,EAAMC,EAAOG,WAC/BX,EAASG,OAAOS,OAAOZ,EAAQS,EACjC,CACIhF,IACFoF,EAAAA,EAAAA,KAAS,WACPpF,EACEgD,EACAuB,EACS,WAATvB,GAA8B,IAAT7D,EAAa,EAAIA,EACtCE,EAEJ,GACJ,EACa,WAAT2D,IACFoC,EAAAA,EAAAA,KAAS,WACPpF,GAAYA,EAASgD,EAAM,CAAEqC,OAAQpB,GAAc9E,EAAME,EAC3D,IAEW,SAAT2D,KAEgB,QAAdgB,EACOnF,EAAKyG,MAAK,SAACC,EAAGC,GACrB,OAAID,EAAExB,GAAayB,EAAEzB,GACZ,EACEyB,EAAEzB,GAAawB,EAAExB,IAClB,EAEH,CACT,IAESlF,EAAKyG,MAAK,SAACC,EAAGC,GACrB,OAAID,EAAExB,GAAayB,EAAEzB,IACX,EACCyB,EAAEzB,GAAawB,EAAExB,GACnB,EAEF,CACT,IAGN,EAEM0B,EAAmB,SAAHC,GAAA,IAAMpG,EAAOoG,EAAPpG,QAASqG,EAAcD,EAAdC,eAAgBC,EAAOF,EAAPE,QAAO,OAC1DzD,EAAAA,EAAAA,KAAA,OAAKC,UAAU,6BAA6B,cAAY,UAASF,SAC9D5C,EACEgE,KAAI,SAAAuC,GAAM,OAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACND,GAAM,IACTE,OAAQH,EAAQC,EAAO1B,YAAU,IAElCb,KAAI,SAACuC,EAAQG,GACZ,GAAIA,EAAQ,EACV,OACE7D,EAAAA,EAAAA,KAAA,UACEa,KAAK,SAELZ,UAAS,8CAAAqB,OACPoC,EAAOE,OAAS,SAAW,IAE7B,cAAY,SACZ,eAAcF,EAAOE,OAAS,OAAS,QACvCvC,QAAS,kBAAMmC,EAAeE,EAAO1B,UAAU,EAACjC,SAE/C2D,EAAOpD,MARHoD,EAAO1B,UAYpB,KACE,EAGF8B,EAAW,SAACC,EAAKC,GACrB,OAAO,OAAHD,QAAG,IAAHA,GAAAA,EAAKE,eAAqB,OAAHF,QAAG,IAAHA,GAAAA,EAAKG,cAAmB,OAAHH,QAAG,IAAHA,GAAAA,EAAKE,cAC5C,CACLE,gBAAiB,UACjBpF,MAAO,WAEG,OAAHgF,QAAG,IAAHA,GAAAA,EAAKG,aACP,CACLC,gBAAiB,UACjBpF,MAAO,gBAHJ,CAMT,EAEA,OACEiB,EAAAA,EAAAA,KAACoE,EAAAA,GAAkB,CACjBC,YAAYC,EAAAA,EAAAA,IACI,IAAd1H,EAAkBoC,EAAU,CAAEhC,KAAAA,EAAME,YAAAA,EAAaN,UAAAA,IAEnD2H,SAAU9H,EACVU,QAASA,EACTT,KAAMA,EAAKqD,SAEV,SAAAyE,GAAkBA,EAAfC,gBAAH,IAAoBC,EAAoBF,EAApBE,qBAAoB,OACvC1E,EAAAA,EAAAA,KAAC2E,IAAe,CACdJ,SAAU9H,EACVmI,YAAU,EACVlI,KAAMA,EACNS,QAASA,EACT0H,QAAM,EACNC,UAAW,CACT1H,SAAS,GAADkE,OAAKlE,EAAQ,KAAAkE,OAAIyD,IAAM,IAAIC,MAAQC,OACzC,oBACD,QACDC,WAAW,EACXC,SAAU,wBACVC,WAAW,EACXC,oBAAoB,GAEtBC,cAAY,EAAAvF,SAEX,SAAAwF,GAAK,OACJ1F,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,oCAAmCF,SAAA,EAChDC,EAAAA,EAAAA,KAAC9D,GAASyH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACJpC,GACAgE,EAAMhE,aAAW,IACrBP,SAAU,SAAAlC,GACR0G,QAAQC,IAAI,CAAE3G,MAAAA,GAChB,EACA4G,MAAO,CAAEC,UAAW,QAEtB3F,EAAAA,EAAAA,KAAC5D,GAAiBuH,EAAAA,EAAAA,GAAA,CAChB1D,UAAS,yJACLsF,EAAMhE,eAEZvB,EAAAA,EAAAA,KAAA,UACEC,UAAS,0HACToB,QAAStD,EAAegC,SACzB,uBAGDC,EAAAA,EAAAA,KAAC3D,GAAesH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACd1D,UAAS,0JACLsF,EAAMK,UAAQ,IAAA7F,SACnB,kBAGAvB,GACCwB,EAAAA,EAAAA,KAAC6F,EAAAA,GAAAA,GAAc,CACbjG,KAAK,SACLiB,KAAK,UACLQ,QAAS,WACP5C,GAAiBD,EACnB,EAAEuB,UAEFC,EAAAA,EAAAA,KAAC8F,EAAAA,GAAAA,OAAAA,YAAwB,OAG3B9F,EAAAA,EAAAA,KAAC6F,EAAAA,GAAAA,GAAc,CACbjG,KAAK,SACLiB,KAAK,UACLQ,QAAS,WACP5C,GAAiBD,EACnB,EAAEuB,UAEFC,EAAAA,EAAAA,KAAC8F,EAAAA,GAAAA,OAAAA,cAA0B,OAG/B9F,EAAAA,EAAAA,KAAC+F,EAAAA,EAAO,CACNC,YAAY,6BACZC,SAAS,MAAKlG,UAEdC,EAAAA,EAAAA,KAAC6F,EAAAA,GAAAA,GAAc,CACbjG,KAAK,SACLiB,KAAK,UACLqF,UACGxJ,EAAKyJ,MAAK,SAAAC,GAAI,MAA4B,YAAxBA,EAAKrL,cAA4B,IAEtDsG,QAAS,WACPzD,GAA0BA,GAC5B,EAAEmC,UAEFC,EAAAA,EAAAA,KAAC8F,EAAAA,GAAAA,OAAAA,WAAuB,SAG5B9F,EAAAA,EAAAA,KAAA,OAAKC,UAAU,aAAYF,SACxBnB,EAAWuC,KAAI,SAAAkF,GAAM,OACpBrG,EAAAA,EAAAA,KAAA,UAEEC,UAAS,gBAAAqB,OAAkB+E,EAAOtH,MAAK,2BACvCsC,QAAS,kBAAuB,OAAjBrD,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAoBqI,EAAOxH,KAAK,EAACkB,SAE/CsG,EAAOvH,OAJHuH,EAAOxH,KAKL,SAKdL,IACCwB,EAAAA,EAAAA,KAAA,OAAKC,UAAW,0BAA0BF,UACxCC,EAAAA,EAAAA,KAACsD,GAAgBK,EAAAA,EAAAA,GAAA,CACf2C,WAAW,UACXrG,UAAU,oBACVsG,aAAa,yBACThB,EAAMiB,uBAIhBxG,EAAAA,EAAAA,KAAA,OAAKC,UAAU,cAAaF,UAC1BC,EAAAA,EAAAA,KAACyG,EAAAA,GAAc9C,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACb+C,QAAM,GACFnB,EAAMoB,WAAS,IACnBC,iBAAiB,iBACjBC,OAAK,GACDnC,GAAoB,IACxBtC,QAAQ0E,EAAAA,EAAAA,MACRC,cAAc,2CACdC,cAAexF,EACfsC,SAAUA,QAIdjE,EAAAA,EAAAA,MAAA,OAAKI,UAAU,+BAA8BF,SAAA,EAC3CC,EAAAA,EAAAA,KAAC8F,EAAAA,GAAAA,YAAiB,CAChB/G,MAAM,OACNa,KAAK,KACL8F,MAAO,CACLvB,gBAAiB,UACjB8C,MAAO,GACPC,OAAQ,GACRC,aAAc,GACdC,MAAO,SACPC,QAAS,GAEXhG,SAAOiG,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAE,SAAAC,IAAA,OAAAF,EAAAA,EAAAA,KAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACP/J,GAAgBA,EAAa,QAAQ,wBAAA6J,EAAAG,OAAA,GAAAL,EAAA,KACrC1H,UAEFC,EAAAA,EAAAA,KAAC8F,EAAAA,GAAAA,OAAAA,WAAuB,OAE1B9F,EAAAA,EAAAA,KAAC8F,EAAAA,GAAAA,YAAiB,CAChB/G,MAAM,OACNa,KAAK,KACL8F,MAAO,CACLvB,gBAAiB,UACjB8C,MAAO,GACPC,OAAQ,GACRC,aAAc,GACdC,MAAO,SACPC,QAAS,GAEXhG,SAAOiG,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAE,SAAAO,IAAA,OAAAR,EAAAA,EAAAA,KAAAG,MAAA,SAAAM,GAAA,cAAAA,EAAAJ,KAAAI,EAAAH,MAAA,OACP/J,GAAgBA,EAAa,QAAQ,wBAAAkK,EAAAF,OAAA,GAAAC,EAAA,KACrChI,UAEFC,EAAAA,EAAAA,KAAC8F,EAAAA,GAAAA,OAAAA,eAA2B,WAG5B,GAEQ,GAI1B,EDvYamC,IAAqBC,EAAAA,EAAAA,KAAS,SAAC3C,GAC1C,IAAArH,GAAgCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAArCiK,EAAQ/J,EAAA,GAAEgK,EAAWhK,EAAA,GAC5BE,GAAkCH,EAAAA,EAAAA,UAASoH,EAAM7I,MAAK6B,GAAAF,EAAAA,EAAAA,GAAAC,EAAA,GAA/C+J,EAAS9J,EAAA,GAAE+J,EAAY/J,EAAA,GAuB9B,OArBAgK,EAAAA,EAAAA,YAAU,WAAO,IAADC,EAAAC,EACkB/L,EAAMgM,EAUtCN,EAAY7C,EAAMoD,YAAc,IAChCL,EACE/C,EAAMoD,WACQ,QADEH,EACZjD,EAAM7I,YAAI,IAAA8L,GACuC,QADvCC,EAAVD,EACIpG,QAAO,SAAAgE,GAAI,OAAIA,EAAKwC,MAAQrD,EAAMoD,UAAU,WAAC,IAAAF,OADvC,EAAVA,EAEItH,KAAI,SAAAiF,GAAI,OAAAzC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUyC,GAAI,IAAEuC,WAAYpD,EAAMoD,YAAU,KAf9BjM,EAgBH6I,EAAM7I,KAfd,UADiBgM,EAgBGnD,EAAMmD,YAdpChM,EAAK0F,QAAO,SAAAgE,GAAI,MAA4B,SAAxBA,EAAKrL,cAAyB,IACjC,YAAf2N,EACFhM,EAAK0F,QAAO,SAAAgE,GAAI,MAA4B,YAAxBA,EAAKrL,cAA4B,IAErD2B,GAYb,GAAG,CAAC6I,EAAMoD,WAAYpD,EAAM7I,KAAM6I,EAAMmD,cAGtC1I,EAAAA,EAAAA,KAAAF,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,KAAA,OAAK0F,MAAO,CAAEO,SAAU,YAAalG,UACnCC,EAAAA,EAAAA,KAACzD,GAAoB,CACnBE,GAAG,MACHC,KAAM2L,EACNzL,UAAW2I,EAAM3I,UACjBa,aAAc8H,EAAM9H,aACpBN,QAAS,CACP,CACE6E,UAAW,MACX1B,KAAM,KACNuI,QAAQ,EACRC,WAAW,GAEb,CACE9G,UAAW,QACX1B,KAAM,SACN6C,MAAM,EACN4F,YAAa,CACXC,SAAU,GAEZC,UAAW,SAACC,EAAOxF,GAAM,OAAKuF,EAAAA,EAAAA,IAAUC,EAAOxF,EAAO,EACtDyF,UAAU,EACVpC,cAAe,cACf3E,QAAQgH,EAAAA,EAAAA,IAAa,CACnBC,UAAW,SAAAjH,GACT5H,EAAQ4H,CACV,IAEFkH,eAAgB,SAACzL,EAAU6F,GAAM,OAC/B1D,EAAAA,EAAAA,KAACuJ,EAAAA,GAAY,CAAC1L,SAAUA,EAAU6F,OAAQA,GAAU,GAGxD,CACE1B,UAAW,OACX1B,KAAM,OACN6C,MAAM,EACN4F,YAAa,CACXC,SAAU,GAEZC,UAAW,SAACC,EAAOxF,GAAM,OAAKuF,EAAAA,EAAAA,IAAUC,EAAOxF,EAAO,EACtDyF,UAAU,EACVpC,cAAe,cACf3E,QAAQoH,EAAAA,EAAAA,IAAW,CACjBH,UAAW,SAAAjH,GACT3H,EAAO2H,CACT,KAGJ,CACEJ,UAAW,aACX1B,KAAM,cACN6C,MAAM,EACN4F,YAAa,CACXC,SAAU,GAEZC,UAAW,SAACC,EAAOxF,GAAM,OAAKuF,EAAAA,EAAAA,IAAUC,EAAOxF,EAAO,EACtDyF,UAAU,EACVpC,cAAe,cACf3E,QAAQgH,EAAAA,EAAAA,IAAa,CACnBC,UAAW,SAAAjH,GACTxH,EAAawH,CACf,IAEFkH,eAAgB,SAACzL,EAAU6F,GAAM,OAC/B1D,EAAAA,EAAAA,KAACuJ,EAAAA,GAAY,CAAC1L,SAAUA,EAAU6F,OAAQA,GAAU,GAGxD,CACE1B,UAAW,eACX1B,KAAM,gBACN6C,MAAM,EACN4F,YAAa,CACXC,SAAU,GAEZC,UAAW,SAACC,EAAOxF,GAAM,OAAKuF,EAAAA,EAAAA,IAAUC,EAAOxF,EAAO,EACtDyF,UAAU,EACVpC,cAAe,eACf3E,QAAQgH,EAAAA,EAAAA,IAAa,CACnBC,UAAW,SAAAjH,GACTvH,EAAeuH,CACjB,IAEFkH,eAAgB,SAACzL,EAAU6F,GAAM,OAC/B1D,EAAAA,EAAAA,KAACyJ,EAAAA,GAAU,CAAC5L,SAAUA,EAAU6F,OAAQA,GAAU,EAEpDgG,UAAW,SAACC,EAAM5F,GAChB,OACE/D,EAAAA,EAAAA,KAAAF,EAAAA,SAAA,CAAAC,SACGgE,EAAIlJ,aACDkK,IAAMhB,EAAIlJ,cAAcoK,OAAO,uBAC/B,IAGV,GAEF,CACEjD,UAAW,aACX1B,KAAM,cACN6C,MAAM,EACN4F,YAAa,CACXC,SAAU,GAEZC,UAAW,SAACC,EAAOxF,GAAM,OAAKuF,EAAAA,EAAAA,IAAUC,EAAOxF,EAAO,EACtDyF,UAAU,EACVpC,cAAe,eACf3E,QAAQgH,EAAAA,EAAAA,IAAa,CACnBC,UAAW,SAAAjH,GACTtH,EAAasH,CACf,IAEFkH,eAAgB,SAACzL,EAAU6F,GAAM,OAC/B1D,EAAAA,EAAAA,KAACyJ,EAAAA,GAAU,CAAC5L,SAAUA,EAAU6F,OAAQA,GAAU,EAEpDgG,UAAW,SAACC,EAAM5F,GAChB,OACE/D,EAAAA,EAAAA,KAAAF,EAAAA,SAAA,CAAAC,SACGgE,EAAIjJ,WACDiK,IAAMhB,EAAIjJ,YAAYmK,OAAO,uBAC7B,IAGV,GAEF,CACEjD,UAAW,iBACX1B,KAAM,kBACN6C,MAAM,EACN4F,YAAa,CACXC,SAAU,GAEZC,UAAW,SAACC,EAAOxF,GAAM,OAAKuF,EAAAA,EAAAA,IAAUC,EAAOxF,EAAO,EACtDyF,UAAU,EACVpC,cAAe,cACf3E,QAAQoH,EAAAA,EAAAA,IAAW,CACjBH,UAAW,SAAAjH,GACTrH,EAAiBqH,CACnB,KAGJ,CACEJ,UAAW,aACX1B,KAAM,cACN6C,MAAM,EACN4F,YAAa,CACXC,SAAU,GAEZC,UAAW,SAACC,EAAOxF,GAAM,OAAKuF,EAAAA,EAAAA,IAAUC,EAAOxF,EAAO,EACtDyF,UAAU,EACVpC,cAAe,cACf3E,QAAQoH,EAAAA,EAAAA,IAAW,CACjBH,UAAW,SAAAjH,GACTpH,EAAaoH,CACf,KAGJ,CACEJ,UAAW,iBACX1B,KAAM,kBACNyG,cAAe,cACf5D,MAAM,EACNyG,aAAc,SAACC,EAAK9F,GAAG,OAClB,OAAHA,QAAG,IAAHA,GAAAA,EAAK+F,eAAiB/F,EAAI+F,eAAiB,EAAE,EAC/CX,UAAU,GAEZ,CACEnH,UAAW,eACX1B,KAAM,gBACNyG,cAAe,cACf5D,MAAM,EACNyG,aAAc,SAACC,EAAK9F,GAAG,OAClB,OAAHA,QAAG,IAAHA,GAAAA,EAAKgG,aAAehG,EAAIgG,aAAe,EAAE,EAC3CZ,UAAU,EACVO,UAAW,SAACC,EAAM5F,GAAS,IAADiG,EAExB,OADAxE,QAAQC,IAAI1B,IAEV/D,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gCAA+BF,SACf,iBAAlB,OAAHgE,QAAG,IAAHA,OAAG,EAAHA,EAAKgG,gBACR,OAAHhG,QAAG,IAAHA,GAAiB,QAAdiG,EAAHjG,EAAKgG,oBAAY,IAAAC,OAAd,EAAHA,EAAmB7I,KAAI,SAAAiF,GAAI,OACzBpG,EAAAA,EAAAA,KAAA,QAAMC,UAAU,wCAAuCF,SACpDqG,EAAKtH,OACD,MAIjB,GAEF,CACEkD,UAAW,cACX1B,KAAM,cACN6C,MAAM,EACN4F,YAAa,CACXC,SAAU,GAEZC,UAAW,SAACC,EAAOxF,GAAM,OAAKuF,EAAAA,EAAAA,IAAUC,EAAOxF,EAAO,EACtDyF,UAAU,EACVpC,cAAe,cACf3E,QAAQoH,EAAAA,EAAAA,IAAW,CACjBH,UAAW,SAAAjH,GACTnH,EAAcmH,CAChB,KAGJ,CACEJ,UAAW,WACX1B,KAAM,WACN6C,MAAM,EACN4F,YAAa,CACXC,SAAU,GAEZC,UAAW,SAACC,EAAOxF,GAAM,OAAKuF,EAAAA,EAAAA,IAAUC,EAAOxF,EAAO,EACtDkG,aAAc,SAAAC,GAAG,OAAKA,GAAY,EAAE,EACpCV,UAAU,EACVpC,cAAe,cACf3E,QAAQoH,EAAAA,EAAAA,IAAW,CACjBH,UAAW,SAAAjH,GACTlH,EAAWkH,CACb,KAGJ,CACEJ,UAAW,YACX1B,KAAM,aACN6C,MAAM,EACN4F,YAAa,CACXC,SAAU,GAEZC,UAAW,SAACC,EAAOxF,GAAM,OAAKuF,EAAAA,EAAAA,IAAUC,EAAOxF,EAAO,EACtDyF,UAAU,EACVpC,cAAe,eACf3E,QAAQgH,EAAAA,EAAAA,IAAa,CACnBC,UAAW,SAAAjH,GACTjH,EAAYiH,CACd,IAEFkH,eAAgB,SAACzL,EAAU6F,GAAM,OAC/B1D,EAAAA,EAAAA,KAACyJ,EAAAA,GAAU,CAAC5L,SAAUA,EAAU6F,OAAQA,GAAU,EAEpDgG,UAAW,SAACC,EAAM5F,GAChB,OACE/D,EAAAA,EAAAA,KAAAF,EAAAA,SAAA,CAAAC,SACGgE,EAAI5I,UACD4J,IAAMhB,EAAI5I,WAAW8J,OAAO,uBAC5B,IAGV,GAEF,CACEjD,UAAW,UACX1B,KAAM,WACN6C,MAAM,EACN4F,YAAa,CACXC,SAAU,GAEZC,UAAW,SAACC,EAAOxF,GAAM,OAAKuF,EAAAA,EAAAA,IAAUC,EAAOxF,EAAO,EACtDyF,UAAU,EACVpC,cAAe,eACf3E,QAAQgH,EAAAA,EAAAA,IAAa,CACnBC,UAAW,SAAAjH,GACThH,EAAUgH,CACZ,IAEFkH,eAAgB,SAACzL,EAAU6F,GAAM,OAC/B1D,EAAAA,EAAAA,KAACyJ,EAAAA,GAAU,CAAC5L,SAAUA,EAAU6F,OAAQA,GAAU,EAEpDgG,UAAW,SAACC,EAAM5F,GAChB,OACE/D,EAAAA,EAAAA,KAAAF,EAAAA,SAAA,CAAAC,SACGgE,EAAI3I,QACD2J,IAAMhB,EAAI3I,SAAS6J,OAAO,uBAC1B,IAGV,GAEF,CACEjD,UAAW,WACX1B,KAAM,YACN6C,MAAM,EACN4F,YAAa,CACXC,SAAU,GAEZC,UAAW,SAACC,EAAOxF,GAAM,OAAKuF,EAAAA,EAAAA,IAAUC,EAAOxF,EAAO,EACtDkG,aAAc,SAAAC,GAAG,OAAKA,GAAY,EAAE,EACpCV,UAAU,EACVpC,cAAe,cACf3E,QAAQoH,EAAAA,EAAAA,IAAW,CACjBH,UAAW,SAAAjH,GACT/G,EAAW+G,CACb,KAGJ,CACEJ,UAAW,aACX1B,KAAM,cACN6C,MAAM,EACN4F,YAAa,CACXC,SAAU,GAEZC,UAAW,SAACC,EAAOxF,GAAM,OAAKuF,EAAAA,EAAAA,IAAUC,EAAOxF,EAAO,EACtDkG,aAAc,SAAAC,GAAG,OAAKA,GAAY,EAAE,EACpCV,UAAU,EACVpC,cAAe,cACf3E,QAAQoH,EAAAA,EAAAA,IAAW,CACjBH,UAAW,SAAAjH,GACT9G,EAAa8G,CACf,KAGJ,CACEJ,UAAW,aACX1B,KAAM,cACN6C,MAAM,EACN4F,YAAa,CACXC,SAAU,GAEZC,UAAW,SAACC,EAAOxF,GAAM,OAAKuF,EAAAA,EAAAA,IAAUC,EAAOxF,EAAO,EACtDkG,aAAc,SAAAC,GAAG,OAAKA,GAAY,EAAE,EACpCV,UAAU,EACVpC,cAAe,cACf3E,QAAQoH,EAAAA,EAAAA,IAAW,CACjBH,UAAW,SAAAjH,GACT7G,EAAa6G,CACf,KAGJ,CACEJ,UAAW,uBACX1B,KAAM,wBACN6C,MAAM,EACN4F,YAAa,CACXC,SAAU,GAEZC,UAAW,SAACC,EAAOxF,GAAM,OAAKuF,EAAAA,EAAAA,IAAUC,EAAOxF,EAAO,EACtDkG,aAAc,SAAAC,GAAG,OAAKA,GAAY,EAAE,EACpCV,UAAU,EACVpC,cAAe,cACf3E,QAAQoH,EAAAA,EAAAA,IAAW,CACjBH,UAAW,SAAAjH,GACT5G,EAAuB4G,CACzB,KAGJ,CACEJ,UAAW,2BACX1B,KAAM,6BACN6C,MAAM,EACN4F,YAAa,CACXC,SAAU,GAEZC,UAAW,SAACC,EAAOxF,GAAM,OAAKuF,EAAAA,EAAAA,IAAUC,EAAOxF,EAAO,EACtDkG,aAAc,SAAAC,GAAG,OAAKA,GAAY,EAAE,EACpCV,UAAU,EACVpC,cAAe,cACf3E,QAAQoH,EAAAA,EAAAA,IAAW,CACjBH,UAAW,SAAAjH,GACT3G,EAA2B2G,CAC7B,KAGJ,CACEJ,UAAW,aACX1B,KAAM,cACN6C,MAAM,EACN4F,YAAa,CACXC,SAAU,GAEZC,UAAW,SAACC,EAAOxF,GAAM,OAAKuF,EAAAA,EAAAA,IAAUC,EAAOxF,EAAO,EACtDkG,aAAc,SAAAC,GAAG,OAAKA,GAAY,EAAE,EACpCV,UAAU,EACVpC,cAAe,cACf3E,QAAQoH,EAAAA,EAAAA,IAAW,CACjBH,UAAW,SAAAjH,GACT1G,EAAa0G,CACf,KAGJ,CACEJ,UAAW,aACX1B,KAAM,cACN6C,MAAM,EACN4F,YAAa,CACXC,SAAU,GAEZC,UAAW,SAACC,EAAOxF,GAAM,OAAKuF,EAAAA,EAAAA,IAAUC,EAAOxF,EAAO,EACtDkG,aAAc,SAAAC,GAAG,OAAKA,GAAY,EAAE,EACpCV,UAAU,EACVpC,cAAe,cACf3E,QAAQoH,EAAAA,EAAAA,IAAW,CACjBH,UAAW,SAAAjH,GACTzG,EAAayG,CACf,KAGJ,CACEJ,UAAW,SACX1B,KAAM,UACN6C,MAAM,EACN4F,YAAa,CACXC,SAAU,GAEZC,UAAW,SAACC,EAAOxF,GAAM,OAAKuF,EAAAA,EAAAA,IAAUC,EAAOxF,EAAO,EACtDkG,aAAc,SAAAC,GAAG,OAAKA,GAAY,EAAE,EACpCV,UAAU,EACVpC,cAAe,cACf3E,QAAQoH,EAAAA,EAAAA,IAAW,CACjBH,UAAW,SAAAjH,GACTxG,EAASwG,CACX,KAGJ,CACEJ,UAAW,MACX1B,KAAM,MACN6C,MAAM,EACN4F,YAAa,CACXC,SAAU,GAEZC,UAAW,SAACC,EAAOxF,GAAM,OAAKuF,EAAAA,EAAAA,IAAUC,EAAOxF,EAAO,EACtDkG,aAAc,SAAAC,GAAG,OAAKA,GAAY,EAAE,EACpCV,UAAU,EACVpC,cAAe,cACf3E,QAAQoH,EAAAA,EAAAA,IAAW,CACjBH,UAAW,SAAAjH,GACTvG,EAAMuG,CACR,KAGJ,CACEJ,UAAW,gBACX1B,KAAM,kBACN6C,MAAM,EACN4F,YAAa,CACXC,SAAU,GAEZC,UAAW,SAACC,EAAOxF,GAAM,OAAKuF,EAAAA,EAAAA,IAAUC,EAAOxF,EAAO,EACtDyF,UAAU,EACVpC,cAAe,cACf3E,QAAQoH,EAAAA,EAAAA,IAAW,CACjBH,UAAW,SAAAjH,GACT1H,EAAgB0H,CAClB,KAGJ,CACEJ,UAAW,eACX1B,KAAM,gBACN6C,MAAM,EACN4F,YAAa,CACXC,SAAU,GAEZC,UAAW,SAACC,EAAOxF,GAAM,OAAKuF,EAAAA,EAAAA,IAAUC,EAAOxF,EAAO,EACtDyF,UAAU,EACVpC,cAAe,cACf3E,QAAQoH,EAAAA,EAAAA,IAAW,CACjBH,UAAW,SAAAjH,GACTzH,EAAeyH,CACjB,KAGJ,CACEJ,UAAW,YACX1B,KAAM,aACN6C,MAAM,EACN4F,YAAa,CACXC,SAAU,GAEZC,UAAW,SAACC,EAAOxF,GAAM,OAAKuF,EAAAA,EAAAA,IAAUC,EAAOxF,EAAO,EACtDkG,aAAc,SAAAC,GAAG,OAAKA,GAAY,EAAE,EACpCV,UAAU,EACVpC,cAAe,cACf3E,QAAQoH,EAAAA,EAAAA,IAAW,CACjBH,UAAW,SAAAjH,GACTtG,EAAYsG,CACd,KAGJ,CACEJ,UAAW,eACX1B,KAAM,gBACN6C,MAAM,EACN4F,YAAa,CACXC,SAAU,GAEZC,UAAW,SAACC,EAAOxF,GAAM,OAAKuF,EAAAA,EAAAA,IAAUC,EAAOxF,EAAO,EACtDkG,aAAc,SAAAC,GAAG,OAAKA,GAAY,EAAE,EACpCV,UAAU,EACVpC,cAAe,cACf3E,QAAQoH,EAAAA,EAAAA,IAAW,CACjBH,UAAW,SAAAjH,GACTrG,EAAeqG,CACjB,KAGJ,CACE9B,KAAM,eACN0B,UAAW,cACXmB,MAAM,EACN4F,YAAa,CACXC,SAAU,GAEZC,UAAW,SAACC,EAAOxF,GAAM,OAAKuF,EAAAA,EAAAA,IAAUC,EAAOxF,EAAO,EACtDyF,UAAU,EACVS,aAAc,SAAAC,GAAG,OAAKA,GAAY,EAAE,EACpCzH,QAAQoH,EAAAA,EAAAA,IAAW,CACjBH,UAAW,SAAAjH,GACTpG,EAAcoG,CAChB,IAEF2E,cAAe,eAEjB,CACEzG,KAAM,eACN0B,UAAW,cACXmH,UAAU,EACVpC,cAAe,cACf5D,MAAM,EACN4F,YAAa,CACXC,SAAU,GAEZC,UAAW,SAACC,EAAOxF,GAAM,OAAKuF,EAAAA,EAAAA,IAAUC,EAAOxF,EAAO,EACtDkG,aAAc,SAAAC,GAAG,OAAKA,GAAY,EAAE,EACpCzH,QAAQoH,EAAAA,EAAAA,IAAW,CACjBH,UAAW,SAAAjH,GACTnG,EAAcmG,CAChB,KAGJ,CACEJ,UAAW,cACX1B,KAAM,cACNyG,cAAe,cACf5D,MAAM,EACN4F,YAAa,CACXC,SAAU,GAEZG,UAAU,EACVF,UAAW,SAACC,EAAOxF,GAAM,OAAKuF,EAAAA,EAAAA,IAAUC,EAAOxF,EAAO,EACtDkG,aAAc,SAAAC,GAAG,OAAKA,GAAY,EAAE,EACpCzH,QAAQoH,EAAAA,EAAAA,IAAW,CACjBH,UAAW,SAAAjH,GACTnG,EAAcmG,CAChB,KAgCJ,CACEJ,UAAW,YACX1B,KAAM,SACN6I,UAAU,EACVL,WAAW,EAEXY,UAAW,SAACO,EAAalG,GAAG,OAC1B/D,EAAAA,EAAAA,KAAAF,EAAAA,SAAA,CAAAC,UACEF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,gBAAeF,SAAA,EAC5BC,EAAAA,EAAAA,KAAC+F,EAAAA,EAAO,CAACC,YAAY,kBAAiBjG,UACpCC,EAAAA,EAAAA,KAAC8F,EAAAA,GAAAA,YAAiB,CAChB/G,MAC0B,UAArB,OAAHgF,QAAG,IAAHA,OAAG,EAAHA,EAAKhJ,iBACmB,YAArB,OAAHgJ,QAAG,IAAHA,OAAG,EAAHA,EAAKhJ,iBACmB,UAArB,OAAHgJ,QAAG,IAAHA,OAAG,EAAHA,EAAKhJ,gBACD,UACA,UAEN6E,KAAK,KACLyB,QAAS,WAEmB,UAArB,OAAH0C,QAAG,IAAHA,OAAG,EAAHA,EAAKhJ,iBACmB,YAArB,OAAHgJ,QAAG,IAAHA,OAAG,EAAHA,EAAKhJ,iBACmB,UAArB,OAAHgJ,QAAG,IAAHA,OAAG,EAAHA,EAAKhJ,iBAELwK,EAAM2E,UACJ3E,EAAM2E,SAAS,CACbrJ,KAAM,OACNsJ,QAAY,OAAHpG,QAAG,IAAHA,OAAG,EAAHA,EAAKoG,QACdC,MAAM,EACN3N,GAAIsH,EAAI6E,IACRyB,MAAO,gBACPC,KAAM,8BAGd,EAAEvK,SAED+F,EAAAA,GAAAA,WAAiBA,EAAAA,GAAAA,OAAAA,iBAGtB9F,EAAAA,EAAAA,KAAC+F,EAAAA,EAAO,CACNC,YAAW,GAAA1E,OACe,UAArB,OAAHyC,QAAG,IAAHA,OAAG,EAAHA,EAAKhJ,gBAA4B,SAAW,QAE9CkL,SAAS,SAAQlG,UAEjBC,EAAAA,EAAAA,KAAC8F,EAAAA,GAAAA,YAAiB,CAChB/G,MAC0B,YAArB,OAAHgF,QAAG,IAAHA,OAAG,EAAHA,EAAKhJ,gBACD,UACA,UAEN6E,KAAK,KACLyB,QAAS,WACqB,YAArB,OAAH0C,QAAG,IAAHA,OAAG,EAAHA,EAAKhJ,iBACPwK,EAAM2E,UACJ3E,EAAM2E,SAAS,CACbrJ,KAAM,OACNsJ,QAAY,OAAHpG,QAAG,IAAHA,OAAG,EAAHA,EAAKoG,QACdC,MAAM,EACN3N,GAAIsH,EAAI6E,IACRyB,MAAO,gBACPC,KAAM,aAGd,EAAEvK,SAED+F,EAAAA,GAAAA,WAAiBA,EAAAA,GAAAA,OAAAA,iBAGtB9F,EAAAA,EAAAA,KAAC+F,EAAAA,EAAO,CAACC,YAAY,SAASC,SAAS,SAAQlG,UAC7CC,EAAAA,EAAAA,KAAC8F,EAAAA,GAAAA,YAAiB,CAChB/G,MAC0B,UAArB,OAAHgF,QAAG,IAAHA,OAAG,EAAHA,EAAKhJ,iBACmB,YAArB,OAAHgJ,QAAG,IAAHA,OAAG,EAAHA,EAAKhJ,gBACD,UACA,UAEN6E,KAAK,KACLyB,QAAS,WAEmB,UAArB,OAAH0C,QAAG,IAAHA,OAAG,EAAHA,EAAKhJ,iBACmB,YAArB,OAAHgJ,QAAG,IAAHA,OAAG,EAAHA,EAAKhJ,iBAELwK,EAAM2E,UACJ3E,EAAM2E,SAAS,CACbrJ,KAAM,SACNsJ,QAAY,OAAHpG,QAAG,IAAHA,OAAG,EAAHA,EAAKoG,QACdC,MAAM,EACN3N,GAAIsH,EAAI6E,IACRyB,MAAO,gBACPC,KAAM,eAGd,EAAEvK,SAED+F,EAAAA,GAAAA,WAAiBA,EAAAA,GAAAA,OAAAA,eAItB9F,EAAAA,EAAAA,KAAC+F,EAAAA,EAAO,CAACC,YAAY,SAAQjG,UAC3BC,EAAAA,EAAAA,KAAC8F,EAAAA,GAAAA,YAAiB,CAChB/G,MACyB,SAApB,OAAHgF,QAAG,IAAHA,OAAG,EAAHA,EAAKhJ,iBACmB,UAArB,OAAHgJ,QAAG,IAAHA,OAAG,EAAHA,EAAKhJ,gBACD,UACA,UAEN6E,KAAK,KACLyB,QAAS,WAEkB,SAApB,OAAH0C,QAAG,IAAHA,OAAG,EAAHA,EAAKhJ,iBACmB,UAArB,OAAHgJ,QAAG,IAAHA,OAAG,EAAHA,EAAKhJ,iBAELwK,EAAMgF,UAAYhF,EAAMgF,SAASxG,EACrC,EAAEhE,SAED+F,EAAAA,GAAAA,WAAiBA,EAAAA,GAAAA,OAAAA,eAIrBqC,IAAapE,EAAI6E,KAChB5I,EAAAA,EAAAA,KAAC+F,EAAAA,EAAO,CAACC,YAAY,SAAQjG,UAC3BC,EAAAA,EAAAA,KAAC8F,EAAAA,GAAAA,YAAiB,CAChB/G,MAAM,OACNa,KAAK,KACLyB,QAAS,WACPkE,EAAMiF,UAAYjF,EAAMiF,SAAS,GACnC,EAAEzK,SAED+F,EAAAA,GAAAA,WAAiBA,EAAAA,GAAAA,OAAAA,wBAItB9F,EAAAA,EAAAA,KAAC+F,EAAAA,EAAO,CAACC,YAAY,SAAQjG,UAC3BC,EAAAA,EAAAA,KAAC8F,EAAAA,GAAAA,YAAiB,CAChB/G,MAAM,OACNa,KAAK,KACLyB,QAAS,WACPkE,EAAMiF,UAAYjF,EAAMiF,SAASzG,EACnC,EAAEhE,SAED+F,EAAAA,GAAAA,WAAiBA,EAAAA,GAAAA,OAAAA,0BAKzB,EAELiB,cAAe,8CACf0D,QAAS,SAACd,EAAM5F,EAAKC,EAAU0G,GAC7B,MAAO,4BACT,EACAhF,MAAO,SAACiE,EAAM5F,EAAKC,EAAU0G,GAAc,IAADC,EACxC,MAAO,CACLC,QAAkB,QAAVD,EAAApF,EAAM7I,YAAI,IAAAiO,OAAA,EAAVA,EAAYlI,QAASuB,EAEjC,IAGJ3G,aAAckI,EAAMlI,aACpBE,aAAa,EACbH,SAAS,kBACTM,cAAe,SAAAmN,GACbtF,EAAM7H,eACJ6H,EAAM7H,cAAcmN,EAAK1J,KAAI,SAACiF,GAAS,OAAKA,EAAKwC,GAAG,IACxD,EACAtL,aAAc,SAACwB,EAAYkD,EAAmBvF,GAC5C8I,EAAMjI,cAAgBiI,EAAMjI,aAAawB,EAAOkD,EAAWvF,EAC7D,EACAkB,iBAAkB,SAACX,EAAM4C,GACvB2F,EAAM5H,kBAAoB4H,EAAM5H,iBAAiBX,EAAM4C,EACzD,EACA/B,SAAU,SAACgD,EAAMuB,EAAQpF,EAAM4C,GAC7B2F,EAAM1H,UAAY0H,EAAM1H,SAASgD,EAAMuB,EAAQpF,EAAM4C,EACvD,EACA7B,eAAgB,WACdvD,EAAM,IACNC,EAAK,IACLC,EAAc,IACdC,EAAa,IACbC,EAAW,IACXC,IACAC,IACAC,EAAe,IACfC,EAAW,IA/zBnB+O,UAg0BqB,IACb9O,EAAY,IACZC,EAAS,IACTC,IACAC,IACAC,EAAS,IACTC,EAAW,IACXC,EAAW,IACXC,EAAqB,IACrBC,EAAyB,IACzBC,EAAW,IACXC,EAAW,IACXC,EAAO,IACPC,EAAI,IACJC,EAAU,IACVC,EAAa,IACbC,EAAY,IACZC,EAAY,GACd,EACA2B,uBAAwB,WACtB2H,EAAM3H,wBAA0B2H,EAAM3H,wBACxC,EACAE,aAAc,SAAA+C,GACZ0E,EAAMzH,cAAgByH,EAAMzH,aAAa+C,EAC3C,EACA7C,kBAAmB,SAAAoI,GACjBb,EAAMuF,eAAiBvF,EAAMuF,cAAc1E,EAC7C,OAKV,IEn0Ba2E,IA/B4B5O,EAAAA,OAAjCD,UAAiCC,EAAAA,OAAtBC,kBACSE,EAAAA,UAApBD,gBA8BsB,SAAHG,GAoBC,IAnB1BC,EAAED,EAAFC,GACAC,EAAIF,EAAJE,KAAIC,EAAAH,EACJI,UAAAA,OAAS,IAAAD,EAAG,GAAEA,EACiBI,GADjBP,EACdM,kBAA+BN,EAC/BQ,MAAAA,OAAI,IAAAD,EAAG,EAACA,EAAAE,EAAAT,EACRU,YAAAA,OAAW,IAAAD,EAAG,GAAEA,EAChBE,EAAOX,EAAPW,QACAC,EAAQZ,EAARY,SACAC,EAAYb,EAAZa,aAKAC,GAJWd,EAAXe,YACYf,EAAZgB,aAAYhB,EACZiB,aACajB,EAAbkB,cACYlB,EAAZc,cACAK,EAAgBnB,EAAhBmB,iBAEAE,GADsBrB,EAAtBoB,uBACQpB,EAARqB,UAEAI,GADczB,EAAduB,eACUvB,EAAVyB,YAEAC,GAAsCC,EAAAA,EAAAA,YAAiBC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GACvDI,GADkBF,EAAA,GAAgBA,EAAA,IACMD,EAAAA,EAAAA,WAAkB,IAAMI,GAAAF,EAAAA,EAAAA,GAAAC,EAAA,GA4C1DU,GA5CaT,EAAA,GAAiBA,EAAA,GA4CpB,CACdU,QAAQ,EACRrC,UAAWA,EACXsC,eAAgB,EAChBC,eAAgB,EAChBC,cAAe,KACfC,YAAa,IACbC,aAAc,IACdC,aAAc,KACdC,kBAAkB,EAClBC,wBApDkB,SAACC,EAAMC,EAAIC,GAC7B,OACEC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,cACfJ,EAAAA,EAAAA,MAAA,QAAAE,SAAA,CAAM,WACKL,EAAK,OAAKC,EAAG,OAAKC,EAAK,gBAIxC,EA4CEM,iBAAiB,EACjBC,WAAW,EACXC,mBAAmB,EACnBC,gBAAiB,CACf,CACEC,KAAM,KACNxB,MAAO,IAET,CACEwB,KAAM,KACNxB,MAAO,IAET,CACEwB,KAAM,KACNxB,MAAO,IAET,CACEwB,KAAM,KACNxB,MAAO,IAET,CACEwB,KAAM,KACNxB,MAAO,KAGXyB,yBAAyB,EACzBC,oBApE0B,SAAHC,GAAA,IACvBzB,EAAOyB,EAAPzB,QACA0B,EAAeD,EAAfC,gBACAC,EAAmBF,EAAnBE,oBAAmB,OAEnBd,EAAAA,EAAAA,MAAA,OAAKI,UAAU,yBAAyBW,KAAK,QAAOb,SAAA,EAClDC,EAAAA,EAAAA,KAAA,SACEa,KAAK,SACLC,IAAI,IACJC,YAAY,KACZC,SAAU,SAACC,GACLA,EAAEC,OAAOpC,OACX6B,EAAoBM,EAAEC,OAAOpC,MAEjC,EACAmB,UAAU,+HAEXjB,EAAQmC,KAAI,SAAAC,GAAM,OACjBpB,EAAAA,EAAAA,KAAA,UAEEa,KAAK,SACLQ,QAAS,kBAAMV,EAAoBS,EAAOpE,KAAK,EAC/CiD,UAAS,QAAAqB,OACPZ,IAAe,GAAAY,OAAQF,EAAOpE,MAAS,aAAe,WACrD+C,SAEFqB,EAAOd,MAPHc,EAAOd,KAQL,MAEP,IA6CFkB,EAAoB,SACxBX,EAAIY,GAWA,IATF/E,EAAI+E,EAAJ/E,KACAgF,EAAQD,EAARC,SACA1E,EAAIyE,EAAJzE,KACAE,EAAWuE,EAAXvE,YACAyE,EAAOF,EAAPE,QACAC,EAASH,EAATG,UACAC,EAASJ,EAATI,UACAC,EAAUL,EAAVK,WAaF,GATa,aAATjB,GAAuBxD,GACzBC,GACEA,EAAaoE,EAASK,SAAUL,EAASM,UAAWN,EAASO,OAEpD,eAATpB,GAAyBqB,IAAAA,QAAUP,IAGrChE,GAAoBA,EAAiBX,EAAME,GAEhC,WAAT2D,GAA+B,eAATA,IAA0BqB,IAAAA,QAAUP,GAAW,CACvE,GAAa,eAATd,EAAuB,CACzB,GAAI3D,EAAcN,EAAW,OAAOuF,MAAM,8BAC1C,GAAInF,EAAOE,EAAcN,EACvB,OAAOuF,MAAM,6BACjB,CAEA,IADA,IAAIC,EAAc,CAAC,EACnBC,EAAA,EAAAC,EAA2BC,OAAOC,QAAQb,GAAQU,EAAAC,EAAAG,OAAAJ,IAAE,CAA/C,IAAAK,GAAArE,EAAAA,EAAAA,GAAAiE,EAAAD,GAAA,GAAOM,EAAGD,EAAA,GACPE,EADcF,EAAA,GAEdG,GAAMC,EAAAA,EAAAA,GAAA,GAAMH,EAAMC,EAAOG,WAC/BX,EAASG,OAAOS,OAAOZ,EAAQS,EACjC,CACIhF,IACFoF,EAAAA,EAAAA,KAAS,WACPpF,EACEgD,EACAuB,EACS,WAATvB,GAA8B,IAAT7D,EAAa,EAAIA,EACtCE,EAEJ,GACJ,EACa,WAAT2D,IACFoC,EAAAA,EAAAA,KAAS,WACPpF,GAAYA,EAASgD,EAAM,CAAEqC,OAAQpB,GAAc9E,EAAME,EAC3D,IAEW,SAAT2D,KAEgB,QAAdgB,EACOnF,EAAKyG,MAAK,SAACC,EAAGC,GACrB,OAAID,EAAExB,GAAayB,EAAEzB,GACZ,EACEyB,EAAEzB,GAAawB,EAAExB,IAClB,EAEH,CACT,IAESlF,EAAKyG,MAAK,SAACC,EAAGC,GACrB,OAAID,EAAExB,GAAayB,EAAEzB,IACX,EACCyB,EAAEzB,GAAawB,EAAExB,GACnB,EAEF,CACT,IAGN,EA8BMoJ,EAAY,CAChB3J,QAAS,SAACJ,EAAG8C,EAAKC,GAChB/F,GAAcA,EAAW8F,EAAKC,EAChC,GASIF,EAAW,SAACC,EAAKC,GAAc,IAADiH,EAAAC,EAAAC,EAAAC,EAAAC,EAClC,OAAW,OAAHtH,QAAG,IAAHA,GAAgB,QAAbkH,EAAHlH,EAAKuH,mBAAW,IAAAL,OAAb,EAAHA,EAAkBM,eACxB,IAAK,OACH,MAAO,CACLpH,gBAAoB,OAAHJ,QAAG,IAAHA,GAAgB,QAAbmH,EAAHnH,EAAKuH,mBAAW,IAAAJ,OAAb,EAAHA,EAAkBM,UACnCzM,MAAU,OAAHgF,QAAG,IAAHA,GAAgB,QAAboH,EAAHpH,EAAKuH,mBAAW,IAAAH,OAAb,EAAHA,EAAkBM,WAG7B,IAAK,aACH,MAAO,CACLtH,gBAAoB,OAAHJ,QAAG,IAAHA,GAAgB,QAAbqH,EAAHrH,EAAKuH,mBAAW,IAAAF,OAAb,EAAHA,EAAkBI,WAGvC,IAAK,OACH,MAAO,CACLzM,MAAU,OAAHgF,QAAG,IAAHA,GAAgB,QAAbsH,EAAHtH,EAAKuH,mBAAW,IAAAD,OAAb,EAAHA,EAAkBI,WAMjC,EAEA,OACEzL,EAAAA,EAAAA,KAACoE,EAAAA,GAAkB,CACjBC,YAAYC,EAAAA,EAAAA,IACI,IAAd1H,EAAkBoC,EAAU,CAAEhC,KAAAA,EAAME,YAAAA,EAAaN,UAAAA,IAEnD2H,SAAU9H,EACVU,QAASA,EACTT,KAAMA,EAAKqD,SAEV,SAAAyE,GAAkBA,EAAfC,gBAAH,IAAoBC,EAAoBF,EAApBE,qBAAoB,OACvC1E,EAAAA,EAAAA,KAAC2E,IAAe,CACdJ,SAAU9H,EACVmI,YAAU,EACVlI,KAAMA,EACNS,QAASA,EACT0H,QAAM,EACNC,UAAW,CACT1H,SAAS,GAADkE,OAAKlE,EAAQ,KAAAkE,OAAIyD,IAAM,IAAIC,MAAQC,OACzC,oBACD,QACDC,WAAW,EACXC,SAAU,wBACVC,WAAW,EACXC,oBAAoB,GAEtBC,cAAY,EAAAvF,SAEX,SAAAwF,GAAK,OACJ1F,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,uCACfD,EAAAA,EAAAA,KAAA,OAAKC,UAAU,cAAaF,UAC1BC,EAAAA,EAAAA,KAACyG,EAAAA,GAAc9C,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACb+C,QAAM,GACFnB,EAAMoB,WAAS,IACnBC,iBAAiB,iBACjBC,OAAK,GACDnC,GAAoB,IACxBtC,QAAQ0E,EAAAA,EAAAA,MACRC,cAAc,2CACdC,cAAexF,EACfwJ,UAAWA,EACXlH,SAAUA,SAGV,GAEQ,GAI1B,GCpUa4H,IAAqBxD,EAAAA,EAAAA,KAAS,SAAC3C,GAC1C,OACEvF,EAAAA,EAAAA,KAAAF,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,KAAA,OAAK0F,MAAO,CAACO,SAAU,YAAYlG,UACjCC,EAAAA,EAAAA,KAAC+K,GAAc,CACbtO,GAAG,MACHC,KAAM6I,EAAM7I,KACZE,UAAW2I,EAAM3I,UACjBO,QAAS,CACP,CACE6E,UAAW,MACX1B,KAAM,KACNuI,QAAQ,EACRC,WAAW,GAEb,CACE9G,UAAW,aACX1B,KAAM,cACN6C,MAAM,EACNgG,UAAU,GAEZ,CACEnH,UAAW,QACX1B,KAAM,SACN6C,MAAM,EACNgG,UAAU,GAEZ,CACEnH,UAAW,UACX1B,KAAM,WACN6C,MAAM,EACNgG,UAAU,GAEZ,CACEnH,UAAW,YACX1B,KAAM,aACN6C,MAAM,EACNgG,UAAU,GAEZ,CACEnH,UAAW,YACX1B,KAAM,aACN6C,MAAM,EACNgG,UAAU,GAEZ,CACEnH,UAAW,WACX1B,KAAM,YACN6C,MAAM,EACNgG,UAAU,GAEZ,CACEnH,UAAW,WACX1B,KAAM,YACN6C,MAAM,EACNyG,aAAc,SAAAC,GAAG,OAAKA,GAAY,EAAE,EACpCV,UAAU,GAEZ,CACEnH,UAAW,cACX1B,KAAM,eACN6C,MAAM,EACNyG,aAAc,SAAAC,GAAG,OAAKA,GAAY,EAAE,EACpCV,UAAU,GAEZ,CACEnH,UAAW,cACX1B,KAAM,eACN6C,MAAM,EACNyG,aAAc,SAAAC,GAAG,OAAKA,GAAY,EAAE,EACpCV,UAAU,GAEZ,CACEnH,UAAW,MACX1B,KAAM,MACN6C,MAAM,EACNyG,aAAc,SAAAC,GAAG,OAAKA,GAAY,EAAE,EACpCV,UAAU,GAEZ,CACEnH,UAAW,YACX1B,KAAM,YACN6C,MAAM,EACNyG,aAAc,SAACC,EAAK9F,GAAG,SAAAzC,OAClByC,EAAI4H,WAAa5H,EAAI4H,UAAY,MAAgB,KAAI,EAC1DxC,UAAU,EACVO,UAAW,SAACC,EAAM5F,GAChB,OACE/D,EAAAA,EAAAA,KAAAF,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,KAAC4L,EAAAA,GAAAA,GAAW,CAAC1F,UAAU,EAAMpH,MAAOiF,EAAI4H,aAG9C,IAGJtO,aAAckI,EAAMlI,aACpBE,aAAa,EACbH,SAAS,kBACTM,cAAe,SAAAmN,GACbtF,EAAM7H,eACJ6H,EAAM7H,cAAcmN,EAAK1J,KAAI,SAACiF,GAAS,OAAKA,EAAKwC,GAAG,IACxD,EACAtL,aAAc,SAACwB,EAAYkD,EAAmBvF,GAC5C8I,EAAMjI,cAAgBiI,EAAMjI,aAAawB,EAAOkD,EAAWvF,EAC7D,EACAkB,iBAAkB,SAACX,EAAM4C,GACvB2F,EAAM5H,kBAAoB4H,EAAM5H,iBAAiBX,EAAM4C,EACzD,EACA/B,SAAU,SAACgD,EAAMuB,EAAQpF,EAAM4C,GAC7B2F,EAAM1H,UAAY0H,EAAM1H,SAASgD,EAAMuB,EAAQpF,EAAM4C,EACvD,EACA7B,eAAgB,WAAO,OAKjC,I,2DC/Ga8N,GAAuB,SAAHrP,GAMC,IAADsP,EAAAtP,EAL/B4N,KAAAA,OAAI,IAAA0B,GAAQA,EACZpP,EAAIF,EAAJE,KACAqP,EAAevP,EAAfuP,gBACAC,EAAOxP,EAAPwP,QAGA9N,GAFe1B,EAAfyP,iBAEoC9N,EAAAA,EAAAA,aAAeC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA5CgO,EAAU9N,EAAA,GAAE+N,EAAa/N,EAAA,GAChCgO,EAAkCC,EAAAA,SAAejC,GAAKkC,GAAAjO,EAAAA,EAAAA,GAAA+N,EAAA,GAA/CG,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAC9BhO,GAAsCH,EAAAA,EAAAA,WAAS,GAAKI,GAAAF,EAAAA,EAAAA,GAAAC,EAAA,GAA7CmO,EAAYlO,EAAA,GAAEmO,EAAanO,EAAA,GAClCG,GAAoCP,EAAAA,EAAAA,WAAS,GAAMQ,GAAAN,EAAAA,EAAAA,GAAAK,EAAA,GAA5CiO,EAAWhO,EAAA,GAAEiO,EAAYjO,EAAA,IAEhC4J,EAAAA,EAAAA,YAAU,WACRiE,EAAapC,EACf,GAAG,CAACA,KAEJ7B,EAAAA,EAAAA,YAAU,WACR,GAAI7L,EAAM,CAGR,IAFA,IAAImQ,EAAS3K,IAAAA,QAAUxF,GAAM,SAACoC,EAAO6D,GAAG,OAAKA,EAAImK,MAAM,MAAM,EAAE,IAC3DC,EAAqB,GAAGC,EAAA,WACvB,IAAMpK,EAAMN,EAAAD,GACX4K,EAAsB,EAC1BrK,EAAO,GAAGzB,KAAI,SAAAiF,GAAI,IAAA8G,EAAA,OACZ,OAAJ9G,QAAI,IAAJA,GAAuB,QAAnB8G,EAAJ9G,EAAM+G,yBAAiB,IAAAD,OAAnB,EAAJA,EAAyB/L,KAAI,SAAAF,GAAM,IAADmM,GACZ,QAAhBA,EAAAnM,EAAEoM,sBAAc,IAAAD,OAAA,EAAhBA,EAAkBN,MAAM,OAAO,KAAMlK,EAAO,KAC9CqK,EAAsBhM,EAAEqM,oBAE5B,GAAE,IAEJP,EAAcQ,KAAK,CACjBC,SAAU5K,EAAO,GACjB6K,eAAgB7K,EAAO,GACvBsG,MAAO+D,GAEX,EAdA5K,EAAA,EAAAC,EAAqBC,OAAOC,QAAQqK,GAAOxK,EAAAC,EAAAG,OAAAJ,IAAA2K,IAe3CD,EAAgB7K,IAAAA,QAAU6K,EAAe,QAAS,OAClDZ,EAAcY,EAChB,CACF,GAAG,CAACrQ,IAEJ,IAAMgR,EAAa,SAAAC,GAEjB,OACE3N,EAAAA,EAAAA,KAAC4N,GAAAA,GAAQ,CAACvD,MAFU,iBAEWtK,SAC5B4N,EAAQxM,KAAI,SAAAiF,GAAI,OACfvG,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,CACoB,YAAjBqG,EAAKoH,UACJtL,IAAAA,OAAa,OAAJkE,QAAI,IAAJA,OAAI,EAAJA,EAAMqH,eAAgB,SAAStM,KACtC,SAACsM,GAAmB,IAAAI,EAAA,OAClB7N,EAAAA,EAAAA,KAAC8N,GAAAA,GAAW,CACVpR,KAAM,CACJ+Q,gBAAc9J,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACT8J,GAAc,IACjBN,kBACgB,OAAdM,QAAc,IAAdA,GAAiC,QAAnBI,EAAdJ,EAAgBN,yBAAiB,IAAAU,OAAnB,EAAdA,EAAmCzL,QACjC,SAAAgE,GAAI,IAAA2H,EAAA,MAEF,aADI,OAAJ3H,QAAI,IAAJA,GAAoB,QAAhB2H,EAAJ3H,EAAMiH,sBAAc,IAAAU,OAAhB,EAAJA,EAAsBjB,MAAM,MAAM,GACxB,MAGlBkB,aAA6B,OAAfjC,QAAe,IAAfA,OAAe,EAAfA,EAAiBkC,MAC7B,SAAA7H,GAAI,MAAyB,YAArBA,EAAK8H,YAA0B,KAG3CzB,aAAcA,GACd,IAIU,YAAjBrG,EAAKoH,UACJtL,IAAAA,OAAa,OAAJkE,QAAI,IAAJA,OAAI,EAAJA,EAAMqH,eAAgB,SAAStM,KACtC,SAACsM,GAAmB,IAAAU,EAAA,OAClBnO,EAAAA,EAAAA,KAACoO,GAAAA,GAAW,CACV1R,KAAM,CACJ+Q,gBAAc9J,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACT8J,GAAc,IACjBN,kBACgB,OAAdM,QAAc,IAAdA,GAAiC,QAAnBU,EAAdV,EAAgBN,yBAAiB,IAAAgB,OAAnB,EAAdA,EAAmC/L,QACjC,SAAAgE,GAAI,IAAAiI,EAAA,MAEF,aADI,OAAJjI,QAAI,IAAJA,GAAoB,QAAhBiI,EAAJjI,EAAMiH,sBAAc,IAAAgB,OAAhB,EAAJA,EAAsBvB,MAAM,MAAM,GACxB,MAGlBkB,aAA6B,OAAfjC,QAAe,IAAfA,OAAe,EAAfA,EAAiBkC,MAC7B,SAAA7H,GAAI,MAAyB,YAArBA,EAAK8H,YAA0B,KAG3CzB,aAAcA,GACd,IAIU,YAAjBrG,EAAKoH,UACJtL,IAAAA,OAAa,OAAJkE,QAAI,IAAJA,OAAI,EAAJA,EAAMqH,eAAgB,SAAStM,KACtC,SAACsM,GAAmB,IAAAa,EAAA,OAClBtO,EAAAA,EAAAA,KAACuO,GAAAA,GAAW,CACV7R,KAAM,CACJ+Q,gBAAc9J,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACT8J,GAAc,IACjBN,kBACgB,OAAdM,QAAc,IAAdA,GAAiC,QAAnBa,EAAdb,EAAgBN,yBAAiB,IAAAmB,OAAnB,EAAdA,EAAmClM,QACjC,SAAAgE,GAAI,IAAAoI,EAAA,MAEF,aADI,OAAJpI,QAAI,IAAJA,GAAoB,QAAhBoI,EAAJpI,EAAMiH,sBAAc,IAAAmB,OAAhB,EAAJA,EAAsB1B,MAAM,MAAM,GACxB,MAGlBkB,aAA6B,OAAfjC,QAAe,IAAfA,OAAe,EAAfA,EAAiBkC,MAC7B,SAAA7H,GAAI,MAAyB,YAArBA,EAAK8H,YAA0B,KAG3CzB,aAAcA,GACd,IAGU,YAAjBrG,EAAKoH,UACJtL,IAAAA,OAAa,OAAJkE,QAAI,IAAJA,OAAI,EAAJA,EAAMqH,eAAgB,SAAStM,KACtC,SAACsM,GAAmB,IAAAgB,EAAA,OAClBzO,EAAAA,EAAAA,KAAC0O,GAAAA,GAAW,CACVhS,KAAM,CACJ+Q,gBAAc9J,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACT8J,GAAc,IACjBN,kBACgB,OAAdM,QAAc,IAAdA,GAAiC,QAAnBgB,EAAdhB,EAAgBN,yBAAiB,IAAAsB,OAAnB,EAAdA,EAAmCrM,QACjC,SAAAgE,GAAI,IAAAuI,EAAA,MAEF,aADI,OAAJvI,QAAI,IAAJA,GAAoB,QAAhBuI,EAAJvI,EAAMiH,sBAAc,IAAAsB,OAAhB,EAAJA,EAAsB7B,MAAM,MAAM,GACxB,MAGlBkB,aAA6B,OAAfjC,QAAe,IAAfA,OAAe,EAAfA,EAAiBkC,MAC7B,SAAA7H,GAAI,MAA0B,aAAlB,OAAJA,QAAI,IAAJA,OAAI,EAAJA,EAAM8H,aAA0B,KAG5CzB,aAAcA,GACd,IAGU,YAAjBrG,EAAKoH,UACJtL,IAAAA,OAAa,OAAJkE,QAAI,IAAJA,OAAI,EAAJA,EAAMqH,eAAgB,SAAStM,KACtC,SAACsM,GAAmB,IAAAmB,EAAA,OAClB5O,EAAAA,EAAAA,KAAC6O,GAAAA,GAAW,CACVnS,KAAM,CACJ+Q,gBAAc9J,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACT8J,GAAc,IACjBN,kBACgB,OAAdM,QAAc,IAAdA,GAAiC,QAAnBmB,EAAdnB,EAAgBN,yBAAiB,IAAAyB,OAAnB,EAAdA,EAAmCxM,QACjC,SAAAgE,GAAI,IAAA0I,EAAA,MAEF,aADI,OAAJ1I,QAAI,IAAJA,GAAoB,QAAhB0I,EAAJ1I,EAAMiH,sBAAc,IAAAyB,OAAhB,EAAJA,EAAsBhC,MAAM,MAAM,GACxB,MAGlBkB,aAA6B,OAAfjC,QAAe,IAAfA,OAAe,EAAfA,EAAiBkC,MAC7B,SAAA7H,GAAI,MAAyB,YAArBA,EAAK8H,YAA0B,KAG3CzB,aAAcA,GACd,IAGU,YAAjBrG,EAAKoH,UACJtL,IAAAA,OAAa,OAAJkE,QAAI,IAAJA,OAAI,EAAJA,EAAMqH,eAAgB,SAAStM,KACtC,SAACsM,GAAmB,IAAAsB,EAAA,OAClB/O,EAAAA,EAAAA,KAACgP,GAAAA,GAAW,CACVtS,KAAM,CACJ+Q,gBAAc9J,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACT8J,GAAc,IACjBN,kBACgB,OAAdM,QAAc,IAAdA,GAAiC,QAAnBsB,EAAdtB,EAAgBN,yBAAiB,IAAA4B,OAAnB,EAAdA,EAAmC3M,QACjC,SAAAgE,GAAI,IAAA6I,EAAA,MAEF,aADI,OAAJ7I,QAAI,IAAJA,GAAoB,QAAhB6I,EAAJ7I,EAAMiH,sBAAc,IAAA4B,OAAhB,EAAJA,EAAsBnC,MAAM,MAAM,GACxB,MAGlBkB,aAA6B,OAAfjC,QAAe,IAAfA,OAAe,EAAfA,EAAiBkC,MAC7B,SAAA7H,GAAI,MAAyB,YAArBA,EAAK8H,YAA0B,KAG3CzB,aAAcA,GACd,IAGU,YAAjBrG,EAAKoH,UACJtL,IAAAA,OAAa,OAAJkE,QAAI,IAAJA,OAAI,EAAJA,EAAMqH,eAAgB,SAAStM,KACtC,SAACsM,GAAmB,IAAAyB,EAAA,OAClBlP,EAAAA,EAAAA,KAACmP,GAAAA,GAAW,CACVzS,KAAM,CACJ+Q,gBAAc9J,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACT8J,GAAc,IACjBN,kBACgB,OAAdM,QAAc,IAAdA,GAAiC,QAAnByB,EAAdzB,EAAgBN,yBAAiB,IAAA+B,OAAnB,EAAdA,EAAmC9M,QACjC,SAAAgE,GAAI,IAAAgJ,EAAA,MAEF,aADI,OAAJhJ,QAAI,IAAJA,GAAoB,QAAhBgJ,EAAJhJ,EAAMiH,sBAAc,IAAA+B,OAAhB,EAAJA,EAAsBtC,MAAM,MAAM,GACxB,MAGlBkB,aAA6B,OAAfjC,QAAe,IAAfA,OAAe,EAAfA,EAAiBkC,MAC7B,SAAA7H,GAAI,MAAyB,YAArBA,EAAK8H,YAA0B,KAG3CzB,aAAcA,GACd,IAGU,YAAjBrG,EAAKoH,UACJtL,IAAAA,OAAa,OAAJkE,QAAI,IAAJA,OAAI,EAAJA,EAAMqH,eAAgB,SAAStM,KACtC,SAACsM,GAAmB,IAAA4B,EAAA,OAClBrP,EAAAA,EAAAA,KAACsP,GAAAA,GAAW,CACV5S,KAAM,CACJ+Q,gBAAc9J,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACT8J,GAAc,IACjBN,kBACgB,OAAdM,QAAc,IAAdA,GAAiC,QAAnB4B,EAAd5B,EAAgBN,yBAAiB,IAAAkC,OAAnB,EAAdA,EAAmCjN,QACjC,SAAAgE,GAAI,IAAAmJ,EAAA,MAEF,aADI,OAAJnJ,QAAI,IAAJA,GAAoB,QAAhBmJ,EAAJnJ,EAAMiH,sBAAc,IAAAkC,OAAhB,EAAJA,EAAsBzC,MAAM,MAAM,GACxB,MAGlBkB,aAA6B,OAAfjC,QAAe,IAAfA,OAAe,EAAfA,EAAiBkC,MAC7B,SAAA7H,GAAI,MAAyB,YAArBA,EAAK8H,YAA0B,KAG3CzB,aAAcA,GACd,MAGP,KAIX,EAEA,OACE5M,EAAAA,EAAAA,MAAC2P,GAAAA,GAAS,CAAAzP,SAAA,CACPwM,IACC1M,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oHAAmHF,UAChIC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,yCAAwCF,UACrDF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,uGAAsGF,SAAA,EACnHF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,uFAAsFF,SAAA,EACnGC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,yBAAwBF,SACnC,sBAEHC,EAAAA,EAAAA,KAAA,UACEC,UAAU,0HACVoB,QAAS,WACPmL,GAAa,GACbR,GAAWA,GACb,EAAEjM,UAEFC,EAAAA,EAAAA,KAAA,QAAMC,UAAU,qEAAoEF,SAAC,eAKzFC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,yBAAwBF,UACrCC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,kDAAiDF,SAC7DrD,IACCmD,EAAAA,EAAAA,MAAA,OAAKI,UAAU,sBAAqBF,SAAA,EAClCC,EAAAA,EAAAA,KAAC4L,EAAAA,GAAAA,GAAe,CACd6D,MAAM,cACNC,WAAY,CAACC,WAAY,OAAQ3G,SAAU,IAC3ClK,MAAO2N,EAAe,aAAe,gBACrC7J,OAAQ,CACN,CAAC9D,MAAO,aAAc2Q,MAAO,eAC7B,CAAC3Q,MAAO,gBAAiB2Q,MAAO,mBAElCzO,SAAU,SAAAlC,GACR4N,EAAuB,cAAT5N,EAChB,KAEFe,EAAAA,EAAAA,MAAA,OAAKI,UAAU,oDAAmDF,SAAA,EAChEC,EAAAA,EAAAA,KAAC+F,EAAAA,EAAO,CAACC,YAAY,OAAMjG,UACzBC,EAAAA,EAAAA,KAAC8F,EAAAA,GAAAA,YAAiB,CAChB/G,MAAM,OACNa,KAAK,KACL8F,MAAO,CACLvB,gBAAiB,UACjB8C,MAAO,GACPC,OAAQ,GACRC,aAAc,GACdC,MAAO,SACPC,QAAS,GAEXhG,SAAOiG,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAE,SAAAC,IAAA,OAAAF,EAAAA,EAAAA,KAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACP+E,GAAa,GACbZ,GAAWA,IAAU,wBAAArE,EAAAG,OAAA,GAAAL,EAAA,KACrB1H,SAED+F,EAAAA,GAAAA,WAAiBA,EAAAA,GAAAA,OAAAA,uBAGtB9F,EAAAA,EAAAA,KAAC+F,EAAAA,EAAO,CAACC,YAAY,QAAOjG,UAC1BC,EAAAA,EAAAA,KAAC8F,EAAAA,GAAAA,YAAiB,CAChB/G,MAAM,OACNa,KAAK,KACL8F,MAAO,CACLvB,gBAAiB,UACjB8C,MAAO,GACPC,OAAQ,GACRC,aAAc,GACdC,MAAO,SACPC,QAAS,GAEXhG,SAAOiG,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAE,SAAAO,IAAA,IAAA6H,EAAAC,EAAAC,EAAA,OAAAvI,EAAAA,EAAAA,KAAAG,MAAA,SAAAM,GAAA,cAAAA,EAAAJ,KAAAI,EAAAH,MAAA,cAAAG,EAAAH,KAAA,EACW6F,EAAWxB,GAAY,KAAD,EAA/B,OAAH0D,EAAG5H,EAAA+H,KAAA/H,EAAAH,KAAA,GACUhM,EAAAA,GAAAA,IAAI+T,GAAKI,SAAS,KAAD,EAA9BH,EAAI7H,EAAA+H,KACJD,EAAUG,IAAIC,gBAAgBL,GACpCM,KAAQ,CACNC,UAAWN,EACXjP,KAAM,MACN0L,WAAW,IAEbP,GAAWA,IAAU,wBAAAhE,EAAAF,OAAA,GAAAC,EAAA,KACrBhI,SAED+F,EAAAA,GAAAA,WAAiBA,EAAAA,GAAAA,OAAAA,0BAQhCjG,EAAAA,EAAAA,MAAA,OAAKI,UAAU,yFAAwFF,SAAA,EACrGC,EAAAA,EAAAA,KAAA,QAAMC,UAAU,WAAUF,SAAC,6DAG3BC,EAAAA,EAAAA,KAAA,UACEC,UAAU,+FACVY,KAAK,SACL6E,MAAO,CAAC2K,WAAY,iBACpBhP,QAAS,WACPmL,GAAa,GACbR,GAAWA,GACb,EAAEjM,SACH,qBAOTC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,+CAInBD,EAAAA,EAAAA,KAACsQ,EAAAA,GAAK,CACJjG,MAAM,yBACND,KAAMuC,EACN4D,MAAO,WACL3D,GAAa,EACf,EACA4D,WACEtO,IAAAA,IAAMgK,EAAY,eAIdhK,IAAAA,IAAMgK,EAAY,cAHI,GAAtBhK,IAAAA,KAAOgK,GASbnM,SACE4M,GACE3M,EAAAA,EAAAA,KAACyQ,GAAAA,GAAS,CACR/K,MAAO,CACLuB,MAAOyJ,OAAOC,WACdzJ,OAAQwJ,OAAOE,YAAc,KAE/BC,aAAa,EAAM9Q,SAElB2N,EAAWxB,KAEZ,SAKd,E,uBCpYM4E,I,SAAgB5I,EAAAA,EAAAA,KAAS,WAAO,IAAD6I,EAAAC,EACnCC,GACEC,EAAAA,GAAAA,MADMC,EAAkBF,EAAlBE,mBAAoBC,EAAWH,EAAXG,YAAaC,EAAUJ,EAAVI,WAAYC,EAAkBL,EAAlBK,mBAGrDC,GAKIC,EAAAA,EAAAA,MAEJtT,GANSqT,EAAPE,QACYF,EAAZG,aACmBH,EAAnBI,UAAaC,OACLL,EAARM,UAGsD1T,EAAAA,EAAAA,aAAeC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAhE4T,EAAoB1T,EAAA,GAAE2T,EAAuB3T,EAAA,GACpDE,GAAgCH,EAAAA,EAAAA,UAAS,IAAGI,GAAAF,EAAAA,EAAAA,GAAAC,EAAA,GAArC6J,EAAQ5J,EAAA,GAAE6J,EAAW7J,EAAA,GAC5BG,GAAsCP,EAAAA,EAAAA,WAAkB,GAAMQ,GAAAN,EAAAA,EAAAA,GAAAK,EAAA,GAAvDsT,EAAWrT,EAAA,GAAEsT,EAActT,EAAA,GAClCuT,GAAoC/T,EAAAA,EAAAA,UAAiB,IAAGgU,GAAA9T,EAAAA,EAAAA,GAAA6T,EAAA,GAAjDxJ,EAAUyJ,EAAA,GAAErH,EAAaqH,EAAA,IAgChC5J,EAAAA,EAAAA,YAAU,YA9Bc,WACtB,IAAM6J,EAAef,EAAWgB,MACN,qBAAV,OAAZD,QAAY,IAAZA,OAAY,EAAZA,EAAcxR,MAChBuQ,EAAmBmB,qBAChBC,aAAa,CACZC,MAAO,CACLpQ,OAAQ,CACN9G,WAAY8W,EAAaK,QAI9BC,MAAK,SAAAC,GACwC,IAADC,EAAAC,EAAAC,EAAvCH,EAAII,0BAA0BC,SAChC7B,EAAmB8B,yBAAyB,CAC1CC,eAAgB,CACdxW,KAAmC,QAA/BkW,EAAED,EAAII,iCAAyB,IAAAH,OAAA,EAA7BA,EAA+BlW,KACrCyW,cAAe,CACbC,MAAoC,QAA/BP,EAAEF,EAAII,iCAAyB,IAAAF,GAAM,QAANC,EAA7BD,EAA+BnW,YAAI,IAAAoW,OAAN,EAA7BA,EAAqCrQ,UAKtD,IAGF0O,EAAmBmB,qBAAqBe,mBAG5C,CAGEC,EAEF,GAAG,IAEH,IAAMC,EAAW,SAAAzU,GAAK,MACH,kBAAVA,EAA0B,OAALA,QAAK,IAALA,OAAK,EAALA,EAAO0U,cAAgB1U,CAAM,EAErD2U,EAAmB,SAACC,EAAO/R,GAC/B,IAAMgS,EAAapR,OAAOqR,KAAKjS,GAE/B,OAAO+R,EAAMtR,QAAO,SAAAgE,GAClB,OAAOuN,EAAWE,OAAM,SAAAlR,GAEtB,OADA6C,QAAQC,IAAI,CAAE9C,IAAAA,KACThB,EAAQgB,GAAKF,QACXd,EAAQgB,GAAKsL,MAClB,SAAA7L,GAAM,OAAImR,EAASnR,KAAYmR,EAASnN,EAAKzD,GAAK,GAEtD,GACF,GACF,EAEMmR,EAAwB,SAAAC,GAC5B,IAAMC,EAAY,GACZC,EAAU/R,IAAAA,QAAU6R,EAAK,kBAC/B,GAAW,OAAPE,QAAO,IAAPA,GAAAA,EAASC,YAAa,CACxB,IAAMC,EAA6B,OAAPF,QAAO,IAAPA,OAAO,EAAPA,EAASC,YAC/BE,EAASlS,IAAAA,IACbA,IAAAA,QAAUiS,GAAgB,SAAU/N,GAClC,OAAOA,EAAK5L,OAAS4L,EAAKiO,SAC5B,KACA,SAAAC,GAAC,OAAIpS,IAAAA,MAAQoS,EAAG,aAAa,IAE/BN,EAAKzG,KAAIgH,MAATP,GAAIQ,EAAAA,EAAAA,GAASJ,GACf,CACA,GAAIH,EAAQ,gBAAiB,CAC3B,IAAMQ,EAAsBR,EAAQ,gBAC9BG,EAASlS,IAAAA,IAAMA,IAAAA,QAAUuS,EAAgB,UAAU,SAAAH,GAAC,OACxDpS,IAAAA,MAAQoS,EAAG,aAAa,IAE1BN,EAAKzG,KAAIgH,MAATP,GAAIQ,EAAAA,EAAAA,GAASJ,GACf,CACA,GAAIH,EAAQ,aAAc,CACxB,IAAMS,EAAmBT,EAAQ,aAC3BG,EAAclS,IAAAA,IAClBA,IAAAA,QAAUwS,GAAa,SAAUtO,GAC/B,OAAOA,EAAK5L,OAAS4L,EAAKuO,YAC5B,KAEI,OAANP,QAAM,IAANA,GAAAA,EAAQhS,QAAO,SAAAgE,GACL,OAAJA,QAAI,IAAJA,GAAAA,EAAM6H,MAAK,SAAA2G,GAAC,MAAqB,UAAhB,OAADA,QAAC,IAADA,OAAC,EAADA,EAAG5Z,WAAqB,IAC1CgZ,EAAKzG,KAAS,OAAJnH,QAAI,IAAJA,OAAI,EAAJA,EAAM6H,MAAK,SAAA2G,GAAC,MAAqB,UAAhB,OAADA,QAAC,IAADA,OAAC,EAADA,EAAG5Z,WAAqB,KAElDgZ,EAAKzG,KAAIgH,MAATP,GAAIQ,EAAAA,EAAAA,GACCtS,IAAAA,IACDA,IAAAA,QAAUkE,GAAM,SAAUwO,GACxB,OAAOA,EAAEpa,OAASoa,EAAED,YACtB,KACA,SAAAL,GAAC,OAAIpS,IAAAA,MAAQoS,EAAG,aAAa,KAIrC,GACF,CACA,GAAIL,EAAQY,MAAO,CACjB,IAAMC,EAAgBb,EAAQY,MACxBT,EAAclS,IAAAA,IAClBA,IAAAA,QAAU4S,GAAU,SAAU1O,GAC5B,OAAOA,EAAK5L,OAAS4L,EAAKuO,YAC5B,KAEI,OAANP,QAAM,IAANA,GAAAA,EAAQhS,QAAO,SAAAgE,GACL,OAAJA,QAAI,IAAJA,GAAAA,EAAM6H,MAAK,SAAA2G,GAAC,MAAqB,UAAhB,OAADA,QAAC,IAADA,OAAC,EAADA,EAAG5Z,WAAqB,IAC1CgZ,EAAKzG,KAAS,OAAJnH,QAAI,IAAJA,OAAI,EAAJA,EAAM6H,MAAK,SAAA2G,GAAC,MAAqB,UAAhB,OAADA,QAAC,IAADA,OAAC,EAADA,EAAG5Z,WAAqB,KAElDgZ,EAAKzG,KAAIgH,MAATP,GAAIQ,EAAAA,EAAAA,GACCtS,IAAAA,IACDA,IAAAA,QAAUkE,GAAM,SAAUwO,GACxB,OAAOA,EAAEpa,OAASoa,EAAED,YACtB,KACA,SAAAL,GAAC,OAAIpS,IAAAA,MAAQoS,EAAG,aAAa,KAIrC,GACF,CACA,OAAON,CACT,EAEMe,EAAqB,eAAAvY,GAAA8K,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAOrB,GAAS,OAAAmB,EAAAA,EAAAA,KAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAqN,OAAA,SAC5C,IAAIC,SAAa,SAACC,EAASC,GACzB,IAAI/S,EAAc,CAAC,EAEjBA,EADyB,eAAvBgE,EAAK0D,eACE,CACPtP,MAAO4L,EAAK5L,MACZ6Z,UAAWjO,EAAKiO,WAGM,aAAvBjO,EAAK0D,gBACmB,SAAvB1D,EAAK0D,gBACY,WAAnB1D,EAAKpL,WAQI,CACPR,MAAO4L,EAAK5L,OAPL,CACPA,MAAO4L,EAAK5L,MACZQ,WAAY,UACZ2Z,aAAkB,OAAJvO,QAAI,IAAJA,OAAI,EAAJA,EAAMuO,cAOxBxD,EAAmBmB,qBAChBC,aAAa,CACZC,MAAO,CACLpQ,OAAAA,KAGHsQ,MAAK,SAAAC,GACJ,GAAIA,EAAII,0BAA0BC,QAAS,CACzC,IAAItW,EAAOiW,EAAII,0BAA0BrW,KACzCA,EAAOwF,IAAAA,QAAUxF,GAAM,SAACkY,GACtB,OAAOA,EAAEQ,eACX,IACA1Y,EAAOwF,IAAAA,QAAUxF,EAAM,aAAc,QACrCwY,EAAQxY,EACV,CACF,GACJ,KAAE,wBAAAiL,EAAAG,OAAA,GAAAL,EAAA,qBAvCuB4N,GAAA,OAAA7Y,EAAA+X,MAAA,KAAAe,UAAA,KAyCrBC,EAAa,eAAA9U,GAAA6G,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAO,EAAOyN,GAAY,IAAAC,EAAAC,EAAAC,EAAAC,EAAA/U,EAAApE,EAAA0N,EAAA0L,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAhP,EAAAA,EAAAA,KAAAG,MAAA,SAAAM,GAAA,cAAAA,EAAAJ,KAAAI,EAAAH,MAAA,OACT,GAAtBhH,EAA2B2U,EAA3B3U,KAAMpE,EAAqB+Y,EAArB/Y,GAAI0N,EAAiBqL,EAAjBrL,QAAS0L,EAAQL,EAARK,IACf,UAARhV,GAA4B,QAARA,GAA0B,QAARA,EAAc,CAAAmH,EAAAH,KAAA,eAAAG,EAAAH,KAAA,EAChDsJ,EAAmBmB,qBACtBkE,oBAAoB,CACnBhE,MAAO,CACL5J,IAAKnM,EACL0N,QAASA,EACTpP,eACU,UAAR8F,EAAmB,SAAmB,QAARA,EAAiB,OAAS,UAG7D6R,MAAK,SAAAC,GACAA,EAAI6D,oBAAoBxD,SAC1ByD,EAAAA,GAAMzD,QAAQ,CACZ0D,QAAQ,gBAADpV,OAAQqR,EAAI6D,oBAAoBE,UAG7C,IAAG,KAAD,EAAA1O,EAAAH,KAAA,sBAAAG,EAAAH,KAAA,EAEEsJ,EAAmBmB,qBACtBqE,8BAA8B,CAC7BnE,MAAO,CACLpQ,OAAQ,CACNyT,IAAKA,EACL1L,QAASA,EACTpP,eAAgB,WAIrB2X,MAAK,SAAAC,GACAA,EAAIiE,8BAA8B5D,SACpCyD,EAAAA,GAAMzD,QAAQ,CACZ0D,QAAQ,gBAADpV,OAAQqR,EAAIiE,8BAA8BF,UAGvD,IAAG,KAAD,EAEsB,eAAlB,QAANjB,EAAAoB,EAAAA,SAAM,IAAApB,GAAQ,QAARC,EAAND,EAAQrT,cAAM,IAAAsT,OAAR,EAANA,EAAgBoB,MAClB3F,EAAmBmB,qBAAqBe,kBAChC,QADiDyC,EACvDe,EAAAA,SAAM,IAAAf,GAAQ,QAARC,EAAND,EAAQ1T,cAAM,IAAA2T,OAAR,EAANA,EAAgBgB,OAChB,KAE+B,WAAlB,QAANpB,EAAAkB,EAAAA,SAAM,IAAAlB,GAAQ,QAARC,EAAND,EAAQvT,cAAM,IAAAwT,OAAR,EAANA,EAAgBkB,MACzB3F,EAAmBmB,qBAAqBlQ,OAAO,CAC7CoQ,MAAO,CACL3R,KAAY,QAARmV,EAAEa,EAAAA,SAAM,IAAAb,GAAQ,QAARC,EAAND,EAAQ5T,cAAM,IAAA6T,OAAR,EAANA,EAAgBpV,KACtBuB,OAAc,QAAR8T,EAAEW,EAAAA,SAAM,IAAAX,GAAQ,QAARC,EAAND,EAAQ9T,cAAM,IAAA+T,OAAR,EAANA,EAAgB/T,OACxBpF,KAAY,QAARoZ,EAAES,EAAAA,SAAM,IAAAT,GAAQ,QAARC,EAAND,EAAQhU,cAAM,IAAAiU,OAAR,EAANA,EAAgBrZ,KACtBga,MAAa,QAARV,EAAEO,EAAAA,SAAM,IAAAP,GAAQ,QAARC,EAAND,EAAQlU,cAAM,IAAAmU,OAAR,EAANA,EAAgBS,SAI3B7F,EAAmBmB,qBAAqBe,oBAE1CpB,GAAgBD,GAAa,yBAAAhK,EAAAF,OAAA,GAAAC,EAAA,KAC9B,gBAxDkBkP,GAAA,OAAAxW,EAAA8T,MAAA,KAAAe,UAAA,KA0Db4B,GAAqBC,EAAAA,EAAAA,UACzB,eAAAC,EAAAC,EAAA,OACErX,EAAAA,EAAAA,KAACiI,GAAkB,CACjBvL,KACEoX,EAAsB3C,EAAmB+F,qBAAuB,GAElEta,UAC8D,QADrDwa,EACPtD,EAAsB3C,EAAmB+F,2BAAmB,IAAAE,OAAA,EAA5DA,EAA8D3U,OAEhEhF,aAAwC,aAAV,QAAhB4Z,EAAAhG,EAAWgB,aAAK,IAAAgF,OAAA,EAAhBA,EAAkBzW,MAChC+H,WAAYR,EACZO,WAAYA,EACZ4O,SAAUC,EAAAA,EAAAA,gBACRnG,EAAYoG,eACZ,UAEFna,aAAcka,EAAAA,EAAAA,gBACZnG,EAAYoG,eACZ,UAEFtN,SAAU,SAAA1M,GAAY,OAAI+X,EAAc/X,EAAa,EACrDK,SAAU,SAACgD,EAAMuB,EAAQpF,EAAMga,GAAW,IAADS,EAQvC,GAPAZ,EAAAA,EAAOzU,OAAS,CACd0U,KAAM,SACNjW,KAAAA,EACAuB,OAAAA,EACApF,KAAAA,EACAga,MAAAA,GAE4B,aAAV,QAAhBS,EAAApG,EAAWgB,aAAK,IAAAoF,OAAA,EAAhBA,EAAkB7W,MACpBuQ,EAAmBmB,qBAAqBlQ,OAAO,CAC7CoQ,MAAO,CAAE3R,KAAAA,EAAMuB,OAAAA,EAAQpF,KAAAA,EAAMga,MAAAA,UAG/B,GAAY,UAARnW,EACF2E,QAAQC,IAAI,CACVuO,KAAMP,EACJtC,EAAmBuG,uBACnBtV,SAGC,CACL,GAAqB,IAAjBA,EAAOc,OACT,OAAOiO,EAAmB8B,yBACxB9B,EAAmBuG,wBAGvB,IAAM1D,EAAO7C,EAAmBuG,uBAC1Bhb,EAAW,OAAJsX,QAAI,IAAJA,OAAI,EAAJA,EAAM5R,QAAO,SAAAuQ,GAAQ,IAADgF,EAC/B,OAAOC,KAAKC,UAAUlF,GACnBmF,oBACAC,MAAmB,QAAdJ,EAACvV,EAAOc,cAAM,IAAAyU,OAAA,EAAbA,EAAeG,oBAC1B,IACA3G,EAAmB8B,yBAAyBvW,EAC9C,CAEJ,EACA8N,SAAQ,eAAA/I,GAAA6F,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAE,SAAAwQ,EAAM5R,GAAI,OAAAmB,EAAAA,EAAAA,KAAAG,MAAA,SAAAuQ,GAAA,cAAAA,EAAArQ,KAAAqQ,EAAApQ,MAAA,OAClBO,EAAYhC,EAAKwC,KACE,iBAARxC,EACT2O,EAAsB3O,GAAMsM,MAAK,SAAA0B,GAC/BjD,EAAmB+G,yBAAyB9D,EAC9C,IAEAjD,EAAmB+G,yBAAyB,IAC7C,wBAAAD,EAAAnQ,OAAA,GAAAkQ,EAAA,KACF,gBAAAG,GAAA,OAAA1W,EAAA8S,MAAA,KAAAe,UAAA,EATO,GAUR1X,uBAAwB,WAAO,IAADwa,EACtBC,EAAoD,QAAxCD,EAAGjH,EAAmB+F,0BAAkB,IAAAkB,OAAA,EAArCA,EAAuChW,QAC1D,SAAAgE,GAAI,MAA4B,YAAxBA,EAAKrL,cAA4B,IAErC8a,EAAkB,OAAZwC,QAAY,IAAZA,OAAY,EAAZA,EAAclX,KAAI,SAAAiF,GAAI,OAAIA,EAAKwC,GAAG,IACxC0P,EAAuB,OAAZD,QAAY,IAAZA,OAAY,EAAZA,EAAclX,KAAI,SAAAiF,GAAI,OAAIA,EAAK+D,OAAO,IACvDoL,EAAc,CACZ1U,KAAM,0BACNgV,IAAKA,EACL1L,QAASmO,EACTlO,MAAM,EACNC,MAAO,gBACPC,KAAM,kCAEV,EACAC,SAAQ,eAAAhH,GAAA+D,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAE,SAAA+Q,EAAMnS,GAAI,IAAAoS,EAAApE,EAAA,OAAA7M,EAAAA,EAAAA,KAAAG,MAAA,SAAA+Q,GAAA,cAAAA,EAAA7Q,KAAA6Q,EAAA5Q,MAAA,cAAA4Q,EAAA5Q,KAAA,EACGkN,EAAsB3O,GAAM,KAAD,EAA1CgO,EAAMqE,EAAA1I,KACZoB,EAAmBmB,qBAChBoG,mBAA4B,QAAVF,EAACpE,EAAO,UAAE,IAAAoE,OAAA,EAATA,EAAWhe,OAC9BkY,MAAK,SAAAC,GACJ,GAAIA,EAAIgG,kBAAkB3F,QAAS,CACjC,IAAI7F,EAA2B,GACzB,OAANiH,QAAM,IAANA,GAAAA,EAAQhS,QAAO,SAAAgE,GACL,OAAJA,QAAI,IAAJA,GAAAA,EAAMiH,gBACRF,EAAkBI,MAAI5J,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACnBgP,EAAIgG,kBAAkBjc,MAAI,IAC7Bkc,cAAexS,IAGrB,IACA,IAAMyS,EAAsB3W,IAAAA,OAASkS,GAAQ,SAAChO,GAC5C,OAAW,OAAJA,QAAI,IAAJA,OAAI,EAAJA,EAAMiH,cACf,IAEMyL,EAA4B,GAClCD,EAAoBzW,QAAO,SAAAgE,GAAS,IAAD2H,EACjC+K,EAAmBvL,KAAS,OAAJnH,QAAI,IAAJA,GAAoB,QAAhB2H,EAAJ3H,EAAMiH,sBAAc,IAAAU,OAAhB,EAAJA,EAAsBjB,MAAM,MAAM,GAC5D,KAEsB,OAAlBgM,QAAkB,IAAlBA,OAAkB,EAAlBA,EAAoBrW,QAAS,GAC/B6O,EAAmByH,6BAChBC,oCAAoC,CACnCxG,MAAO,CACLpQ,OAAQ,CACN0W,mBAAAA,MAILpG,KAAI,eAAAlO,GAAA8C,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAC,SAAAyR,EAAMtG,GAAG,IAAAsB,EAAA,OAAA1M,EAAAA,EAAAA,KAAAG,MAAA,SAAAwR,GAAA,cAAAA,EAAAtR,KAAAsR,EAAArR,MAAA,OAcX,GAbFsF,EAAoBA,EAAkB/K,QAAO,SAAAgE,GAC3C,IAAM+S,EACJxG,EAAIqG,oCAAoChF,KAAK/F,MAC3C,SAAAhN,GAAC,OACCA,EAAEiN,cACF9H,EAAKwS,cAAcvL,eAAeP,MAAM,MAAM,EAAE,IAEtD,OAAOvK,OAAOS,OAAOoD,EAAM,CAAE+S,eAAAA,GAC/B,IAEMlF,EAAU/R,IAAAA,QACdiL,GACA,SAAA/G,GAAI,OAAIA,EAAKwS,cAAcvL,cAAc,KAGvCnL,IAAAA,QAAU+R,GAAS,CAADiF,EAAArR,KAAA,eAAAqR,EAAAlE,OAAA,SACbyB,EAAAA,GAAM2C,MAAM,CACjB1C,QAAS,6CACT,OAEF3E,EAAwB,CACtB3H,MAAM,EACN1N,KAAMuX,EACNlI,gBACE4G,EAAIqG,oCAAoChF,OACzC,wBAAAkF,EAAApR,OAAA,GAAAmR,EAAA,KAEN,gBAAAI,GAAA,OAAA7U,EAAA+P,MAAA,KAAAe,UAAE,CAAF,CA5BI,GA8BX,MACEnT,MAAMwQ,EAAIgG,kBAAkBjC,QAEhC,IAAG,wBAAA+B,EAAA3Q,OAAA,GAAAyQ,EAAA,KACN,gBAAAe,GAAA,OAAA/V,EAAAgR,MAAA,KAAAe,UAAA,EAnEO,GAoERxX,aAAc,SAAC+C,GACb,IAAIkW,EAAS5F,EAAmBoI,oBACpB,QAAR1Y,EACFkW,EAAS5F,EAAmBoI,oBAAsB,EACrC,GAAVxC,EAAeA,EAAS,EAAMA,GAAkB,EACrD5F,EAAmBmB,qBAAqBe,kBACtC0D,EACA,KAEF5F,EAAmBqI,0BAA0BzC,GAC7CF,EAAAA,EAAOzU,OAAS,CAAE0U,KAAM,aAAcC,OAAAA,EAAQC,MAAO,IACvD,EACAlM,cAAe,SAAC1E,GACd0E,EAAc1E,EAChB,GACA,GAGJ,CAAC+K,EAAmB+F,mBAAoB/O,EAAU6J,EAAatJ,IAGjE,OADAlD,QAAQC,IAAIiD,EAAY,SAEtB7I,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,MAAC4Z,EAAAA,GAAM,CAAA1Z,SAAA,EACLC,EAAAA,EAAAA,KAAC0Z,EAAAA,GAAW,CAACrP,OAAqC,QAA9B0G,EAAAK,EAAYuI,0BAAkB,IAAA5I,OAAA,EAA9BA,EAAgC1G,QAAS,MAC7DrK,EAAAA,EAAAA,KAAC4Z,EAAAA,GAAqB,CAACC,MAAOxI,QAEhCxR,EAAAA,EAAAA,MAAA,OAAKI,UAAU,yCAAwCF,SAAA,EACrDC,EAAAA,EAAAA,KAAA,QAAMC,UAAU,8BAA6BF,SAAC,oBAC7CmX,MAGmC,QAArClG,EAAAG,EAAmB2I,0BAAkB,IAAA9I,OAAA,EAArCA,EAAuCvO,QAAS,IAC/C5C,EAAAA,EAAAA,MAAA,OAAKI,UAAU,yCAAwCF,SAAA,EACrDC,EAAAA,EAAAA,KAAA,QAAMC,UAAU,8BAA6BF,SAAC,qBAC9CC,EAAAA,EAAAA,KAAC0L,GAAkB,CACjBhP,KAAMyU,EAAmB2I,oBAAsB,GAC/Cld,UAAWuU,EAAmB4I,8BAKpC/Z,EAAAA,EAAAA,KAAC6L,IAAoBlI,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACfmO,GAAoB,IACxB9F,QAAS,WACP+F,EAAwB,CAAE3H,MAAM,GAClC,OAIR,KAEA,K","sources":["features/patient-reports/delivery-queue/components/molecules/report-delivery-list.components.tsx","features/patient-reports/delivery-queue/components/molecules/table-bootstrap-report.components.tsx","features/patient-reports/delivery-queue/components/molecules/table-bootstrap.components.tsx","features/patient-reports/delivery-queue/components/molecules/order-delivered-list.components.tsx","features/patient-reports/delivery-queue/components/molecules/modal-generate-reports.component.tsx","features/patient-reports/delivery-queue/screens/delivery-queue.screen.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { observer } from 'mobx-react';\nimport {\n  Tooltip,\n  Icons,\n  textFilter,\n  customFilter,\n  DateFilter,\n  NumberFilter,\n  sortCaret,\n} from '@/library/components';\nimport dayjs from 'dayjs';\nimport { TableBootstrapReport } from './table-bootstrap-report.components';\n\nlet labId;\nlet name;\nlet externalLabId;\nlet employeeCode;\nlet visitId;\nlet deliveryId;\nlet deliveryDate;\nlet reportDate;\nlet deliveryStatus;\nlet reportType;\nlet deliveryMode;\nlet destination;\nlet comments;\nlet startDate;\nlet endDate;\nlet errorMsg;\nlet clientCode;\nlet clientName;\nlet registrationLocation;\nlet registrationLocationCode;\nlet doctorCode;\nlet doctorName;\nlet qrCode;\nlet pdf;\nlet enteredBy;\nlet userComments;\nlet companyCode;\nlet environment;\n\ninterface ReportDeliveryProps {\n  data: any;\n  totalSize: number;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  selectedId?: string;\n  isPagination?: boolean;\n  onUpdate?: (selectedItem: any) => void;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (value: any, dataField: string, id: string) => void;\n  onPageSizeChange?: (page: number, totalSize: number) => void;\n  onUpdateDeliveryStatus?: () => void;\n  onPagination?: (type: string) => void;\n  onReport: (items: any) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n  onClickRow?: (item: any, index: number) => void;\n  onExpand?: (items: any) => void;\n  holdRecord?: any;\n  setHoldRecord?: (item: string) => void;\n}\n\nexport const ReportDeliveryList = observer((props: ReportDeliveryProps) => {\n  const [selectId, setSelectId] = useState('');\n  const [localData, setLocalData] = useState(props.data);\n\n  useEffect(() => {\n    const filterDataByHoldRecord = (data, holdRecord) => {\n      if (holdRecord === 'Hold') {\n        return data.filter(item => item.deliveryStatus === 'Hold');\n      } else if (holdRecord === 'Pending') {\n        return data.filter(item => item.deliveryStatus === 'Pending');\n      } else {\n        return data;\n      }\n    };\n\n    setSelectId(props.selectedId || '');\n    setLocalData(\n      props.selectedId\n        ? props.data\n            ?.filter(item => item._id === props.selectedId)\n            ?.map(item => ({ ...item, selectedId: props.selectedId }))\n        : filterDataByHoldRecord(props.data, props.holdRecord),\n    );\n  }, [props.selectedId, props.data, props.holdRecord]);\n\n  return (\n    <>\n      <div style={{ position: 'relative' }}>\n        <TableBootstrapReport\n          id='_id'\n          data={localData}\n          totalSize={props.totalSize}\n          isPagination={props.isPagination}\n          columns={[\n            {\n              dataField: '_id',\n              text: 'Id',\n              hidden: true,\n              csvExport: false,\n            },\n            {\n              dataField: 'labId',\n              text: 'Lab Id',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              editable: false,\n              headerClasses: 'textHeader3',\n              filter: customFilter({\n                getFilter: filter => {\n                  labId = filter;\n                },\n              }),\n              filterRenderer: (onFilter, column) => (\n                <NumberFilter onFilter={onFilter} column={column} />\n              ),\n            },\n            {\n              dataField: 'name',\n              text: 'Name',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              editable: false,\n              headerClasses: 'textHeader3',\n              filter: textFilter({\n                getFilter: filter => {\n                  name = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'deliveryId',\n              text: 'Delivery Id',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              editable: false,\n              headerClasses: 'textHeader3',\n              filter: customFilter({\n                getFilter: filter => {\n                  deliveryId = filter;\n                },\n              }),\n              filterRenderer: (onFilter, column) => (\n                <NumberFilter onFilter={onFilter} column={column} />\n              ),\n            },\n            {\n              dataField: 'deliveryDate',\n              text: 'Delivery Date',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              editable: false,\n              headerClasses: 'textHeader11',\n              filter: customFilter({\n                getFilter: filter => {\n                  deliveryDate = filter;\n                },\n              }),\n              filterRenderer: (onFilter, column) => (\n                <DateFilter onFilter={onFilter} column={column} />\n              ),\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    {row.deliveryDate\n                      ? dayjs(row.deliveryDate).format('DD-MM-YYYY HH:mm:ss')\n                      : ''}\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'reportDate',\n              text: 'Report Date',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              editable: false,\n              headerClasses: 'textHeader11',\n              filter: customFilter({\n                getFilter: filter => {\n                  reportDate = filter;\n                },\n              }),\n              filterRenderer: (onFilter, column) => (\n                <DateFilter onFilter={onFilter} column={column} />\n              ),\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    {row.reportDate\n                      ? dayjs(row.reportDate).format('DD-MM-YYYY HH:mm:ss')\n                      : ''}\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'deliveryStatus',\n              text: 'Delivery Status',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              editable: false,\n              headerClasses: 'textHeader3',\n              filter: textFilter({\n                getFilter: filter => {\n                  deliveryStatus = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'reportType',\n              text: 'Report Type',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              editable: false,\n              headerClasses: 'textHeader3',\n              filter: textFilter({\n                getFilter: filter => {\n                  reportType = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'reportPriority',\n              text: 'Report Priority',\n              headerClasses: 'textHeader4',\n              sort: true,\n              csvFormatter: (col, row) =>\n                row?.reportPriority ? row.reportPriority : '',\n              editable: false,\n            },\n            {\n              dataField: 'deliveryMode',\n              text: 'Delivery Mode',\n              headerClasses: 'textHeader4',\n              sort: true,\n              csvFormatter: (col, row) =>\n                row?.deliveryMode ? row.deliveryMode : '',\n              editable: false,\n              formatter: (cell, row) => {\n                console.log(row);\n                return (\n                  <div className='flex flex-row flex-wrap gap-2'>\n                    {typeof row?.deliveryMode != 'string' &&\n                      row?.deliveryMode?.map(item => (\n                        <span className='bg-blue-800 rounded-md p-2 text-white'>\n                          {item.value}\n                        </span>\n                      ))}\n                  </div>\n                );\n              },\n            },\n            {\n              dataField: 'destination',\n              text: 'Destination',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              editable: false,\n              headerClasses: 'textHeader3',\n              filter: textFilter({\n                getFilter: filter => {\n                  destination = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'comments',\n              text: 'Comments',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n              headerClasses: 'textHeader3',\n              filter: textFilter({\n                getFilter: filter => {\n                  comments = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'startDate',\n              text: 'Start Date',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              editable: false,\n              headerClasses: 'textHeader11',\n              filter: customFilter({\n                getFilter: filter => {\n                  startDate = filter;\n                },\n              }),\n              filterRenderer: (onFilter, column) => (\n                <DateFilter onFilter={onFilter} column={column} />\n              ),\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    {row.startDate\n                      ? dayjs(row.startDate).format('DD-MM-YYYY HH:mm:ss')\n                      : ''}\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'endDate',\n              text: 'End Date',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              editable: false,\n              headerClasses: 'textHeader11',\n              filter: customFilter({\n                getFilter: filter => {\n                  endDate = filter;\n                },\n              }),\n              filterRenderer: (onFilter, column) => (\n                <DateFilter onFilter={onFilter} column={column} />\n              ),\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    {row.endDate\n                      ? dayjs(row.endDate).format('DD-MM-YYYY HH:mm:ss')\n                      : ''}\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'errorMsg',\n              text: 'Error Msg',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n              headerClasses: 'textHeader3',\n              filter: textFilter({\n                getFilter: filter => {\n                  errorMsg = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'clientCode',\n              text: 'Client Code',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n              headerClasses: 'textHeader3',\n              filter: textFilter({\n                getFilter: filter => {\n                  clientCode = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'clientName',\n              text: 'Client Name',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n              headerClasses: 'textHeader3',\n              filter: textFilter({\n                getFilter: filter => {\n                  clientName = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'registrationLocation',\n              text: 'Registration Location',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n              headerClasses: 'textHeader8',\n              filter: textFilter({\n                getFilter: filter => {\n                  registrationLocation = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'registrationLocationCode',\n              text: 'Registration Location Code',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n              headerClasses: 'textHeader8',\n              filter: textFilter({\n                getFilter: filter => {\n                  registrationLocationCode = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'doctorCode',\n              text: 'Doctor Code',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n              headerClasses: 'textHeader3',\n              filter: textFilter({\n                getFilter: filter => {\n                  doctorCode = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'doctorName',\n              text: 'Doctor Name',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n              headerClasses: 'textHeader3',\n              filter: textFilter({\n                getFilter: filter => {\n                  doctorName = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'qrCode',\n              text: 'Qr Code',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n              headerClasses: 'textHeader3',\n              filter: textFilter({\n                getFilter: filter => {\n                  qrCode = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'pdf',\n              text: 'PDF',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n              headerClasses: 'textHeader3',\n              filter: textFilter({\n                getFilter: filter => {\n                  pdf = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'externalLabId',\n              text: 'External Lab Id',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              editable: false,\n              headerClasses: 'textHeader3',\n              filter: textFilter({\n                getFilter: filter => {\n                  externalLabId = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'employeeCode',\n              text: 'Employee Code',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              editable: false,\n              headerClasses: 'textHeader3',\n              filter: textFilter({\n                getFilter: filter => {\n                  employeeCode = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'enteredBy',\n              text: 'Entered By',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n              headerClasses: 'textHeader3',\n              filter: textFilter({\n                getFilter: filter => {\n                  enteredBy = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'userComments',\n              text: 'User Comments',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n              headerClasses: 'textHeader3',\n              filter: textFilter({\n                getFilter: filter => {\n                  userComments = filter;\n                },\n              }),\n            },\n            {\n              text: 'Company Code',\n              dataField: 'companyCode',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              editable: false,\n              csvFormatter: col => (col ? col : ''),\n              filter: textFilter({\n                getFilter: filter => {\n                  companyCode = filter;\n                },\n              }),\n              headerClasses: 'textHeader2',\n            },\n            {\n              text: 'Company Code',\n              dataField: 'companyCode',\n              editable: false,\n              headerClasses: 'textHeader2',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              csvFormatter: col => (col ? col : ''),\n              filter: textFilter({\n                getFilter: filter => {\n                  environment = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'environment',\n              text: 'Environment',\n              headerClasses: 'textHeader2',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              editable: false,\n              sortCaret: (order, column) => sortCaret(order, column),\n              csvFormatter: col => (col ? col : ''),\n              filter: textFilter({\n                getFilter: filter => {\n                  environment = filter;\n                },\n              }),\n              // editorRenderer: (\n              //   editorProps,\n              //   value,\n              //   row,\n              //   column,\n              //   rowIndex,\n              //   columnIndex,\n              // ) => (\n              //   <>\n              //     <select\n              //       value={row.environment}\n              //       className='leading-4 p-2 focus:ring-indigo-500 ocus:border-indigo-500 block w-full shadow-sm sm:text-base border-2 rounded-md'\n              //       onChange={e => {\n              //         const environment = e.target.value;\n              //         props.onUpdateItem &&\n              //           props.onUpdateItem(environment, column.dataField, row._id);\n              //       }}\n              //     >\n              //       <option selected>Select</option>\n              //       {lookupItems(props.extraData.lookupItems, 'ENVIRONMENT').map(\n              //         (item: any, index: number) => (\n              //           <option key={index} value={item.code}>\n              //             {lookupValue(item)}\n              //           </option>\n              //         ),\n              //       )}\n              //     </select>\n              //   </>\n              // ),\n            },\n            {\n              dataField: 'operation',\n              text: 'Action',\n              editable: false,\n              csvExport: false,\n              // hidden: !props.isDelete,\n              formatter: (cellContent, row) => (\n                <>\n                  <div className='flex flex-row'>\n                    <Tooltip tooltipText='Generate Report'>\n                      <Icons.IconContext\n                        color={\n                          row?.deliveryStatus !== 'Done' &&\n                          row?.deliveryStatus !== 'Cancel' &&\n                          row?.deliveryStatus !== 'Hold'\n                            ? '#ffffff'\n                            : '#5A5A5A'\n                        }\n                        size='20'\n                        onClick={() => {\n                          if (\n                            row?.deliveryStatus !== 'Done' &&\n                            row?.deliveryStatus !== 'Cancel' &&\n                            row?.deliveryStatus !== 'Hold'\n                          ) {\n                            props.onUpdate &&\n                              props.onUpdate({\n                                type: 'done',\n                                visitId: row?.visitId,\n                                show: true,\n                                id: row._id,\n                                title: 'Are you sure?',\n                                body: 'Generate pdf status update',\n                              });\n                          }\n                        }}\n                      >\n                        {Icons.getIconTag(Icons.IconTb.TbExchange)}\n                      </Icons.IconContext>\n                    </Tooltip>\n                    <Tooltip\n                      tooltipText={`${\n                        row?.deliveryStatus === 'Hold' ? 'Unhold' : 'Hold'\n                      }`}\n                      position='bottom'\n                    >\n                      <Icons.IconContext\n                        color={\n                          row?.deliveryStatus !== 'Cancel'\n                            ? '#ffffff'\n                            : '#5A5A5A'\n                        }\n                        size='20'\n                        onClick={() => {\n                          if (row?.deliveryStatus !== 'Cancel') {\n                            props.onUpdate &&\n                              props.onUpdate({\n                                type: 'hold',\n                                visitId: row?.visitId,\n                                show: true,\n                                id: row._id,\n                                title: 'Are you sure?',\n                                body: 'Hold item',\n                              });\n                          }\n                        }}\n                      >\n                        {Icons.getIconTag(Icons.Iconmd.MdBackHand)}\n                      </Icons.IconContext>\n                    </Tooltip>\n                    <Tooltip tooltipText='Cancel' position='bottom'>\n                      <Icons.IconContext\n                        color={\n                          row?.deliveryStatus !== 'Hold' &&\n                          row?.deliveryStatus !== 'Cancel'\n                            ? '#ffffff'\n                            : '#5A5A5A'\n                        }\n                        size='20'\n                        onClick={() => {\n                          if (\n                            row?.deliveryStatus !== 'Hold' &&\n                            row?.deliveryStatus !== 'Cancel'\n                          ) {\n                            props.onUpdate &&\n                              props.onUpdate({\n                                type: 'cancel',\n                                visitId: row?.visitId,\n                                show: true,\n                                id: row._id,\n                                title: 'Are you sure?',\n                                body: 'Cancel item',\n                              });\n                          }\n                        }}\n                      >\n                        {Icons.getIconTag(Icons.IconGi.GiCancel)}\n                      </Icons.IconContext>\n                    </Tooltip>\n\n                    <Tooltip tooltipText='Report'>\n                      <Icons.IconContext\n                        color={\n                          row?.deliveryStatus == 'Done' &&\n                          row?.deliveryStatus !== 'Hold'\n                            ? '#ffffff'\n                            : '#5A5A5A'\n                        }\n                        size='20'\n                        onClick={() => {\n                          if (\n                            row?.deliveryStatus == 'Done' &&\n                            row?.deliveryStatus !== 'Hold'\n                          )\n                            props.onReport && props.onReport(row);\n                        }}\n                      >\n                        {Icons.getIconTag(Icons.IconBs.BsFilePdf)}\n                      </Icons.IconContext>\n                    </Tooltip>\n\n                    {selectId === row._id ? (\n                      <Tooltip tooltipText='Expand'>\n                        <Icons.IconContext\n                          color='#fff'\n                          size='20'\n                          onClick={() => {\n                            props.onExpand && props.onExpand('');\n                          }}\n                        >\n                          {Icons.getIconTag(Icons.Iconai.AiFillMinusCircle)}\n                        </Icons.IconContext>\n                      </Tooltip>\n                    ) : (\n                      <Tooltip tooltipText='Expand'>\n                        <Icons.IconContext\n                          color='#fff'\n                          size='20'\n                          onClick={() => {\n                            props.onExpand && props.onExpand(row);\n                          }}\n                        >\n                          {Icons.getIconTag(Icons.Iconai.AiFillPlusCircle)}\n                        </Icons.IconContext>\n                      </Tooltip>\n                    )}\n                  </div>\n                </>\n              ),\n              headerClasses: 'sticky right-0  bg-gray-500 text-white z-50',\n              classes: (cell, row, rowIndex, colIndex) => {\n                return 'sticky right-0 bg-gray-500';\n              },\n              style: (cell, row, rowIndex, colIndex) => {\n                return {\n                  zIndex: props.data?.length - rowIndex,\n                };\n              },\n            },\n          ]}\n          isEditModify={props.isEditModify}\n          isSelectRow={true}\n          fileName='Report Delivery'\n          onSelectedRow={rows => {\n            props.onSelectedRow &&\n              props.onSelectedRow(rows.map((item: any) => item._id));\n          }}\n          onUpdateItem={(value: any, dataField: string, id: string) => {\n            props.onUpdateItem && props.onUpdateItem(value, dataField, id);\n          }}\n          onPageSizeChange={(page, size) => {\n            props.onPageSizeChange && props.onPageSizeChange(page, size);\n          }}\n          onFilter={(type, filter, page, size) => {\n            props.onFilter && props.onFilter(type, filter, page, size);\n          }}\n          clearAllFilter={() => {\n            labId('');\n            name('');\n            externalLabId('');\n            employeeCode('');\n            deliveryId('');\n            deliveryDate();\n            reportDate();\n            deliveryStatus('');\n            reportType('');\n            deliveryMode('');\n            destination('');\n            comments('');\n            startDate();\n            endDate();\n            errorMsg('');\n            clientCode('');\n            clientName('');\n            registrationLocation('');\n            registrationLocationCode('');\n            doctorCode('');\n            doctorName('');\n            qrCode('');\n            pdf('');\n            enteredBy('');\n            userComments('');\n            companyCode('');\n            environment('');\n          }}\n          onUpdateDeliveryStatus={() => {\n            props.onUpdateDeliveryStatus && props.onUpdateDeliveryStatus();\n          }}\n          onPagination={type => {\n            props.onPagination && props.onPagination(type);\n          }}\n          onCheckHoldRecord={item => {\n            props.setHoldRecord && props.setHoldRecord(item);\n          }}\n        />\n      </div>\n    </>\n  );\n});\n","/* eslint-disable */\nimport React, { useState } from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport _ from 'lodash';\nimport ToolkitProvider, {\n  Search,\n  CSVExport,\n} from 'react-bootstrap-table2-toolkit/dist/react-bootstrap-table2-toolkit';\nimport cellEditFactory from 'react-bootstrap-table2-editor';\nimport paginationFactory, {\n  PaginationProvider,\n  PaginationListStandalone,\n  SizePerPageDropdownStandalone,\n  PaginationTotalStandalone,\n} from 'react-bootstrap-table2-paginator';\nimport filterFactory from 'react-bootstrap-table2-filter';\nimport dayjs from 'dayjs';\nimport '@/library/components/organisms/style.css';\nimport { debounce } from '@/core-utils';\n\nimport { Buttons, Icons, Tooltip } from '@/library/components';\n\nconst { SearchBar, ClearSearchButton } = Search;\nconst { ExportCSVButton } = CSVExport;\n\ninterface TableBootstrapReportProps {\n  id: string;\n  data: any;\n  totalSize?: number;\n  searchPlaceholder?: string;\n  page?: number;\n  sizePerPage?: number;\n  columns: any;\n  fileName: string;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  isSelectRow?: boolean;\n  selectedItem?: any;\n  isPagination?: boolean;\n  onDelete?: (selectedItem: any) => void;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (value: any, dataField: string, id: string) => void;\n  onPageSizeChange?: (page: number, limit: number) => void;\n  onPagination?: (type: string) => void;\n  onUpdateDeliveryStatus?: () => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n  clearAllFilter?: () => void;\n  onClickRow?: (item: any, index: number) => void;\n  onCheckHoldRecord?: (item: string) => void;\n}\nexport const TableBootstrapReport = ({\n  id,\n  data,\n  totalSize = 10,\n  searchPlaceholder = 'Search...',\n  page = 0,\n  sizePerPage = 10,\n  columns,\n  fileName,\n  isEditModify,\n  isSelectRow,\n  selectedItem,\n  isPagination = true,\n  onSelectedRow,\n  onUpdateItem,\n  onPageSizeChange,\n  onUpdateDeliveryStatus,\n  onFilter,\n  onPagination,\n  clearAllFilter,\n  onClickRow,\n  onCheckHoldRecord,\n}: TableBootstrapReportProps) => {\n  const [selectedRow, setSelectedRow] = useState<any[]>();\n  const [isFilterOpen, setIsFilterOpen] = useState<boolean>(false);\n  const [selectedStatus, setSelectedStatus] = useState(null);\n\n  const customTotal = (from, to, size) => {\n    return (\n      <>\n        <div className='clearfix' />\n        <span>\n          Showing {from} to {to} of {size} Results\n        </span>\n      </>\n    );\n  };\n\n  const statusData = [\n    { code: 'Hold', value: 'Hold', color: 'green' },\n    { code: 'Pending', value: 'Pending', color: 'blue' },\n    { code: '', value: 'All', color: 'red' },\n  ];\n\n  const sizePerPageRenderer = ({\n    options,\n    currSizePerPage,\n    onSizePerPageChange,\n  }) => (\n    <div className='btn-group items-center' role='group'>\n      <input\n        type='number'\n        min='0'\n        placeholder='No'\n        onChange={(e: any) => {\n          if (e.target.value) {\n            onSizePerPageChange(e.target.value);\n          }\n        }}\n        className='mr-2 ml-2 leading-4 p-2 w-14 focus:outline-none focus:ring block  shadow-sm sm:text-base border border-gray-300 rounded-md'\n      />\n      {options.map(option => (\n        <button\n          key={option.text}\n          type='button'\n          onClick={() => onSizePerPageChange(option.page)}\n          className={`btn  ${\n            currSizePerPage === `${option.page}` ? 'bg-primary' : 'bg-grey'\n          }`}\n        >\n          {option.text}\n        </button>\n      ))}\n    </div>\n  );\n  const options = {\n    cutome: true,\n    totalSize: totalSize,\n    paginationSize: 5,\n    pageStartIndex: 0,\n    firstPageText: '<<',\n    prePageText: '<',\n    nextPageText: '>',\n    lastPageText: '>>',\n    disablePageTitle: true,\n    paginationTotalRenderer: customTotal,\n    hideSizePerPage: true,\n    showTotal: false,\n    alwaysShowAllBtns: true,\n    sizePerPageList: [\n      {\n        text: '10',\n        value: 10,\n      },\n      {\n        text: '20',\n        value: 20,\n      },\n      {\n        text: '30',\n        value: 30,\n      },\n      {\n        text: '40',\n        value: 40,\n      },\n      {\n        text: '50',\n        value: 50,\n      },\n    ],\n    hidePageListOnlyOnePage: true,\n    sizePerPageRenderer: sizePerPageRenderer,\n  };\n  let searchProps: any = {\n    placeholder: searchPlaceholder,\n  };\n\n  const handleTableChange = (\n    type,\n    {\n      data,\n      cellEdit,\n      page,\n      sizePerPage,\n      filters,\n      sortField,\n      sortOrder,\n      searchText,\n    },\n  ) => {\n    // console.log({type});\n    if (type === 'cellEdit' && isEditModify) {\n      onUpdateItem &&\n        onUpdateItem(cellEdit.newValue, cellEdit.dataField, cellEdit.rowId);\n    }\n    if (type === 'pagination' && _.isEmpty(filters)) {\n      // if (sizePerPage > totalSize) return alert(\"You have not more records.\")\n      // if (page * sizePerPage > totalSize) return alert(\"You have not more records.\")\n      onPageSizeChange && onPageSizeChange(page, sizePerPage);\n    }\n    if (type === 'filter' || (type === 'pagination' && !_.isEmpty(filters))) {\n      if (type === 'pagination') {\n        if (sizePerPage > totalSize) return alert('You have not more records.');\n        if (page * sizePerPage > totalSize)\n          return alert('You have not more records.');\n      }\n      let filter: any = {};\n      for (const [key, value] of Object.entries(filters)) {\n        const values: any = value;\n        const object = { [key]: values.filterVal };\n        filter = Object.assign(filter, object);\n      }\n      if (onFilter)\n        debounce(() => {\n          onFilter(\n            type,\n            filter,\n            type === 'filter' && page === 1 ? 0 : page,\n            sizePerPage,\n          );\n        });\n    }\n    if (type === 'search') {\n      debounce(() => {\n        onFilter && onFilter(type, { srText: searchText }, page, sizePerPage);\n      });\n    }\n    if (type === 'sort') {\n      let result;\n      if (sortOrder === 'asc') {\n        result = data.sort((a, b) => {\n          if (a[sortField] > b[sortField]) {\n            return 1;\n          } else if (b[sortField] > a[sortField]) {\n            return -1;\n          }\n          return 0;\n        });\n      } else {\n        result = data.sort((a, b) => {\n          if (a[sortField] > b[sortField]) {\n            return -1;\n          } else if (b[sortField] > a[sortField]) {\n            return 1;\n          }\n          return 0;\n        });\n      }\n    }\n  };\n\n  const CustomToggleList = ({ columns, onColumnToggle, toggles }) => (\n    <div className='btn-group btn-group-toggle' data-toggle='buttons'>\n      {columns\n        .map(column => ({\n          ...column,\n          toggle: toggles[column.dataField],\n        }))\n        .map((column, index) => {\n          if (index > 0) {\n            return (\n              <button\n                type='button'\n                key={column.dataField}\n                className={` btn btn-primary  btn-sm whitespace-nowrap ${\n                  column.toggle ? 'active' : ''\n                }`}\n                data-toggle='button'\n                aria-pressed={column.toggle ? 'true' : 'false'}\n                onClick={() => onColumnToggle(column.dataField)}\n              >\n                {column.text}\n              </button>\n            );\n          }\n        })}\n    </div>\n  );\n\n  const rowStyle = (row, rowIndex) => {\n    if (row?.isAnyCritical || (row?.isAnyABNFlag && row?.isAnyCritical)) {\n      return {\n        backgroundColor: '#FF0000',\n        color: '#FFFF00',\n      };\n    } else if (row?.isAnyABNFlag) {\n      return {\n        backgroundColor: '#FFFF00',\n        color: '#FF0000',\n      };\n    }\n  };\n\n  return (\n    <PaginationProvider\n      pagination={paginationFactory(\n        totalSize !== 0 ? options : { page, sizePerPage, totalSize },\n      )}\n      keyField={id}\n      columns={columns}\n      data={data}\n    >\n      {({ paginationProps, paginationTableProps }) => (\n        <ToolkitProvider\n          keyField={id}\n          bootstrap4\n          data={data}\n          columns={columns}\n          search\n          exportCSV={{\n            fileName: `${fileName}_${dayjs(new Date()).format(\n              'YYYY-MM-DD HH:mm',\n            )}.csv`,\n            noAutoBOM: false,\n            blobType: 'text/csv;charset=ansi',\n            exportAll: false,\n            onlyExportFiltered: true,\n          }}\n          columnToggle\n        >\n          {props => (\n            <div>\n              <div className='flex items-center gap-2 flex-wrap'>\n                <SearchBar\n                  {...searchProps}\n                  {...props.searchProps}\n                  onChange={value => {\n                    console.log({ value });\n                  }}\n                  style={{ marginTop: 10 }}\n                />\n                <ClearSearchButton\n                  className={`inline-flex bg-gray-500 items-center small outline shadow-sm  font-medium  disabled:opacity-50 disabled:cursor-not-allowed text-center h-9 text-white`}\n                  {...props.searchProps}\n                />\n                <button\n                  className={`px-2 focus:outline-none bg-gray-500 items-center  outline shadow-sm  font-medium  text-center rounded-md h-9 text-white`}\n                  onClick={clearAllFilter}\n                >\n                  Clear all filters\n                </button>\n                <ExportCSVButton\n                  className={`inline-flex bg-gray-500 items-center  small outline shadow-sm  font-medium  disabled:opacity-50 disabled:cursor-not-allowed text-center h-9 text-white`}\n                  {...props.csvProps}\n                >\n                  Export CSV!!\n                </ExportCSVButton>\n                {isFilterOpen ? (\n                  <Buttons.Button\n                    size='medium'\n                    type='outline'\n                    onClick={() => {\n                      setIsFilterOpen(!isFilterOpen);\n                    }}\n                  >\n                    <Icons.IconFa.FaChevronUp />\n                  </Buttons.Button>\n                ) : (\n                  <Buttons.Button\n                    size='medium'\n                    type='outline'\n                    onClick={() => {\n                      setIsFilterOpen(!isFilterOpen);\n                    }}\n                  >\n                    <Icons.IconFa.FaChevronDown />\n                  </Buttons.Button>\n                )}\n                <Tooltip\n                  tooltipText='All generate report update'\n                  position='top'\n                >\n                  <Buttons.Button\n                    size='medium'\n                    type='outline'\n                    disabled={\n                      !data.some(item => item.deliveryStatus === 'Pending')\n                    }\n                    onClick={() => {\n                      onUpdateDeliveryStatus && onUpdateDeliveryStatus();\n                    }}\n                  >\n                    <Icons.IconTb.TbExchange />\n                  </Buttons.Button>\n                </Tooltip>\n                <div className='flex gap-4'>\n                  {statusData.map(status => (\n                    <button\n                      key={status.code}\n                      className={`px-4 py-2 bg-${status.color}-600 text-white rounded`}\n                      onClick={() => onCheckHoldRecord?.(status.code)}\n                    >\n                      {status.value}\n                    </button>\n                  ))}\n                </div>\n              </div>\n\n              {isFilterOpen && (\n                <div className={'mb-2 overflow-auto h-10'}>\n                  <CustomToggleList\n                    contextual='primary'\n                    className='list-custom-class'\n                    btnClassName='list-btn-custom-class'\n                    {...props.columnToggleProps}\n                  />\n                </div>\n              )}\n              <div className='scrollTable'>\n                <BootstrapTable\n                  remote\n                  {...props.baseProps}\n                  noDataIndication='Table is Empty'\n                  hover\n                  {...paginationTableProps}\n                  filter={filterFactory()}\n                  headerClasses='bg-gray-500 text-white whitespace-nowrap'\n                  onTableChange={handleTableChange}\n                  rowStyle={rowStyle}\n                />\n              </div>\n\n              <div className='flex items-center gap-2 mt-2'>\n                <Icons.IconContext\n                  color='#fff'\n                  size='25'\n                  style={{\n                    backgroundColor: '#808080',\n                    width: 32,\n                    height: 32,\n                    borderRadius: 16,\n                    align: 'center',\n                    padding: 4,\n                  }}\n                  onClick={async () => {\n                    onPagination && onPagination('next');\n                  }}\n                >\n                  <Icons.IconBi.BiSkipNext />\n                </Icons.IconContext>\n                <Icons.IconContext\n                  color='#fff'\n                  size='25'\n                  style={{\n                    backgroundColor: '#808080',\n                    width: 32,\n                    height: 32,\n                    borderRadius: 16,\n                    align: 'center',\n                    padding: 4,\n                  }}\n                  onClick={async () => {\n                    onPagination && onPagination('prev');\n                  }}\n                >\n                  <Icons.IconBi.BiSkipPrevious />\n                </Icons.IconContext>\n              </div>\n            </div>\n          )}\n        </ToolkitProvider>\n      )}\n    </PaginationProvider>\n  );\n};\n","/* eslint-disable */\nimport React, { useState } from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport _ from 'lodash';\nimport ToolkitProvider, {\n  Search,\n  CSVExport,\n} from 'react-bootstrap-table2-toolkit/dist/react-bootstrap-table2-toolkit';\nimport cellEditFactory from 'react-bootstrap-table2-editor';\nimport paginationFactory, {\n  PaginationProvider,\n  PaginationListStandalone,\n  SizePerPageDropdownStandalone,\n  PaginationTotalStandalone,\n} from 'react-bootstrap-table2-paginator';\nimport filterFactory from 'react-bootstrap-table2-filter';\nimport dayjs from 'dayjs';\nimport '@/library/components/organisms/style.css';\nimport { debounce } from '@/core-utils';\n\nimport { Buttons, Icons, Tooltip } from '@/library/components';\n\nconst { SearchBar, ClearSearchButton } = Search;\nconst { ExportCSVButton } = CSVExport;\n\ninterface TableBootstrapProps {\n  id: string;\n  data: any;\n  totalSize?: number;\n  searchPlaceholder?: string;\n  page?: number;\n  sizePerPage?: number;\n  columns: any;\n  fileName: string;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  isSelectRow?: boolean;\n  selectedItem?: any;\n  isPagination?: boolean;\n  onDelete?: (selectedItem: any) => void;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (value: any, dataField: string, id: string) => void;\n  onPageSizeChange?: (page: number, limit: number) => void;\n  onUpdateDeliveryStatus?: () => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n  clearAllFilter?: () => void;\n  onClickRow?: (item: any, index: number) => void;\n}\nexport const TableBootstrap = ({\n  id,\n  data,\n  totalSize = 10,\n  searchPlaceholder = 'Search...',\n  page = 0,\n  sizePerPage = 10,\n  columns,\n  fileName,\n  isEditModify,\n  isSelectRow,\n  selectedItem,\n  isPagination = true,\n  onSelectedRow,\n  onUpdateItem,\n  onPageSizeChange,\n  onUpdateDeliveryStatus,\n  onFilter,\n  clearAllFilter,\n  onClickRow,\n}: TableBootstrapProps) => {\n  const [selectedRow, setSelectedRow] = useState<any[]>();\n  const [isFilterOpen, setIsFilterOpen] = useState<boolean>(false);\n\n  const customTotal = (from, to, size) => {\n    return (\n      <>\n        <div className='clearfix' />\n        <span>\n          Showing {from} to {to} of {size} Results\n        </span>\n      </>\n    );\n  };\n\n  const sizePerPageRenderer = ({\n    options,\n    currSizePerPage,\n    onSizePerPageChange,\n  }) => (\n    <div className='btn-group items-center' role='group'>\n      <input\n        type='number'\n        min='0'\n        placeholder='No'\n        onChange={(e: any) => {\n          if (e.target.value) {\n            onSizePerPageChange(e.target.value);\n          }\n        }}\n        className='mr-2 ml-2 leading-4 p-2 w-14 focus:outline-none focus:ring block  shadow-sm sm:text-base border border-gray-300 rounded-md'\n      />\n      {options.map(option => (\n        <button\n          key={option.text}\n          type='button'\n          onClick={() => onSizePerPageChange(option.page)}\n          className={`btn  ${\n            currSizePerPage === `${option.page}` ? 'bg-primary' : 'bg-grey'\n          }`}\n        >\n          {option.text}\n        </button>\n      ))}\n    </div>\n  );\n  const options = {\n    cutome: true,\n    totalSize: totalSize,\n    paginationSize: 5,\n    pageStartIndex: 0,\n    firstPageText: '<<',\n    prePageText: '<',\n    nextPageText: '>',\n    lastPageText: '>>',\n    disablePageTitle: true,\n    paginationTotalRenderer: customTotal,\n    hideSizePerPage: true,\n    showTotal: false,\n    alwaysShowAllBtns: true,\n    sizePerPageList: [\n      {\n        text: '10',\n        value: 10,\n      },\n      {\n        text: '20',\n        value: 20,\n      },\n      {\n        text: '30',\n        value: 30,\n      },\n      {\n        text: '40',\n        value: 40,\n      },\n      {\n        text: '50',\n        value: 50,\n      },\n    ],\n    hidePageListOnlyOnePage: true,\n    sizePerPageRenderer: sizePerPageRenderer,\n  };\n  let searchProps: any = {\n    placeholder: searchPlaceholder,\n  };\n\n  const handleTableChange = (\n    type,\n    {\n      data,\n      cellEdit,\n      page,\n      sizePerPage,\n      filters,\n      sortField,\n      sortOrder,\n      searchText,\n    },\n  ) => {\n    // console.log({type});\n    if (type === 'cellEdit' && isEditModify) {\n      onUpdateItem &&\n        onUpdateItem(cellEdit.newValue, cellEdit.dataField, cellEdit.rowId);\n    }\n    if (type === 'pagination' && _.isEmpty(filters)) {\n      // if (sizePerPage > totalSize) return alert(\"You have not more records.\")\n      // if (page * sizePerPage > totalSize) return alert(\"You have not more records.\")\n      onPageSizeChange && onPageSizeChange(page, sizePerPage);\n    }\n    if (type === 'filter' || (type === 'pagination' && !_.isEmpty(filters))) {\n      if (type === 'pagination') {\n        if (sizePerPage > totalSize) return alert('You have not more records.');\n        if (page * sizePerPage > totalSize)\n          return alert('You have not more records.');\n      }\n      let filter: any = {};\n      for (const [key, value] of Object.entries(filters)) {\n        const values: any = value;\n        const object = { [key]: values.filterVal };\n        filter = Object.assign(filter, object);\n      }\n      if (onFilter)\n        debounce(() => {\n          onFilter(\n            type,\n            filter,\n            type === 'filter' && page === 1 ? 0 : page,\n            sizePerPage,\n          );\n        });\n    }\n    if (type === 'search') {\n      debounce(() => {\n        onFilter && onFilter(type, { srText: searchText }, page, sizePerPage);\n      });\n    }\n    if (type === 'sort') {\n      let result;\n      if (sortOrder === 'asc') {\n        result = data.sort((a, b) => {\n          if (a[sortField] > b[sortField]) {\n            return 1;\n          } else if (b[sortField] > a[sortField]) {\n            return -1;\n          }\n          return 0;\n        });\n      } else {\n        result = data.sort((a, b) => {\n          if (a[sortField] > b[sortField]) {\n            return -1;\n          } else if (b[sortField] > a[sortField]) {\n            return 1;\n          }\n          return 0;\n        });\n      }\n    }\n  };\n\n  const CustomToggleList = ({ columns, onColumnToggle, toggles }) => (\n    <div className='btn-group btn-group-toggle' data-toggle='buttons'>\n      {columns\n        .map(column => ({\n          ...column,\n          toggle: toggles[column.dataField],\n        }))\n        .map((column, index) => {\n          if (index > 0) {\n            return (\n              <button\n                type='button'\n                key={column.dataField}\n                className={` btn btn-primary  btn-sm whitespace-nowrap ${\n                  column.toggle ? 'active' : ''\n                }`}\n                data-toggle='button'\n                aria-pressed={column.toggle ? 'true' : 'false'}\n                onClick={() => onColumnToggle(column.dataField)}\n              >\n                {column.text}\n              </button>\n            );\n          }\n        })}\n    </div>\n  );\n\n  const rowEvents = {\n    onClick: (e, row, rowIndex) => {\n      onClickRow && onClickRow(row, rowIndex);\n    },\n  };\n\n  // const rowStyle = (row, rowIndex) => {\n  //   if (row._id == selectedItem?._id) {\n  //     return {backgroundColor: '#000000'};\n  //   }\n  // };\n\n  const rowStyle = (row, rowIndex) => {\n    switch (row?.colorScheme?.envRangeColor) {\n      case 'BOTH':\n        return {\n          backgroundColor: row?.colorScheme?.cellColor,\n          color: row?.colorScheme?.fontColor,\n        };\n        break;\n      case 'BACKGROUND':\n        return {\n          backgroundColor: row?.colorScheme?.cellColor,\n        };\n        break;\n      case 'FONT':\n        return {\n          color: row?.colorScheme?.fontColor,\n        };\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <PaginationProvider\n      pagination={paginationFactory(\n        totalSize !== 0 ? options : { page, sizePerPage, totalSize },\n      )}\n      keyField={id}\n      columns={columns}\n      data={data}\n    >\n      {({ paginationProps, paginationTableProps }) => (\n        <ToolkitProvider\n          keyField={id}\n          bootstrap4\n          data={data}\n          columns={columns}\n          search\n          exportCSV={{\n            fileName: `${fileName}_${dayjs(new Date()).format(\n              'YYYY-MM-DD HH:mm',\n            )}.csv`,\n            noAutoBOM: false,\n            blobType: 'text/csv;charset=ansi',\n            exportAll: false,\n            onlyExportFiltered: true,\n          }}\n          columnToggle\n        >\n          {props => (\n            <div>\n              <div className='flex items-center gap-2 flex-wrap'></div>\n              <div className='scrollTable'>\n                <BootstrapTable\n                  remote\n                  {...props.baseProps}\n                  noDataIndication='Table is Empty'\n                  hover\n                  {...paginationTableProps}\n                  filter={filterFactory()}\n                  headerClasses='bg-gray-500 text-white whitespace-nowrap'\n                  onTableChange={handleTableChange}\n                  rowEvents={rowEvents}\n                  rowStyle={rowStyle}\n                />\n              </div>\n            </div>\n          )}\n        </ToolkitProvider>\n      )}\n    </PaginationProvider>\n  );\n};\n","import React from 'react';\nimport {observer} from 'mobx-react';\nimport {\n  Form,\n} from '@/library/components';\nimport {Confirm} from '@/library/models';\nimport {TableBootstrap} from './table-bootstrap.components';\n\ninterface OrderDeliveredProps {\n  data: any;\n  totalSize: number;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  onDelete?: (selectedItem: Confirm) => void;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (value: any, dataField: string, id: string) => void;\n  onPageSizeChange?: (page: number, totalSize: number) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n}\n\nexport const OrderDeliveredList = observer((props: OrderDeliveredProps) => {\n  return (\n    <>\n      <div style={{position: 'relative'}}>\n        <TableBootstrap\n          id='_id'\n          data={props.data}\n          totalSize={props.totalSize}\n          columns={[\n            {\n              dataField: '_id',\n              text: 'Id',\n              hidden: true,\n              csvExport: false,\n            },\n            {\n              dataField: 'deliveryId',\n              text: 'Delivery Id',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'labId',\n              text: 'Lab Id',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'orderId',\n              text: 'Order Id',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'panelCode',\n              text: 'Panel Code',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'panelName',\n              text: 'Panel Name',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'testCode',\n              text: 'Test Code',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'testName',\n              text: 'Test Name',\n              sort: true,\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n            },\n            {\n              dataField: 'analyteCode',\n              text: 'Analyte Code',\n              sort: true,\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n            },\n            {\n              dataField: 'analyteName',\n              text: 'Analyte Name',\n              sort: true,\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n            },\n            {\n              dataField: 'rep',\n              text: 'Rep',\n              sort: true,\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n            },\n            {\n              dataField: 'delivered',\n              text: 'Delivered',\n              sort: true,\n              csvFormatter: (col, row) =>\n                `${row.delivered ? (row.delivered ? 'Yes' : 'No') : 'No'}`,\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <Form.Toggle disabled={true} value={row.delivered} />\n                  </>\n                );\n              },\n            },\n          ]}\n          isEditModify={props.isEditModify}\n          isSelectRow={true}\n          fileName='Order Delivered'\n          onSelectedRow={rows => {\n            props.onSelectedRow &&\n              props.onSelectedRow(rows.map((item: any) => item._id));\n          }}\n          onUpdateItem={(value: any, dataField: string, id: string) => {\n            props.onUpdateItem && props.onUpdateItem(value, dataField, id);\n          }}\n          onPageSizeChange={(page, size) => {\n            props.onPageSizeChange && props.onPageSizeChange(page, size);\n          }}\n          onFilter={(type, filter, page, size) => {\n            props.onFilter && props.onFilter(type, filter, page, size);\n          }}\n          clearAllFilter={() => {}}\n        />\n      </div>\n    </>\n  );\n});\n","/* eslint-disable  */\nimport React, {useEffect, useState} from 'react';\nimport {Container} from 'reactstrap';\nimport _ from 'lodash';\nimport {Icons, Tooltip, Form, Modal} from '@components';\nimport {pdf, PDFViewer, Document} from '@react-pdf/renderer';\n\nimport {\n  PdfTemp0001,\n  PdfTemp0002,\n  PdfTemp0003,\n  PdfTemp0004,\n  PdfTemp0005,\n  PdfTemp0006,\n  PdfTemp0007,\n  PdfTemp0008,\n} from '@/features/report-builder/report-template/components';\n\nimport printjs from 'print-js';\n\ninterface ModalGenerateReportsProps {\n  show?: boolean;\n  title?: string;\n  data?: any;\n  templateDetails?: any;\n  onClick: (data: any, item: any, index: number) => void;\n  onClose: () => void;\n  onReceiptUpload: (file: any, type: string) => void;\n}\n\nexport const ModalGenerateReports = ({\n  show = false,\n  data,\n  templateDetails,\n  onClose,\n  onReceiptUpload,\n}: ModalGenerateReportsProps) => {\n  const [reportList, setReportList] = useState<any>();\n  const [showModal, setShowModal] = React.useState(show);\n  const [isWithHeader, setWithHeader] = useState(true);\n  const [isPdfViewer, setPdfViewer] = useState(false);\n\n  useEffect(() => {\n    setShowModal(show);\n  }, [show]);\n\n  useEffect(() => {\n    if (data) {\n      let newObj = _.mapKeys(data, (value, key) => key.split(' -')[0]);\n      let arrReportList: any = [];\n      for (const values of Object.entries(newObj)) {\n        let templateReportOrder = 0;\n        values[1].map(item =>\n          item?.patientResultList?.map(e => {\n            if (e.reportTemplate?.split(' - ')[0] == values[0]) {\n              templateReportOrder = e.reportTemplateOrder;\n            }\n          }),\n        );\n        arrReportList.push({\n          template: values[0],\n          patientReports: values[1],\n          order: templateReportOrder,\n        });\n      }\n      arrReportList = _.orderBy(arrReportList, 'order', 'asc');\n      setReportList(arrReportList);\n    }\n  }, [data]);\n\n  const getReports = reports => {\n    const documentTitle = 'Delivery Queue';\n    return (\n      <Document title={documentTitle}>\n        {reports.map(item => (\n          <>\n            {item.template == 'TEMP0001' &&\n              _.uniqBy(item?.patientReports, 'labId').map(\n                (patientReports: any) => (\n                  <PdfTemp0001\n                    data={{\n                      patientReports: {\n                        ...patientReports,\n                        patientResultList:\n                          patientReports?.patientResultList?.filter(\n                            item =>\n                              item?.reportTemplate?.split(' -')[0] ==\n                              'TEMP0001',\n                          ),\n                      },\n                      pageBranding: templateDetails?.find(\n                        item => item.templateCode == 'TEMP0001',\n                      ),\n                    }}\n                    isWithHeader={isWithHeader}\n                  />\n                ),\n              )}\n\n            {item.template == 'TEMP0002' &&\n              _.uniqBy(item?.patientReports, 'labId').map(\n                (patientReports: any) => (\n                  <PdfTemp0002\n                    data={{\n                      patientReports: {\n                        ...patientReports,\n                        patientResultList:\n                          patientReports?.patientResultList?.filter(\n                            item =>\n                              item?.reportTemplate?.split(' -')[0] ==\n                              'TEMP0002',\n                          ),\n                      },\n                      pageBranding: templateDetails?.find(\n                        item => item.templateCode == 'TEMP0002',\n                      ),\n                    }}\n                    isWithHeader={isWithHeader}\n                  />\n                ),\n              )}\n\n            {item.template == 'TEMP0003' &&\n              _.uniqBy(item?.patientReports, 'labId').map(\n                (patientReports: any) => (\n                  <PdfTemp0003\n                    data={{\n                      patientReports: {\n                        ...patientReports,\n                        patientResultList:\n                          patientReports?.patientResultList?.filter(\n                            item =>\n                              item?.reportTemplate?.split(' -')[0] ==\n                              'TEMP0003',\n                          ),\n                      },\n                      pageBranding: templateDetails?.find(\n                        item => item.templateCode == 'TEMP0003',\n                      ),\n                    }}\n                    isWithHeader={isWithHeader}\n                  />\n                ),\n              )}\n            {item.template == 'TEMP0004' &&\n              _.uniqBy(item?.patientReports, 'labId').map(\n                (patientReports: any) => (\n                  <PdfTemp0004\n                    data={{\n                      patientReports: {\n                        ...patientReports,\n                        patientResultList:\n                          patientReports?.patientResultList?.filter(\n                            item =>\n                              item?.reportTemplate?.split(' -')[0] ==\n                              'TEMP0004',\n                          ),\n                      },\n                      pageBranding: templateDetails?.find(\n                        item => item?.templateCode == 'TEMP0004',\n                      ),\n                    }}\n                    isWithHeader={isWithHeader}\n                  />\n                ),\n              )}\n            {item.template == 'TEMP0005' &&\n              _.uniqBy(item?.patientReports, 'labId').map(\n                (patientReports: any) => (\n                  <PdfTemp0005\n                    data={{\n                      patientReports: {\n                        ...patientReports,\n                        patientResultList:\n                          patientReports?.patientResultList?.filter(\n                            item =>\n                              item?.reportTemplate?.split(' -')[0] ==\n                              'TEMP0005',\n                          ),\n                      },\n                      pageBranding: templateDetails?.find(\n                        item => item.templateCode == 'TEMP0005',\n                      ),\n                    }}\n                    isWithHeader={isWithHeader}\n                  />\n                ),\n              )}\n            {item.template == 'TEMP0006' &&\n              _.uniqBy(item?.patientReports, 'labId').map(\n                (patientReports: any) => (\n                  <PdfTemp0006\n                    data={{\n                      patientReports: {\n                        ...patientReports,\n                        patientResultList:\n                          patientReports?.patientResultList?.filter(\n                            item =>\n                              item?.reportTemplate?.split(' -')[0] ==\n                              'TEMP0006',\n                          ),\n                      },\n                      pageBranding: templateDetails?.find(\n                        item => item.templateCode == 'TEMP0006',\n                      ),\n                    }}\n                    isWithHeader={isWithHeader}\n                  />\n                ),\n              )}\n            {item.template == 'TEMP0007' &&\n              _.uniqBy(item?.patientReports, 'labId').map(\n                (patientReports: any) => (\n                  <PdfTemp0007\n                    data={{\n                      patientReports: {\n                        ...patientReports,\n                        patientResultList:\n                          patientReports?.patientResultList?.filter(\n                            item =>\n                              item?.reportTemplate?.split(' -')[0] ==\n                              'TEMP0007',\n                          ),\n                      },\n                      pageBranding: templateDetails?.find(\n                        item => item.templateCode == 'TEMP0007',\n                      ),\n                    }}\n                    isWithHeader={isWithHeader}\n                  />\n                ),\n              )}\n            {item.template == 'TEMP0008' &&\n              _.uniqBy(item?.patientReports, 'labId').map(\n                (patientReports: any) => (\n                  <PdfTemp0008\n                    data={{\n                      patientReports: {\n                        ...patientReports,\n                        patientResultList:\n                          patientReports?.patientResultList?.filter(\n                            item =>\n                              item?.reportTemplate?.split(' -')[0] ==\n                              'TEMP0008',\n                          ),\n                      },\n                      pageBranding: templateDetails?.find(\n                        item => item.templateCode == 'TEMP0008',\n                      ),\n                    }}\n                    isWithHeader={isWithHeader}\n                  />\n                ),\n              )}\n          </>\n        ))}\n      </Document>\n    );\n  };\n\n  return (\n    <Container>\n      {showModal && (\n        <>\n          <div className='justify-center items-center  overflow-x-hidden overflow-y-auto fixed inset-0 z-50 outline-none focus:outline-none'>\n            <div className='relative w-auto my-6 mx-auto max-w-3xl'>\n              <div className='border-0 rounded-lg shadow-lg relative flex flex-col w-full bg-white outline-none focus:outline-none'>\n                <div className='flex items-start justify-between p-3 border-b border-solid border-gray-300 rounded-t'>\n                  <h3 className='text-3xl font-semibold'>\n                    {'Generate Reports'}\n                  </h3>\n                  <button\n                    className='p-1  border-0 text-black opacity-1 ml-6 float-right text-3xl leading-none font-semibold outline-none focus:outline-none'\n                    onClick={() => {\n                      setShowModal(false);\n                      onClose && onClose();\n                    }}\n                  >\n                    <span className=' text-black h-6 w-6 text-2xl block outline-none focus:outline-none'>\n                      ×\n                    </span>\n                  </button>\n                </div>\n                <div className='relative p-2 flex-auto'>\n                  <div className='flex flex-row items-center justify-center gap-2'>\n                    {data && (\n                      <div className='flex flex-col gap-3'>\n                        <Form.InputRadio\n                          label='Report Type'\n                          labelStyle={{fontWeight: 'bold', fontSize: 16}}\n                          value={isWithHeader ? 'withHeader' : 'withoutHeader'}\n                          values={[\n                            {value: 'withHeader', label: 'With Header'},\n                            {value: 'withoutHeader', label: 'Without Header'},\n                          ]}\n                          onChange={value => {\n                            setWithHeader(value == 'withHeader' ? true : false);\n                          }}\n                        />\n                        <div className='flex flex-row content-center justify-center gap-2'>\n                          <Tooltip tooltipText='View'>\n                            <Icons.IconContext\n                              color='#fff'\n                              size='25'\n                              style={{\n                                backgroundColor: '#808080',\n                                width: 32,\n                                height: 32,\n                                borderRadius: 16,\n                                align: 'center',\n                                padding: 4,\n                              }}\n                              onClick={async () => {\n                                setPdfViewer(true);\n                                onClose && onClose();\n                              }}\n                            >\n                              {Icons.getIconTag(Icons.Iconmd.MdOutlinePreview)}\n                            </Icons.IconContext>\n                          </Tooltip>\n                          <Tooltip tooltipText='Print'>\n                            <Icons.IconContext\n                              color='#fff'\n                              size='25'\n                              style={{\n                                backgroundColor: '#808080',\n                                width: 32,\n                                height: 32,\n                                borderRadius: 16,\n                                align: 'center',\n                                padding: 4,\n                              }}\n                              onClick={async () => {\n                                const doc = await getReports(reportList);\n                                const blob = await pdf(doc).toBlob();\n                                const blobURL = URL.createObjectURL(blob);\n                                printjs({\n                                  printable: blobURL,\n                                  type: 'pdf',\n                                  showModal: true,\n                                });\n                                onClose && onClose();\n                              }}\n                            >\n                              {Icons.getIconTag(Icons.IconBi.BiPrinter)}\n                            </Icons.IconContext>\n                          </Tooltip>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n                <div className='flex items-center  p-3 border-t border-solid border-gray-300 rounded-b justify-between'>\n                  <span className='text-red'>\n                    Note: ResultType FR & BO report opening new tab runtime\n                  </span>\n                  <button\n                    className='text-red background-transparent font-bold uppercase  text-sm outline-none focus:outline-none'\n                    type='button'\n                    style={{transition: 'all .15s ease'}}\n                    onClick={() => {\n                      setShowModal(false);\n                      onClose && onClose();\n                    }}\n                  >\n                    Close\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className='opacity-25 fixed inset-0 z-40 bg-black'></div>\n        </>\n      )}\n\n      <Modal\n        title='Delivery Queue Reports'\n        show={isPdfViewer}\n        close={() => {\n          setPdfViewer(false);\n        }}\n        autoClose={\n          _.has(reportList, 'TEMP0007')\n            ? _.size(reportList) == 1\n              ? true\n              : false\n            : _.has(reportList, 'TEMP0008')\n            ? _.size(reportList) == 1\n              ? true\n              : false\n            : false\n        }\n        children={\n          isPdfViewer ? (\n            <PDFViewer\n              style={{\n                width: window.innerWidth,\n                height: window.innerHeight / 1.2,\n              }}\n              showToolbar={false}\n            >\n              {getReports(reportList)}\n            </PDFViewer>\n          ) : null\n        }\n      />\n    </Container>\n  );\n};\n","import React, { useState, useEffect, useMemo } from 'react';\nimport { observer } from 'mobx-react';\nimport _ from 'lodash';\nimport {\n  Header,\n  PageHeading,\n  PageHeadingLabDetails,\n  Toast,\n} from '@/library/components';\nimport { useForm } from 'react-hook-form';\nimport { RouterFlow } from '@/flows';\nimport {\n  ReportDeliveryList,\n  OrderDeliveredList,\n  ModalGenerateReports,\n} from '../components';\nimport '@/library/assets/css/accordion.css';\nimport { useStores } from '@/stores';\nimport 'react-accessible-accordion/dist/fancy-example.css';\n\nconst DeliveryQueue = observer(() => {\n  const { deliveryQueueStore, routerStore, loginStore, reportSettingStore } =\n    useStores();\n\n  const {\n    control,\n    handleSubmit,\n    formState: { errors },\n    setValue,\n  } = useForm();\n\n  const [modalGenerateReports, setModalGenerateReports] = useState<any>();\n  const [selectId, setSelectId] = useState('');\n  const [reloadTable, setReloadTable] = useState<boolean>(false);\n  const [holdRecord, setHoldRecord] = useState<string>('');\n\n  const getDeliveryList = () => {\n    const loginDetails = loginStore.login;\n    if (loginDetails?.role == 'CORPORATE_PORTAL') {\n      deliveryQueueStore.deliveryQueueService\n        .findByFields({\n          input: {\n            filter: {\n              clientCode: loginDetails.lab,\n            },\n          },\n        })\n        .then(res => {\n          if (res.findByFieldsDeliveryQueue.success) {\n            deliveryQueueStore.updateReportDeliveryList({\n              deliveryQueues: {\n                data: res.findByFieldsDeliveryQueue?.data,\n                paginatorInfo: {\n                  count: res.findByFieldsDeliveryQueue?.data?.length,\n                },\n              },\n            });\n          }\n        });\n      return;\n    } else {\n      deliveryQueueStore.deliveryQueueService.listDeliveryQueue();\n      return;\n    }\n  };\n\n  useEffect(() => {\n    getDeliveryList();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const getValue = value =>\n    typeof value === 'string' ? value?.toUpperCase() : value;\n\n  const filterPlainArray = (array, filters) => {\n    const filterKeys = Object.keys(filters);\n    // console.log({filterKeys});\n    return array.filter(item => {\n      return filterKeys.every(key => {\n        console.log({ key });\n        if (!filters[key].length) return true;\n        return filters[key].find(\n          filter => getValue(filter) === getValue(item[key]),\n        );\n      });\n    });\n  };\n\n  const getReportDeliveryList = arr => {\n    const list: any = [];\n    const grouped = _.groupBy(arr, 'reportPriority');\n    if (grouped?.Progressive) {\n      const allProgressive: any = grouped?.Progressive;\n      const result = _.map(\n        _.groupBy(allProgressive, function (item) {\n          return item.labId && item.panelCode;\n        }),\n        g => _.maxBy(g, 'deliveryId'),\n      );\n      list.push(...result);\n    }\n    if (grouped['All Together']) {\n      const arrAllTogather: any = grouped['All Together'];\n      const result = _.map(_.groupBy(arrAllTogather, 'labId'), g =>\n        _.maxBy(g, 'deliveryId'),\n      );\n      list.push(...result);\n    }\n    if (grouped['One Today']) {\n      const arrOneToday: any = grouped['One Today'];\n      const result: any = _.map(\n        _.groupBy(arrOneToday, function (item) {\n          return item.labId && item.approvalDate;\n        }),\n      );\n      result?.filter(item => {\n        if (item?.find(o => o?.reportType == 'Final')) {\n          list.push(item?.find(o => o?.reportType == 'Final'));\n        } else {\n          list.push(\n            ..._.map(\n              _.groupBy(item, function (o) {\n                return o.labId && o.approvalDate;\n              }),\n              g => _.maxBy(g, 'deliveryId'),\n            ),\n          );\n        }\n      });\n    }\n    if (grouped.Daily) {\n      const arrDaily: any = grouped.Daily;\n      const result: any = _.map(\n        _.groupBy(arrDaily, function (item) {\n          return item.labId && item.approvalDate;\n        }),\n      );\n      result?.filter(item => {\n        if (item?.find(o => o?.reportType == 'Final')) {\n          list.push(item?.find(o => o?.reportType == 'Final'));\n        } else {\n          list.push(\n            ..._.map(\n              _.groupBy(item, function (o) {\n                return o.labId && o.approvalDate;\n              }),\n              g => _.maxBy(g, 'deliveryId'),\n            ),\n          );\n        }\n      });\n    }\n    return list;\n  };\n\n  const getOrderDeliveredList = async (item: any) =>\n    new Promise<any>((resolve, reject) => {\n      let filter: any = {};\n      if (item.reportPriority == 'Progressive') {\n        filter = {\n          labId: item.labId,\n          panelCode: item.panelCode,\n        };\n      } else if (\n        (item.reportPriority == 'One Today' ||\n          item.reportPriority == 'Daily') &&\n        item.reportType == 'Interim'\n      ) {\n        filter = {\n          labId: item.labId,\n          reportType: 'Interim',\n          approvalDate: item?.approvalDate,\n        };\n      } else {\n        filter = {\n          labId: item.labId,\n        };\n      }\n      deliveryQueueStore.deliveryQueueService\n        .findByFields({\n          input: {\n            filter,\n          },\n        })\n        .then(res => {\n          if (res.findByFieldsDeliveryQueue.success) {\n            let data = res.findByFieldsDeliveryQueue.data;\n            data = _.unionBy(data, (o: any) => {\n              return o.patientResultId;\n            });\n            data = _.orderBy(data, 'deliveryId', 'desc');\n            resolve(data);\n          }\n        });\n    });\n\n  const updateRecords = async (payload: any) => {\n    const { type, id, visitId, ids } = payload;\n    if (type == 'cancel' || type == 'hold' || type == 'done') {\n      await deliveryQueueStore.deliveryQueueService\n        .updateDeliveryQueue({\n          input: {\n            _id: id,\n            visitId: visitId,\n            deliveryStatus:\n              type == 'cancel' ? 'Cancel' : type == 'hold' ? 'Hold' : 'Done',\n          },\n        })\n        .then(res => {\n          if (res.updateDeliveryQueue.success) {\n            Toast.success({\n              message: `😊 ${res.updateDeliveryQueue.message}`,\n            });\n          }\n        });\n    } else {\n      await deliveryQueueStore.deliveryQueueService\n        .updateDeliveryQueueByVisitIds({\n          input: {\n            filter: {\n              ids: ids,\n              visitId: visitId,\n              deliveryStatus: 'Done',\n            },\n          },\n        })\n        .then(res => {\n          if (res.updateByVisitIdsDeliveryQueue.success) {\n            Toast.success({\n              message: `😊 ${res.updateByVisitIdsDeliveryQueue.message}`,\n            });\n          }\n        });\n    }\n    if (global?.filter?.mode == 'pagination') {\n      deliveryQueueStore.deliveryQueueService.listDeliveryQueue(\n        global?.filter?.pageNo,\n        100,\n      );\n    } else if (global?.filter?.mode == 'filter') {\n      deliveryQueueStore.deliveryQueueService.filter({\n        input: {\n          type: global?.filter?.type,\n          filter: global?.filter?.filter,\n          page: global?.filter?.page,\n          limit: global?.filter?.limit,\n        },\n      });\n    } else {\n      deliveryQueueStore.deliveryQueueService.listDeliveryQueue();\n    }\n    setReloadTable(!reloadTable);\n  };\n\n  const reportDeliveryList = useMemo(\n    () => (\n      <ReportDeliveryList\n        data={\n          getReportDeliveryList(deliveryQueueStore.reportDeliveryList) || []\n        }\n        totalSize={\n          getReportDeliveryList(deliveryQueueStore.reportDeliveryList)?.length\n        }\n        isPagination={loginStore.login?.role == 'SYSADMIN' ? true : false}\n        selectedId={selectId}\n        holdRecord={holdRecord}\n        isDelete={RouterFlow.checkPermission(\n          routerStore.userPermission,\n          'Delete',\n        )}\n        isEditModify={RouterFlow.checkPermission(\n          routerStore.userPermission,\n          'Update',\n        )}\n        onUpdate={selectedItem => updateRecords(selectedItem)}\n        onFilter={(type, filter, page, limit) => {\n          global.filter = {\n            mode: 'filter',\n            type,\n            filter,\n            page,\n            limit,\n          };\n          if (loginStore.login?.role == 'SYSADMIN') {\n            deliveryQueueStore.deliveryQueueService.filter({\n              input: { type, filter, page, limit },\n            });\n          } else {\n            if (type == 'filter') {\n              console.log({\n                list: filterPlainArray(\n                  deliveryQueueStore.reportDeliveryListCopy,\n                  filter,\n                ),\n              });\n            } else {\n              if (filter.srText == '') {\n                return deliveryQueueStore.updateReportDeliveryList(\n                  deliveryQueueStore.reportDeliveryListCopy,\n                );\n              }\n              const list = deliveryQueueStore.reportDeliveryListCopy;\n              const data = list?.filter(res => {\n                return JSON.stringify(res)\n                  .toLocaleLowerCase()\n                  .match(filter.srText?.toLocaleLowerCase());\n              });\n              deliveryQueueStore.updateReportDeliveryList(data);\n            }\n          }\n        }}\n        onExpand={async item => {\n          setSelectId(item._id);\n          if (typeof item == 'object') {\n            getOrderDeliveredList(item).then(result => {\n              deliveryQueueStore.updateOrderDeliveredList(result);\n            });\n          } else {\n            deliveryQueueStore.updateOrderDeliveredList([]);\n          }\n        }}\n        onUpdateDeliveryStatus={() => {\n          const pendingItems = deliveryQueueStore.reportDeliveryList?.filter(\n            item => item.deliveryStatus === 'Pending',\n          );\n          const ids = pendingItems?.map(item => item._id);\n          const visitIds = pendingItems?.map(item => item.visitId);\n          updateRecords({\n            type: 'updateAllDeliveryStatus',\n            ids: ids,\n            visitId: visitIds,\n            show: true,\n            title: 'Are you sure?',\n            body: 'All generate pdf status update',\n          });\n        }}\n        onReport={async item => {\n          const result = await getOrderDeliveredList(item);\n          deliveryQueueStore.deliveryQueueService\n            .listPatientReports(result[0]?.labId)\n            .then(res => {\n              if (res.getPatientReports.success) {\n                let patientResultList: any[] = [];\n                result?.filter(item => {\n                  if (item?.reportTemplate) {\n                    patientResultList.push({\n                      ...res.getPatientReports.data,\n                      patientResult: item,\n                    });\n                  }\n                });\n                const uniqByPatientResult = _.uniqBy(result, (item: any) => {\n                  return item?.reportTemplate;\n                });\n\n                const reportTemplateList: any[] = [];\n                uniqByPatientResult.filter(item => {\n                  reportTemplateList.push(item?.reportTemplate?.split(' -')[0]);\n                });\n\n                if (reportTemplateList?.length > 0) {\n                  reportSettingStore.templatePatientResultService\n                    .getTempPatientResultListByTempCodes({\n                      input: {\n                        filter: {\n                          reportTemplateList,\n                        },\n                      },\n                    })\n                    .then(async res => {\n                      patientResultList = patientResultList.filter(item => {\n                        const reportSettings =\n                          res.getTempPatientResultListByTempCodes.list.find(\n                            e =>\n                              e.templateCode ==\n                              item.patientResult.reportTemplate.split(' -')[0],\n                          );\n                        return Object.assign(item, { reportSettings });\n                      });\n\n                      const grouped = _.groupBy(\n                        patientResultList,\n                        item => item.patientResult.reportTemplate,\n                      );\n\n                      if (_.isEmpty(grouped)) {\n                        return Toast.error({\n                          message: '😌 Report template not found.',\n                        });\n                      } else {\n                        setModalGenerateReports({\n                          show: true,\n                          data: grouped,\n                          templateDetails:\n                            res.getTempPatientResultListByTempCodes.list,\n                        });\n                      }\n                    });\n                }\n              } else {\n                alert(res.getPatientReports.message);\n              }\n            });\n        }}\n        onPagination={(type: string) => {\n          let pageNo = deliveryQueueStore.orderDeliveryPageNo;\n          if (type == 'next')\n            pageNo = deliveryQueueStore.orderDeliveryPageNo + 1;\n          else pageNo == 0 ? (pageNo = 0) : (pageNo = pageNo - 1);\n          deliveryQueueStore.deliveryQueueService.listDeliveryQueue(\n            pageNo,\n            100,\n          );\n          deliveryQueueStore.updateOrderDeliveryPageNo(pageNo);\n          global.filter = { mode: 'pagination', pageNo, limit: 100 };\n        }}\n        setHoldRecord={(item: string) => {\n          setHoldRecord(item);\n        }}\n      />\n    ),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [deliveryQueueStore.reportDeliveryList, selectId, reloadTable, holdRecord],\n  );\n  console.log(holdRecord, 'hold');\n  return (\n    <>\n      <Header>\n        <PageHeading title={routerStore.selectedComponents?.title || ''} />\n        <PageHeadingLabDetails store={loginStore} />\n      </Header>\n      <div className='p-3 rounded-lg shadow-xl overflow-auto'>\n        <span className='font-bold text-lg underline'>Report Delivery</span>\n        {reportDeliveryList}\n      </div>\n\n      {deliveryQueueStore.orderDeliveredList?.length > 0 && (\n        <div className='p-3 rounded-lg shadow-xl overflow-auto'>\n          <span className='font-bold text-lg underline'>Order Delivered</span>\n          <OrderDeliveredList\n            data={deliveryQueueStore.orderDeliveredList || []}\n            totalSize={deliveryQueueStore.orderDeliveredListCount}\n          />\n        </div>\n      )}\n\n      <ModalGenerateReports\n        {...modalGenerateReports}\n        onClose={() => {\n          setModalGenerateReports({ show: false });\n        }}\n      />\n    </>\n  );\n});\n\nexport default DeliveryQueue;\n"],"names":["labId","name","externalLabId","employeeCode","deliveryId","deliveryDate","reportDate","deliveryStatus","reportType","destination","comments","startDate","endDate","errorMsg","clientCode","clientName","registrationLocation","registrationLocationCode","doctorCode","doctorName","qrCode","pdf","enteredBy","userComments","companyCode","environment","SearchBar","Search","ClearSearchButton","ExportCSVButton","CSVExport","TableBootstrapReport","_ref","id","data","_ref$totalSize","totalSize","_ref$searchPlaceholde","searchPlaceholder","_ref$page","page","_ref$sizePerPage","sizePerPage","columns","fileName","isEditModify","onUpdateItem","isSelectRow","selectedItem","isPagination","onSelectedRow","onPageSizeChange","onUpdateDeliveryStatus","onFilter","onPagination","clearAllFilter","onCheckHoldRecord","onClickRow","_useState","useState","_useState2","_slicedToArray","_useState3","_useState4","isFilterOpen","setIsFilterOpen","_useState5","_useState6","statusData","code","value","color","options","cutome","paginationSize","pageStartIndex","firstPageText","prePageText","nextPageText","lastPageText","disablePageTitle","paginationTotalRenderer","from","to","size","_jsxs","_Fragment","children","_jsx","className","hideSizePerPage","showTotal","alwaysShowAllBtns","sizePerPageList","text","hidePageListOnlyOnePage","sizePerPageRenderer","_ref2","currSizePerPage","onSizePerPageChange","role","type","min","placeholder","onChange","e","target","map","option","onClick","concat","searchProps","handleTableChange","_ref3","cellEdit","filters","sortField","sortOrder","searchText","newValue","dataField","rowId","_","alert","filter","_i","_Object$entries","Object","entries","length","_Object$entries$_i","key","values","object","_defineProperty","filterVal","assign","debounce","srText","sort","a","b","CustomToggleList","_ref4","onColumnToggle","toggles","column","_objectSpread","toggle","index","rowStyle","row","rowIndex","isAnyCritical","isAnyABNFlag","backgroundColor","PaginationProvider","pagination","paginationFactory","keyField","_ref5","paginationProps","paginationTableProps","ToolkitProvider","bootstrap4","search","exportCSV","dayjs","Date","format","noAutoBOM","blobType","exportAll","onlyExportFiltered","columnToggle","props","console","log","style","marginTop","csvProps","Buttons","Icons","Tooltip","tooltipText","position","disabled","some","item","status","contextual","btnClassName","columnToggleProps","BootstrapTable","remote","baseProps","noDataIndication","hover","filterFactory","headerClasses","onTableChange","width","height","borderRadius","align","padding","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","stop","_callee2","_context2","ReportDeliveryList","observer","selectId","setSelectId","localData","setLocalData","useEffect","_props$data","_props$data$filter","holdRecord","selectedId","_id","hidden","csvExport","headerStyle","fontSize","sortCaret","order","editable","customFilter","getFilter","filterRenderer","NumberFilter","textFilter","DateFilter","formatter","cell","csvFormatter","col","reportPriority","deliveryMode","_row$deliveryMode","cellContent","onUpdate","visitId","show","title","body","onReport","onExpand","classes","colIndex","_props$data2","zIndex","rows","setHoldRecord","TableBootstrap","rowEvents","_row$colorScheme","_row$colorScheme2","_row$colorScheme3","_row$colorScheme4","_row$colorScheme5","colorScheme","envRangeColor","cellColor","fontColor","OrderDeliveredList","delivered","Form","ModalGenerateReports","_ref$show","templateDetails","onClose","onReceiptUpload","reportList","setReportList","_React$useState","React","_React$useState2","showModal","setShowModal","isWithHeader","setWithHeader","isPdfViewer","setPdfViewer","newObj","split","arrReportList","_loop","templateReportOrder","_item$patientResultLi","patientResultList","_e$reportTemplate","reportTemplate","reportTemplateOrder","push","template","patientReports","getReports","reports","Document","_patientReports$patie","PdfTemp0001","_item$reportTemplate","pageBranding","find","templateCode","_patientReports$patie2","PdfTemp0002","_item$reportTemplate2","_patientReports$patie3","PdfTemp0003","_item$reportTemplate3","_patientReports$patie4","PdfTemp0004","_item$reportTemplate4","_patientReports$patie5","PdfTemp0005","_item$reportTemplate5","_patientReports$patie6","PdfTemp0006","_item$reportTemplate6","_patientReports$patie7","PdfTemp0007","_item$reportTemplate7","_patientReports$patie8","PdfTemp0008","_item$reportTemplate8","Container","label","labelStyle","fontWeight","doc","blob","blobURL","sent","toBlob","URL","createObjectURL","printjs","printable","transition","Modal","close","autoClose","PDFViewer","window","innerWidth","innerHeight","showToolbar","DeliveryQueue","_routerStore$selected","_deliveryQueueStore$o","_useStores","useStores","deliveryQueueStore","routerStore","loginStore","reportSettingStore","_useForm","useForm","control","handleSubmit","formState","errors","setValue","modalGenerateReports","setModalGenerateReports","reloadTable","setReloadTable","_useState7","_useState8","loginDetails","login","deliveryQueueService","findByFields","input","lab","then","res","_res$findByFieldsDeli","_res$findByFieldsDeli2","_res$findByFieldsDeli3","findByFieldsDeliveryQueue","success","updateReportDeliveryList","deliveryQueues","paginatorInfo","count","listDeliveryQueue","getDeliveryList","getValue","toUpperCase","filterPlainArray","array","filterKeys","keys","every","getReportDeliveryList","arr","list","grouped","Progressive","allProgressive","result","panelCode","g","apply","_toConsumableArray","arrAllTogather","arrOneToday","approvalDate","o","Daily","arrDaily","getOrderDeliveredList","abrupt","Promise","resolve","reject","patientResultId","_x","arguments","updateRecords","payload","_global","_global$filter","_global3","_global3$filter","ids","_global2","_global2$filter","_global4","_global4$filter","_global5","_global5$filter","_global6","_global6$filter","_global7","_global7$filter","updateDeliveryQueue","Toast","message","updateDeliveryQueueByVisitIds","updateByVisitIdsDeliveryQueue","global","mode","pageNo","limit","_x2","reportDeliveryList","useMemo","_getReportDeliveryLis","_loginStore$login","isDelete","RouterFlow","userPermission","_loginStore$login2","reportDeliveryListCopy","_filter$srText","JSON","stringify","toLocaleLowerCase","match","_callee3","_context3","updateOrderDeliveredList","_x3","_deliveryQueueStore$r","pendingItems","visitIds","_callee5","_result$","_context5","listPatientReports","getPatientReports","patientResult","uniqByPatientResult","reportTemplateList","templatePatientResultService","getTempPatientResultListByTempCodes","_callee4","_context4","reportSettings","error","_x5","_x4","orderDeliveryPageNo","updateOrderDeliveryPageNo","Header","PageHeading","selectedComponents","PageHeadingLabDetails","store","orderDeliveredList","orderDeliveredListCount"],"sourceRoot":""}