{"version":3,"file":"static/js/831.7ba50044.chunk.js","mappings":"kQAgBMA,GAAiBC,EAAAA,EAAAA,KAAS,WAAO,IAADC,EAAAC,EACpCC,GASIC,EAAAA,EAAAA,MARFC,EAAOF,EAAPE,QACAC,EAAmBH,EAAnBG,oBACAC,EAAWJ,EAAXI,YACAC,EAAiBL,EAAjBK,kBAEAC,GADwBN,EAAxBO,yBACUP,EAAVM,YACAE,EAAoBR,EAApBQ,qBAGFC,GAFoBT,EAAlBU,oBAE8BC,EAAAA,EAAAA,UAAS,KAAGC,GAAAC,EAAAA,EAAAA,GAAAJ,EAAA,GAE5CK,GAFeF,EAAA,GAAaA,EAAA,IAOxBG,EAAAA,EAAAA,OADFC,GAHOF,EAAPG,QACYH,EAAZI,aACkBJ,EAAlBK,UAAYC,OACJN,EAARE,WAGFK,EAAAA,EAAAA,YAAU,WAERL,EAAS,UAAWb,EAAoBmB,cAAcC,QAExD,GAAG,CAACpB,EAAoBmB,gBAmCxB,OACEE,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,MAACG,EAAAA,GAAM,CAAAD,SAAA,EACLF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,mCAAkCF,SAAA,EAC/CG,EAAAA,EAAAA,KAACC,EAAAA,GAAW,CAACC,OAAqC,QAA9BjC,EAAAM,EAAY4B,0BAAkB,IAAAlC,OAAA,EAA9BA,EAAgCiC,QAAS,MAC7DF,EAAAA,EAAAA,KAACI,EAAAA,GAAgD,CAC/CC,OAAQhC,EACRiC,YAAY,SACZP,UAAU,MACVQ,KAAM,CACJC,KAAMC,IAAAA,OACuB,QADfvC,EACZM,EAAkBkC,iBAAS,IAAAxC,OAAA,EAA3BA,EAA6ByC,QAC3B,SAAAC,GAAI,YAAmBC,IAAfD,EAAKE,KAAmB,IAElC,SAEFC,WAAY,CAAC,UAEfC,SAAU,SAACF,GACTtC,EAAkByC,oBAAoBC,cAAc,CAClDC,MAAO,CACLR,OAAQ,CAACG,MAAAA,KAGf,EACAM,SAAU,SAAAR,GA0CR,QAINZ,EAAAA,EAAAA,KAACqB,EAAAA,GAAqB,CAACC,MAAO7C,OAE/B8C,OAAOC,YAAc,KACpBxB,EAAAA,EAAAA,KAACyB,EAAAA,GAAe,CACdC,UACE1B,EAAAA,EAAAA,KAAAJ,EAAAA,SAAA,CAAAC,UAEoBlB,EAAqBgD,eACvBhD,EAAqBiD,cAlGzC5B,EAAAA,EAAAA,KAAA,OAAKD,UAAU,8BAA6BF,UAC1CG,EAAAA,EAAAA,KAAA,MAAID,UAAU,6BAA4BF,SAAC,yFAqG7CgC,SAAS,kBACTC,MAAO,CACLC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,UAAW,SACXC,UAAW,QACXtC,SAED,SAAAuC,GAAA,IAAE/D,EAAO+D,EAAP/D,QAAc+D,EAALC,MAAK,OACfhE,GACE2B,EAAAA,EAAAA,KAAA,UAAAH,SAAQ,yBAERG,EAAAA,EAAAA,KAAA,UAAQD,UAAU,iDAAgDF,SAAC,uBAGpE,KAILG,EAAAA,EAAAA,KAAAJ,EAAAA,SAAA,MAWR,IACA,W","sources":["features/patient-reports/generate-reports/screens/generate-reports.screen.tsx"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {observer} from 'mobx-react';\nimport _ from 'lodash';\nimport {\n  AutoCompleteFilterSingleSelectMultiFieldsDisplay,\n  Header,\n  PageHeading,\n  PageHeadingLabDetails,\n} from '@/library/components';\nimport {useForm} from 'react-hook-form';\n\nimport '@/library/assets/css/accordion.css';\nimport {useStores} from '@/stores';\nimport 'react-accessible-accordion/dist/fancy-example.css';\nimport {PDFDownloadLink} from '@react-pdf/renderer';\n\nconst GenerateReport = observer(() => {\n  const {\n    loading,\n    patientManagerStore,\n    routerStore,\n    patientVisitStore,\n    patientRegistrationStore,\n    loginStore,\n    generateReportsStore,\n    reportSettingStore,\n  } = useStores();\n  const [tempCode, setTempCode] = useState('');\n\n  const {\n    control,\n    handleSubmit,\n    formState: {errors},\n    setValue,\n  } = useForm();\n\n  useEffect(() => {\n    // Default value initialization\n    setValue('species', patientManagerStore.patientManger.species);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [patientManagerStore.patientManger]);\n\n  const getTemplate = (tempCode: string, data: any) => {\n    switch (tempCode) {\n      // case 'TEMP0001':\n      //   return <PdfTPRTemp0001 data={data} />;\n      // case 'TEMP0002':\n      //   return <PdfTPRTemp0002 data={data} />;\n      // case 'TEMP0003':\n      //   return <PdfTPRTemp0003 data={data} />;\n      // case 'TEMP0004':\n      //   return <PdfTemp0004 data={data} />;\n      // case 'TEMP0005':\n      //   return <PdfTemp0005 data={data} />;\n      default:\n        return (\n          <div className='justify-center items-center'>\n            <h4 className='text-center mt-10 text-red'>\n              Template not found. Please select correct template code and labId.\n              ðŸš¨\n            </h4>\n          </div>\n        );\n        break;\n    }\n\n    // return (\n    //   <div className='justify-center items-center'>\n    //     <h4 className='text-center mt-10 text-red'>\n    //       Template not found. Please select correct template code and labId. ðŸš¨\n    //     </h4>\n    //   </div>\n    // );\n  };\n\n  return (\n    <>\n      <Header>\n        <div className='flex flex-row gap-2 items-center'>\n          <PageHeading title={routerStore.selectedComponents?.title || ''} />\n          <AutoCompleteFilterSingleSelectMultiFieldsDisplay\n            loader={loading}\n            placeholder='Lab Id'\n            className='h-4'\n            data={{\n              list: _.uniqBy(\n                patientVisitStore.labIdList?.filter(\n                  item => item.labId !== undefined,\n                ),\n                'labId',\n              ),\n              displayKey: ['labId'],\n            }}\n            onFilter={(labId: string) => {\n              patientVisitStore.patientVisitService.filterByLabId({\n                input: {\n                  filter: {labId},\n                },\n              });\n            }}\n            onSelect={item => {\n              // generateReportsStore.generateReportsService\n              //   .listPatientReports(item.labId)\n              //   .then(res => {\n              //     if (res.getPatientReports.success) {\n              //       const uniqByPatientResult = _.uniqBy(\n              //         res.getPatientReports.data?.patientResultList,\n              //         (item: any) => {\n              //           return item.reportTemplate;\n              //         },\n              //       );\n              //       const reportTemplateList: any[] = [];\n              //       uniqByPatientResult.filter(item => {\n              //         reportTemplateList.push(\n              //           item?.reportTemplate.split(' -')[0],\n              //         );\n              //       });\n              //       if (reportTemplateList?.length > 0) {\n              //         reportSettingStore.templatePatientResultService\n              //           .getTempPatientResultListByTempCodes({\n              //             input: {\n              //               filter: {\n              //                 reportTemplateList,\n              //               },\n              //             },\n              //           })\n              //           .then(res => {\n              //             console.log({res});\n              //           });\n              //       }\n              //     } else {\n              //       alert(res.getPatientReports.message);\n              //     }\n              //     // generateReportsStore.updatePatientReports(res?.data);\n              //     // generateReportsStore.updatePageBranding(\n              //     //   res?.data?.templatePatientResult?.pageBranding,\n              //     // );\n              //   })\n              //   .catch(errors => {\n              //     return Toast.error({\n              //       message: `ðŸ˜” ${errors.message}`,\n              //     });\n              //   });\n            }}\n          />\n        </div>\n        <PageHeadingLabDetails store={loginStore} />\n      </Header>\n      {window.innerWidth <= 768 ? (\n        <PDFDownloadLink\n          document={\n            <>\n              {getTemplate(tempCode, {\n                patientReports: generateReportsStore.patientReports,\n                pageBranding: generateReportsStore.pageBranding,\n              })}\n            </>\n          }\n          fileName='Patient Reports'\n          style={{\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            textAlign: 'center',\n            minHeight: '100%',\n          }}\n        >\n          {({loading, error}) =>\n            loading ? (\n              <button>Loading document...</button>\n            ) : (\n              <button className='border-2 p-2 rounded-md bg-blue-500 text-white'>\n                Pdf Patient Reports\n              </button>\n            )\n          }\n        </PDFDownloadLink>\n      ) : (\n        <>\n          {/* <PdfTPRTemp0001\n            data={{\n              patientReports: generateReportsStore.patientReports,\n              pageBranding: generateReportsStore.pageBranding,\n            }}\n          /> */}\n        </>\n      )}\n    </>\n  );\n});\nexport default GenerateReport;\n"],"names":["GenerateReport","observer","_routerStore$selected","_patientVisitStore$la","_useStores","useStores","loading","patientManagerStore","routerStore","patientVisitStore","loginStore","patientRegistrationStore","generateReportsStore","_useState","reportSettingStore","useState","_useState2","_slicedToArray","_useForm","useForm","setValue","control","handleSubmit","formState","errors","useEffect","patientManger","species","_jsxs","_Fragment","children","Header","className","_jsx","PageHeading","title","selectedComponents","AutoCompleteFilterSingleSelectMultiFieldsDisplay","loader","placeholder","data","list","_","labIdList","filter","item","undefined","labId","displayKey","onFilter","patientVisitService","filterByLabId","input","onSelect","PageHeadingLabDetails","store","window","innerWidth","PDFDownloadLink","document","patientReports","pageBranding","fileName","style","display","justifyContent","alignItems","textAlign","minHeight","_ref","error"],"sourceRoot":""}