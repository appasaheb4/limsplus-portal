{"version":3,"file":"static/js/290.9f7bc6bc.chunk.js","mappings":"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","sources":["features/report-builder/report-settings/components/molecules/report-section/report-section-list.components.tsx","features/report-builder/report-settings/components/molecules/template-setting/template-settings-list.components.tsx","features/report-builder/report-settings/components/molecules/report-section/table-bootstrap.component.tsx","features/report-builder/report-settings/components/molecules/page-branding/header.component.tsx","features/report-builder/report-settings/components/molecules/section-settings/section-settings-list.components.tsx","features/report-builder/report-settings/components/molecules/page-setting/page-settings-list.components.tsx","features/report-builder/report-settings/components/molecules/general-setting/general-settings-list.components.tsx","features/report-builder/report-settings/components/molecules/font-setting/font-settings-list.components.tsx","features/report-builder/report-settings/components/molecules/report-field-mapping/report-field-mapping-list.components.tsx","features/report-builder/report-settings/components/molecules/page-branding/sub-header.component.tsx","features/report-builder/report-settings/components/molecules/page-branding/footer.component.tsx","features/report-builder/report-settings/components/molecules/page-branding/page-number.component.tsx","features/report-builder/report-settings/components/molecules/page-branding/page-branding-list.components.tsx","features/report-builder/report-settings/components/molecules/template-patient-result/template-patient-result-list.components.tsx","features/report-builder/report-settings/screens/page-branding.screen.tsx","features/report-builder/report-settings/screens/template-setting.screen.tsx","features/report-builder/report-settings/screens/template-patient-result.screen.tsx","features/report-builder/report-settings/screens/report-settings.screen.tsx","features/report-builder/report-template/components/molecules/pdf/page-branding/temp0001/temp0001-footer.component.tsx","features/report-builder/report-template/components/molecules/pdf/page-branding/temp0001/temp0001-header.component.tsx","features/report-builder/report-template/components/molecules/pdf/page-branding/temp0001/temp0001-sub-header.component.tsx","features/report-builder/report-template/components/molecules/pdf/page-branding/temp0001/temp0001.component.tsx","features/report-builder/report-template/components/molecules/pdf/template-setting/temp0001/temp0001.component.tsx"],"sourcesContent":["import React from 'react';\nimport {observer} from 'mobx-react';\nimport {textFilter, Form} from '@/library/components';\nimport {Confirm} from '@/library/models';\nimport TableBootstrap from './table-bootstrap.component';\nimport dayjs from 'dayjs';\n\ninterface ReportSectionListProps {\n  data: any;\n  totalSize: number;\n  extraData: any;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  onDelete?: (selectedItem: Confirm) => void;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (value: any, dataField: string, id: string) => void;\n  onPageSizeChange?: (page: number, totalSize: number) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n}\n\nlet section;\n\nexport const ReportSectionList = observer((props: ReportSectionListProps) => {\n  return (\n    <>\n      <div style={{position: 'relative'}}>\n        <TableBootstrap\n          id='_id'\n          data={props.data}\n          totalSize={props.totalSize}\n          columns={[\n            {\n              dataField: '_id',\n              text: 'Id',\n              hidden: true,\n              csvExport: false,\n            },\n            {\n              dataField: 'srNo',\n              text: 'Sr No',\n              headerClasses: 'textHeader',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'section',\n              text: 'Section',\n              headerClasses: 'textHeader4',\n              filter: textFilter({\n                getFilter: filter => {\n                  section = filter;\n                },\n              }),\n              sort: true,\n              editable: false,\n            },\n          ]}\n          isEditModify={props.isEditModify}\n          isSelectRow={true}\n          fileName='Report_Section'\n          onSelectedRow={rows => {\n            props.onSelectedRow &&\n              props.onSelectedRow(rows.map((item: any) => item._id));\n          }}\n          onUpdateItem={(value: any, dataField: string, id: string) => {\n            props.onUpdateItem && props.onUpdateItem(value, dataField, id);\n          }}\n          onPageSizeChange={(page, size) => {\n            props.onPageSizeChange && props.onPageSizeChange(page, size);\n          }}\n          onFilter={(type, filter, page, size) => {\n            props.onFilter && props.onFilter(type, filter, page, size);\n          }}\n          clearAllFilter={() => {\n            section('');\n          }}\n        />\n      </div>\n    </>\n  );\n});\n","import React from 'react';\nimport {observer} from 'mobx-react';\nimport {\n  Form,\n  TableBootstrap,\n  Tooltip,\n  Icons,\n  Buttons,\n  Svg,\n} from '@/library/components';\nimport {Confirm} from '@/library/models';\nimport {resizeFile, compressString} from '@/library/utils';\n\ninterface TemplateSettingsProps {\n  data: any;\n  totalSize: number;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  onDelete?: (selectedItem: Confirm) => void;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (fields: any, id: string) => void;\n  onPageSizeChange?: (page: number, totalSize: number) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n  onPdfPreview?: (selectedItem: any) => void;\n}\n\nlet sectionSetting;\nlet version;\nlet environment;\n\nexport const TemplateSettingsList = observer((props: TemplateSettingsProps) => {\n  return (\n    <>\n      <div style={{position: 'relative'}}>\n        <TableBootstrap\n          id='_id'\n          data={props.data}\n          totalSize={props.totalSize}\n          columns={[\n            {\n              dataField: '_id',\n              text: 'Id',\n              hidden: true,\n              csvExport: false,\n            },\n            {\n              dataField: 'tempCode',\n              text: 'Template Code',\n              headerClasses: 'textHeader',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'tempName',\n              text: 'Template Name',\n              headerClasses: 'textHeader',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'isToolbar',\n              text: 'Show tool bar',\n              sort: true,\n              csvFormatter: (col, row) =>\n                `${row.isToolbar ? (row.isToolbar ? 'Yes' : 'No') : 'No'}`,\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <Form.Toggle\n                      value={row.isToolbar}\n                      onChange={isToolbar => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem({isToolbar}, row._id);\n                      }}\n                    />\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'isBackgroundImage',\n              text: 'Background Image Visible',\n              sort: true,\n              csvFormatter: (col, row) =>\n                `${\n                  row.isBackgroundImage\n                    ? row.isBackgroundImage\n                      ? 'Yes'\n                      : 'No'\n                    : 'No'\n                }`,\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <Form.Toggle\n                      value={row.isBackgroundImage}\n                      onChange={isBackgroundImage => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem({isBackgroundImage}, row._id);\n                      }}\n                    />\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'backgroundImage',\n              text: 'Background Image',\n              sort: true,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    {row?.backgroundImage && (\n                      <img\n                        src={row?.backgroundImage}\n                        alt='logo'\n                        className='object-fill h-35 w-40 rounded-md'\n                      />\n                    )}\n                  </>\n                );\n              },\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <div className='flex flex-col justify-center items-center gap-2'>\n                  <Form.InputFile\n                    placeholder='File'\n                    onChange={async e => {\n                      const backgroundImage = e.target.files[0];\n                      props.onUpdateItem &&\n                        props.onUpdateItem(\n                          {\n                            backgroundImage,\n                            backgroundImageBase64: compressString(\n                              await resizeFile(\n                                backgroundImage,\n                                300,\n                                300,\n                                100,\n                                0,\n                              ),\n                            ),\n                          },\n                          row._id,\n                        );\n                    }}\n                  />\n                  <Buttons.Button\n                    size='medium'\n                    type='outline'\n                    icon={Svg.Remove}\n                    onClick={() => {\n                      props.onUpdateItem &&\n                        props.onUpdateItem(\n                          {\n                            backgroundImage: null,\n                            backgroundImageBase64: '',\n                          },\n                          row._id,\n                        );\n                    }}\n                  >\n                    Remove Image\n                  </Buttons.Button>\n                </div>\n              ),\n            },\n            {\n              dataField: 'pageSize',\n              text: 'Page Size',\n              sort: true,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <select\n                      value={row?.pageSize}\n                      className={`leading-4 p-2 focus:outline-none focus:ring block w-full shadow-sm sm:text-base border-2 border-gray-300\n                       rounded-md`}\n                      onChange={e => {\n                        const pageSize = e.target.value;\n                        props.onUpdateItem &&\n                          props.onUpdateItem({pageSize}, row._id);\n                      }}\n                    >\n                      <option selected>Select</option>\n                      {[\n                        '4A0',\n                        '2A0',\n                        'A0',\n                        'A1',\n                        'A2',\n                        'A3',\n                        'A4',\n                        'A5',\n                        'A6',\n                        'A7',\n                        'A8',\n                        'A9',\n                        'A10',\n                        'B0',\n                        'B1',\n                        'B2',\n                        'B3',\n                        'B4',\n                        'B5',\n                        'B6',\n                        'B7',\n                        'B8',\n                        'B9',\n                        'B10',\n                        'C0',\n                        'C1',\n                        'C2',\n                        'C3',\n                        'C4',\n                        'C5',\n                        'C6',\n                        'C7',\n                        'C8',\n                        'C9',\n                        'C10',\n                        'RA0',\n                        'RA1',\n                        'RA2',\n                        'RA3',\n                        'RA4',\n                        'SRA0',\n                        'SRA1',\n                        'SRA2',\n                        'SRA3',\n                        'SRA4',\n                        'EXECUTIVE',\n                        'FOLIO',\n                        'LEGAL',\n                        'LETTER',\n                        'TABLOID',\n                        'ID1',\n                      ].map((item: any, index: number) => (\n                        <option key={index} value={item}>\n                          {item}\n                        </option>\n                      ))}\n                    </select>\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'mainBoxCSS',\n              text: 'Main Box Css',\n              headerClasses: 'textHeader4',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  <Form.MultilineInput\n                    label=''\n                    style={{color: '#ffffff', backgroundColor: '#000000'}}\n                    placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n                    onBlur={mainBoxCSS => {\n                      props.onUpdateItem &&\n                        props.onUpdateItem({mainBoxCSS}, row._id);\n                    }}\n                    defaultValue={row?.mainBoxCSS}\n                  />\n                </>\n              ),\n            },\n            {\n              dataField: 'operation',\n              text: 'Action',\n              editable: false,\n              csvExport: false,\n              hidden: !props.isDelete,\n              formatter: (cellContent, row) => (\n                <>\n                  <div className='flex flex-row'>\n                    <Tooltip tooltipText='Preview' position='bottom'>\n                      <Icons.IconContext\n                        color='#fff'\n                        size='20'\n                        onClick={() =>\n                          props.onPdfPreview && props.onPdfPreview(row)\n                        }\n                      >\n                        {Icons.getIconTag(Icons.IconIm.ImFilePdf)}\n                      </Icons.IconContext>\n                    </Tooltip>\n                    <Tooltip tooltipText='Delete' position='bottom'>\n                      <Icons.IconContext\n                        color='#fff'\n                        size='20'\n                        onClick={() =>\n                          props.onDelete &&\n                          props.onDelete({\n                            type: 'delete',\n                            show: true,\n                            id: [row._id],\n                            title: 'Are you sure?',\n                            body: 'Delete item',\n                          })\n                        }\n                      >\n                        {Icons.getIconTag(Icons.IconBs.BsFillTrashFill)}\n                      </Icons.IconContext>\n                    </Tooltip>\n                  </div>\n                </>\n              ),\n              headerClasses: 'sticky right-0  bg-gray-500 text-white z-50',\n              classes: (cell, row, rowIndex, colIndex) => {\n                return 'sticky right-0 bg-gray-500';\n              },\n              style: (cell, row, rowIndex, colIndex) => {\n                return {\n                  zIndex: props.data?.length - rowIndex,\n                };\n              },\n            },\n          ]}\n          isEditModify={props.isEditModify}\n          isSelectRow={true}\n          fileName='Template_Settings'\n          onSelectedRow={rows => {\n            props.onSelectedRow &&\n              props.onSelectedRow(rows.map((item: any) => item._id));\n          }}\n          onPageSizeChange={(page, size) => {\n            props.onPageSizeChange && props.onPageSizeChange(page, size);\n          }}\n          onFilter={(type, filter, page, size) => {\n            props.onFilter && props.onFilter(type, filter, page, size);\n          }}\n          clearAllFilter={() => {\n            sectionSetting('');\n            version('');\n            environment('');\n          }}\n        />\n      </div>\n    </>\n  );\n});\n","import React, {useState} from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport _ from 'lodash';\nimport ToolkitProvider, {\n  Search,\n  CSVExport,\n} from 'react-bootstrap-table2-toolkit/dist/react-bootstrap-table2-toolkit';\nimport cellEditFactory from 'react-bootstrap-table2-editor';\nimport paginationFactory, {\n  PaginationProvider,\n  PaginationListStandalone,\n  SizePerPageDropdownStandalone,\n  PaginationTotalStandalone,\n} from 'react-bootstrap-table2-paginator';\nimport filterFactory from 'react-bootstrap-table2-filter';\nimport dayjs from 'dayjs';\nimport '@/library/components/organisms/style.css';\n\nimport {Buttons, Icons} from '@/library/components';\nimport {debounce} from '@/core-utils';\n\nconst {SearchBar, ClearSearchButton} = Search;\nconst {ExportCSVButton} = CSVExport;\n\ninterface TableBootstrapProps {\n  id: string;\n  data: any;\n  totalSize?: number;\n  searchPlaceholder?: string;\n  page?: number;\n  sizePerPage?: number;\n  columns: any;\n  fileName: string;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  isSelectRow?: boolean;\n  expandRow?: any;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (value: any, dataField: string, id: string) => void;\n  onPageSizeChange?: (page: number, limit: number) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n  clearAllFilter?: () => void;\n}\nconst TableBootstrap = ({\n  id,\n  data,\n  totalSize = 10,\n  searchPlaceholder = 'Search...',\n  page = 0,\n  sizePerPage = 10,\n  columns,\n  fileName,\n  isEditModify,\n  isSelectRow,\n  expandRow,\n  onSelectedRow,\n  onUpdateItem,\n  onPageSizeChange,\n  onFilter,\n  clearAllFilter,\n}: TableBootstrapProps) => {\n  const [selectedRow, setSelectedRow] = useState<any[]>();\n  const [isFilterOpen, setIsFilterOpen] = useState<boolean>(false);\n\n  const customTotal = (from, to, size) => {\n    return (\n      <>\n        <div className='clearfix' />\n        <span>\n          Showing {from} to {to} of {size} Results\n        </span>\n      </>\n    );\n  };\n\n  const sizePerPageRenderer = ({\n    options,\n    currSizePerPage,\n    onSizePerPageChange,\n  }) => (\n    <div className='btn-group items-center' role='group'>\n      <input\n        type='number'\n        min='0'\n        placeholder='No'\n        onChange={e => {\n          if (e.target.value) {\n            onSizePerPageChange(e.target.value);\n          }\n        }}\n        className='mr-2 ml-2 leading-4 p-2 w-14 focus:outline-none focus:ring block  shadow-sm sm:text-base border border-gray-300 rounded-md'\n      />\n      {options.map(option => (\n        <button\n          key={option.text}\n          type='button'\n          onClick={() => onSizePerPageChange(option.page)}\n          className={`btn ${\n            currSizePerPage === `${option.page}` ? 'bg-primary' : 'bg-grey'\n          }`}\n        >\n          {option.text}\n        </button>\n      ))}\n    </div>\n  );\n  const options = {\n    cutome: true,\n    totalSize: totalSize,\n    paginationSize: 5,\n    pageStartIndex: 0,\n    firstPageText: '<<',\n    prePageText: '<',\n    nextPageText: '>',\n    lastPageText: '>>',\n    disablePageTitle: true,\n    paginationTotalRenderer: customTotal,\n    hideSizePerPage: true,\n    showTotal: false,\n    alwaysShowAllBtns: true,\n    sizePerPageList: [\n      {\n        text: '10',\n        value: 10,\n      },\n      {\n        text: '20',\n        value: 20,\n      },\n      {\n        text: '30',\n        value: 30,\n      },\n      {\n        text: '40',\n        value: 40,\n      },\n      {\n        text: '50',\n        value: 50,\n      },\n    ],\n    hidePageListOnlyOnePage: true,\n    sizePerPageRenderer: sizePerPageRenderer,\n  };\n  const searchProps: any = {\n    placeholder: searchPlaceholder,\n  };\n\n  const handleTableChange = (\n    type,\n    {\n      data,\n      cellEdit,\n      page,\n      sizePerPage,\n      filters,\n      sortField,\n      sortOrder,\n      searchText,\n    },\n  ) => {\n    if (type === 'cellEdit' && isEditModify) {\n      onUpdateItem &&\n        onUpdateItem(cellEdit.newValue, cellEdit.dataField, cellEdit.rowId);\n    }\n    if (type === 'pagination' && _.isEmpty(filters)) {\n      // if (sizePerPage > totalSize) return alert(\"You have not more records.\")\n      // if (page * sizePerPage > totalSize) return alert(\"You have not more records.\")\n      onPageSizeChange && onPageSizeChange(page, sizePerPage);\n    }\n    if (type === 'filter' || (type === 'pagination' && !_.isEmpty(filters))) {\n      if (type === 'pagination') {\n        if (sizePerPage > totalSize) return alert('You have not more records.');\n        if (page * sizePerPage > totalSize)\n          return alert('You have not more records.');\n      }\n      let filter: any = {};\n      for (const [key, value] of Object.entries(filters)) {\n        const values: any = value;\n        const object = {[key]: values.filterVal};\n        filter = Object.assign(filter, object);\n      }\n      if (onFilter) {\n        debounce(() => {\n          onFilter(\n            type,\n            filter,\n            type === 'filter' && page === 1 ? 0 : page,\n            sizePerPage,\n          );\n        });\n      }\n    }\n    if (type === 'search') {\n      debounce(() => {\n        onFilter && onFilter(type, {srText: searchText}, page, sizePerPage);\n      });\n    }\n    if (type === 'sort') {\n      let result;\n      if (sortOrder === 'asc') {\n        result = data.sort((a, b) => {\n          if (a[sortField] > b[sortField]) {\n            return 1;\n          } else if (b[sortField] > a[sortField]) {\n            return -1;\n          }\n          return 0;\n        });\n      } else {\n        result = data.sort((a, b) => {\n          if (a[sortField] > b[sortField]) {\n            return -1;\n          } else if (b[sortField] > a[sortField]) {\n            return 1;\n          }\n          return 0;\n        });\n      }\n    }\n  };\n\n  const CustomToggleList = ({columns, onColumnToggle, toggles}) => (\n    <div className='btn-group btn-group-toggle' data-toggle='buttons'>\n      {columns\n        .map(column => ({\n          ...column,\n          toggle: toggles[column.dataField],\n        }))\n        .map((column, index) => {\n          if (index > 0) {\n            return (\n              <button\n                type='button'\n                key={column.dataField}\n                className={` btn btn-primary btn-sm whitespace-nowrap ${\n                  column.toggle ? 'active' : ''\n                }`}\n                data-toggle='button'\n                aria-pressed={column.toggle ? 'true' : 'false'}\n                onClick={() => onColumnToggle(column.dataField)}\n              >\n                {column.text}\n              </button>\n            );\n          }\n        })}\n    </div>\n  );\n\n  return (\n    <PaginationProvider\n      pagination={paginationFactory(\n        totalSize !== 0 ? options : {page, sizePerPage, totalSize},\n      )}\n      keyField={id}\n      columns={columns}\n      data={data}\n    >\n      {({paginationProps, paginationTableProps}) => (\n        <ToolkitProvider\n          keyField={id}\n          bootstrap4\n          data={data}\n          columns={columns}\n          search\n          exportCSV={{\n            fileName: `${fileName}_${dayjs(new Date()).format(\n              'YYYY-MM-DD HH:mm',\n            )}.csv`,\n            noAutoBOM: false,\n            blobType: 'text/csv;charset=ansi',\n            exportAll: false,\n            onlyExportFiltered: true,\n          }}\n          columnToggle\n        >\n          {props => (\n            <div>\n              <div className='flex items-center'>\n                <SearchBar\n                  {...searchProps}\n                  {...props.searchProps}\n                  onChange={value => {}}\n                />\n                <ClearSearchButton\n                  className={\n                    'inline-flex ml-4 bg-gray-500 items-center small outline shadow-sm  font-medium  disabled:opacity-50 disabled:cursor-not-allowed text-center h-9 text-white'\n                  }\n                  {...props.searchProps}\n                />\n                <button\n                  className={\n                    'ml-2 px-2 focus:outline-none bg-gray-500 items-center  outline shadow-sm  font-medium  text-center rounded-md h-9 text-white'\n                  }\n                  onClick={clearAllFilter}\n                >\n                  Clear all filters\n                </button>\n                <ExportCSVButton\n                  className={\n                    'inline-flex m-2.5 bg-gray-500 items-center  small outline shadow-sm  font-medium  disabled:opacity-50 disabled:cursor-not-allowed text-center h-9 text-white'\n                  }\n                  {...props.csvProps}\n                >\n                  Export CSV!!\n                </ExportCSVButton>\n                {isFilterOpen ? (\n                  <Buttons.Button\n                    size='medium'\n                    type='outline'\n                    onClick={() => {\n                      setIsFilterOpen(!isFilterOpen);\n                    }}\n                  >\n                    <Icons.IconFa.FaChevronUp />\n                  </Buttons.Button>\n                ) : (\n                  <Buttons.Button\n                    size='medium'\n                    type='outline'\n                    onClick={() => {\n                      setIsFilterOpen(!isFilterOpen);\n                    }}\n                  >\n                    <Icons.IconFa.FaChevronDown />\n                  </Buttons.Button>\n                )}\n              </div>\n              {isFilterOpen && (\n                <div className={'mb-2 overflow-auto h-10'}>\n                  <CustomToggleList\n                    contextual='primary'\n                    className='list-custom-class'\n                    btnClassName='list-btn-custom-class'\n                    {...props.columnToggleProps}\n                  />\n                </div>\n              )}\n              <div style={{maxWidth: 200}}>\n                <BootstrapTable\n                  remote\n                  {...props.baseProps}\n                  noDataIndication='Table is Empty'\n                  hover\n                  {...paginationTableProps}\n                  filter={filterFactory()}\n                  cellEdit={\n                    isEditModify\n                      ? cellEditFactory({\n                          mode: 'dbclick',\n                          blurToSave: true,\n                        })\n                      : undefined\n                  }\n                  headerClasses='bg-gray-500 text-white whitespace-nowrap'\n                  onTableChange={handleTableChange}\n                />\n              </div>\n              <div className='flex items-center gap-2 mt-2'>\n                <SizePerPageDropdownStandalone\n                  {...Object.assign(\n                    {},\n                    {...paginationProps, hideSizePerPage: false},\n                  )}\n                />\n                <PaginationListStandalone {...paginationProps} />\n              </div>\n              <div className='flex items-center gap-2 mt-2'>\n                <PaginationTotalStandalone {...paginationProps} />\n              </div>\n            </div>\n          )}\n        </ToolkitProvider>\n      )}\n    </PaginationProvider>\n  );\n};\n\nexport default TableBootstrap;\n","import React from 'react';\nimport {observer} from 'mobx-react';\nimport _ from 'lodash';\nimport {Form} from '@/library/components';\nimport {useForm, Controller} from 'react-hook-form';\nimport {useStores} from '@/stores';\nimport {resizeFile, compressString} from '@/library/utils';\n\nexport const PageBrandingHeader = observer(() => {\n  const {loading, routerStore, reportSettingStore} = useStores();\n  const {\n    control,\n    handleSubmit,\n    formState: {errors},\n    setValue,\n    setError,\n    clearErrors,\n  } = useForm();\n\n  return (\n    <>\n      <Controller\n        control={control}\n        render={({field: {onChange}}) => (\n          <Form.Input\n            label='Title'\n            placeholder='Tile'\n            hasError={!!errors.title}\n            value={reportSettingStore.pageBranding?.header?.title}\n            onChange={title => {\n              onChange(title);\n              reportSettingStore.updatePageBranding({\n                ...reportSettingStore.pageBranding,\n                header: {\n                  ...reportSettingStore.pageBranding?.header,\n                  title,\n                },\n              });\n            }}\n          />\n        )}\n        name='title'\n        rules={{required: false}}\n        defaultValue=''\n      />\n      <Controller\n        control={control}\n        render={({field: {onChange}}) => (\n          <Form.MultilineInput\n            label='Title CSS'\n            style={{color: '#ffffff', backgroundColor: '#000000'}}\n            placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n            value={reportSettingStore.pageBranding?.header?.titleCSS}\n            onChange={titleCSS => {\n              reportSettingStore.updatePageBranding({\n                ...reportSettingStore.pageBranding,\n                header: {\n                  ...reportSettingStore.pageBranding.header,\n                  titleCSS,\n                },\n              });\n            }}\n          />\n        )}\n        name='titleCSS'\n        rules={{required: false}}\n        defaultValue=''\n      />\n      <Controller\n        control={control}\n        render={({field: {onChange}}) => (\n          <Form.InputFile\n            label='Logo'\n            placeholder={'Select Logo'}\n            hasError={!!errors.headerLogo}\n            onChange={async e => {\n              const logo = e.target.files[0];\n              onChange(logo);\n              reportSettingStore.updatePageBranding({\n                ...reportSettingStore.pageBranding,\n                header: {\n                  ...reportSettingStore.pageBranding?.header,\n                  logo,\n                  //logoUrl: compressString(await resizeFile(logo)),\n                },\n              });\n            }}\n          />\n        )}\n        name='headerLogo'\n        rules={{required: false}}\n        defaultValue=''\n      />\n      <Controller\n        control={control}\n        render={({field: {onChange}}) => (\n          <Form.MultilineInput\n            label='Logo CSS'\n            style={{color: '#ffffff', backgroundColor: '#000000'}}\n            placeholder={'Like borderRadius:25,width:50'}\n            value={reportSettingStore.pageBranding?.header?.logoCSS}\n            onChange={logoCSS => {\n              reportSettingStore.updatePageBranding({\n                ...reportSettingStore.pageBranding,\n                header: {\n                  ...reportSettingStore.pageBranding.header,\n                  logoCSS,\n                },\n              });\n            }}\n          />\n        )}\n        name='logoCSS'\n        rules={{required: false}}\n        defaultValue=''\n      />\n      <Controller\n        control={control}\n        render={({field: {onChange}}) => (\n          <Form.MultilineInput\n            label='Main Box CSS'\n            style={{color: '#ffffff', backgroundColor: '#000000'}}\n            placeholder={\"Like backgroundColor:'#000000'\"}\n            value={reportSettingStore.pageBranding?.header?.mainBoxCSS}\n            onChange={mainBoxCSS => {\n              reportSettingStore.updatePageBranding({\n                ...reportSettingStore.pageBranding,\n                header: {\n                  ...reportSettingStore.pageBranding.header,\n                  mainBoxCSS,\n                },\n              });\n            }}\n          />\n        )}\n        name='mainBoxCSS'\n        rules={{required: false}}\n        defaultValue=''\n      />\n    </>\n  );\n});\n","import React from 'react';\nimport {observer} from 'mobx-react';\nimport {\n  NumberFilter,\n  textFilter,\n  customFilter,\n  Form,\n  TableBootstrap,\n  Tooltip,\n  Icons,\n} from '@/library/components';\nimport {Confirm} from '@/library/models';\nimport dayjs from 'dayjs';\n\ninterface SectionSettingsProps {\n  data: any;\n  totalSize: number;\n  extraData: any;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  onDelete?: (selectedItem: Confirm) => void;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (value: any, dataField: string, id: string) => void;\n  onPageSizeChange?: (page: number, totalSize: number) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n}\n\nlet sectionSetting;\nlet version;\nlet environment;\n\nexport const SectionSettingsList = observer((props: SectionSettingsProps) => {\n  return (\n    <>\n      <div style={{position: 'relative'}}>\n        <TableBootstrap\n          id='_id'\n          data={props.data}\n          totalSize={props.totalSize}\n          columns={[\n            {\n              dataField: '_id',\n              text: 'Id',\n              hidden: true,\n              csvExport: false,\n            },\n            {\n              dataField: 'tempCode',\n              text: 'Section Id',\n              headerClasses: 'textHeader',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'sectionSetting',\n              text: 'Section Setting',\n              headerClasses: 'textHeader4',\n              // filter: textFilter({\n              //   getFilter: filter => {\n              //     sectionSetting = filter;\n              //   },\n              // }),\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'sectionCSS',\n              text: 'Section CSS',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'order',\n              text: 'Order',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'sectionRequired',\n              text: 'Section Required',\n              sort: true,\n              csvFormatter: (col, row) =>\n                `${\n                  row.sectionRequired\n                    ? row.sectionRequired\n                      ? 'Yes'\n                      : 'No'\n                    : 'No'\n                }`,\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <Form.Toggle\n                      disabled={true}\n                      value={row.sectionRequired}\n                      onChange={sectionRequired => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            sectionRequired,\n                            'sectionRequired',\n                            row._id,\n                          );\n                      }}\n                    />\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'sectionGrid',\n              text: 'Section Grid',\n              sort: true,\n              csvFormatter: (col, row) =>\n                `${row.sectionGrid ? (row.sectionGrid ? 'Yes' : 'No') : 'No'}`,\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <Form.Toggle\n                      disabled={true}\n                      value={row.sectionGrid}\n                      onChange={sectionGrid => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            sectionGrid,\n                            'sectionGrid',\n                            row._id,\n                          );\n                      }}\n                    />\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'lineGrid',\n              text: 'Line Grid',\n              sort: true,\n              csvFormatter: (col, row) =>\n                `${row.lineGrid ? (row.lineGrid ? 'Yes' : 'No') : 'No'}`,\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <Form.Toggle\n                      disabled={true}\n                      value={row.lineGrid}\n                      onChange={lineGrid => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(lineGrid, 'lineGrid', row._id);\n                      }}\n                    />\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'columnGrid',\n              text: 'Column Grid',\n              sort: true,\n              csvFormatter: (col, row) =>\n                `${row.columnGrid ? (row.columnGrid ? 'Yes' : 'No') : 'No'}`,\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <Form.Toggle\n                      disabled={true}\n                      value={row.columnGrid}\n                      onChange={columnGrid => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(columnGrid, 'columnGrid', row._id);\n                      }}\n                    />\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'version',\n              text: 'Version',\n              headerClasses: 'textHeader5',\n              sort: true,\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n              // filter: customFilter({\n              //   getFilter: filter => {\n              //     version = filter;\n              //   },\n              // }),\n              // filterRenderer: (onFilter, column) => (\n              //   <NumberFilter onFilter={onFilter} column={column} />\n              // ),\n            },\n            {\n              dataField: 'environment',\n              text: 'Environment',\n              headerClasses: 'textHeader5',\n              sort: true,\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n              // filter: textFilter({\n              //   getFilter: filter => {\n              //     environment = filter;\n              //   },\n              // }),\n            },\n            {\n              dataField: 'operation',\n              text: 'Action',\n              editable: false,\n              csvExport: false,\n              hidden: !props.isDelete,\n              formatter: (cellContent, row) => (\n                <>\n                  <div className='flex flex-row'>\n                    <Tooltip tooltipText='Delete' position='top'>\n                      <Icons.IconContext\n                        color='#fff'\n                        size='20'\n                        onClick={() =>\n                          props.onDelete &&\n                          props.onDelete({\n                            type: 'delete',\n                            show: true,\n                            id: [row._id],\n                            title: 'Are you sure?',\n                            body: 'Delete item',\n                          })\n                        }\n                      >\n                        {Icons.getIconTag(Icons.IconBs.BsFillTrashFill)}\n                      </Icons.IconContext>\n                    </Tooltip>\n                  </div>\n                </>\n              ),\n              headerClasses: 'sticky right-0  bg-gray-500 text-white z-50',\n              classes: (cell, row, rowIndex, colIndex) => {\n                return 'sticky right-0 bg-gray-500';\n              },\n              style: (cell, row, rowIndex, colIndex) => {\n                return {\n                  zIndex: props.data?.length - rowIndex,\n                };\n              },\n            },\n          ]}\n          isEditModify={props.isEditModify}\n          isSelectRow={true}\n          fileName='Section_Settings'\n          onSelectedRow={rows => {\n            props.onSelectedRow &&\n              props.onSelectedRow(rows.map((item: any) => item._id));\n          }}\n          onUpdateItem={(value: any, dataField: string, id: string) => {\n            props.onUpdateItem && props.onUpdateItem(value, dataField, id);\n          }}\n          onPageSizeChange={(page, size) => {\n            props.onPageSizeChange && props.onPageSizeChange(page, size);\n          }}\n          onFilter={(type, filter, page, size) => {\n            props.onFilter && props.onFilter(type, filter, page, size);\n          }}\n          clearAllFilter={() => {\n            sectionSetting('');\n            version('');\n            environment('');\n          }}\n        />\n      </div>\n    </>\n  );\n});\n","import React from 'react';\nimport {observer} from 'mobx-react';\nimport {TableBootstrap, Tooltip, Icons} from '@/library/components';\nimport {Confirm} from '@/library/models';\n\ninterface PageSettingsProps {\n  data: any;\n  totalSize: number;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  onDelete?: (selectedItem: Confirm) => void;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (value: any, dataField: string, id: string) => void;\n  onPageSizeChange?: (page: number, totalSize: number) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n}\n\nlet sectionSetting;\nlet version;\nlet environment;\n\nexport const PageSettingsList = observer((props: PageSettingsProps) => {\n  return (\n    <>\n      <div style={{position: 'relative'}}>\n        <TableBootstrap\n          id='_id'\n          data={props.data}\n          totalSize={props.totalSize}\n          columns={[\n            {\n              dataField: '_id',\n              text: 'Id',\n              hidden: true,\n              csvExport: false,\n            },\n            {\n              dataField: 'tempCode',\n              text: 'Page Id',\n              headerClasses: 'textHeader',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'pageSize',\n              text: 'Page Size',\n              headerClasses: 'textHeader4',\n              // filter: textFilter({\n              //   getFilter: filter => {\n              //     sectionSetting = filter;\n              //   },\n              // }),\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'topMargin',\n              text: 'Top Margin',\n              headerClasses: 'textHeader4',\n              // filter: textFilter({\n              //   getFilter: filter => {\n              //     sectionSetting = filter;\n              //   },\n              // }),\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'bottomMargin',\n              text: 'Bottom Margin',\n              headerClasses: 'textHeader4',\n              // filter: textFilter({\n              //   getFilter: filter => {\n              //     sectionSetting = filter;\n              //   },\n              // }),\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'leftMargin',\n              text: 'Left Margin',\n              headerClasses: 'textHeader4',\n              // filter: textFilter({\n              //   getFilter: filter => {\n              //     sectionSetting = filter;\n              //   },\n              // }),\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'rightMargin',\n              text: 'Right Margin',\n              headerClasses: 'textHeader4',\n              // filter: textFilter({\n              //   getFilter: filter => {\n              //     sectionSetting = filter;\n              //   },\n              // }),\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'headerSize',\n              text: 'Header Size',\n              headerClasses: 'textHeader4',\n              // filter: textFilter({\n              //   getFilter: filter => {\n              //     sectionSetting = filter;\n              //   },\n              // }),\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'footerSize',\n              text: 'Footer Size',\n              headerClasses: 'textHeader4',\n              // filter: textFilter({\n              //   getFilter: filter => {\n              //     sectionSetting = filter;\n              //   },\n              // }),\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'lineSpacing',\n              text: 'Line Spacing',\n              headerClasses: 'textHeader4',\n              // filter: textFilter({\n              //   getFilter: filter => {\n              //     sectionSetting = filter;\n              //   },\n              // }),\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'pageOrientation',\n              text: 'Page Orientation',\n              headerClasses: 'textHeader4',\n              // filter: textFilter({\n              //   getFilter: filter => {\n              //     sectionSetting = filter;\n              //   },\n              // }),\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'backgroundImage',\n              text: 'Background Image',\n              headerClasses: 'textHeader4',\n              // filter: textFilter({\n              //   getFilter: filter => {\n              //     sectionSetting = filter;\n              //   },\n              // }),\n              sort: true,\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    {row.backgroundImage && (\n                      <img\n                        src={row.backgroundImage}\n                        alt='backgroundImage'\n                        className='object-fill h-35 w-40 rounded-md'\n                      />\n                    )}\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'version',\n              text: 'Version',\n              headerClasses: 'textHeader5',\n              sort: true,\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n              // filter: customFilter({\n              //   getFilter: filter => {\n              //     version = filter;\n              //   },\n              // }),\n              // filterRenderer: (onFilter, column) => (\n              //   <NumberFilter onFilter={onFilter} column={column} />\n              // ),\n            },\n            {\n              dataField: 'environment',\n              text: 'Environment',\n              headerClasses: 'textHeader5',\n              sort: true,\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n              // filter: textFilter({\n              //   getFilter: filter => {\n              //     environment = filter;\n              //   },\n              // }),\n            },\n            {\n              dataField: 'operation',\n              text: 'Action',\n              editable: false,\n              csvExport: false,\n              hidden: !props.isDelete,\n              formatter: (cellContent, row) => (\n                <>\n                  <div className='flex flex-row'>\n                    <Tooltip tooltipText='Delete' position='bottom'>\n                      <Icons.IconContext\n                        color='#fff'\n                        size='20'\n                        onClick={() =>\n                          props.onDelete &&\n                          props.onDelete({\n                            type: 'delete',\n                            show: true,\n                            id: [row._id],\n                            title: 'Are you sure?',\n                            body: 'Delete item',\n                          })\n                        }\n                      >\n                        {Icons.getIconTag(Icons.IconBs.BsFillTrashFill)}\n                      </Icons.IconContext>\n                    </Tooltip>\n                  </div>\n                </>\n              ),\n              headerClasses: 'sticky right-0  bg-gray-500 text-white z-50',\n              classes: (cell, row, rowIndex, colIndex) => {\n                return 'sticky right-0 bg-gray-500';\n              },\n              style: (cell, row, rowIndex, colIndex) => {\n                return {\n                  zIndex: props.data?.length - rowIndex,\n                };\n              },\n            },\n          ]}\n          isEditModify={props.isEditModify}\n          isSelectRow={true}\n          fileName='Page_Settings'\n          onSelectedRow={rows => {\n            props.onSelectedRow &&\n              props.onSelectedRow(rows.map((item: any) => item._id));\n          }}\n          onUpdateItem={(value: any, dataField: string, id: string) => {\n            props.onUpdateItem && props.onUpdateItem(value, dataField, id);\n          }}\n          onPageSizeChange={(page, size) => {\n            props.onPageSizeChange && props.onPageSizeChange(page, size);\n          }}\n          onFilter={(type, filter, page, size) => {\n            props.onFilter && props.onFilter(type, filter, page, size);\n          }}\n          clearAllFilter={() => {\n            sectionSetting('');\n            version('');\n            environment('');\n          }}\n        />\n      </div>\n    </>\n  );\n});\n","import React from 'react';\nimport {observer} from 'mobx-react';\nimport {\n  NumberFilter,\n  textFilter,\n  customFilter,\n  Form,\n  TableBootstrap,\n  Tooltip,\n  Icons,\n} from '@/library/components';\nimport {Confirm} from '@/library/models';\nimport dayjs from 'dayjs';\n\ninterface GeneralSettingsProps {\n  data: any;\n  totalSize: number;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  onDelete?: (selectedItem: Confirm) => void;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (value: any, dataField: string, id: string) => void;\n  onPageSizeChange?: (page: number, totalSize: number) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n}\n\nlet sectionSetting;\nlet version;\nlet environment;\n\nexport const GeneralSettingsList = observer((props: GeneralSettingsProps) => {\n  return (\n    <>\n      <div style={{position: 'relative'}}>\n        <TableBootstrap\n          id='_id'\n          data={props.data}\n          totalSize={props.totalSize}\n          columns={[\n            {\n              dataField: '_id',\n              text: 'Id',\n              hidden: true,\n              csvExport: false,\n            },\n            {\n              dataField: 'tempCode',\n              text: 'Template Code',\n              headerClasses: 'textHeader',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'reportSection.section',\n              text: 'Section',\n              headerClasses: 'textHeader4',\n              // filter: textFilter({\n              //   getFilter: filter => {\n              //     sectionSetting = filter;\n              //   },\n              // }),\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'sectionSetting.tempCode',\n              text: 'Section Id',\n              headerClasses: 'textHeader4',\n              // filter: textFilter({\n              //   getFilter: filter => {\n              //     sectionSetting = filter;\n              //   },\n              // }),\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'pageSetting.tempCode',\n              text: 'Page Id',\n              headerClasses: 'textHeader4',\n              // filter: textFilter({\n              //   getFilter: filter => {\n              //     sectionSetting = filter;\n              //   },\n              // }),\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'version',\n              text: 'Version',\n              headerClasses: 'textHeader5',\n              sort: true,\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n              // filter: customFilter({\n              //   getFilter: filter => {\n              //     version = filter;\n              //   },\n              // }),\n              // filterRenderer: (onFilter, column) => (\n              //   <NumberFilter onFilter={onFilter} column={column} />\n              // ),\n            },\n            {\n              dataField: 'environment',\n              text: 'Environment',\n              headerClasses: 'textHeader5',\n              sort: true,\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n              // filter: textFilter({\n              //   getFilter: filter => {\n              //     environment = filter;\n              //   },\n              // }),\n            },\n            {\n              dataField: 'operation',\n              text: 'Action',\n              editable: false,\n              csvExport: false,\n              hidden: !props.isDelete,\n              formatter: (cellContent, row) => (\n                <>\n                  <div className='flex flex-row'>\n                    <Tooltip tooltipText='Delete'>\n                      <Icons.IconContext\n                        color='#fff'\n                        size='20'\n                        onClick={() =>\n                          props.onDelete &&\n                          props.onDelete({\n                            type: 'delete',\n                            show: true,\n                            id: [row._id],\n                            title: 'Are you sure?',\n                            body: 'Delete item',\n                          })\n                        }\n                      >\n                        {Icons.getIconTag(Icons.IconBs.BsFillTrashFill)}\n                      </Icons.IconContext>\n                    </Tooltip>\n                  </div>\n                </>\n              ),\n              headerClasses: 'sticky right-0  bg-gray-500 text-white z-50',\n              classes: (cell, row, rowIndex, colIndex) => {\n                return 'sticky right-0 bg-gray-500';\n              },\n              style: (cell, row, rowIndex, colIndex) => {\n                return {\n                  zIndex: props.data?.length - rowIndex,\n                };\n              },\n            },\n          ]}\n          isEditModify={props.isEditModify}\n          isSelectRow={true}\n          fileName='General_Settings'\n          onSelectedRow={rows => {\n            props.onSelectedRow &&\n              props.onSelectedRow(rows.map((item: any) => item._id));\n          }}\n          onUpdateItem={(value: any, dataField: string, id: string) => {\n            props.onUpdateItem && props.onUpdateItem(value, dataField, id);\n          }}\n          onPageSizeChange={(page, size) => {\n            props.onPageSizeChange && props.onPageSizeChange(page, size);\n          }}\n          onFilter={(type, filter, page, size) => {\n            props.onFilter && props.onFilter(type, filter, page, size);\n          }}\n          clearAllFilter={() => {\n            sectionSetting('');\n            version('');\n            environment('');\n          }}\n        />\n      </div>\n    </>\n  );\n});\n","import React from 'react';\nimport {observer} from 'mobx-react';\nimport {\n  NumberFilter,\n  textFilter,\n  customFilter,\n  Form,\n  TableBootstrap,\n  Tooltip,\n  Icons,\n} from '@/library/components';\nimport {Confirm} from '@/library/models';\nimport dayjs from 'dayjs';\nimport {invertHex} from '@/library/utils';\n\ninterface FontSettingsProps {\n  data: any;\n  totalSize: number;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  onDelete?: (selectedItem: Confirm) => void;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (value: any, dataField: string, id: string) => void;\n  onPageSizeChange?: (page: number, totalSize: number) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n}\n\nlet sectionSetting;\nlet version;\nlet environment;\n\nexport const FontSettingsList = observer((props: FontSettingsProps) => {\n  return (\n    <>\n      <div style={{position: 'relative'}}>\n        <TableBootstrap\n          id='_id'\n          data={props.data}\n          totalSize={props.totalSize}\n          columns={[\n            {\n              dataField: '_id',\n              text: 'Id',\n              hidden: true,\n              csvExport: false,\n            },\n            {\n              dataField: 'fontId',\n              text: 'Font Id',\n              headerClasses: 'textHeader',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'fontName',\n              text: 'Font Name',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'fontSize',\n              text: 'Font Size',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'fontColor',\n              text: 'Font Color',\n              sort: true,\n              editable: false,\n              style: (cell, row, rowIndex, colIndex) => {\n                return {\n                  color: row.fontColor,\n                };\n              },\n            },\n            {\n              dataField: 'fontBackground',\n              text: 'Font Background',\n              sort: true,\n              editable: false,\n              style: (cell, row, rowIndex, colIndex) => {\n                return {\n                  color: invertHex(row.fontBackground),\n                  backgroundColor: row.fontBackground,\n                };\n              },\n            },\n            {\n              dataField: 'fontCase',\n              text: 'Font Case',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'fontCss',\n              text: 'Font CSS',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'version',\n              text: 'Version',\n              headerClasses: 'textHeader5',\n              sort: true,\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n              // filter: customFilter({\n              //   getFilter: filter => {\n              //     version = filter;\n              //   },\n              // }),\n              // filterRenderer: (onFilter, column) => (\n              //   <NumberFilter onFilter={onFilter} column={column} />\n              // ),\n            },\n            {\n              dataField: 'environment',\n              text: 'Environment',\n              headerClasses: 'textHeader5',\n              sort: true,\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n              // filter: textFilter({\n              //   getFilter: filter => {\n              //     environment = filter;\n              //   },\n              // }),\n            },\n            {\n              dataField: 'operation',\n              text: 'Action',\n              editable: false,\n              csvExport: false,\n              hidden: !props.isDelete,\n              formatter: (cellContent, row) => (\n                <>\n                  <div className='flex flex-row'>\n                    <Tooltip tooltipText='Delete'>\n                      <Icons.IconContext\n                        color='#fff'\n                        size='20'\n                        onClick={() =>\n                          props.onDelete &&\n                          props.onDelete({\n                            type: 'delete',\n                            show: true,\n                            id: [row._id],\n                            title: 'Are you sure?',\n                            body: 'Delete item',\n                          })\n                        }\n                      >\n                        {Icons.getIconTag(Icons.IconBs.BsFillTrashFill)}\n                      </Icons.IconContext>\n                    </Tooltip>\n                  </div>\n                </>\n              ),\n              headerClasses: 'sticky right-0  bg-gray-500 text-white z-50',\n              classes: (cell, row, rowIndex, colIndex) => {\n                return 'sticky right-0 bg-gray-500';\n              },\n              style: (cell, row, rowIndex, colIndex) => {\n                return {\n                  zIndex: props.data?.length - rowIndex,\n                };\n              },\n            },\n          ]}\n          isEditModify={props.isEditModify}\n          isSelectRow={true}\n          fileName='Font_Settings'\n          onSelectedRow={rows => {\n            props.onSelectedRow &&\n              props.onSelectedRow(rows.map((item: any) => item._id));\n          }}\n          onUpdateItem={(value: any, dataField: string, id: string) => {\n            props.onUpdateItem && props.onUpdateItem(value, dataField, id);\n          }}\n          onPageSizeChange={(page, size) => {\n            props.onPageSizeChange && props.onPageSizeChange(page, size);\n          }}\n          onFilter={(type, filter, page, size) => {\n            props.onFilter && props.onFilter(type, filter, page, size);\n          }}\n          clearAllFilter={() => {\n            sectionSetting('');\n            version('');\n            environment('');\n          }}\n        />\n      </div>\n    </>\n  );\n});\n","import React from 'react';\nimport {observer} from 'mobx-react';\nimport {TableBootstrap, Tooltip, Icons} from '@/library/components';\nimport {Confirm} from '@/library/models';\n\ninterface ReportFieldMappingProps {\n  data: any;\n  totalSize: number;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  onDelete?: (selectedItem: Confirm) => void;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (value: any, dataField: string, id: string) => void;\n  onPageSizeChange?: (page: number, totalSize: number) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n}\n\nlet sectionSetting;\nlet version;\nlet environment;\n\nexport const ReportFieldMappingList = observer(\n  (props: ReportFieldMappingProps) => {\n    return (\n      <>\n        <div style={{position: 'relative'}}>\n          <TableBootstrap\n            id='_id'\n            data={props.data}\n            totalSize={props.totalSize}\n            columns={[\n              {\n                dataField: '_id',\n                text: 'Id',\n                hidden: true,\n                csvExport: false,\n              },\n              {\n                dataField: 'tempCode',\n                text: 'Temp Code',\n                headerClasses: 'textHeader',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'section.tempCode',\n                text: 'Section',\n                // filter: textFilter({\n                //   getFilter: filter => {\n                //     sectionSetting = filter;\n                //   },\n                // }),\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'sectionStyle',\n                text: 'Section Style',\n                // filter: textFilter({\n                //   getFilter: filter => {\n                //     sectionSetting = filter;\n                //   },\n                // }),\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'tableName.subTableName',\n                text: 'Table Name',\n                // filter: textFilter({\n                //   getFilter: filter => {\n                //     sectionSetting = filter;\n                //   },\n                // }),\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'fieldName',\n                text: 'Field Name',\n                // filter: textFilter({\n                //   getFilter: filter => {\n                //     sectionSetting = filter;\n                //   },\n                // }),\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'startFromLine',\n                text: 'Start From Line',\n                // filter: textFilter({\n                //   getFilter: filter => {\n                //     sectionSetting = filter;\n                //   },\n                // }),\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'startFromColumn',\n                text: 'Start From Column',\n                // filter: textFilter({\n                //   getFilter: filter => {\n                //     sectionSetting = filter;\n                //   },\n                // }),\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'fieldLength',\n                text: 'Field Length',\n                // filter: textFilter({\n                //   getFilter: filter => {\n                //     sectionSetting = filter;\n                //   },\n                // }),\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'fontId.fontId',\n                text: 'Font Id',\n                // filter: textFilter({\n                //   getFilter: filter => {\n                //     sectionSetting = filter;\n                //   },\n                // }),\n                sort: true,\n                editable: false,\n              },\n\n              {\n                dataField: 'operation',\n                text: 'Action',\n                editable: false,\n                csvExport: false,\n                hidden: !props.isDelete,\n                formatter: (cellContent, row) => (\n                  <>\n                    <div className='flex flex-row'>\n                      <Tooltip tooltipText='Delete'>\n                        <Icons.IconContext\n                          color='#fff'\n                          size='20'\n                          onClick={() =>\n                            props.onDelete &&\n                            props.onDelete({\n                              type: 'delete',\n                              show: true,\n                              id: [row._id],\n                              title: 'Are you sure?',\n                              body: 'Delete item',\n                            })\n                          }\n                        >\n                          {Icons.getIconTag(Icons.IconBs.BsFillTrashFill)}\n                        </Icons.IconContext>\n                      </Tooltip>\n                    </div>\n                  </>\n                ),\n                headerClasses: 'sticky right-0  bg-gray-500 text-white z-50',\n                classes: (cell, row, rowIndex, colIndex) => {\n                  return 'sticky right-0 bg-gray-500';\n                },\n                style: (cell, row, rowIndex, colIndex) => {\n                  return {\n                    zIndex: props.data?.length - rowIndex,\n                  };\n                },\n              },\n            ]}\n            isEditModify={props.isEditModify}\n            isSelectRow={true}\n            fileName='Page_Settings'\n            onSelectedRow={rows => {\n              props.onSelectedRow &&\n                props.onSelectedRow(rows.map((item: any) => item._id));\n            }}\n            onUpdateItem={(value: any, dataField: string, id: string) => {\n              props.onUpdateItem && props.onUpdateItem(value, dataField, id);\n            }}\n            onPageSizeChange={(page, size) => {\n              props.onPageSizeChange && props.onPageSizeChange(page, size);\n            }}\n            onFilter={(type, filter, page, size) => {\n              props.onFilter && props.onFilter(type, filter, page, size);\n            }}\n            clearAllFilter={() => {\n              sectionSetting('');\n              version('');\n              environment('');\n            }}\n          />\n        </div>\n      </>\n    );\n  },\n);\n","import React from 'react';\nimport {observer} from 'mobx-react';\nimport _ from 'lodash';\nimport {Form} from '@/library/components';\nimport {useForm, Controller} from 'react-hook-form';\nimport {useStores} from '@/stores';\n\nexport const PageBrandingSubHeader = observer(() => {\n  const {loading, routerStore, reportSettingStore} = useStores();\n  const {\n    control,\n    handleSubmit,\n    formState: {errors},\n    setValue,\n    setError,\n    clearErrors,\n  } = useForm();\n\n  return (\n    <>\n      <Controller\n        control={control}\n        render={({field: {onChange}}) => (\n          <Form.Input\n            label='Title'\n            placeholder='Title'\n            hasError={!!errors.title}\n            value={reportSettingStore.pageBranding?.subHeader?.title}\n            onChange={title => {\n              onChange(title);\n              reportSettingStore.updatePageBranding({\n                ...reportSettingStore.pageBranding,\n                subHeader: {\n                  ...reportSettingStore.pageBranding?.subHeader,\n                  title,\n                },\n              });\n            }}\n          />\n        )}\n        name='title'\n        rules={{required: false}}\n        defaultValue=''\n      />\n\n      <Controller\n        control={control}\n        render={({field: {onChange}}) => (\n          <Form.MultilineInput\n            label='Title CSS'\n            style={{color: '#ffffff', backgroundColor: '#000000'}}\n            placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n            value={reportSettingStore.pageBranding?.subHeader?.titleCSS}\n            onChange={titleCSS => {\n              reportSettingStore.updatePageBranding({\n                ...reportSettingStore.pageBranding,\n                subHeader: {\n                  ...reportSettingStore.pageBranding.subHeader,\n                  titleCSS,\n                },\n              });\n            }}\n          />\n        )}\n        name='titleCSS'\n        rules={{required: false}}\n        defaultValue=''\n      />\n\n      <Controller\n        control={control}\n        render={({field: {onChange}}) => (\n          <Form.Input\n            label='Sub Title'\n            placeholder='Sub Title'\n            hasError={!!errors.subTitle}\n            value={reportSettingStore.pageBranding?.subHeader?.subTitle}\n            onChange={subTitle => {\n              onChange(subTitle);\n              reportSettingStore.updatePageBranding({\n                ...reportSettingStore.pageBranding,\n                subHeader: {\n                  ...reportSettingStore.pageBranding?.subHeader,\n                  subTitle,\n                },\n              });\n            }}\n          />\n        )}\n        name='subTitle'\n        rules={{required: false}}\n        defaultValue=''\n      />\n\n      <Controller\n        control={control}\n        render={({field: {onChange}}) => (\n          <Form.MultilineInput\n            label='Sub Title CSS'\n            style={{color: '#ffffff', backgroundColor: '#000000'}}\n            placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n            value={reportSettingStore.pageBranding?.subHeader?.subTitleCSS}\n            onChange={subTitleCSS => {\n              reportSettingStore.updatePageBranding({\n                ...reportSettingStore.pageBranding,\n                subHeader: {\n                  ...reportSettingStore.pageBranding.subHeader,\n                  subTitleCSS,\n                },\n              });\n            }}\n          />\n        )}\n        name='subTitleCSS'\n        rules={{required: false}}\n        defaultValue=''\n      />\n\n      <Controller\n        control={control}\n        render={({field: {onChange}}) => (\n          <Form.MultilineInput\n            label='Main Box CSS'\n            style={{color: '#ffffff', backgroundColor: '#000000'}}\n            placeholder={\"Like backgroundColor:'#000000'\"}\n            value={reportSettingStore.pageBranding?.subHeader?.mainBoxCSS}\n            onChange={mainBoxCSS => {\n              reportSettingStore.updatePageBranding({\n                ...reportSettingStore.pageBranding,\n                subHeader: {\n                  ...reportSettingStore.pageBranding.subHeader,\n                  mainBoxCSS,\n                },\n              });\n            }}\n          />\n        )}\n        name='subHeaderMainBoxCss'\n        rules={{required: false}}\n        defaultValue=''\n      />\n    </>\n  );\n});\n","import React from 'react';\nimport {observer} from 'mobx-react';\nimport _ from 'lodash';\nimport {Form} from '@/library/components';\nimport {useForm, Controller} from 'react-hook-form';\nimport {useStores} from '@/stores';\n\nexport const PageBrandingFooter = observer(() => {\n  const {reportSettingStore} = useStores();\n  const {\n    control,\n    handleSubmit,\n    formState: {errors},\n    setValue,\n    setError,\n    clearErrors,\n  } = useForm();\n\n  return (\n    <>\n      <Controller\n        control={control}\n        render={({field: {onChange}}) => (\n          <Form.Input\n            label='Title'\n            placeholder='Title'\n            hasError={!!errors.footerTitle}\n            value={reportSettingStore.pageBranding?.footer?.title}\n            onChange={title => {\n              onChange(title);\n              reportSettingStore.updatePageBranding({\n                ...reportSettingStore.pageBranding,\n                footer: {\n                  ...reportSettingStore.pageBranding?.footer,\n                  title,\n                },\n              });\n            }}\n          />\n        )}\n        name='footerTitle'\n        rules={{required: false}}\n        defaultValue=''\n      />\n\n      <Controller\n        control={control}\n        render={({field: {onChange}}) => (\n          <Form.MultilineInput\n            label='Title CSS'\n            style={{color: '#ffffff', backgroundColor: '#000000'}}\n            placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n            value={reportSettingStore.pageBranding?.footer?.titleCSS}\n            onChange={titleCSS => {\n              reportSettingStore.updatePageBranding({\n                ...reportSettingStore.pageBranding,\n                footer: {\n                  ...reportSettingStore.pageBranding.footer,\n                  titleCSS,\n                },\n              });\n            }}\n          />\n        )}\n        name='footerTitleCSS'\n        rules={{required: false}}\n        defaultValue=''\n      />\n      <Controller\n        control={control}\n        render={({field: {onChange}}) => (\n          <Form.Input\n            label='Sub Title'\n            placeholder='Sub Title'\n            hasError={!!errors.subTitle}\n            value={reportSettingStore.pageBranding?.footer?.subTitle}\n            onChange={subTitle => {\n              onChange(subTitle);\n              reportSettingStore.updatePageBranding({\n                ...reportSettingStore.pageBranding,\n                footer: {\n                  ...reportSettingStore.pageBranding?.footer,\n                  subTitle,\n                },\n              });\n            }}\n          />\n        )}\n        name='subTitle'\n        rules={{required: false}}\n        defaultValue=''\n      />\n\n      <Controller\n        control={control}\n        render={({field: {onChange}}) => (\n          <Form.MultilineInput\n            label='Sub Title CSS'\n            style={{color: '#ffffff', backgroundColor: '#000000'}}\n            placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n            value={reportSettingStore.pageBranding?.footer?.subTitleCSS}\n            onChange={subTitleCSS => {\n              reportSettingStore.updatePageBranding({\n                ...reportSettingStore.pageBranding,\n                footer: {\n                  ...reportSettingStore.pageBranding.footer,\n                  subTitleCSS,\n                },\n              });\n            }}\n          />\n        )}\n        name='subTitleCSS'\n        rules={{required: false}}\n        defaultValue=''\n      />\n\n      <Controller\n        control={control}\n        render={({field: {onChange}}) => (\n          <Form.MultilineInput\n            label='Main Box CSS'\n            style={{color: '#ffffff', backgroundColor: '#000000'}}\n            placeholder={\"Like backgroundColor:'#000000'\"}\n            value={reportSettingStore.pageBranding?.footer?.mainBoxCSS}\n            onChange={mainBoxCSS => {\n              reportSettingStore.updatePageBranding({\n                ...reportSettingStore.pageBranding,\n                footer: {\n                  ...reportSettingStore.pageBranding?.footer,\n                  mainBoxCSS,\n                },\n              });\n            }}\n          />\n        )}\n        name='footerMainBoxCss'\n        rules={{required: false}}\n        defaultValue=''\n      />\n    </>\n  );\n});\n","import React from 'react';\nimport {observer} from 'mobx-react';\nimport _ from 'lodash';\nimport {Form} from '@/library/components';\nimport {useForm, Controller} from 'react-hook-form';\nimport {useStores} from '@/stores';\n\nexport const PageNumber = observer(() => {\n  const {reportSettingStore} = useStores();\n  const {\n    control,\n    handleSubmit,\n    formState: {errors},\n    setValue,\n    setError,\n    clearErrors,\n  } = useForm();\n\n  return (\n    <>\n      <Controller\n        control={control}\n        render={({field: {onChange}}) => (\n          <Form.MultilineInput\n            label='Page Number CSS'\n            style={{color: '#ffffff', backgroundColor: '#000000'}}\n            placeholder={\n              \"Like  position: 'absolute',bottom: bottom,right: 5,fontSize: 12,color: 'grey',\"\n            }\n            value={reportSettingStore.pageBranding?.pageNumber?.pageNumberCSS}\n            onChange={pageNumberCSS => {\n              reportSettingStore.updatePageBranding({\n                ...reportSettingStore.pageBranding,\n                pageNumber: {\n                  ...reportSettingStore.pageBranding.pageNumber,\n                  pageNumberCSS,\n                },\n              });\n            }}\n          />\n        )}\n        name='pageNumberCSS'\n        rules={{required: false}}\n        defaultValue=''\n      />\n    </>\n  );\n});\n","import React from 'react';\nimport {observer} from 'mobx-react';\nimport {\n  NumberFilter,\n  textFilter,\n  customFilter,\n  Form,\n  TableBootstrap,\n  Tooltip,\n  Icons,\n} from '@/library/components';\nimport {Confirm} from '@/library/models';\nimport {resizeFile, compressString} from '@/library/utils';\ninterface PageBrandingProps {\n  data: any;\n  totalSize: number;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  onDelete?: (selectedItem: Confirm) => void;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (fields: any, id: string) => void;\n  onPageSizeChange?: (page: number, totalSize: number) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n  onPdfPreview?: (selectedItem: any) => void;\n}\n\nlet sectionSetting;\nlet version;\nlet environment;\n\nexport const PageBrandingList = observer((props: PageBrandingProps) => {\n  return (\n    <>\n      <div style={{position: 'relative'}}>\n        <TableBootstrap\n          id='_id'\n          data={props.data}\n          totalSize={props.totalSize}\n          columns={[\n            {\n              dataField: '_id',\n              text: 'Id',\n              hidden: true,\n              csvExport: false,\n            },\n            {\n              dataField: 'tempCode',\n              text: 'Template Code',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'brandingTitle',\n              text: 'Branding Title',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'isHeader',\n              text: 'Header Visible',\n              csvFormatter: (col, row) =>\n                `${row.isHeader ? (row.isHeader ? 'Yes' : 'No') : 'No'}`,\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <Form.Toggle\n                      value={row.isHeader}\n                      onChange={isHeader => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem({isHeader}, row._id);\n                      }}\n                    />\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'header.title',\n              text: 'Header Title',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  {row?.header?.title && (\n                    <Form.MultilineInput\n                      label=''\n                      className='w-40'\n                      onBlur={title => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            {header: {...row?.header, title}},\n                            row._id,\n                          );\n                      }}\n                      defaultValue={row.header?.title}\n                    />\n                  )}\n                </>\n              ),\n            },\n            {\n              dataField: 'header.titleCSS',\n              text: 'Header Title CSS',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  {row?.header?.titleCSS && (\n                    <Form.MultilineInput\n                      label=''\n                      style={{color: '#ffffff', backgroundColor: '#000000'}}\n                      onBlur={titleCSS => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            {header: {...row?.header, titleCSS}},\n                            row._id,\n                          );\n                      }}\n                      defaultValue={row?.header.titleCSS}\n                    />\n                  )}\n                </>\n              ),\n            },\n            {\n              dataField: 'header.logo',\n              text: 'Header Logo',\n              sort: true,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <img\n                      src={row.header?.logo}\n                      alt='logo'\n                      className='object-fill h-35 w-40 rounded-md'\n                    />\n                  </>\n                );\n              },\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  <Form.InputFile\n                    label='File'\n                    placeholder='File'\n                    onChange={async e => {\n                      const logo = e.target.files[0];\n                      props.onUpdateItem &&\n                        props.onUpdateItem(\n                          {\n                            header: {\n                              ...row.header,\n                              logo,\n                              logoUrl: compressString(await resizeFile(logo)),\n                            },\n                          },\n                          row._id,\n                        );\n                    }}\n                  />\n                </>\n              ),\n            },\n            {\n              dataField: 'header.logoCSS',\n              text: 'Header Logo CSS',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  {row?.header?.logoCSS && (\n                    <Form.MultilineInput\n                      label=''\n                      style={{color: '#ffffff', backgroundColor: '#000000'}}\n                      onBlur={logoCSS => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            {header: {...row?.header, logoCSS}},\n                            row._id,\n                          );\n                      }}\n                      defaultValue={row.header?.logoCSS}\n                    />\n                  )}\n                </>\n              ),\n            },\n            {\n              dataField: 'header.mainBoxCSS',\n              text: 'Header Main Box CSS',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  {row?.header?.mainBoxCSS && (\n                    <Form.MultilineInput\n                      label=''\n                      style={{color: '#ffffff', backgroundColor: '#000000'}}\n                      onBlur={mainBoxCSS => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            {header: {...row?.header, mainBoxCSS}},\n                            row._id,\n                          );\n                      }}\n                      defaultValue={row.header?.mainBoxCSS}\n                    />\n                  )}\n                </>\n              ),\n            },\n            {\n              dataField: 'isSubHeader',\n              text: 'Sub Header Visible',\n              csvFormatter: (col, row) =>\n                `${row.isSubHeader ? (row.isSubHeader ? 'Yes' : 'No') : 'No'}`,\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <Form.Toggle\n                      value={row.isSubHeader}\n                      onChange={isSubHeader => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem({isSubHeader}, row._id);\n                      }}\n                    />\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'subHeader.title',\n              text: 'Sub Header Title',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  {row?.subHeader?.title && (\n                    <Form.MultilineInput\n                      label=''\n                      className='w-40'\n                      onBlur={title => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            {subHeader: {...row?.subHeader, title}},\n                            row._id,\n                          );\n                      }}\n                      defaultValue={row?.subHeader?.title}\n                    />\n                  )}\n                </>\n              ),\n            },\n            {\n              dataField: 'subHeader.titleCSS',\n              text: 'Sub Header Title CSS',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  {row?.subHeader?.titleCSS && (\n                    <Form.MultilineInput\n                      label=''\n                      style={{color: '#ffffff', backgroundColor: '#000000'}}\n                      onBlur={titleCSS => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            {subHeader: {...row?.subHeader, titleCSS}},\n                            row._id,\n                          );\n                      }}\n                      defaultValue={row?.subHeader?.titleCSS}\n                    />\n                  )}\n                </>\n              ),\n            },\n            {\n              dataField: 'subHeader.subTitle',\n              text: 'Sub Header Sub Title',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  {row.subHeader?.subTitle && (\n                    <Form.MultilineInput\n                      label=''\n                      className='w-40'\n                      onBlur={subTitle => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            {subHeader: {...row?.subHeader, subTitle}},\n                            row._id,\n                          );\n                      }}\n                      defaultValue={row.subHeader?.subTitle}\n                    />\n                  )}\n                </>\n              ),\n            },\n            {\n              dataField: 'subHeader.subTitleCSS',\n              text: 'Sub Header Sub Title CSS',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  {row.subHeader?.subTitleCSS && (\n                    <Form.MultilineInput\n                      label=''\n                      style={{color: '#ffffff', backgroundColor: '#000000'}}\n                      onBlur={subTitleCSS => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            {subHeader: {...row?.subHeader, subTitleCSS}},\n                            row._id,\n                          );\n                      }}\n                      defaultValue={row?.subHeader?.subTitleCSS}\n                    />\n                  )}\n                </>\n              ),\n            },\n            {\n              dataField: 'subHeader.mainBoxCSS',\n              text: 'Sub Header Main Box CSS',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  {row.subHeader?.mainBoxCSS && (\n                    <Form.MultilineInput\n                      label=''\n                      style={{color: '#ffffff', backgroundColor: '#000000'}}\n                      onBlur={mainBoxCSS => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            {subHeader: {...row?.subHeader, mainBoxCSS}},\n                            row._id,\n                          );\n                      }}\n                      defaultValue={row?.subHeader?.mainBoxCSS}\n                    />\n                  )}\n                </>\n              ),\n            },\n            {\n              dataField: 'isFooter',\n              text: 'Footer Visible',\n              csvFormatter: (col, row) =>\n                `${row.isFooter ? (row.isFooter ? 'Yes' : 'No') : 'No'}`,\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <Form.Toggle\n                      value={row.isFooter}\n                      onChange={isFooter => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem({isFooter}, row._id);\n                      }}\n                    />\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'footer.title',\n              text: 'Footer Title',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  {row.footer?.title && (\n                    <Form.MultilineInput\n                      label=''\n                      className='w-40'\n                      onBlur={title => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            {footer: {...row?.footer, title}},\n                            row._id,\n                          );\n                      }}\n                      defaultValue={row.footer?.title}\n                    />\n                  )}\n                </>\n              ),\n            },\n            {\n              dataField: 'footer.titleCSS',\n              text: 'Footer Title CSS',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  {row.footer?.titleCSS && (\n                    <Form.MultilineInput\n                      label=''\n                      style={{color: '#ffffff', backgroundColor: '#000000'}}\n                      onBlur={titleCSS => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            {footer: {...row?.footer, titleCSS}},\n                            row._id,\n                          );\n                      }}\n                      defaultValue={row.footer?.titleCSS}\n                    />\n                  )}\n                </>\n              ),\n            },\n            {\n              dataField: 'footer.subTitle',\n              text: 'Footer Sub Title',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  {row.footer?.subTitle && (\n                    <Form.MultilineInput\n                      label=''\n                      className='w-40'\n                      onBlur={subTitle => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            {footer: {...row?.footer, subTitle}},\n                            row._id,\n                          );\n                      }}\n                      defaultValue={row.footer?.subTitle}\n                    />\n                  )}\n                </>\n              ),\n            },\n            {\n              dataField: 'footer.subTitleCSS',\n              text: 'Footer Sub Title CSS',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  {row.footer?.subTitleCSS && (\n                    <Form.MultilineInput\n                      label=''\n                      style={{color: '#ffffff', backgroundColor: '#000000'}}\n                      onBlur={subTitleCSS => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            {footer: {...row?.footer, subTitleCSS}},\n                            row._id,\n                          );\n                      }}\n                      defaultValue={row.footer?.subTitleCSS}\n                    />\n                  )}\n                </>\n              ),\n            },\n            {\n              dataField: 'footer.mainBoxCSS',\n              text: 'Footer Main Box CSS',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  {row.footer?.mainBoxCSS && (\n                    <Form.MultilineInput\n                      label=''\n                      style={{color: '#ffffff', backgroundColor: '#000000'}}\n                      onBlur={mainBoxCSS => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            {footer: {...row?.footer, mainBoxCSS}},\n                            row._id,\n                          );\n                      }}\n                      defaultValue={row.footer?.mainBoxCSS}\n                    />\n                  )}\n                </>\n              ),\n            },\n            {\n              dataField: 'isPdfPageNumber',\n              text: 'Page Number Visible',\n              csvFormatter: (col, row) =>\n                `${\n                  row.isPdfPageNumber\n                    ? row.isPdfPageNumber\n                      ? 'Yes'\n                      : 'No'\n                    : 'No'\n                }`,\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <Form.Toggle\n                      value={row.isPdfPageNumber}\n                      onChange={isPdfPageNumber => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem({isPdfPageNumber}, row._id);\n                      }}\n                    />\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'pageNumber.pageNumberCSS',\n              text: 'Page Number CSS',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  {row.pageNumber?.pageNumberCSS && (\n                    <Form.MultilineInput\n                      label=''\n                      style={{color: '#ffffff', backgroundColor: '#000000'}}\n                      onBlur={pageNumberCSS => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            {pageNumber: {...row?.pageNumber, pageNumberCSS}},\n                            row._id,\n                          );\n                      }}\n                      defaultValue={row.pageNumber?.pageNumberCSS}\n                    />\n                  )}\n                </>\n              ),\n            },\n            {\n              dataField: 'operation',\n              text: 'Action',\n              editable: false,\n              csvExport: false,\n              hidden: !props.isDelete,\n              formatter: (cellContent, row) => (\n                <>\n                  <div className='flex flex-row'>\n                    <Tooltip tooltipText='Preview'>\n                      <Icons.IconContext\n                        color='#fff'\n                        size='20'\n                        onClick={() =>\n                          props.onPdfPreview && props.onPdfPreview(row)\n                        }\n                      >\n                        {Icons.getIconTag(Icons.IconIm.ImFilePdf)}\n                      </Icons.IconContext>\n                    </Tooltip>\n                    <Tooltip tooltipText='Delete'>\n                      <Icons.IconContext\n                        color='#fff'\n                        size='20'\n                        onClick={() =>\n                          props.onDelete &&\n                          props.onDelete({\n                            type: 'delete',\n                            show: true,\n                            id: [row._id],\n                            title: 'Are you sure?',\n                            body: 'Delete item',\n                          })\n                        }\n                      >\n                        {Icons.getIconTag(Icons.IconBs.BsFillTrashFill)}\n                      </Icons.IconContext>\n                    </Tooltip>\n                  </div>\n                </>\n              ),\n              headerClasses: 'sticky right-0  bg-gray-500 text-white z-50',\n              classes: (cell, row, rowIndex, colIndex) => {\n                return 'sticky right-0 bg-gray-500';\n              },\n              style: (cell, row, rowIndex, colIndex) => {\n                return {\n                  zIndex: props.data?.length - rowIndex,\n                };\n              },\n            },\n          ]}\n          isEditModify={props.isEditModify}\n          isSelectRow={true}\n          fileName='Page Branding'\n          onSelectedRow={rows => {\n            props.onSelectedRow &&\n              props.onSelectedRow(rows.map((item: any) => item._id));\n          }}\n          // onUpdateItem={(value: any, dataField: string, id: string) => {\n          //   props.onUpdateItem &&\n          //     props.onUpdateItem({'header.title': value}, id);\n          // }}\n          onPageSizeChange={(page, size) => {\n            props.onPageSizeChange && props.onPageSizeChange(page, size);\n          }}\n          onFilter={(type, filter, page, size) => {\n            props.onFilter && props.onFilter(type, filter, page, size);\n          }}\n          clearAllFilter={() => {\n            sectionSetting('');\n            version('');\n            environment('');\n          }}\n        />\n      </div>\n    </>\n  );\n});\n","import React from 'react';\nimport {observer} from 'mobx-react';\nimport {\n  NumberFilter,\n  textFilter,\n  customFilter,\n  Form,\n  TableBootstrap,\n  Tooltip,\n  Icons,\n} from '@/library/components';\nimport {Confirm} from '@/library/models';\nimport {resizeFile, compressString} from '@/library/utils';\n\ninterface TemplatePatientResultProps {\n  data: any;\n  totalSize: number;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  onDelete?: (selectedItem: Confirm) => void;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (fields: any, id: string) => void;\n  onPageSizeChange?: (page: number, totalSize: number) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n  onPdfPreview?: (selectedItem: any) => void;\n}\n\nlet sectionSetting;\nlet version;\nlet environment;\n\nexport const TemplatePatientResultList = observer(\n  (props: TemplatePatientResultProps) => {\n    return (\n      <>\n        <div style={{position: 'relative'}}>\n          <TableBootstrap\n            id='_id'\n            data={props.data}\n            totalSize={props.totalSize}\n            columns={[\n              {\n                dataField: '_id',\n                text: 'Id',\n                hidden: true,\n                csvExport: false,\n              },\n              {\n                dataField: 'reportTemplateType',\n                text: 'Report Template Type',\n                headerClasses: 'textHeader',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'pageBranding',\n                text: 'Page Branding',\n                headerClasses: 'textHeader',\n                sort: true,\n                editable: false,\n                formatter: (cell, row) => {\n                  return <>{row?.pageBranding?.tempCode}</>;\n                },\n              },\n              {\n                dataField: 'templateCode',\n                text: 'Template code',\n                headerClasses: 'textHeader',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'templateTitle',\n                text: 'Template title',\n                headerClasses: 'textHeader',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'endOfPage',\n                text: 'End Of Page',\n                headerClasses: 'textHeader',\n                sort: true,\n                editable: false,\n                formatter: (cell, row) => {\n                  return (\n                    <>\n                      {row?.endOfPage?.map(item => (\n                        <p>{` ${item?.details}`}</p>\n                      ))}\n                    </>\n                  );\n                },\n              },\n              {\n                dataField: 'endOfReport',\n                text: 'End Of Report',\n                headerClasses: 'textHeader',\n                sort: true,\n                editable: false,\n                formatter: (cell, row) => {\n                  return (\n                    <>\n                      {row?.endOfReport?.map(item => (\n                        <p>{` ${item?.details}`}</p>\n                      ))}\n                    </>\n                  );\n                },\n              },\n              {\n                dataField: 'operation',\n                text: 'Action',\n                editable: false,\n                csvExport: false,\n                hidden: !props.isDelete,\n                formatter: (cellContent, row) => (\n                  <>\n                    <div className='flex flex-row'>\n                      <Tooltip tooltipText='Delete' position='bottom'>\n                        <Icons.IconContext\n                          color='#fff'\n                          size='20'\n                          onClick={() =>\n                            props.onDelete &&\n                            props.onDelete({\n                              type: 'delete',\n                              show: true,\n                              id: [row._id],\n                              title: 'Are you sure?',\n                              body: 'Delete item',\n                            })\n                          }\n                        >\n                          {Icons.getIconTag(Icons.IconBs.BsFillTrashFill)}\n                        </Icons.IconContext>\n                      </Tooltip>\n                    </div>\n                  </>\n                ),\n                headerClasses: 'sticky right-0  bg-gray-500 text-white z-50',\n                classes: (cell, row, rowIndex, colIndex) => {\n                  return 'sticky right-0 bg-gray-500';\n                },\n                style: (cell, row, rowIndex, colIndex) => {\n                  return {\n                    zIndex: props.data?.length - rowIndex,\n                  };\n                },\n              },\n            ]}\n            isEditModify={props.isEditModify}\n            isSelectRow={true}\n            fileName='Template_Settings'\n            onSelectedRow={rows => {\n              props.onSelectedRow &&\n                props.onSelectedRow(rows.map((item: any) => item._id));\n            }}\n            onPageSizeChange={(page, size) => {\n              props.onPageSizeChange && props.onPageSizeChange(page, size);\n            }}\n            onFilter={(type, filter, page, size) => {\n              props.onFilter && props.onFilter(type, filter, page, size);\n            }}\n            clearAllFilter={() => {\n              sectionSetting('');\n              version('');\n              environment('');\n            }}\n          />\n        </div>\n      </>\n    );\n  },\n);\n","import React, {useState} from 'react';\nimport {observer} from 'mobx-react';\nimport _ from 'lodash';\nimport {\n  Toast,\n  Buttons,\n  Grid,\n  List,\n  Form,\n  Svg,\n  ModalConfirm,\n  AutoCompleteFilterSingleSelectMultiFieldsDisplay,\n  PdfMedium,\n  ModalView,\n  ModalViewProps,\n} from '@/library/components';\nimport {\n  PageBrandingList,\n  PageBrandingHeader,\n  PageBrandingSubHeader,\n  PageBrandingFooter,\n  PageNumber,\n} from '../components';\nimport {useForm, Controller} from 'react-hook-form';\nimport {RouterFlow} from '@/flows';\nimport {useStores} from '@/stores';\nimport {PageBranding as PageBrandingModel} from '../models';\n\nimport {Accordion, AccordionItem} from 'react-sanfona';\nimport '@/library/assets/css/accordion.css';\n\nimport 'react-accessible-accordion/dist/fancy-example.css';\nimport '@/library/assets/css/accordion.css';\n\nimport {PdfPBTemp0001} from '@features/report-builder/report-template/components/molecules/pdf/page-branding/temp0001/temp0001.component';\n\nexport const PageBranding = observer(() => {\n  const {loading, routerStore, reportSettingStore} = useStores();\n  const {\n    control,\n    handleSubmit,\n    formState: {errors},\n    setValue,\n    setError,\n    clearErrors,\n  } = useForm();\n\n  const [modalConfirm, setModalConfirm] = useState<any>();\n  const [modalView, setModalView] = useState<ModalViewProps>();\n  const [isInputView, setIsInputView] = useState<boolean>(true);\n  const [isExistsTempCode, setIsExistsTempCode] = useState<boolean>(false);\n\n  const onSave = () => {\n    if (isExistsTempCode)\n      return Toast.error({\n        message: '😔 Already exists temp code. Please select diff.',\n      });\n    reportSettingStore.pageBrandingService\n      .addPageBranding({\n        input: {\n          ...reportSettingStore.pageBranding,\n          header: {\n            ...reportSettingStore.pageBranding?.header,\n          },\n        },\n      })\n      .then(res => {\n        if (res.createPageBranding.success) {\n          Toast.success({\n            message: `😊 ${res.createPageBranding.message}`,\n          });\n        }\n        setTimeout(() => {\n          window.location.reload();\n        }, 1000);\n      });\n  };\n\n  const getTemplate = (tempCode: string, data: any) => {\n    switch (tempCode) {\n      case 'TEMP0001':\n        return <PdfPBTemp0001 data={data} />;\n      default:\n        return (\n          <div className='justify-center items-center'>\n            <h4 className='text-center text-red'>\n              Template not found. Please select correct temp code. 🚨\n            </h4>\n          </div>\n        );\n        break;\n    }\n  };\n\n  const getAccordionItem = (pageBranding: PageBrandingModel) => {\n    const accordionItem: Array<any> = [];\n    if (pageBranding.isHeader) accordionItem.push({title: 'Header'});\n    if (pageBranding.isSubHeader) accordionItem.push({title: 'Sub Header'});\n    if (pageBranding.isFooter) accordionItem.push({title: 'Footer'});\n    if (pageBranding.isPdfPageNumber)\n      accordionItem.push({title: 'Page Number'});\n    return accordionItem;\n  };\n\n  return (\n    <>\n      {RouterFlow.checkPermission(routerStore.userPermission, 'Add') && (\n        <Buttons.ButtonCircleAddRemoveBottom\n          style={{bottom: 50}}\n          show={isInputView}\n          onClick={() => setIsInputView(!isInputView)}\n        />\n      )}\n      <div\n        className={\n          'p-2 rounded-lg shadow-xl ' + (isInputView ? 'hidden' : 'shown')\n        }\n      >\n        <Grid cols={2}>\n          <List direction='col' space={4} justify='stretch' fill>\n            <Controller\n              control={control}\n              render={({field: {onChange}}) => (\n                <AutoCompleteFilterSingleSelectMultiFieldsDisplay\n                  loader={loading}\n                  placeholder='Temp Code'\n                  data={{\n                    list: reportSettingStore.templateSettingsList,\n                    displayKey: ['tempCode', 'tempName'],\n                  }}\n                  hasError={!!errors.tempCode}\n                  onFilter={(value: string) => {\n                    // reportSettingStore.updateReportSectionList(\n                    //   reportSettingStore.reportSectionListCopy.filter(item =>\n                    //     item.section\n                    //       .toString()\n                    //       .toLowerCase()\n                    //       .includes(value.toLowerCase()),\n                    //   ),\n                    // );\n                  }}\n                  onSelect={item => {\n                    onChange(item.tempCode);\n                    reportSettingStore.updatePageBranding({\n                      ...reportSettingStore.pageBranding,\n                      templateSettings: {\n                        _id: item._id,\n                        tempCode: item.tempCode,\n                        tempName: item.tempName,\n                      },\n                      tempCode: item.tempCode,\n                    });\n                    reportSettingStore.pageBrandingService\n                      .findByFields({\n                        input: {\n                          filter: {\n                            tempCode: item.tempCode,\n                            brandingTitle:\n                              reportSettingStore.pageBranding?.brandingTitle ||\n                              '',\n                          },\n                        },\n                      })\n                      .then(res => {\n                        console.log({res});\n                        if (res.findByFieldsPageBranding.success) {\n                          setError('tempCode', {type: 'onBlur'});\n                          setError('brandingTitle', {type: 'onBlur'});\n                          Toast.error({\n                            message:\n                              '😔 Already exists temp code. Please select diff.',\n                          });\n                          return setIsExistsTempCode(true);\n                        } else {\n                          clearErrors('tempCode');\n                          clearErrors('brandingTitle');\n                          return setIsExistsTempCode(false);\n                        }\n                      });\n                  }}\n                />\n              )}\n              name='tempCode'\n              rules={{required: true}}\n              defaultValue={reportSettingStore.templateSettingsList}\n            />\n            <Controller\n              control={control}\n              render={({field: {onChange}}) => (\n                <Form.Input\n                  label='Branding Title'\n                  placeholder='Branding Title'\n                  hasError={!!errors.brandingTitle}\n                  value={reportSettingStore.pageBranding?.brandingTitle?.toUpperCase()}\n                  onChange={brandingTitle => {\n                    onChange(brandingTitle);\n                    reportSettingStore.updatePageBranding({\n                      ...reportSettingStore.pageBranding,\n                      brandingTitle: brandingTitle?.toUpperCase(),\n                    });\n                  }}\n                  onBlur={brandingTitle => {\n                    reportSettingStore.pageBrandingService\n                      .findByFields({\n                        input: {\n                          filter: {\n                            tempCode:\n                              reportSettingStore.pageBranding?.tempCode || '',\n                            brandingTitle: brandingTitle?.toUpperCase(),\n                          },\n                        },\n                      })\n                      .then(res => {\n                        if (res.findByFieldsPageBranding.success) {\n                          setError('tempCode', {type: 'onBlur'});\n                          setError('brandingTitle', {type: 'onBlur'});\n                          Toast.error({\n                            message:\n                              '😔 Already exists temp code. Please select diff.',\n                          });\n                          return setIsExistsTempCode(true);\n                        } else {\n                          clearErrors('tempCode');\n                          clearErrors('brandingTitle');\n                          return setIsExistsTempCode(false);\n                        }\n                      });\n                  }}\n                />\n              )}\n              name='brandingTitle'\n              rules={{required: true}}\n              defaultValue=''\n            />\n\n            <Grid cols={4}>\n              <Controller\n                control={control}\n                render={({field: {onChange}}) => (\n                  <Form.Toggle\n                    label='Header Visible'\n                    hasError={!!errors.headerVisible}\n                    value={reportSettingStore.pageBranding?.isHeader}\n                    onChange={isHeader => {\n                      onChange(isHeader);\n                      reportSettingStore.updatePageBranding({\n                        ...reportSettingStore.pageBranding,\n                        isHeader,\n                      });\n                    }}\n                  />\n                )}\n                name='headerVisible'\n                rules={{required: false}}\n                defaultValue=''\n              />\n              <Controller\n                control={control}\n                render={({field: {onChange}}) => (\n                  <Form.Toggle\n                    label='Sub Header Visible'\n                    hasError={!!errors.subHeaderVisible}\n                    value={reportSettingStore.pageBranding?.isSubHeader}\n                    onChange={isSubHeader => {\n                      onChange(isSubHeader);\n                      reportSettingStore.updatePageBranding({\n                        ...reportSettingStore.pageBranding,\n                        isSubHeader,\n                      });\n                    }}\n                  />\n                )}\n                name='subHeaderVisible'\n                rules={{required: false}}\n                defaultValue=''\n              />\n              <Controller\n                control={control}\n                render={({field: {onChange}}) => (\n                  <Form.Toggle\n                    label='Footer Visible'\n                    hasError={!!errors.footerVisible}\n                    value={reportSettingStore.pageBranding?.isFooter}\n                    onChange={isFooter => {\n                      onChange(isFooter);\n                      reportSettingStore.updatePageBranding({\n                        ...reportSettingStore.pageBranding,\n                        isFooter,\n                      });\n                    }}\n                  />\n                )}\n                name='footerVisible'\n                rules={{required: false}}\n                defaultValue=''\n              />\n              <Controller\n                control={control}\n                render={({field: {onChange}}) => (\n                  <Form.Toggle\n                    label='Page Number'\n                    hasError={!!errors.pageNumber}\n                    value={reportSettingStore.pageBranding?.isPdfPageNumber}\n                    onChange={isPdfPageNumber => {\n                      onChange(isPdfPageNumber);\n                      reportSettingStore.updatePageBranding({\n                        ...reportSettingStore.pageBranding,\n                        isPdfPageNumber,\n                      });\n                    }}\n                  />\n                )}\n                name='pageNumber'\n                rules={{required: false}}\n                defaultValue=''\n              />\n            </Grid>\n            <Accordion>\n              {getAccordionItem(reportSettingStore?.pageBranding).map(item => {\n                return (\n                  <AccordionItem\n                    title={`${item.title}`}\n                    // expanded={item.title === 'Header'}\n                  >\n                    {item.title === 'Header' && <PageBrandingHeader />}\n                    {item.title === 'Sub Header' && <PageBrandingSubHeader />}\n                    {item.title === 'Footer' && <PageBrandingFooter />}\n                    {item.title === 'Page Number' && <PageNumber />}\n                  </AccordionItem>\n                );\n              })}\n            </Accordion>\n          </List>\n          <List direction='col' space={4} justify='stretch' fill>\n            {getTemplate(\n              reportSettingStore.pageBranding?.tempCode,\n              reportSettingStore.pageBranding,\n            )}\n          </List>\n        </Grid>\n        <br />\n        <List direction='row' space={3} align='center'>\n          <Buttons.Button\n            size='medium'\n            type='solid'\n            icon={Svg.Save}\n            onClick={handleSubmit(onSave)}\n          >\n            Save\n          </Buttons.Button>\n          <Buttons.Button\n            size='medium'\n            type='outline'\n            icon={Svg.Remove}\n            onClick={() => {\n              window.location.reload();\n            }}\n          >\n            Clear\n          </Buttons.Button>\n        </List>\n      </div>\n      <div className='p-2 rounded-lg shadow-xl overflow-auto'>\n        <PageBrandingList\n          data={reportSettingStore.pageBrandingList}\n          totalSize={reportSettingStore.pageBrandingListCount}\n          isDelete={RouterFlow.checkPermission(\n            routerStore.userPermission,\n            'Delete',\n          )}\n          isEditModify={RouterFlow.checkPermission(\n            routerStore.userPermission,\n            'Edit/Modify',\n          )}\n          onDelete={selectedItem => setModalConfirm(selectedItem)}\n          onSelectedRow={rows => {\n            setModalConfirm({\n              show: true,\n              type: 'delete',\n              id: rows,\n              title: 'Are you sure?',\n              body: 'Delete selected items!',\n            });\n          }}\n          onUpdateItem={(fields: any, id: string) => {\n            setModalConfirm({\n              show: true,\n              type: 'update',\n              data: {fields, id},\n              title: 'Are you sure?',\n              body: 'Update banner!',\n            });\n          }}\n          onPageSizeChange={(page, limit) => {\n            // bannerStore.fetchListBanner(page, limit);\n          }}\n          onFilter={(type, filter, page, limit) => {\n            // bannerStore.BannerService.filter({\n            //   input: {type, filter, page, limit},\n            // });\n          }}\n          onPdfPreview={item => {\n            setModalView({\n              visible: true,\n              children: <>{getTemplate(item.tempCode, item)}</>,\n            });\n          }}\n        />\n      </div>\n      <ModalConfirm\n        {...modalConfirm}\n        click={(type?: string) => {\n          switch (type) {\n            case 'delete': {\n              reportSettingStore.pageBrandingService\n                .removePageBranding({\n                  input: {id: modalConfirm.id},\n                })\n                .then((res: any) => {\n                  if (res.removePageBranding.success) {\n                    Toast.success({\n                      message: `😊 ${res.removePageBranding.message}`,\n                    });\n                    setModalConfirm({show: false});\n                    reportSettingStore.pageBrandingService.listPageBranding();\n                  }\n                });\n              break;\n            }\n            case 'update': {\n              reportSettingStore.pageBrandingService\n                .update({\n                  input: {\n                    ...modalConfirm.data.fields,\n                    _id: modalConfirm.data.id,\n                  },\n                })\n                .then((res: any) => {\n                  setModalConfirm({show: false});\n                  if (res.updatePageBranding.success) {\n                    Toast.success({\n                      message: `😊 ${res.updatePageBranding.message}`,\n                    });\n                    setTimeout(() => {\n                      window.location.reload();\n                    }, 2000);\n                  }\n                });\n              break;\n            }\n          }\n        }}\n        onClose={() => setModalConfirm({show: false})}\n      />\n      <ModalView\n        {...modalView}\n        onClose={() => setModalView({visible: false})}\n      />\n    </>\n  );\n});\n","import React, {useState} from 'react';\nimport {observer} from 'mobx-react';\nimport _ from 'lodash';\n\nimport {\n  Toast,\n  Buttons,\n  Grid,\n  List,\n  Form,\n  Svg,\n  ModalConfirm,\n  PdfMedium,\n  ModalView,\n  ModalViewProps,\n} from '@/library/components';\nimport {TemplateSettingsList} from '../components';\nimport {lookupItems, lookupValue} from '@/library/utils';\nimport {useForm, Controller} from 'react-hook-form';\nimport {RouterFlow} from '@/flows';\nimport {useStores} from '@/stores';\nimport {resizeFile, compressString} from '@/library/utils';\n\nimport 'react-accessible-accordion/dist/fancy-example.css';\nimport '@/library/assets/css/accordion.css';\n\nimport {PdfTSTemp0001} from '@features/report-builder/report-template/components/molecules/pdf/template-setting/temp0001/temp0001.component';\n\nexport const TemplateSettings = observer(() => {\n  const {loading, routerStore, reportSettingStore} = useStores();\n  const {\n    control,\n    handleSubmit,\n    formState: {errors},\n    setValue,\n    setError,\n    clearErrors,\n  } = useForm();\n\n  const [modalConfirm, setModalConfirm] = useState<any>();\n  const [modalView, setModalView] = useState<ModalViewProps>();\n  const [isInputView, setIsInputView] = useState<boolean>(true);\n  const [isExistsTempCode, setIsExistsTempCode] = useState<boolean>(false);\n\n  const onSave = () => {\n    if (isExistsTempCode)\n      return Toast.error({\n        message: '😔 Already exists temp code. Please enter diff.',\n      });\n    reportSettingStore.templateSettingsService\n      .addTemplateSetting({input: {...reportSettingStore.templateSettings}})\n      .then(res => {\n        if (res.createTemplateSetting.success) {\n          Toast.success({\n            message: `😊 ${res.createTemplateSetting.message}`,\n          });\n        }\n        setTimeout(() => {\n          window.location.reload();\n        }, 1000);\n      });\n  };\n\n  return (\n    <>\n      {RouterFlow.checkPermission(routerStore.userPermission, 'Add') && (\n        <Buttons.ButtonCircleAddRemoveBottom\n          style={{bottom: 40}}\n          show={isInputView}\n          onClick={() => setIsInputView(!isInputView)}\n        />\n      )}\n\n      <div\n        className={\n          'p-2 rounded-lg shadow-xl ' + (isInputView ? 'hidden' : 'shown')\n        }\n      >\n        <Grid cols={2}>\n          <List direction='col' space={4} justify='stretch' fill>\n            <Grid cols={2}>\n              <List direction='col' space={4} justify='stretch' fill>\n                <Controller\n                  control={control}\n                  render={({field: {onChange}}) => (\n                    <Form.Input\n                      label='Template Code'\n                      placeholder='Template code'\n                      hasError={!!errors.tempCode}\n                      value={reportSettingStore.templateSettings?.tempCode}\n                      onChange={tempCode => {\n                        onChange(tempCode);\n                        reportSettingStore.updateTemplateSettings({\n                          ...reportSettingStore.templateSettings,\n                          tempCode,\n                        });\n                      }}\n                      onBlur={tempCode => {\n                        reportSettingStore.templateSettingsService\n                          .findByFields({\n                            input: {\n                              filter: {\n                                tempCode,\n                                tempName:\n                                  reportSettingStore.templateSettings\n                                    ?.tempName || '',\n                              },\n                            },\n                          })\n                          .then(res => {\n                            if (res.findByFieldsTemplateSetting.success) {\n                              setError('tempCode', {type: 'onBlur'});\n                              setError('tempName', {type: 'onBlur'});\n                              Toast.error({\n                                message:\n                                  '😔 Already exists temp code. Please enter diff.',\n                              });\n                              return setIsExistsTempCode(true);\n                            } else {\n                              clearErrors('tempCode');\n                              clearErrors('tempName');\n                              return setIsExistsTempCode(false);\n                            }\n                          });\n                      }}\n                    />\n                  )}\n                  name='tempCode'\n                  rules={{required: true}}\n                  defaultValue=''\n                />\n                <Controller\n                  control={control}\n                  render={({field: {onChange}}) => (\n                    <Form.Input\n                      label='Template Name'\n                      placeholder='Template Name'\n                      hasError={!!errors.tempName}\n                      value={reportSettingStore.templateSettings?.tempName}\n                      onChange={tempName => {\n                        onChange(tempName);\n                        reportSettingStore.updateTemplateSettings({\n                          ...reportSettingStore.templateSettings,\n                          tempName,\n                        });\n                      }}\n                      onBlur={tempName => {\n                        reportSettingStore.templateSettingsService\n                          .findByFields({\n                            input: {\n                              filter: {\n                                tempName,\n                                tempCode:\n                                  reportSettingStore.templateSettings\n                                    ?.tempCode || '',\n                              },\n                            },\n                          })\n                          .then(res => {\n                            if (res.findByFieldsTemplateSetting.success) {\n                              setError('tempCode', {type: 'onBlur'});\n                              setError('tempName', {type: 'onBlur'});\n                              Toast.warning({\n                                message:\n                                  '😔 Already exists temp code. Please enter diff.',\n                              });\n                              return setIsExistsTempCode(true);\n                            } else {\n                              clearErrors('tempCode');\n                              clearErrors('tempName');\n                              return setIsExistsTempCode(false);\n                            }\n                          });\n                      }}\n                    />\n                  )}\n                  name='tempName'\n                  rules={{required: true}}\n                  defaultValue=''\n                />\n                <Grid cols={2}>\n                  <Controller\n                    control={control}\n                    render={({field: {onChange}}) => (\n                      <Form.Toggle\n                        label='Show tool bar'\n                        hasError={!!errors.isToolBar}\n                        value={reportSettingStore.templateSettings?.isToolbar}\n                        onChange={isToolbar => {\n                          onChange(isToolbar);\n                          reportSettingStore.updateTemplateSettings({\n                            ...reportSettingStore.templateSettings,\n                            isToolbar,\n                          });\n                        }}\n                      />\n                    )}\n                    name='isToolBar'\n                    rules={{required: false}}\n                    defaultValue=''\n                  />\n                  <Controller\n                    control={control}\n                    render={({field: {onChange}}) => (\n                      <Form.Toggle\n                        label='Background Image Visible'\n                        hasError={!!errors.isBackgroundImage}\n                        value={\n                          reportSettingStore.templateSettings?.isBackgroundImage\n                        }\n                        onChange={isBackgroundImage => {\n                          onChange(isBackgroundImage);\n                          reportSettingStore.updateTemplateSettings({\n                            ...reportSettingStore.templateSettings,\n                            isBackgroundImage,\n                          });\n                        }}\n                      />\n                    )}\n                    name='isBackgroundImage'\n                    rules={{required: false}}\n                    defaultValue=''\n                  />\n                </Grid>\n                <Controller\n                  control={control}\n                  render={({field: {onChange}}) => (\n                    <Form.InputFile\n                      label='Background Image'\n                      placeholder='Background Image'\n                      hasError={!!errors.backgroundImage}\n                      onChange={async e => {\n                        const backgroundImage = e.target.files[0];\n                        onChange(backgroundImage);\n                        reportSettingStore.updateTemplateSettings({\n                          ...reportSettingStore.templateSettings,\n                          backgroundImage,\n                          backgroundImageBase64: compressString(\n                            await resizeFile(backgroundImage, 300, 300, 100, 0),\n                          ),\n                        });\n                      }}\n                    />\n                  )}\n                  name='backgroundImage'\n                  rules={{required: false}}\n                  defaultValue=''\n                />\n              </List>\n              <List direction='col' space={4} justify='stretch' fill>\n                <Controller\n                  control={control}\n                  render={({field: {onChange}}) => (\n                    <Form.InputWrapper\n                      label='Page Size'\n                      hasError={!!errors.pageSize}\n                    >\n                      <select\n                        value={reportSettingStore.templateSettings?.pageSize}\n                        className={`leading-4 p-2 focus:outline-none focus:ring block w-full shadow-sm sm:text-base border-2 ${\n                          errors.pageSize\n                            ? 'border-red-500  '\n                            : 'border-gray-300'\n                        } rounded-md`}\n                        onChange={e => {\n                          const pageSize = e.target.value;\n                          onChange(pageSize);\n                          reportSettingStore.updateTemplateSettings({\n                            ...reportSettingStore.templateSettings,\n                            pageSize,\n                          });\n                        }}\n                      >\n                        <option selected>Select</option>\n                        {[\n                          '4A0',\n                          '2A0',\n                          'A0',\n                          'A1',\n                          'A2',\n                          'A3',\n                          'A4',\n                          'A5',\n                          'A6',\n                          'A7',\n                          'A8',\n                          'A9',\n                          'A10',\n                          'B0',\n                          'B1',\n                          'B2',\n                          'B3',\n                          'B4',\n                          'B5',\n                          'B6',\n                          'B7',\n                          'B8',\n                          'B9',\n                          'B10',\n                          'C0',\n                          'C1',\n                          'C2',\n                          'C3',\n                          'C4',\n                          'C5',\n                          'C6',\n                          'C7',\n                          'C8',\n                          'C9',\n                          'C10',\n                          'RA0',\n                          'RA1',\n                          'RA2',\n                          'RA3',\n                          'RA4',\n                          'SRA0',\n                          'SRA1',\n                          'SRA2',\n                          'SRA3',\n                          'SRA4',\n                          'EXECUTIVE',\n                          'FOLIO',\n                          'LEGAL',\n                          'LETTER',\n                          'TABLOID',\n                          'ID1',\n                        ].map((item: any, index: number) => (\n                          <option key={index} value={item}>\n                            {item}\n                          </option>\n                        ))}\n                      </select>\n                    </Form.InputWrapper>\n                  )}\n                  name='pageSize'\n                  rules={{required: false}}\n                  defaultValue=''\n                />\n                <Controller\n                  control={control}\n                  render={({field: {onChange}}) => (\n                    <Form.MultilineInput\n                      label='Main Box CSS'\n                      style={{color: '#ffffff', backgroundColor: '#000000'}}\n                      placeholder={\n                        \"Like fontSize: 12,backgroundColor:'#000000'\"\n                      }\n                      value={reportSettingStore.templateSettings?.mainBoxCSS}\n                      onChange={mainBoxCSS => {\n                        reportSettingStore.updateTemplateSettings({\n                          ...reportSettingStore.templateSettings,\n                          mainBoxCSS,\n                        });\n                      }}\n                    />\n                  )}\n                  name='mainBoxCSS'\n                  rules={{required: false}}\n                  defaultValue=''\n                />\n                <a\n                  href='https://dev.azure.com/limsplus0644/_git/limsplus-portal?path=/react-styling-cheat-sheet.md&_a=preview'\n                  target='_blank'\n                  className='text-red underline'\n                  rel='noreferrer'\n                >\n                  Note: Check more properties\n                </a>\n                <p>\n                  {\n                    \"Note: if footer present then min paddingBottom:'120pt' required.\"\n                  }\n                </p>\n              </List>\n            </Grid>\n          </List>\n          <List direction='col' space={4} justify='stretch' fill>\n            <PdfTSTemp0001\n              documentTitle='Template Setting'\n              isToolbar={reportSettingStore.templateSettings?.isToolbar}\n              isBackgroundImage={\n                reportSettingStore.templateSettings?.isBackgroundImage\n              }\n              backgroundImage={\n                reportSettingStore.templateSettings?.backgroundImageBase64\n              }\n              mainBoxCSS={reportSettingStore.templateSettings?.mainBoxCSS}\n              pageSize={reportSettingStore.templateSettings?.pageSize}\n              children={<PdfMedium>Template Setting</PdfMedium>}\n            />\n          </List>\n        </Grid>\n        <br />\n        <List direction='row' space={3} align='center'>\n          <Buttons.Button\n            size='medium'\n            type='solid'\n            icon={Svg.Save}\n            onClick={handleSubmit(onSave)}\n          >\n            Save\n          </Buttons.Button>\n          <Buttons.Button\n            size='medium'\n            type='outline'\n            icon={Svg.Remove}\n            onClick={() => {\n              window.location.reload();\n            }}\n          >\n            Clear\n          </Buttons.Button>\n        </List>\n      </div>\n      <div className='p-2 rounded-lg shadow-xl overflow-auto'>\n        <TemplateSettingsList\n          data={reportSettingStore.templateSettingsList || []}\n          totalSize={reportSettingStore.templateSettingsListCount}\n          isDelete={RouterFlow.checkPermission(\n            routerStore.userPermission,\n            'Delete',\n          )}\n          isEditModify={RouterFlow.checkPermission(\n            routerStore.userPermission,\n            'Edit/Modify',\n          )}\n          onDelete={selectedItem => setModalConfirm(selectedItem)}\n          onSelectedRow={rows => {\n            setModalConfirm({\n              show: true,\n              type: 'delete',\n              id: rows,\n              title: 'Are you sure?',\n              body: 'Delete selected items!',\n            });\n          }}\n          onUpdateItem={(fields: any, id: string) => {\n            setModalConfirm({\n              show: true,\n              type: 'update',\n              data: {fields, id},\n              title: 'Are you sure?',\n              body: 'Update items!',\n            });\n          }}\n          onPageSizeChange={(page, limit) => {\n            // bannerStore.fetchListBanner(page, limit);\n          }}\n          onFilter={(type, filter, page, limit) => {\n            // bannerStore.BannerService.filter({\n            //   input: {type, filter, page, limit},\n            // });\n          }}\n          onPdfPreview={item => {\n            setModalView({\n              visible: true,\n              children: (\n                <PdfTSTemp0001\n                  documentTitle='Template Setting'\n                  height={window.innerHeight / 1.3}\n                  isToolbar={item.isToolbar}\n                  isBackgroundImage={item?.isBackgroundImage}\n                  backgroundImage={item?.backgroundImageBase64}\n                  mainBoxCSS={item.mainBoxCSS}\n                  pageSize={item.pageSize}\n                  children={<PdfMedium>Template Setting</PdfMedium>}\n                />\n              ),\n            });\n          }}\n        />\n      </div>\n      <ModalConfirm\n        {...modalConfirm}\n        click={(type?: string) => {\n          switch (type) {\n            case 'delete': {\n              reportSettingStore.templateSettingsService\n                .removeTemplateSetting({\n                  input: {id: modalConfirm.id},\n                })\n                .then((res: any) => {\n                  setModalConfirm({show: false});\n                  if (res.removeTemplateSetting.success) {\n                    Toast.success({\n                      message: `😊 ${res.removeTemplateSetting.message}`,\n                    });\n                    reportSettingStore.templateSettingsService.listTemplateSetting();\n                  }\n                });\n              break;\n            }\n            case 'update': {\n              reportSettingStore.templateSettingsService\n                .update({\n                  input: {\n                    ...modalConfirm.data.fields,\n                    _id: modalConfirm.data.id,\n                  },\n                })\n                .then((res: any) => {\n                  setModalConfirm({show: false});\n                  if (res.updateTemplateSetting.success) {\n                    Toast.success({\n                      message: `😊 ${res.updateTemplateSetting.message}`,\n                    });\n                    setTimeout(() => {\n                      window.location.reload();\n                    }, 2000);\n                  }\n                });\n\n              break;\n            }\n          }\n        }}\n        onClose={() => setModalConfirm({show: false})}\n      />\n      <ModalView\n        {...modalView}\n        onClose={() => setModalView({visible: false})}\n      />\n    </>\n  );\n});\n","import React, {useState} from 'react';\nimport {observer} from 'mobx-react';\nimport _ from 'lodash';\nimport {\n  Toast,\n  Buttons,\n  Grid,\n  List,\n  Form,\n  Svg,\n  ModalConfirm,\n  AutoCompleteFilterSingleSelectMultiFieldsDisplay,\n  AutoCompleteFilterMutiSelectMultiFieldsDisplay,\n  ModalView,\n  ModalViewProps,\n} from '@/library/components';\nimport {TemplatePatientResultList} from '../components';\nimport {useForm, Controller} from 'react-hook-form';\nimport {RouterFlow} from '@/flows';\nimport {useStores} from '@/stores';\nimport {PageBranding as PageBrandingModel} from '../models';\n\nimport {Accordion, AccordionItem} from 'react-sanfona';\nimport '@/library/assets/css/accordion.css';\n\nimport 'react-accessible-accordion/dist/fancy-example.css';\nimport '@/library/assets/css/accordion.css';\n\nexport const TemplatePatientResult = observer(() => {\n  const {loading, routerStore, reportSettingStore, libraryStore} = useStores();\n  const {\n    control,\n    handleSubmit,\n    formState: {errors},\n    setValue,\n    setError,\n    clearErrors,\n  } = useForm();\n\n  const [modalConfirm, setModalConfirm] = useState<any>();\n  const [modalView, setModalView] = useState<ModalViewProps>();\n  const [isInputView, setIsInputView] = useState<boolean>(true);\n  const [isExistsRecord, setIsExistsRecord] = useState<boolean>(false);\n\n  const onSave = () => {\n    if (isExistsRecord)\n      return Toast.error({\n        message: '😔 Already exists records.',\n      });\n    reportSettingStore.templatePatientResultService\n      .addTemplatePatientResult({\n        input: {...reportSettingStore.templatePatientResult},\n      })\n      .then(res => {\n        if (res.createTemplatePatientResult.success) {\n          Toast.success({\n            message: `😊 ${res.createTemplatePatientResult.message}`,\n          });\n        }\n        setTimeout(() => {\n          window.location.reload();\n        }, 1000);\n      });\n  };\n\n  const getTemplate = (tempCode: string, data: any) => {\n    switch (tempCode) {\n      case 'TEMP0001':\n        return <h1>hi</h1>;\n      default:\n        return (\n          <div className='justify-center items-center'>\n            <h4 className='text-center text-red'>\n              Template not found. Please select correct temp code. 🚨\n            </h4>\n          </div>\n        );\n        break;\n    }\n  };\n\n  return (\n    <>\n      {RouterFlow.checkPermission(routerStore.userPermission, 'Add') && (\n        <Buttons.ButtonCircleAddRemoveBottom\n          style={{bottom: 50}}\n          show={isInputView}\n          onClick={() => setIsInputView(!isInputView)}\n        />\n      )}\n      <div\n        className={\n          'p-2 rounded-lg shadow-xl ' + (isInputView ? 'shown' : 'hidden')\n        }\n      >\n        <Grid cols={2}>\n          <Grid cols={2}>\n            <List direction='col' space={4} justify='stretch' fill>\n              <Controller\n                control={control}\n                render={({field: {onChange}}) => (\n                  <Form.InputWrapper\n                    label='Report Template Type'\n                    hasError={!!errors.reportTemplateType}\n                  >\n                    <select\n                      value={\n                        reportSettingStore.templatePatientResult\n                          ?.reportTemplateType\n                      }\n                      className={`leading-4 p-2 focus:outline-none focus:ring block w-full shadow-sm sm:text-base border-2 ${\n                        errors.reportTemplateType\n                          ? 'border-red-500  '\n                          : 'border-gray-300'\n                      } rounded-md`}\n                      onChange={e => {\n                        const reportTemplateType = e.target.value;\n                        onChange(reportTemplateType);\n                        reportSettingStore.updateTemplatePatientResult({\n                          ...reportSettingStore.templatePatientResult,\n                          reportTemplateType,\n                        });\n                        reportSettingStore.templatePatientResultService\n                          .findByFields({\n                            input: {\n                              filter: {\n                                reportTemplateType,\n                                templateCode:\n                                  reportSettingStore.templatePatientResult\n                                    ?.templateCode || '',\n                                templateTitle:\n                                  reportSettingStore.templatePatientResult\n                                    ?.templateTitle || '',\n                              },\n                            },\n                          })\n                          .then(res => {\n                            console.log({res});\n\n                            if (res.findByFieldsTemplatePatientResult.success) {\n                              setError('reportTemplateType', {type: 'onBlur'});\n                              setError('templateCode', {type: 'onBlur'});\n                              setError('templateTitle', {type: 'onBlur'});\n                              Toast.error({\n                                message: '😔 Already exists record.',\n                              });\n                              return setIsExistsRecord(true);\n                            } else {\n                              clearErrors('reportTemplateType');\n                              clearErrors('templateCode');\n                              clearErrors('templateTitle');\n                              return setIsExistsRecord(false);\n                            }\n                          });\n                      }}\n                    >\n                      <option selected>Select</option>\n                      {['Lab Wise', 'Client Wise', 'Doctor Wise'].map(\n                        (item: any, index: number) => (\n                          <option key={index} value={item}>\n                            {item}\n                          </option>\n                        ),\n                      )}\n                    </select>\n                  </Form.InputWrapper>\n                )}\n                name='reportTemplateType'\n                rules={{required: true}}\n                defaultValue=''\n              />\n              <Controller\n                control={control}\n                render={({field: {onChange}}) => (\n                  <Form.InputWrapper\n                    label='Page Branding'\n                    hasError={!!errors.pageBranding}\n                  >\n                    <AutoCompleteFilterSingleSelectMultiFieldsDisplay\n                      loader={loading}\n                      placeholder='Page Branding'\n                      data={{\n                        list: reportSettingStore.pageBrandingList,\n                        displayKey: ['tempCode', 'brandingTitle'],\n                      }}\n                      hasError={!!errors.pageBranding}\n                      onFilter={(value: string) => {\n                        // reportSettingStore.updateReportSectionList(\n                        //   reportSettingStore.reportSectionListCopy.filter(item =>\n                        //     item.section\n                        //       .toString()\n                        //       .toLowerCase()\n                        //       .includes(value.toLowerCase()),\n                        //   ),\n                        // );\n                      }}\n                      onSelect={item => {\n                        onChange(item.tempCode);\n                        reportSettingStore.updateTemplatePatientResult({\n                          ...reportSettingStore.templatePatientResult,\n                          pageBranding: {\n                            _id: item?._id,\n                            tempCode: item?.tempCode,\n                            brandingTitle: item?.brandingTitle,\n                          },\n                        });\n                      }}\n                    />\n                  </Form.InputWrapper>\n                )}\n                name='pageBranding'\n                rules={{required: false}}\n                defaultValue={reportSettingStore.templateSettingsList}\n              />\n              <Controller\n                control={control}\n                render={({field: {onChange}}) => (\n                  <Form.Input\n                    label='Template Code'\n                    placeholder='Template Code'\n                    hasError={!!errors.templateCode}\n                    value={reportSettingStore.templatePatientResult?.templateCode?.toUpperCase()}\n                    onChange={templateCode => {\n                      onChange(templateCode);\n                      reportSettingStore.updateTemplatePatientResult({\n                        ...reportSettingStore.templatePatientResult,\n                        templateCode: templateCode?.toUpperCase(),\n                      });\n                    }}\n                    onBlur={templateCode => {\n                      reportSettingStore.templatePatientResultService\n                        .findByFields({\n                          input: {\n                            filter: {\n                              reportTemplateType:\n                                reportSettingStore.templatePatientResult\n                                  ?.reportTemplateType || '',\n                              templateCode,\n                              templateTitle:\n                                reportSettingStore.templatePatientResult\n                                  ?.templateTitle || '',\n                            },\n                          },\n                        })\n                        .then(res => {\n                          if (res.findByFieldsTemplatePatientResult.success) {\n                            setError('reportTemplateType', {type: 'onBlur'});\n                            setError('templateCode', {type: 'onBlur'});\n                            setError('templateTitle', {type: 'onBlur'});\n                            Toast.error({\n                              message: '😔 Already exists record.',\n                            });\n                            return setIsExistsRecord(true);\n                          } else {\n                            clearErrors('reportTemplateType');\n                            clearErrors('templateCode');\n                            clearErrors('templateTitle');\n                            return setIsExistsRecord(false);\n                          }\n                        });\n                    }}\n                  />\n                )}\n                name='templateCode'\n                rules={{required: true}}\n                defaultValue=''\n              />\n              <Controller\n                control={control}\n                render={({field: {onChange}}) => (\n                  <Form.Input\n                    label='Template Title'\n                    placeholder='Template Title'\n                    hasError={!!errors.templateTitle}\n                    value={reportSettingStore.templatePatientResult?.templateTitle?.toUpperCase()}\n                    onChange={templateTitle => {\n                      onChange(templateTitle);\n                      reportSettingStore.updateTemplatePatientResult({\n                        ...reportSettingStore.templatePatientResult,\n                        templateTitle: templateTitle?.toUpperCase(),\n                      });\n                    }}\n                    onBlur={templateTitle => {\n                      reportSettingStore.templatePatientResultService\n                        .findByFields({\n                          input: {\n                            filter: {\n                              reportTemplateType:\n                                reportSettingStore.templatePatientResult\n                                  ?.reportTemplateType || '',\n                              templateCode:\n                                reportSettingStore.templatePatientResult\n                                  ?.templateCode || '',\n                              templateTitle,\n                            },\n                          },\n                        })\n                        .then(res => {\n                          if (res.findByFieldsTemplatePatientResult.success) {\n                            setError('reportTemplateType', {type: 'onBlur'});\n                            setError('templateCode', {type: 'onBlur'});\n                            setError('templateTitle', {type: 'onBlur'});\n                            Toast.error({\n                              message: '😔 Already exists record.',\n                            });\n                            return setIsExistsRecord(true);\n                          } else {\n                            clearErrors('reportTemplateType');\n                            clearErrors('templateCode');\n                            clearErrors('templateTitle');\n                            return setIsExistsRecord(false);\n                          }\n                        });\n                    }}\n                  />\n                )}\n                name='templateTitle'\n                rules={{required: true}}\n                defaultValue=''\n              />\n            </List>\n\n            <List direction='col' space={4} justify='stretch' fill>\n              <Controller\n                control={control}\n                render={({field: {onChange}}) => (\n                  <Form.InputWrapper\n                    label='End Of Page'\n                    hasError={!!errors.endOfPage}\n                  >\n                    <AutoCompleteFilterMutiSelectMultiFieldsDisplay\n                      loader={loading}\n                      placeholder='Search by code or details'\n                      data={{\n                        list: libraryStore.listLibrary,\n                        selected:\n                          reportSettingStore.selectedItemTemplatePatientResult\n                            ?.endOfPage,\n                        displayKey: ['code', 'details'],\n                      }}\n                      hasError={!!errors.endOfPage}\n                      onUpdate={item => {\n                        const endOfPage =\n                          reportSettingStore.selectedItemTemplatePatientResult\n                            ?.endOfPage;\n                        onChange(endOfPage);\n                        reportSettingStore.updateTemplatePatientResult({\n                          ...reportSettingStore.templatePatientResult,\n                          endOfPage: _.map(endOfPage, o =>\n                            _.pick(o, ['_id', 'code', 'details']),\n                          ),\n                        });\n                        libraryStore.updateLibraryList(\n                          libraryStore.listLibraryCopy,\n                        );\n                      }}\n                      onFilter={(value: string) => {\n                        libraryStore.libraryService.filterByFields({\n                          input: {\n                            filter: {\n                              fields: ['code', 'details'],\n                              srText: value,\n                            },\n                            page: 0,\n                            limit: 10,\n                          },\n                        });\n                      }}\n                      onSelect={item => {\n                        onChange(item);\n                        let endOfPage =\n                          reportSettingStore.selectedItemTemplatePatientResult\n                            ?.endOfPage;\n                        if (!item.selected) {\n                          if (endOfPage && endOfPage.length > 0) {\n                            endOfPage.push(item);\n                          } else endOfPage = [item];\n                        } else {\n                          endOfPage = endOfPage.filter(items => {\n                            return items._id !== item._id;\n                          });\n                        }\n                        reportSettingStore.updateSelectedItemTemplatePatientResult(\n                          {\n                            ...reportSettingStore.selectedItemTemplatePatientResult,\n                            endOfPage,\n                          },\n                        );\n                      }}\n                    />\n                  </Form.InputWrapper>\n                )}\n                name='endOfPage'\n                rules={{required: false}}\n                defaultValue={\n                  libraryStore.listLibrary ||\n                  reportSettingStore.selectedItemTemplatePatientResult\n                    ?.endOfPage\n                }\n              />\n              <Controller\n                control={control}\n                render={({field: {onChange}}) => (\n                  <Form.InputWrapper\n                    label='End Of Report'\n                    hasError={!!errors.endOfReport}\n                  >\n                    <AutoCompleteFilterMutiSelectMultiFieldsDisplay\n                      loader={loading}\n                      placeholder='Search by code or details'\n                      data={{\n                        list: libraryStore.listLibrary,\n                        selected:\n                          reportSettingStore.selectedItemTemplatePatientResult\n                            ?.endOfReport,\n                        displayKey: ['code', 'details'],\n                      }}\n                      hasError={!!errors.endOfReport}\n                      onUpdate={item => {\n                        const endOfReport =\n                          reportSettingStore.selectedItemTemplatePatientResult\n                            ?.endOfReport;\n                        onChange(endOfReport);\n                        reportSettingStore.updateTemplatePatientResult({\n                          ...reportSettingStore.templatePatientResult,\n                          endOfReport: _.map(endOfReport, o =>\n                            _.pick(o, ['_id', 'code', 'details']),\n                          ),\n                        });\n                        libraryStore.updateLibraryList(\n                          libraryStore.listLibraryCopy,\n                        );\n                      }}\n                      onFilter={(value: string) => {\n                        libraryStore.libraryService.filterByFields({\n                          input: {\n                            filter: {\n                              fields: ['code', 'details'],\n                              srText: value,\n                            },\n                            page: 0,\n                            limit: 10,\n                          },\n                        });\n                      }}\n                      onSelect={item => {\n                        onChange(item);\n                        let endOfReport =\n                          reportSettingStore.selectedItemTemplatePatientResult\n                            ?.endOfReport;\n                        if (!item.selected) {\n                          if (endOfReport && endOfReport.length > 0) {\n                            endOfReport.push(item);\n                          } else endOfReport = [item];\n                        } else {\n                          endOfReport = endOfReport.filter(items => {\n                            return items._id !== item._id;\n                          });\n                        }\n                        reportSettingStore.updateSelectedItemTemplatePatientResult(\n                          {\n                            ...reportSettingStore.selectedItemTemplatePatientResult,\n                            endOfReport,\n                          },\n                        );\n                      }}\n                    />\n                  </Form.InputWrapper>\n                )}\n                name='endOfReport'\n                rules={{required: false}}\n                defaultValue={\n                  libraryStore.listLibrary ||\n                  reportSettingStore.selectedItemTemplatePatientResult\n                    ?.endOfReport\n                }\n              />\n            </List>\n\n            {/* <List direction='col' space={4} justify='stretch' fill>\n              <div className='p-3 border border-gray-800 relative mt-2'>\n                <h2 className='-mt-10 translate-y-1/2 p-1 w-fit bg-white mb-4'>\n                  Department Header\n                </h2>\n                <Controller\n                  control={control}\n                  render={({field: {onChange}}) => (\n                    <Form.MultilineInput\n                      label='Name CSS'\n                      className='text-sm'\n                      style={{\n                        color: '#ffffff',\n                        backgroundColor: '#000000',\n                        fontSize: 12,\n                      }}\n                      placeholder={\n                        \"Like fontSize: 12,backgroundColor:'#000000'\"\n                      }\n                      value={\n                        reportSettingStore.templatePatientResult\n                          .departmentHeader?.nameCSS\n                      }\n                      onChange={nameCSS => {\n                        reportSettingStore.updateTemplatePatientResult({\n                          ...reportSettingStore.templatePatientResult,\n                          departmentHeader: {\n                            ...reportSettingStore.templatePatientResult\n                              ?.departmentHeader,\n                            nameCSS,\n                          },\n                        });\n                      }}\n                    />\n                  )}\n                  name='departmentNameCSS'\n                  rules={{required: false}}\n                  defaultValue=''\n                />\n              </div>\n              <div className='p-3 border border-gray-800 relative mt-2'>\n                <h2 className='-mt-10 translate-y-1/2 p-1 w-fit bg-white mb-4'>\n                  Panel Header\n                </h2>\n                <Controller\n                  control={control}\n                  render={({field: {onChange}}) => (\n                    <Form.MultilineInput\n                      label='Description CSS'\n                      className='text-sm'\n                      style={{\n                        color: '#ffffff',\n                        backgroundColor: '#000000',\n                        fontSize: 12,\n                      }}\n                      placeholder={\n                        \"Like fontSize: 12,backgroundColor:'#000000'\"\n                      }\n                      value={\n                        reportSettingStore.templatePatientResult.panelHeader\n                          ?.descriptionCSS\n                      }\n                      onChange={descriptionCSS => {\n                        reportSettingStore.updateTemplatePatientResult({\n                          ...reportSettingStore.templatePatientResult,\n                          panelHeader: {\n                            ...reportSettingStore.templatePatientResult\n                              ?.panelHeader,\n                            descriptionCSS,\n                          },\n                        });\n                      }}\n                    />\n                  )}\n                  name='panelDescriptionCSS'\n                  rules={{required: false}}\n                  defaultValue=''\n                />\n                <Controller\n                  control={control}\n                  render={({field: {onChange}}) => (\n                    <Form.MultilineInput\n                      label='Method Description CSS'\n                      className='text-sm'\n                      style={{\n                        color: '#ffffff',\n                        backgroundColor: '#000000',\n                        fontSize: 12,\n                      }}\n                      placeholder={\n                        \"Like fontSize: 12,backgroundColor:'#000000'\"\n                      }\n                      value={\n                        reportSettingStore.templatePatientResult.panelHeader\n                          ?.methodDescriptionCSS\n                      }\n                      onChange={methodDescriptionCSS => {\n                        reportSettingStore.updateTemplatePatientResult({\n                          ...reportSettingStore.templatePatientResult,\n                          panelHeader: {\n                            ...reportSettingStore.templatePatientResult\n                              ?.panelHeader,\n                            methodDescriptionCSS,\n                          },\n                        });\n                      }}\n                    />\n                  )}\n                  name='panelMethodDescriptionCSS'\n                  rules={{required: false}}\n                  defaultValue=''\n                />\n              </div>\n\n              <div className='p-3 border border-gray-800 relative mt-2'>\n                <h2 className='-mt-10 translate-y-1/2 p-1 w-fit bg-white mb-4'>\n                  Test Header\n                </h2>\n                <Controller\n                  control={control}\n                  render={({field: {onChange}}) => (\n                    <Form.MultilineInput\n                      label='Description CSS'\n                      className='text-sm'\n                      style={{\n                        color: '#ffffff',\n                        backgroundColor: '#000000',\n                        fontSize: 12,\n                      }}\n                      placeholder={\n                        \"Like fontSize: 12,backgroundColor:'#000000'\"\n                      }\n                      value={\n                        reportSettingStore.templatePatientResult?.testHeader\n                          ?.descriptionCSS\n                      }\n                      onChange={descriptionCSS => {\n                        reportSettingStore.updateTemplatePatientResult({\n                          ...reportSettingStore.templatePatientResult,\n                          testHeader: {\n                            ...reportSettingStore.templatePatientResult\n                              .testHeader,\n                            descriptionCSS,\n                          },\n                        });\n                      }}\n                    />\n                  )}\n                  name='testDescriptionCSS'\n                  rules={{required: false}}\n                  defaultValue=''\n                />\n                <Controller\n                  control={control}\n                  render={({field: {onChange}}) => (\n                    <Form.MultilineInput\n                      label='Method Description CSS'\n                      className='text-sm'\n                      style={{\n                        color: '#ffffff',\n                        backgroundColor: '#000000',\n                        fontSize: 12,\n                      }}\n                      placeholder={\n                        \"Like fontSize: 12,backgroundColor:'#000000'\"\n                      }\n                      value={\n                        reportSettingStore.templatePatientResult.testHeader\n                          ?.methodDescriptionCSS\n                      }\n                      onChange={methodDescriptionCSS => {\n                        reportSettingStore.updateTemplatePatientResult({\n                          ...reportSettingStore.templatePatientResult,\n                          testHeader: {\n                            ...reportSettingStore.templatePatientResult\n                              ?.testHeader,\n                            methodDescriptionCSS,\n                          },\n                        });\n                      }}\n                    />\n                  )}\n                  name='testMethodDescriptionCSS'\n                  rules={{required: false}}\n                  defaultValue=''\n                />\n              </div>\n            </List>\n\n            <List direction='col' space={4} justify='stretch' fill>\n              <div className='p-3 border border-gray-800 relative mt-2'>\n                <h2 className='-mt-10 translate-y-1/2 p-1 w-fit bg-white mb-4'>\n                  Patient Result List\n                </h2>\n                <Controller\n                  control={control}\n                  render={({field: {onChange}}) => (\n                    <Form.MultilineInput\n                      label='Fields Text CSS'\n                      className='text-sm'\n                      style={{\n                        color: '#ffffff',\n                        backgroundColor: '#000000',\n                        fontSize: 12,\n                      }}\n                      placeholder={\n                        \"Like fontSize: 12,backgroundColor:'#000000'\"\n                      }\n                      value={\n                        reportSettingStore.templatePatientResult\n                          .patientResultList?.fieldsTextCSS\n                      }\n                      onChange={fieldsTextCSS => {\n                        reportSettingStore.updateTemplatePatientResult({\n                          ...reportSettingStore.templatePatientResult,\n                          patientResultList: {\n                            ...reportSettingStore.templatePatientResult\n                              .patientResultList,\n                            fieldsTextCSS,\n                          },\n                        });\n                      }}\n                    />\n                  )}\n                  name='prListFieldsTextCSS'\n                  rules={{required: false}}\n                  defaultValue=''\n                />\n              </div>\n              <div className='p-3 border border-gray-800 relative mt-2'>\n                <h2 className='-mt-10 translate-y-1/2 p-1 w-fit bg-white mb-4'>\n                  Test Footer\n                </h2>\n                <Controller\n                  control={control}\n                  render={({field: {onChange}}) => (\n                    <Form.MultilineInput\n                      label='Interpretation CSS'\n                      className='text-sm'\n                      style={{\n                        color: '#ffffff',\n                        backgroundColor: '#000000',\n                        fontSize: 12,\n                      }}\n                      placeholder={\n                        \"Like fontSize: 12,backgroundColor:'#000000'\"\n                      }\n                      value={\n                        reportSettingStore.templatePatientResult.testFooter\n                          ?.interpretationCSS\n                      }\n                      onChange={interpretationCSS => {\n                        reportSettingStore.updateTemplatePatientResult({\n                          ...reportSettingStore.templatePatientResult,\n                          testFooter: {\n                            ...reportSettingStore.templatePatientResult\n                              .testFooter,\n                            interpretationCSS,\n                          },\n                        });\n                      }}\n                    />\n                  )}\n                  name='testInterpretationCSS'\n                  rules={{required: false}}\n                  defaultValue=''\n                />\n              </div>\n              <div className='p-3 border border-gray-800 relative mt-2'>\n                <h2 className='-mt-10 translate-y-1/2 p-1 w-fit bg-white mb-4'>\n                  Panel Footer\n                </h2>\n                <Controller\n                  control={control}\n                  render={({field: {onChange}}) => (\n                    <Form.MultilineInput\n                      label='Interpretation CSS'\n                      className='text-sm'\n                      style={{\n                        color: '#ffffff',\n                        backgroundColor: '#000000',\n                        fontSize: 12,\n                      }}\n                      placeholder={\n                        \"Like fontSize: 12,backgroundColor:'#000000'\"\n                      }\n                      value={\n                        reportSettingStore.templatePatientResult.panelFooter\n                          ?.interpretationCSS\n                      }\n                      onChange={interpretationCSS => {\n                        reportSettingStore.updateTemplatePatientResult({\n                          ...reportSettingStore.templatePatientResult,\n                          panelFooter: {\n                            ...reportSettingStore.templatePatientResult\n                              .panelFooter,\n                            interpretationCSS,\n                          },\n                        });\n                      }}\n                    />\n                  )}\n                  name='panelInterpretationCSS'\n                  rules={{required: false}}\n                  defaultValue=''\n                />\n              </div>\n              <div className='p-3 border border-gray-800 relative mt-2'>\n                <h2 className='-mt-10 translate-y-1/2 p-1 w-fit bg-white mb-4'>\n                  Department Footer\n                </h2>\n                <Controller\n                  control={control}\n                  render={({field: {onChange}}) => (\n                    <Form.MultilineInput\n                      label='Image CSS'\n                      className='text-sm'\n                      style={{\n                        color: '#ffffff',\n                        backgroundColor: '#000000',\n                        fontSize: 12,\n                      }}\n                      placeholder={'Like width:150,height: 100'}\n                      value={\n                        reportSettingStore.templatePatientResult\n                          .departmentFooter?.imageCSS\n                      }\n                      onChange={imageCSS => {\n                        reportSettingStore.updateTemplatePatientResult({\n                          ...reportSettingStore.templatePatientResult,\n                          departmentFooter: {\n                            ...reportSettingStore.templatePatientResult\n                              ?.departmentFooter,\n                            imageCSS,\n                          },\n                        });\n                      }}\n                    />\n                  )}\n                  name='departmentImageCSS'\n                  rules={{required: false}}\n                  defaultValue=''\n                />\n              </div>\n            </List> */}\n          </Grid>\n          {/* <List direction='col' space={4} justify='stretch' fill>\n            {getTemplate(\n              reportSettingStore.pageBranding?.tempCode,\n              reportSettingStore.pageBranding,\n            )}\n          </List> */}\n        </Grid>\n        <br />\n        <List direction='row' space={3} align='center'>\n          <Buttons.Button\n            size='medium'\n            type='solid'\n            icon={Svg.Save}\n            onClick={handleSubmit(onSave)}\n          >\n            Save\n          </Buttons.Button>\n          <Buttons.Button\n            size='medium'\n            type='outline'\n            icon={Svg.Remove}\n            onClick={() => {\n              window.location.reload();\n            }}\n          >\n            Clear\n          </Buttons.Button>\n        </List>\n      </div>\n      <div className='p-2 rounded-lg shadow-xl overflow-auto'>\n        <TemplatePatientResultList\n          data={reportSettingStore.templatePatientResultList}\n          totalSize={reportSettingStore.templatePatientResultListCount}\n          isDelete={RouterFlow.checkPermission(\n            routerStore.userPermission,\n            'Delete',\n          )}\n          isEditModify={RouterFlow.checkPermission(\n            routerStore.userPermission,\n            'Edit/Modify',\n          )}\n          onDelete={selectedItem => setModalConfirm(selectedItem)}\n          onSelectedRow={rows => {\n            setModalConfirm({\n              show: true,\n              type: 'delete',\n              id: rows,\n              title: 'Are you sure?',\n              body: 'Delete selected items!',\n            });\n          }}\n          onUpdateItem={(fields: any, id: string) => {\n            setModalConfirm({\n              show: true,\n              type: 'update',\n              data: {fields, id},\n              title: 'Are you sure?',\n              body: 'Update banner!',\n            });\n          }}\n          onPageSizeChange={(page, limit) => {\n            // bannerStore.fetchListBanner(page, limit);\n          }}\n          onFilter={(type, filter, page, limit) => {\n            // bannerStore.BannerService.filter({\n            //   input: {type, filter, page, limit},\n            // });\n          }}\n          onPdfPreview={item => {\n            setModalView({\n              visible: true,\n              children: <>{getTemplate(item.tempCode, item)}</>,\n            });\n          }}\n        />\n      </div>\n      <ModalConfirm\n        {...modalConfirm}\n        click={(type?: string) => {\n          switch (type) {\n            case 'delete': {\n              reportSettingStore.templatePatientResultService\n                .removeTemplatePatientResult({\n                  input: {id: modalConfirm.id},\n                })\n                .then((res: any) => {\n                  if (res.removeTemplatePatientResult.success) {\n                    Toast.success({\n                      message: `😊 ${res.removeTemplatePatientResult.message}`,\n                    });\n                    setModalConfirm({show: false});\n                    reportSettingStore.templatePatientResultService.listTemplatePatientResult();\n                  }\n                });\n              break;\n            }\n            case 'update': {\n              reportSettingStore.pageBrandingService\n                .update({\n                  input: {\n                    ...modalConfirm.data.fields,\n                    _id: modalConfirm.data.id,\n                  },\n                })\n                .then((res: any) => {\n                  setModalConfirm({show: false});\n                  if (res.updatePageBranding.success) {\n                    Toast.success({\n                      message: `😊 ${res.updatePageBranding.message}`,\n                    });\n                    setTimeout(() => {\n                      window.location.reload();\n                    }, 2000);\n                  }\n                });\n              break;\n            }\n          }\n        }}\n        onClose={() => setModalConfirm({show: false})}\n      />\n      <ModalView\n        {...modalView}\n        onClose={() => setModalView({visible: false})}\n      />\n    </>\n  );\n});\n","import React, {useState} from 'react';\nimport {observer} from 'mobx-react';\nimport _ from 'lodash';\nimport {Header, PageHeading, PageHeadingLabDetails} from '@/library/components';\nimport {useForm} from 'react-hook-form';\n\nimport '@/library/assets/css/accordion.css';\nimport {useStores} from '@/stores';\nimport {Accordion, AccordionItem} from 'react-sanfona';\nimport '@/library/assets/css/accordion.css';\n\nimport {PageBranding} from './page-branding.screen';\nimport {TemplateSettings} from './template-setting.screen';\nimport {TemplatePatientResult} from './template-patient-result.screen';\n\nconst ReportSettings = observer(() => {\n  const {\n    loading,\n    patientManagerStore,\n    routerStore,\n    administrativeDivisions,\n    doctorsStore,\n    loginStore,\n  } = useStores();\n\n  const {\n    control,\n    handleSubmit,\n    formState: {errors},\n    setValue,\n  } = useForm();\n  setValue('species', patientManagerStore.patientManger.species);\n\n  return (\n    <>\n      <Header>\n        <PageHeading title={routerStore.selectedComponents?.title || ''} />\n        <PageHeadingLabDetails store={loginStore} />\n      </Header>\n      <div>\n        <Accordion>\n          {[\n            {title: 'TEMPLATE SETTING'},\n            {title: 'PAGE BRANDING'},\n            {title: 'TEMPLATE PATIENT RESULT'},\n            // {title: 'REPORT SECTION'},\n            // {title: 'SECTION SETTING'},\n            // {title: 'PAGE SETTING'},\n            // {title: 'GENERAL SETTING'},\n            // {title: 'FONT SETTING'},\n            // {title: 'REPORT FIELD MAPPING'},\n          ].map(item => {\n            return (\n              <AccordionItem\n                title={`${item.title}`}\n                expanded={item.title === 'TEMPLATE PATIENT RESULT'}\n              >\n                {item.title === 'TEMPLATE SETTING' && <TemplateSettings />}\n                {item.title === 'PAGE BRANDING' && <PageBranding />}\n                {item.title === 'TEMPLATE PATIENT RESULT' && (\n                  <TemplatePatientResult />\n                )}\n\n                {/* {item.title === 'REPORT SECTION' && <ReportSection />}\n                {item.title === 'SECTION SETTING' && <SectionSettings />}\n                {item.title === 'PAGE SETTING' && <PageSetting />}\n                {item.title === 'GENERAL SETTING' && <GeneralSettings />}\n                {item.title === 'FONT SETTING' && <FontSetting />}\n                {item.title === 'REPORT FIELD MAPPING' && (\n                  <ReportFieldMapping />\n                )} */}\n              </AccordionItem>\n            );\n          })}\n        </Accordion>\n      </div>\n    </>\n  );\n});\n\nexport default ReportSettings;\n","import React, {useRef} from 'react';\nimport {\n  PdfHeading,\n  PdfRegular,\n  PdfPageNumber,\n  PdfHeader,\n  PdfSubHeader,\n  PdfView,\n  PdfBorderView,\n  PdfFooterView,\n  PdfSmall,\n  PdfTable,\n} from '@components';\n\ninterface PdfTemp0001FooterProps {\n  data: any;\n}\n\nexport const PdfTemp0001Footer = ({data}: PdfTemp0001FooterProps) => {\n  const mainBoxCSS = useRef<any>({});\n  const titleCSS = useRef<any>({});\n  const subTitleCSS = useRef<any>({});\n  if (data.footer?.mainBoxCSS) {\n    try {\n      mainBoxCSS.current = eval('({' + data.footer?.mainBoxCSS + '})');\n    } catch (e) {\n      mainBoxCSS.current = {};\n    }\n  }\n  if (data.footer?.titleCSS) {\n    try {\n      titleCSS.current = eval('({' + data.footer?.titleCSS + '})');\n    } catch (e) {\n      titleCSS.current = {};\n    }\n  }\n  if (data.footer?.subTitleCSS) {\n    try {\n      subTitleCSS.current = eval('({' + data.footer?.subTitleCSS + '})');\n    } catch (e) {\n      subTitleCSS.current = {};\n    }\n  }\n\n  return (\n    <PdfFooterView fixed style={{...mainBoxCSS.current}}>\n      <PdfSmall style={{textAlign: 'center', ...titleCSS.current}}>\n        {data.footer?.title || 'Title'}\n      </PdfSmall>\n      <PdfSmall style={{...subTitleCSS.current}}>{`${\n        data.footer?.subTitle || 'Tel: 1234'\n      }`}</PdfSmall>\n    </PdfFooterView>\n  );\n};\n","import React, {useRef} from 'react';\nimport {\n  PdfHeading,\n  PdfRegular,\n  PdfPageNumber,\n  PdfHeader,\n  PdfSubHeader,\n  PdfView,\n  PdfBorderView,\n  PdfFooterView,\n  PdfSmall,\n  PdfTable,\n  PdfImage,\n} from '@components';\nimport {decompressString} from '@/library/utils';\n\ninterface PdfTemp0001HeaderProps {\n  data: any;\n}\n\nexport const PdfTemp0001Header = ({data}: PdfTemp0001HeaderProps) => {\n  const headerTitleCSS = useRef<any>({});\n  const headerMainBoxCSS = useRef<any>({});\n  const imageCSS = useRef<any>({});\n  if (data.header?.titleCSS) {\n    try {\n      headerTitleCSS.current = eval('({' + data.header?.titleCSS + '})');\n    } catch (e) {\n      headerTitleCSS.current = {};\n    }\n  }\n  if (data.header?.mainBoxCSS) {\n    try {\n      headerMainBoxCSS.current = eval('({' + data.header?.mainBoxCSS + '})');\n    } catch (e) {\n      headerMainBoxCSS.current = {};\n    }\n  }\n  if (data.header?.logoCSS) {\n    try {\n      imageCSS.current = eval('({' + data.header?.logoCSS + '})');\n    } catch (e) {\n      imageCSS.current = {};\n    }\n  }\n\n  return (\n    <PdfHeader\n      style={{\n        flexDirection: 'row',\n        alignItems: 'center',\n        ...headerMainBoxCSS.current,\n      }}\n      fixed\n    >\n      <PdfImage\n        src={decompressString(data.header?.logoUrl || '')}\n        style={{\n          width: 50,\n          height: 50,\n          borderRadius: 25,\n          marginHorizontal: 10,\n          ...imageCSS.current,\n        }}\n      />\n      <PdfHeading style={headerTitleCSS.current}>\n        {data.header?.title || 'Title'}\n      </PdfHeading>\n    </PdfHeader>\n  );\n};\n","import React, {useRef} from 'react';\nimport {\n  PdfHeading,\n  PdfRegular,\n  PdfPageNumber,\n  PdfHeader,\n  PdfSubHeader,\n  PdfView,\n  PdfBorderView,\n  PdfFooterView,\n  PdfSmall,\n  PdfTable,\n} from '@components';\n\ninterface PdfTemp0001SubHeaderProps {\n  data: any;\n}\n\nexport const PdfTemp0001SubHeader = ({data}: PdfTemp0001SubHeaderProps) => {\n  const mainBoxCSS = useRef<any>({});\n  const titleCSS = useRef<any>({});\n  const subTitleCSS = useRef<any>({});\n  if (data.subHeader?.mainBoxCSS) {\n    try {\n      mainBoxCSS.current = eval('({' + data.subHeader?.mainBoxCSS + '})');\n    } catch (e) {\n      mainBoxCSS.current = {};\n    }\n  }\n  if (data.subHeader?.titleCSS) {\n    try {\n      titleCSS.current = eval('({' + data.subHeader?.titleCSS + '})');\n    } catch (e) {\n      titleCSS.current = {};\n    }\n  }\n  if (data.subHeader?.subTitleCSS) {\n    try {\n      subTitleCSS.current = eval('({' + data.subHeader?.subTitleCSS + '})');\n    } catch (e) {\n      subTitleCSS.current = {};\n    }\n  }\n\n  return (\n    <PdfSubHeader style={{...mainBoxCSS.current}} fixed>\n      <PdfRegular style={{...titleCSS.current}}>\n        {data.subHeader?.title || 'Title'}\n      </PdfRegular>\n      <PdfRegular style={{...subTitleCSS.current}}>{`${\n        data.subHeader?.subTitle || 'web-url'\n      }`}</PdfRegular>\n    </PdfSubHeader>\n  );\n};\n","import React, {useRef} from 'react';\nimport {\n  Page,\n  Text,\n  View,\n  Image,\n  Document,\n  StyleSheet,\n  Font,\n  PDFViewer,\n} from '@react-pdf/renderer';\nimport {\n  PdfHeading,\n  PdfRegular,\n  PdfPageNumber,\n  PdfHeader,\n  PdfSubHeader,\n  PdfView,\n  PdfBorderView,\n  PdfFooterView,\n  PdfSmall,\n  PdfTable,\n} from '@components';\nimport {observer} from 'mobx-react';\nimport {PdfTSTemp0001} from '../../template-setting/temp0001/temp0001.component';\nimport {PageBranding} from '@features/report-builder/report-settings/models/page-branding.model';\n\nimport {PdfTemp0001Header} from './temp0001-header.component';\nimport {PdfTemp0001SubHeader} from './temp0001-sub-header.component';\nimport {PdfTemp0001Footer} from './temp0001-footer.component';\n\nFont.register({\n  family: 'arimaRegular',\n  src: '../../../assets/fonts/arima/Arima-Regular.ttf',\n});\n\ninterface PdfPBTemp0001Props {\n  data: PageBranding;\n  children?: React.ReactNode;\n}\n\nexport const PdfPBTemp0001 = observer(\n  ({data, children}: PdfPBTemp0001Props) => {\n    const pageNumberCSS = useRef<any>({});\n    if (data?.pageNumber?.pageNumberCSS) {\n      try {\n        pageNumberCSS.current = eval(\n          '({' + data?.pageNumber?.pageNumberCSS + '})',\n        );\n      } catch (e) {\n        pageNumberCSS.current = {};\n      }\n    }\n    return (\n      <PdfTSTemp0001\n        height={window.innerHeight / 1.3}\n        documentTitle='Page Branding'\n        isToolbar={data.templateSettings?.isToolbar}\n        isBackgroundImage={data.templateSettings?.isBackgroundImage}\n        backgroundImage={data.templateSettings?.backgroundImageBase64}\n        mainBoxCSS={data.templateSettings?.mainBoxCSS}\n        pageSize={data.templateSettings?.pageSize}\n        children={\n          <>\n            {/* Header */}\n            {data?.isHeader && <PdfTemp0001Header data={data} />}\n\n            {/* Sub Header */}\n            {data?.isSubHeader && <PdfTemp0001SubHeader data={data} />}\n\n            {/* children */}\n            {children}\n\n            {/* Page Number */}\n            {data?.isPdfPageNumber && (\n              <PdfPageNumber style={{...pageNumberCSS.current}} />\n            )}\n\n            {/* Footer */}\n            {data?.isFooter && <PdfTemp0001Footer data={data} />}\n          </>\n        }\n      />\n    );\n  },\n);\n","import React, {useState, useRef} from 'react';\nimport {\n  Page,\n  Text,\n  Document,\n  StyleSheet,\n  Font,\n  PDFViewer,\n  Image,\n  View,\n} from '@react-pdf/renderer';\nimport {decompressString} from '@/library/utils';\n\nFont.register({\n  family: 'arimaRegular',\n  src: '../../../assets/fonts/arima/Arima-Regular.ttf',\n});\n\nconst styles = StyleSheet.create({\n  page: {\n    backgroundColor: '#ffffff',\n    paddingBottom: '80pt',\n  },\n});\n\ninterface PdfTSTemp0001Props {\n  width?: string | number;\n  height?: number;\n  documentTitle?: string;\n  isToolbar?: boolean;\n  isBackgroundImage?: boolean;\n  backgroundImage?: string;\n  pageSize: any;\n  mainBoxCSS?: any;\n  children: React.ReactNode;\n}\n\nexport const PdfTSTemp0001 = ({\n  width = '100%',\n  height = 300,\n  documentTitle = 'Template Settings',\n  isToolbar = false,\n  isBackgroundImage = false,\n  backgroundImage,\n  mainBoxCSS,\n  pageSize,\n  children,\n}: PdfTSTemp0001Props) => {\n  //const [boxCSS, setBoxCSS] = useState<any>(mainBoxCSS);\n  const boxCSS = useRef<any>(styles.page);\n  if (mainBoxCSS) {\n    try {\n      boxCSS.current = eval('({' + mainBoxCSS + '})');\n    } catch (e) {\n      boxCSS.current = styles.page;\n    }\n  }\n\n  return (\n    <>\n      {isToolbar ? (\n        <PDFViewer style={{width, height}} showToolbar={isToolbar}>\n          <Document title={documentTitle}>\n            <Page size={pageSize} style={boxCSS.current}>\n              {isBackgroundImage && (\n                <View\n                  style={{\n                    position: 'absolute',\n                    bottom: 0,\n                    left: 0,\n                    right: 0,\n                    top: 0,\n                  }}\n                  fixed={true}\n                >\n                  <Image\n                    object-fit='fill'\n                    style={{\n                      position: 'absolute',\n                      bottom: 0,\n                      left: 0,\n                      right: 0,\n                      top: 0,\n                      objectFit: 'fill',\n                    }}\n                    src={decompressString(backgroundImage || '')}\n                  />\n                </View>\n              )}\n\n              {children}\n            </Page>\n          </Document>\n        </PDFViewer>\n      ) : (\n        <div>\n          <PDFViewer style={{width, height}} showToolbar={isToolbar}>\n            <Document title={documentTitle}>\n              <Page size={pageSize} style={boxCSS.current}>\n                {isBackgroundImage && (\n                  <View\n                    style={{\n                      position: 'absolute',\n                      bottom: 0,\n                      left: 0,\n                      right: 0,\n                      top: 0,\n                    }}\n                    fixed={true}\n                  >\n                    <Image\n                      object-fit='fill'\n                      style={{\n                        position: 'absolute',\n                        bottom: 0,\n                        left: 0,\n                        right: 0,\n                        top: 0,\n                        objectFit: 'fill',\n                      }}\n                      src={decompressString(backgroundImage || '')}\n                    />\n                  </View>\n                )}\n                {children}\n              </Page>\n            </Document>\n          </PDFViewer>\n        </div>\n      )}\n    </>\n  );\n};\n"],"names":["section","TemplateSettingsList","observer","props","style","position","id","data","totalSize","columns","dataField","text","hidden","csvExport","headerClasses","sort","editable","csvFormatter","col","row","isToolbar","formatter","cell","value","onChange","onUpdateItem","_id","isBackgroundImage","backgroundImage","src","alt","className","editorRenderer","editorProps","column","rowIndex","columnIndex","placeholder","e","target","files","compressString","resizeFile","backgroundImageBase64","size","type","icon","Svg","onClick","pageSize","selected","map","item","index","label","color","backgroundColor","onBlur","mainBoxCSS","defaultValue","isDelete","cellContent","tooltipText","onPdfPreview","Icons","onDelete","show","title","body","classes","colIndex","zIndex","length","isEditModify","isSelectRow","fileName","onSelectedRow","rows","onPageSizeChange","page","onFilter","filter","clearAllFilter","sectionSetting","version","environment","SearchBar","Search","ClearSearchButton","ExportCSVButton","CSVExport","searchPlaceholder","sizePerPage","expandRow","useState","isFilterOpen","setIsFilterOpen","options","cutome","paginationSize","pageStartIndex","firstPageText","prePageText","nextPageText","lastPageText","disablePageTitle","paginationTotalRenderer","from","to","hideSizePerPage","showTotal","alwaysShowAllBtns","sizePerPageList","hidePageListOnlyOnePage","sizePerPageRenderer","currSizePerPage","onSizePerPageChange","role","min","option","searchProps","handleTableChange","cellEdit","filters","sortField","sortOrder","searchText","newValue","rowId","_","alert","Object","entries","key","values","object","filterVal","assign","debounce","srText","a","b","CustomToggleList","onColumnToggle","toggles","toggle","pagination","paginationFactory","keyField","paginationProps","paginationTableProps","bootstrap4","search","exportCSV","dayjs","Date","format","noAutoBOM","blobType","exportAll","onlyExportFiltered","columnToggle","csvProps","contextual","btnClassName","columnToggleProps","maxWidth","remote","baseProps","noDataIndication","hover","filterFactory","cellEditFactory","mode","blurToSave","undefined","onTableChange","PageBrandingHeader","textFilter","getFilter","sectionRequired","disabled","sectionGrid","lineGrid","columnGrid","fontColor","invertHex","fontBackground","useStores","reportSettingStore","loading","routerStore","useForm","control","errors","handleSubmit","formState","setValue","setError","clearErrors","render","field","hasError","pageBranding","header","updatePageBranding","name","rules","required","titleCSS","headerLogo","logo","logoCSS","PageBrandingSubHeader","subHeader","subTitle","subTitleCSS","PageBrandingFooter","footerTitle","footer","PageNumber","pageNumber","pageNumberCSS","PageBrandingList","isHeader","logoUrl","isSubHeader","isFooter","isPdfPageNumber","TemplatePatientResultList","tempCode","endOfPage","details","endOfReport","PageBranding","modalConfirm","setModalConfirm","modalView","setModalView","isInputView","setIsInputView","isExistsTempCode","setIsExistsTempCode","getTemplate","RouterFlow","userPermission","bottom","cols","direction","space","justify","fill","loader","list","templateSettingsList","displayKey","onSelect","templateSettings","tempName","pageBrandingService","findByFields","input","brandingTitle","then","res","console","log","findByFieldsPageBranding","success","Toast","message","toUpperCase","headerVisible","subHeaderVisible","footerVisible","accordionItem","push","getAccordionItem","align","addPageBranding","createPageBranding","setTimeout","window","location","reload","pageBrandingList","pageBrandingListCount","selectedItem","fields","limit","visible","children","click","removePageBranding","listPageBranding","update","onClose","TemplateSettings","updateTemplateSettings","templateSettingsService","findByFieldsTemplateSetting","isToolBar","href","rel","documentTitle","addTemplateSetting","createTemplateSetting","templateSettingsListCount","height","innerHeight","removeTemplateSetting","listTemplateSetting","updateTemplateSetting","TemplatePatientResult","libraryStore","isExistsRecord","setIsExistsRecord","reportTemplateType","templatePatientResult","updateTemplatePatientResult","templatePatientResultService","templateCode","templateTitle","findByFieldsTemplatePatientResult","listLibrary","selectedItemTemplatePatientResult","onUpdate","o","updateLibraryList","listLibraryCopy","libraryService","filterByFields","items","updateSelectedItemTemplatePatientResult","addTemplatePatientResult","createTemplatePatientResult","templatePatientResultList","templatePatientResultListCount","removeTemplatePatientResult","listTemplatePatientResult","patientManagerStore","loginStore","administrativeDivisions","doctorsStore","patientManger","species","selectedComponents","store","expanded","PdfTemp0001Footer","useRef","current","eval","fixed","textAlign","PdfTemp0001Header","headerTitleCSS","headerMainBoxCSS","imageCSS","flexDirection","alignItems","decompressString","width","borderRadius","marginHorizontal","PdfTemp0001SubHeader","Font","family","PdfPBTemp0001","styles","StyleSheet","paddingBottom","PdfTSTemp0001","boxCSS","showToolbar","left","right","top","objectFit"],"sourceRoot":""}