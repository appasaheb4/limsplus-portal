{"version":3,"file":"static/js/1357.e75b6ab9.chunk.js","mappings":"oIAkBIA,EACAC,EACAC,E,sIAJJC,IAAAA,OAAaC,KAMb,IAAMC,GAAgBC,EAAAA,EAAAA,KAAS,WAAO,IAADC,EACnCC,GAAsDC,EAAAA,EAAAA,MAA/CC,EAAUF,EAAVE,WAAYC,EAAkBH,EAAlBG,mBAAoBC,EAAWJ,EAAXI,YACvCC,GAAgDC,EAAAA,EAAAA,UAAS,CAAC,GAAEC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAArDI,EAAgBF,EAAA,GAAEG,EAAmBH,EAAA,GAO5C,OALAI,EAAAA,EAAAA,YAAU,WACRR,EAAmBS,oBAErB,GAAG,KAGDC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,MAACG,EAAAA,GAAM,CAAAD,SAAA,EACLE,EAAAA,EAAAA,KAACC,EAAAA,GAAW,CAACC,OAAqC,QAA9BpB,EAAAK,EAAYgB,0BAAkB,IAAArB,OAAA,EAA9BA,EAAgCoB,QAAS,MAC7DF,EAAAA,EAAAA,KAACI,EAAAA,GAAqB,CAACC,MAAOpB,QAEhCe,EAAAA,EAAAA,KAAA,OAAKM,UAAU,qBAAoBR,UACjCE,EAAAA,EAAAA,KAAA,OAAKM,UAAU,yCAAwCR,UACrDE,EAAAA,EAAAA,KAAA,OAAKO,MAAO,CAACC,SAAU,YAAYV,UACjCE,EAAAA,EAAAA,KAACS,EAAAA,GAAc,CACbC,GAAG,MACHC,KAAMzB,EAAmB0B,mBAAqB,GAC9CC,UAAW3B,EAAmB4B,uBAC9BC,QAAS,CACP,CACEC,UAAW,MACXC,KAAM,KACNC,QAAQ,EACRC,WAAW,GAEb,CACEH,UAAW,SACXC,KAAM,eACNG,MAAM,EACNC,YAAa,CACXC,SAAU,GAEZC,UAAW,SAACC,EAAOC,GAAM,OAAKF,EAAAA,EAAAA,IAAUC,EAAOC,EAAO,EACtDC,aAAc,SAACC,EAAMC,EAAKC,GAAQ,iBAAAC,OACrBF,EAAIG,KAAKxD,OAAM,iBAAAuD,OAAgBF,EAAIG,KAAKC,SAAQ,YAAAF,OAAWF,EAAIG,KAAKE,IAAG,YAAAH,OAAWF,EAAIG,KAAKG,KAAI,EAC5GC,QAAQC,EAAAA,EAAAA,IAAW,CACjBC,UAAW,SAAAF,GACT5D,EAAS4D,CACX,IAEFG,cAAe,cACfC,UAAU,EACVC,UAAW,SAACb,EAAMC,GAAS,IAADa,EAAAC,EAAAC,EAAAC,EACxB,OACEhD,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,YAAAgC,OAAwB,QAAxBW,EAAgBb,EAAIG,YAAI,IAAAU,OAAA,EAARA,EAAUlE,QAAS,QACnCyB,EAAAA,EAAAA,KAAA,MAAAF,SAAA,cAAAgC,OAA2B,QAA3BY,EAAmBd,EAAIG,YAAI,IAAAW,OAAA,EAARA,EAAUV,aAC7BhC,EAAAA,EAAAA,KAAA,MAAAF,SAAA,QAAAgC,OAAqB,QAArBa,EAAaf,EAAIG,YAAI,IAAAY,OAAA,EAARA,EAAUV,QACvBjC,EAAAA,EAAAA,KAAA,MAAAF,SAAA,SAAAgC,OAAsB,QAAtBc,EAAchB,EAAIG,YAAI,IAAAa,OAAA,EAARA,EAAUV,UAG9B,GAEF,CACElB,UAAW,aACXC,KAAM,cACNG,MAAM,EACNC,YAAa,CACXC,SAAU,GAEZC,UAAW,SAACC,EAAOC,GAAM,OAAKF,EAAAA,EAAAA,IAAUC,EAAOC,EAAO,EACtDU,QAAQC,EAAAA,EAAAA,IAAW,CACjBC,UAAW,SAAAF,GACT3D,EAAa2D,CACf,IAEFT,aAAc,SAACC,EAAMC,EAAKC,GAAQ,IAAAgB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,gBAAA1B,OACtBF,EAAIpD,WAAWiF,OAAM,eAAA3B,OAA4B,QAA5Be,EAAcjB,EAAIpD,kBAAU,IAAAqE,GAAa,QAAbC,EAAdD,EAAgBa,mBAAW,IAAAZ,GAAI,QAAJC,EAA3BD,EAA6Ba,UAAE,IAAAZ,OAAjB,EAAdA,EAAiCa,KAAI,eAAA9B,OAA4B,QAA5BkB,EAAcpB,EAAIpD,kBAAU,IAAAwE,GAAa,QAAbC,EAAdD,EAAgBU,mBAAW,IAAAT,GAAI,QAAJC,EAA3BD,EAA6BU,UAAE,IAAAT,OAAjB,EAAdA,EAAiCW,QAAO,oBAAA/B,OAAiC,QAAjCqB,EAAmBvB,EAAIpD,kBAAU,IAAA2E,GAAa,QAAbC,EAAdD,EAAgBO,mBAAW,IAAAN,GAAS,QAATC,EAA3BD,EAA6BU,eAAO,IAAAT,OAAtB,EAAdA,EAAsCO,KAAI,kCAAA9B,OAC7K,QAD6KwB,EAC3L1B,EAAIpD,kBAAU,IAAA8E,GAAa,QAAbC,EAAdD,EAAgBI,mBAAW,IAAAH,GAAS,QAATC,EAA3BD,EAA6BO,eAAO,IAAAN,OAAtB,EAAdA,EAAsCK,QAAO,EACzDvB,cAAe,cACfE,UAAW,SAACb,EAAMC,GAAS,IAADmC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACxB,OACE/E,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,YAAAgC,OAA8B,QAA9BiC,EAAgBnC,EAAIpD,kBAAU,IAAAuF,OAAA,EAAdA,EAAgBN,QAAS,QACzCzD,EAAAA,EAAAA,KAAA,MAAAF,SAAI,UACJE,EAAAA,EAAAA,KAAA,MAAIM,UAAU,OAAMR,SAAA,SAAAgC,OACM,QADNkC,EACRpC,EAAIpD,kBAAU,IAAAwF,GAAa,QAAbC,EAAdD,EAAgBN,mBAAW,IAAAO,GAAI,QAAJC,EAA3BD,EAA6BN,UAAE,IAAAO,OAAjB,EAAdA,EAAiCN,KAAI,oDAAA9B,OACX,QADWqC,EACzBvC,EAAIpD,kBAAU,IAAA2F,GAAa,QAAbC,EAAdD,EAAgBT,mBAAW,IAAAU,GAAI,QAAJC,EAA3BD,EAA6BT,UAAE,IAAAU,OAAjB,EAAdA,EAAiCR,YAEzD7D,EAAAA,EAAAA,KAAA,MAAAF,SAAI,eACJE,EAAAA,EAAAA,KAAA,MAAIM,UAAU,OAAMR,SAAA,SAAAgC,OACM,QADNwC,EACR1C,EAAIpD,kBAAU,IAAA8F,GAAa,QAAbC,EAAdD,EAAgBZ,mBAAW,IAAAa,GAAS,QAATC,EAA3BD,EAA6BT,eAAO,IAAAU,OAAtB,EAAdA,EAAsCZ,KAAI,oDAAA9B,OAChB,QADgB2C,EAC9B7C,EAAIpD,kBAAU,IAAAiG,GAAa,QAAbC,EAAdD,EAAgBf,mBAAW,IAAAgB,GAAS,QAATC,EAA3BD,EAA6BZ,eAAO,IAAAa,OAAtB,EAAdA,EAAsCd,aAIpE,GAEF,CACE7C,UAAW,SACXC,KAAM,iBACNG,MAAM,EACNC,YAAa,CACXC,SAAU,GAEZC,UAAW,SAACC,EAAOC,GAAM,OAAKF,EAAAA,EAAAA,IAAUC,EAAOC,EAAO,EACtDU,QAAQC,EAAAA,EAAAA,IAAW,CACjBC,UAAW,SAAAF,GACT1D,EAAS0D,CACX,IAEFG,cAAe,cACfZ,aAAc,SAACC,EAAMC,EAAKC,GAAQ,YAAAC,OAC1BF,EAAIpD,WAAWC,OAAOmG,GAAE,cAAA9C,OAAaF,EAAIpD,WAAWC,OAAOoG,KAAI,MAAA/C,OAAKF,EAAIpD,WAAWC,OAAOqG,OAAM,MAAAhD,OAAKF,EAAIpD,WAAWC,OAAOsG,QAAO,eAAAjD,OAAcF,EAAIpD,WAAWC,OAAOuG,GAAE,EAChLxC,UAAW,SAACb,EAAMC,GAAS,IAADqD,EAAAC,EAAAC,EAAAC,EACxB,OACEpF,EAAAA,EAAAA,KAAAH,EAAAA,SAAA,CAAAC,UACEF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CAAI,OAAmB,QAAfmF,EAACrD,EAAIpD,kBAAU,IAAAyG,GAAQ,QAARC,EAAdD,EAAgBxG,cAAM,IAAAyG,OAAR,EAAdA,EAAwBN,MAChChD,EAAIpD,WAAWC,OAAOoG,OACrBjF,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CAAI,WACO,IAAG,GAAAgC,OACRF,EAAIpD,WAAWC,OAAOoG,KAAI,MAAA/C,OAAKF,EAAIpD,WAAWC,OAAOqG,OAAM,MAAAhD,OAAKF,EAAIpD,WAAWC,OAAOsG,aAE5FnF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CAAI,aACQ,GAAAgC,OAAkB,QAAlBqD,EAAIvD,EAAIpD,kBAAU,IAAA2G,GAAQ,QAARC,EAAdD,EAAgB1G,cAAM,IAAA2G,OAAR,EAAdA,EAAwBJ,cAOpD,GAEF,CACEhE,UAAW,cACXC,KAAM,KACNqB,cAAe,eACflB,MAAM,EACNC,YAAa,CACXC,SAAU,GAEZC,UAAW,SAACC,EAAOC,GAAM,OAAKF,EAAAA,EAAAA,IAAUC,EAAOC,EAAO,EACtDC,aAAc,SAACC,EAAMC,EAAKC,GAAQ,OAChCD,EAAIyD,YACA3G,IAAMkD,EAAIyD,aAAaC,OAAO,wBAC9B,EAAE,EACRnD,QAAQoD,EAAAA,EAAAA,MACRC,eAAgB,SAACC,EAAUhE,GAAM,OAC/BzB,EAAAA,EAAAA,KAAC0F,EAAAA,GAAU,CAACD,SAAUA,EAAUhE,OAAQA,GAAU,EAEpDe,UAAW,SAACb,EAAMC,GAChB,OAAOlD,IACLA,IAAMkD,EAAIyD,aAAaC,OAAO,yBAC9BK,SACJ,GAEF,CACE3E,UAAW,cACXC,KAAM,MACNqB,cAAe,cACflB,MAAM,EACNC,YAAa,CACXC,SAAU,GAEZC,UAAW,SAACC,EAAOC,GAAM,OAAKF,EAAAA,EAAAA,IAAUC,EAAOC,EAAO,EACtDC,aAAc,SAACC,EAAMC,EAAKC,GAAQ,OAChCD,EAAIgE,YACAlH,IAAMkD,EAAIgE,aAAaN,OAAO,wBAC9B,EAAE,EACRnD,QAAQoD,EAAAA,EAAAA,MACRC,eAAgB,SAACC,EAAUhE,GAAM,OAC/BzB,EAAAA,EAAAA,KAAAH,EAAAA,SAAA,CAAAC,UACEE,EAAAA,EAAAA,KAAC0F,EAAAA,GAAU,CACTD,SAAUA,EACVhE,OAAQA,EACRoE,UAAU,EACVC,SAAU,SAAAC,GACR,IAAMC,EAAQ,CACZC,KAAM,iBACN9D,OAAQ,CAAC4D,OAAAA,GACTG,KAAM,EACNC,MAAO,IAETjH,EAAmBkH,qBAAqBjE,OAAO,CAC7C6D,MAAAA,IAEFvG,EAAoB,CAACuG,MAAAA,GACvB,KAED,EAELxD,UAAW,SAACb,EAAMC,GAChB,OAAOA,EAAIgE,aACT5F,EAAAA,EAAAA,KAAAH,EAAAA,SAAA,CAAAC,SACGpB,IACCA,IAAMkD,EAAIgE,aAAaN,OAAO,yBAC9BK,YAGJ,aAEJ,IAGJU,iBAAkB,SAACH,EAAMI,GACnBC,IAAAA,QAAU/G,GACZN,EAAmBS,mBAAmBuG,EAAMI,GAE5CpH,EAAmBS,mBACjBuG,EACAI,EACA9G,EAGN,EACAiG,SAAU,SAACQ,EAAM9D,EAAQ+D,EAAMC,GACzBI,IAAAA,QAAU/G,GACZN,EAAmBkH,qBAAqBjE,OAAO,CAC7C6D,MAAO,CAACC,KAAAA,EAAM9D,OAAAA,EAAQ+D,KAAAA,EAAMC,MAAAA,KAG9BjH,EAAmBkH,qBAAqBjE,QAAMqE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAC3ChH,GAAgB,IACnB0G,KAAAA,EACAC,MAAAA,IAGN,EACAM,eAAgB,WACdlI,EAAO,IACPC,EAAW,IACXC,EAAO,IACPgB,EAAoB,CAAC,GACrBiH,YAAW,WACTxH,EAAmBS,mBAAmB,EAAG,GAC3C,GAAG,IACL,EACAgH,cAAc,EACdC,aAAa,EACbC,SAAS,iBACTC,qBAAsB,GACtBC,eAAgB,CAAC,iBAO/B,IAEA,W","sources":["features/settings/login-activity/screens/login-activity.screen.tsx"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {observer} from 'mobx-react';\nimport _ from 'lodash';\nimport {\n  Header,\n  PageHeading,\n  PageHeadingLabDetails,\n  TableBootstrap,\n  DateFilter,\n  textFilter,\n  customFilter,\n  sortCaret,\n} from '@/library/components';\nimport dayjs from 'dayjs';\nimport {useStores} from '@/stores';\nimport relativeTime from 'dayjs/plugin/relativeTime';\ndayjs.extend(relativeTime);\n\nlet userId;\nlet systemInfo;\nlet ipInfo;\n\nconst LoginActivity = observer(() => {\n  const {loginStore, loginActivityStore, routerStore} = useStores();\n  const [statusWiseFilter, setStatusWiseFilter] = useState({});\n\n  useEffect(() => {\n    loginActivityStore.fetchLoginActivity();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <>\n      <Header>\n        <PageHeading title={routerStore.selectedComponents?.title || ''} />\n        <PageHeadingLabDetails store={loginStore} />\n      </Header>\n      <div className='mx-auto  flex-wrap'>\n        <div className='p-2 rounded-lg shadow-xl overflow-auto'>\n          <div style={{position: 'relative'}}>\n            <TableBootstrap\n              id='_id'\n              data={loginActivityStore.listLoginActivity || []}\n              totalSize={loginActivityStore.listLoginActivityCount}\n              columns={[\n                {\n                  dataField: '_id',\n                  text: 'Id',\n                  hidden: true,\n                  csvExport: false,\n                },\n                {\n                  dataField: 'userId',\n                  text: 'User details',\n                  sort: true,\n                  headerStyle: {\n                    fontSize: 0,\n                  },\n                  sortCaret: (order, column) => sortCaret(order, column),\n                  csvFormatter: (cell, row, rowIndex) =>\n                    `UserId: ${row.user.userId}, User Name: ${row.user.fullName},  Lab: ${row.user.lab}, Role: ${row.user.role}`,\n                  filter: textFilter({\n                    getFilter: filter => {\n                      userId = filter;\n                    },\n                  }),\n                  headerClasses: 'textHeader5',\n                  editable: false,\n                  formatter: (cell, row) => {\n                    return (\n                      <div>\n                        <h6>{`UserId: ${row.user?.userId}`} </h6>\n                        <h6>{`User Name: ${row.user?.fullName}`}</h6>\n                        <h6>{`Lab: ${row.user?.lab}`}</h6>\n                        <h6>{`Role: ${row.user?.role}`}</h6>\n                      </div>\n                    );\n                  },\n                },\n                {\n                  dataField: 'systemInfo',\n                  text: 'System info',\n                  sort: true,\n                  headerStyle: {\n                    fontSize: 0,\n                  },\n                  sortCaret: (order, column) => sortCaret(order, column),\n                  filter: textFilter({\n                    getFilter: filter => {\n                      systemInfo = filter;\n                    },\n                  }),\n                  csvFormatter: (cell, row, rowIndex) =>\n                    `Device:${row.systemInfo.device}, OS, name:${row.systemInfo?.workstation?.os?.name},  version:${row.systemInfo?.workstation?.os?.version}, Browser,name: ${row.systemInfo?.workstation?.browser?.name}\n                    version:${row.systemInfo?.workstation?.browser?.version}`,\n                  headerClasses: 'textHeader5',\n                  formatter: (cell, row) => {\n                    return (\n                      <div>\n                        <h6>{`Device: ${row.systemInfo?.device}`} </h6>\n                        <h6> OS:</h6>\n                        <h6 className='ml-4'>\n                          {`name: ${row.systemInfo?.workstation?.os?.name}\n                                      version:${row.systemInfo?.workstation?.os?.version}`}\n                        </h6>\n                        <h6> Browser:</h6>\n                        <h6 className='ml-4'>\n                          {`name: ${row.systemInfo?.workstation?.browser?.name}\n                                      version:${row.systemInfo?.workstation?.browser?.version}`}\n                        </h6>\n                      </div>\n                    );\n                  },\n                },\n                {\n                  dataField: 'ipInfo',\n                  text: 'Ip Information',\n                  sort: true,\n                  headerStyle: {\n                    fontSize: 0,\n                  },\n                  sortCaret: (order, column) => sortCaret(order, column),\n                  filter: textFilter({\n                    getFilter: filter => {\n                      ipInfo = filter;\n                    },\n                  }),\n                  headerClasses: 'textHeader4',\n                  csvFormatter: (cell, row, rowIndex) =>\n                    `Ip:${row.systemInfo.ipInfo.ip}, Address:${row.systemInfo.ipInfo.city}, ${row.systemInfo.ipInfo.region}, ${row.systemInfo.ipInfo.country}, Location:${row.systemInfo.ipInfo.ll}`,\n                  formatter: (cell, row) => {\n                    return (\n                      <>\n                        <div>\n                          <h6>Ip: {row.systemInfo?.ipInfo?.ip}</h6>\n                          {row.systemInfo.ipInfo.city && (\n                            <>\n                              <h6>\n                                Address:{' '}\n                                {`${row.systemInfo.ipInfo.city}, ${row.systemInfo.ipInfo.region}, ${row.systemInfo.ipInfo.country}`}\n                              </h6>\n                              <h6>\n                                Location: {`${row.systemInfo?.ipInfo?.ll}`}\n                              </h6>\n                            </>\n                          )}\n                        </div>\n                      </>\n                    );\n                  },\n                },\n                {\n                  dataField: 'dateOfEntry',\n                  text: 'In',\n                  headerClasses: 'textHeader11',\n                  sort: true,\n                  headerStyle: {\n                    fontSize: 0,\n                  },\n                  sortCaret: (order, column) => sortCaret(order, column),\n                  csvFormatter: (cell, row, rowIndex) =>\n                    row.dateOfEntry\n                      ? dayjs(row.dateOfEntry).format('YYYY-MM-DD h:mm:ss a')\n                      : '',\n                  filter: customFilter(),\n                  filterRenderer: (onFilter, column) => (\n                    <DateFilter onFilter={onFilter} column={column} />\n                  ),\n                  formatter: (cell, row) => {\n                    return dayjs(\n                      dayjs(row.dateOfEntry).format('YYYY-MM-DD h:mm:ss a'),\n                    ).fromNow();\n                  },\n                },\n                {\n                  dataField: 'lastUpdated',\n                  text: 'Out',\n                  headerClasses: 'textHeader5',\n                  sort: true,\n                  headerStyle: {\n                    fontSize: 0,\n                  },\n                  sortCaret: (order, column) => sortCaret(order, column),\n                  csvFormatter: (cell, row, rowIndex) =>\n                    row.lastUpdated\n                      ? dayjs(row.lastUpdated).format('YYYY-MM-DD h:mm:ss a')\n                      : '',\n                  filter: customFilter(),\n                  filterRenderer: (onFilter, column) => (\n                    <>\n                      <DateFilter\n                        onFilter={onFilter}\n                        column={column}\n                        isStatus={true}\n                        onStatus={status => {\n                          const input = {\n                            type: 'options-filter',\n                            filter: {status},\n                            page: 0,\n                            limit: 10,\n                          };\n                          loginActivityStore.LoginActivityService.filter({\n                            input,\n                          });\n                          setStatusWiseFilter({input});\n                        }}\n                      />\n                    </>\n                  ),\n                  formatter: (cell, row) => {\n                    return row.lastUpdated ? (\n                      <>\n                        {dayjs(\n                          dayjs(row.lastUpdated).format('YYYY-MM-DD h:mm:ss a'),\n                        ).fromNow()}\n                      </>\n                    ) : (\n                      'Active User'\n                    );\n                  },\n                },\n              ]}\n              onPageSizeChange={(page, size) => {\n                if (_.isEmpty(statusWiseFilter)) {\n                  loginActivityStore.fetchLoginActivity(page, size);\n                } else {\n                  loginActivityStore.fetchLoginActivity(\n                    page,\n                    size,\n                    statusWiseFilter,\n                  );\n                }\n              }}\n              onFilter={(type, filter, page, limit) => {\n                if (_.isEmpty(statusWiseFilter)) {\n                  loginActivityStore.LoginActivityService.filter({\n                    input: {type, filter, page, limit},\n                  });\n                } else {\n                  loginActivityStore.LoginActivityService.filter({\n                    ...statusWiseFilter,\n                    page,\n                    limit,\n                  });\n                }\n              }}\n              clearAllFilter={() => {\n                userId('');\n                systemInfo('');\n                ipInfo('');\n                setStatusWiseFilter({});\n                setTimeout(() => {\n                  loginActivityStore.fetchLoginActivity(0, 10);\n                }, 2000);\n              }}\n              isEditModify={false}\n              isSelectRow={false}\n              fileName='Login Activity'\n              dynamicStylingFields={[]}\n              hideExcelSheet={['_id']}\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n});\n\nexport default LoginActivity;\n"],"names":["userId","systemInfo","ipInfo","dayjs","relativeTime","LoginActivity","observer","_routerStore$selected","_useStores","useStores","loginStore","loginActivityStore","routerStore","_useState","useState","_useState2","_slicedToArray","statusWiseFilter","setStatusWiseFilter","useEffect","fetchLoginActivity","_jsxs","_Fragment","children","Header","_jsx","PageHeading","title","selectedComponents","PageHeadingLabDetails","store","className","style","position","TableBootstrap","id","data","listLoginActivity","totalSize","listLoginActivityCount","columns","dataField","text","hidden","csvExport","sort","headerStyle","fontSize","sortCaret","order","column","csvFormatter","cell","row","rowIndex","concat","user","fullName","lab","role","filter","textFilter","getFilter","headerClasses","editable","formatter","_row$user","_row$user2","_row$user3","_row$user4","_row$systemInfo","_row$systemInfo$works","_row$systemInfo$works2","_row$systemInfo2","_row$systemInfo2$work","_row$systemInfo2$work2","_row$systemInfo3","_row$systemInfo3$work","_row$systemInfo3$work2","_row$systemInfo4","_row$systemInfo4$work","_row$systemInfo4$work2","device","workstation","os","name","version","browser","_row$systemInfo5","_row$systemInfo6","_row$systemInfo6$work","_row$systemInfo6$work2","_row$systemInfo7","_row$systemInfo7$work","_row$systemInfo7$work2","_row$systemInfo8","_row$systemInfo8$work","_row$systemInfo8$work2","_row$systemInfo9","_row$systemInfo9$work","_row$systemInfo9$work2","ip","city","region","country","ll","_row$systemInfo10","_row$systemInfo10$ipI","_row$systemInfo11","_row$systemInfo11$ipI","dateOfEntry","format","customFilter","filterRenderer","onFilter","DateFilter","fromNow","lastUpdated","isStatus","onStatus","status","input","type","page","limit","LoginActivityService","onPageSizeChange","size","_","_objectSpread","clearAllFilter","setTimeout","isEditModify","isSelectRow","fileName","dynamicStylingFields","hideExcelSheet"],"sourceRoot":""}