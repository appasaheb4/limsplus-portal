{"version":3,"file":"static/js/8562.e6f17bfb.chunk.js","mappings":"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","sources":["features/validation/panel-approval/components/molecules/result/table-bootstrap.components.tsx","features/validation/panel-approval/components/molecules/result/ref-ranges.component.tsx","features/validation/panel-approval/components/molecules/result/result.components.tsx","features/validation/panel-approval/components/molecules/panel-approval/table-bootstrap.components.tsx","features/validation/panel-approval/components/molecules/panel-approval/panel-approval.components.tsx","features/validation/panel-approval/components/molecules/patient-demographics/table-bootstrap.components.tsx","features/validation/panel-approval/components/molecules/patient-demographics/patient-demographics-list.components.tsx","features/validation/panel-approval/screens/panel-approval.screen.tsx"],"sourcesContent":["/* eslint-disable */\nimport React, { useState } from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport _ from 'lodash';\nimport ToolkitProvider, {\n  Search,\n  CSVExport,\n} from 'react-bootstrap-table2-toolkit/dist/react-bootstrap-table2-toolkit';\nimport cellEditFactory from 'react-bootstrap-table2-editor';\nimport paginationFactory, {\n  PaginationProvider,\n  PaginationListStandalone,\n  SizePerPageDropdownStandalone,\n  PaginationTotalStandalone,\n} from 'react-bootstrap-table2-paginator';\nimport filterFactory from 'react-bootstrap-table2-filter';\nimport dayjs from 'dayjs';\nimport '@/library/components/organisms/style.css';\n\nimport { Buttons, Icons } from '@/library/components';\n\nconst { SearchBar, ClearSearchButton } = Search;\nconst { ExportCSVButton } = CSVExport;\n\ninterface TableBootstrapProps {\n  id: string;\n  data: any;\n  totalSize?: number;\n  searchPlaceholder?: string;\n  page?: number;\n  sizePerPage?: number;\n  columns: any;\n  fileName: string;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  isSelectRow?: boolean;\n  selectedItem?: any;\n  onDelete?: (selectedItem: any) => void;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (value: any, dataField: string, id: string) => void;\n  onPageSizeChange?: (page: number, limit: number) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n  clearAllFilter?: () => void;\n  onClickRow?: (item: any, index: number) => void;\n}\nexport const TableBootstrap = ({\n  id,\n  data,\n  totalSize = 10,\n  searchPlaceholder = 'Search...',\n  page = 0,\n  sizePerPage = 10,\n  columns,\n  fileName,\n  isEditModify,\n  isSelectRow,\n  selectedItem,\n  onSelectedRow,\n  onUpdateItem,\n  onPageSizeChange,\n  onFilter,\n  clearAllFilter,\n  onClickRow,\n}: TableBootstrapProps) => {\n  const [selectedRow, setSelectedRow] = useState<any[]>();\n  const [isFilterOpen, setIsFilterOpen] = useState<boolean>(false);\n\n  const customTotal = (from, to, size) => {\n    return (\n      <>\n        <div className='clearfix' />\n        <span>\n          Showing {from} to {to} of {size} Results\n        </span>\n      </>\n    );\n  };\n\n  const sizePerPageRenderer = ({\n    options,\n    currSizePerPage,\n    onSizePerPageChange,\n  }) => (\n    <div className='btn-group items-center' role='group'>\n      <input\n        type='number'\n        min='0'\n        placeholder='No'\n        onChange={(e: any) => {\n          if (e.target.value) {\n            onSizePerPageChange(e.target.value);\n          }\n        }}\n        className='mr-2 ml-2 leading-4 p-2 w-14 focus:outline-none focus:ring block  shadow-sm sm:text-base border border-gray-300 rounded-md'\n      />\n      {options.map(option => (\n        <button\n          key={option.text}\n          type='button'\n          onClick={() => onSizePerPageChange(option.page)}\n          className={`btn  ${\n            currSizePerPage === `${option.page}` ? 'bg-primary' : 'bg-grey'\n          }`}\n        >\n          {option.text}\n        </button>\n      ))}\n    </div>\n  );\n  const options = {\n    cutome: true,\n    totalSize: totalSize,\n    paginationSize: 5,\n    pageStartIndex: 0,\n    firstPageText: '<<',\n    prePageText: '<',\n    nextPageText: '>',\n    lastPageText: '>>',\n    disablePageTitle: true,\n    paginationTotalRenderer: customTotal,\n    hideSizePerPage: true,\n    showTotal: false,\n    alwaysShowAllBtns: true,\n    sizePerPageList: [\n      {\n        text: '10',\n        value: 10,\n      },\n      {\n        text: '20',\n        value: 20,\n      },\n      {\n        text: '30',\n        value: 30,\n      },\n      {\n        text: '40',\n        value: 40,\n      },\n      {\n        text: '50',\n        value: 50,\n      },\n    ],\n    hidePageListOnlyOnePage: true,\n    sizePerPageRenderer: sizePerPageRenderer,\n  };\n  let searchProps: any = {\n    placeholder: searchPlaceholder,\n  };\n  const handleOnSelect = (rows: any, isSelect) => {\n    if (isSelect) {\n      if (selectedRow) {\n        let itemSelected: any[] = selectedRow;\n        itemSelected.push(rows);\n        setSelectedRow(itemSelected);\n      } else {\n        setSelectedRow([rows]);\n      }\n    }\n  };\n\n  const handleOnSelectAll = (isSelect, rows) => {\n    if (isSelect) {\n      setSelectedRow(rows);\n    }\n  };\n\n  const handleTableChange = (\n    type,\n    {\n      data,\n      cellEdit,\n      page,\n      sizePerPage,\n      filters,\n      sortField,\n      sortOrder,\n      searchText,\n    },\n  ) => {\n    // console.log({type});\n    if (type === 'cellEdit' && isEditModify) {\n      onUpdateItem &&\n        onUpdateItem(cellEdit.newValue, cellEdit.dataField, cellEdit.rowId);\n    }\n    if (type === 'pagination' && _.isEmpty(filters)) {\n      // if (sizePerPage > totalSize) return alert(\"You have not more records.\")\n      // if (page * sizePerPage > totalSize) return alert(\"You have not more records.\")\n      onPageSizeChange && onPageSizeChange(page, sizePerPage);\n    }\n    if (type === 'filter' || (type === 'pagination' && !_.isEmpty(filters))) {\n      if (type === 'pagination') {\n        if (sizePerPage > totalSize) return alert('You have not more records.');\n        if (page * sizePerPage > totalSize)\n          return alert('You have not more records.');\n      }\n      let filter: any = {};\n      for (const [key, value] of Object.entries(filters)) {\n        const values: any = value;\n        const object = { [key]: values.filterVal };\n        filter = Object.assign(filter, object);\n      }\n      onFilter &&\n        onFilter(\n          type,\n          filter,\n          type === 'filter' && page === 1 ? 0 : page,\n          sizePerPage,\n        );\n    }\n    if (type === 'search') {\n      setTimeout(() => {\n        onFilter && onFilter(type, { srText: searchText }, page, sizePerPage);\n      }, 2000);\n    }\n    if (type === 'sort') {\n      let result;\n      if (sortOrder === 'asc') {\n        result = data.sort((a, b) => {\n          if (a[sortField] > b[sortField]) {\n            return 1;\n          } else if (b[sortField] > a[sortField]) {\n            return -1;\n          }\n          return 0;\n        });\n      } else {\n        result = data.sort((a, b) => {\n          if (a[sortField] > b[sortField]) {\n            return -1;\n          } else if (b[sortField] > a[sortField]) {\n            return 1;\n          }\n          return 0;\n        });\n      }\n    }\n  };\n\n  const CustomToggleList = ({ columns, onColumnToggle, toggles }) => (\n    <div className='btn-group btn-group-toggle' data-toggle='buttons'>\n      {columns\n        .map(column => ({\n          ...column,\n          toggle: toggles[column.dataField],\n        }))\n        .map((column, index) => {\n          if (index > 0) {\n            return (\n              <button\n                type='button'\n                key={column.dataField}\n                className={` btn btn-primary  btn-sm whitespace-nowrap ${\n                  column.toggle ? 'active' : ''\n                }`}\n                data-toggle='button'\n                aria-pressed={column.toggle ? 'true' : 'false'}\n                onClick={() => onColumnToggle(column.dataField)}\n              >\n                {column.text}\n              </button>\n            );\n          }\n        })}\n    </div>\n  );\n\n  const rowEvents = {\n    onClick: (e, row, rowIndex) => {\n      onClickRow && onClickRow(row, rowIndex);\n    },\n  };\n\n  const rowStyle = (row, rowIndex) => {\n    if (row._id == selectedItem?._id) {\n      return { backgroundColor: '#a9a9a9' };\n    }\n  };\n\n  return (\n    <PaginationProvider\n      pagination={paginationFactory(\n        totalSize !== 0 ? options : { page, sizePerPage, totalSize },\n      )}\n      keyField={id}\n      columns={columns}\n      data={data}\n    >\n      {({ paginationProps, paginationTableProps }) => (\n        <ToolkitProvider\n          keyField={id}\n          bootstrap4\n          data={data}\n          columns={columns}\n          search\n          exportCSV={{\n            fileName: `${fileName}_${dayjs(new Date()).format(\n              'YYYY-MM-DD HH:mm',\n            )}.csv`,\n            noAutoBOM: false,\n            blobType: 'text/csv;charset=ansi',\n            exportAll: false,\n            onlyExportFiltered: true,\n          }}\n          columnToggle\n        >\n          {props => (\n            <div>\n              <div className='scrollTable'>\n                <BootstrapTable\n                  remote\n                  {...props.baseProps}\n                  noDataIndication='Table is Empty'\n                  hover\n                  {...paginationTableProps}\n                  filter={filterFactory()}\n                  headerClasses='bg-gray-500 text-white whitespace-nowrap'\n                  onTableChange={handleTableChange}\n                  rowEvents={rowEvents}\n                  rowStyle={rowStyle}\n                />\n              </div>\n            </div>\n          )}\n        </ToolkitProvider>\n      )}\n    </PaginationProvider>\n  );\n};\n","import React from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport _ from 'lodash';\nimport ToolkitProvider from 'react-bootstrap-table2-toolkit/dist/react-bootstrap-table2-toolkit';\nimport paginationFactory, {\n  PaginationProvider,\n} from 'react-bootstrap-table2-paginator';\nimport filterFactory from 'react-bootstrap-table2-filter';\nimport '@/library/components/organisms/style.css';\nimport { debounce } from '@/core-utils';\n\ninterface RefRangesProps {\n  id: string;\n  data: any;\n  totalSize?: number;\n  searchPlaceholder?: string;\n  page?: number;\n  sizePerPage?: number;\n  columns: any;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (value: any, dataField: string, id: string) => void;\n  onPageSizeChange?: (page: number, limit: number) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n  clearAllFilter?: () => void;\n}\n\nexport const RefRanges = ({\n  id,\n  data = [],\n  totalSize = 10,\n  searchPlaceholder = 'Search...',\n  page = 0,\n  sizePerPage = 10,\n  columns,\n  onSelectedRow,\n  onUpdateItem,\n  onPageSizeChange,\n  onFilter,\n  clearAllFilter,\n}: RefRangesProps) => {\n  const customTotal = (from, to, size) => {\n    return (\n      <>\n        <div className='clearfix' />\n        <span>\n          Showing {from} to {to} of {size} Results\n        </span>\n      </>\n    );\n  };\n\n  const sizePerPageRenderer = ({\n    options,\n    currSizePerPage,\n    onSizePerPageChange,\n  }) => (\n    <div className='btn-group items-center' role='group'>\n      <input\n        type='number'\n        min='0'\n        placeholder='No'\n        onChange={e => {\n          if (e.target.value) {\n            onSizePerPageChange(e.target.value);\n          }\n        }}\n        className='mr-2 ml-2 leading-4 p-2 w-14 focus:outline-none focus:ring block  shadow-sm sm:text-base border border-gray-300 rounded-md'\n      />\n      {options.map(option => (\n        <button\n          key={option.text}\n          type='button'\n          onClick={() => onSizePerPageChange(option.page)}\n          className={`btn ${\n            currSizePerPage === `${option.page}`\n              ? 'btn-primary'\n              : 'btn-secondary'\n          }`}\n        >\n          {option.text}\n        </button>\n      ))}\n    </div>\n  );\n\n  const options = {\n    cutome: true,\n    totalSize: totalSize,\n    paginationSize: 5,\n    pageStartIndex: 0,\n    firstPageText: '<<',\n    prePageText: '<',\n    nextPageText: '>',\n    lastPageText: '>>',\n    disablePageTitle: true,\n    paginationTotalRenderer: customTotal,\n    hideSizePerPage: true,\n    showTotal: false,\n    alwaysShowAllBtns: true,\n    sizePerPageList: [\n      {\n        text: '10',\n        value: 10,\n      },\n      {\n        text: '20',\n        value: 20,\n      },\n      {\n        text: '30',\n        value: 30,\n      },\n      {\n        text: '40',\n        value: 40,\n      },\n      {\n        text: '50',\n        value: 50,\n      },\n    ],\n    hidePageListOnlyOnePage: true,\n    sizePerPageRenderer: sizePerPageRenderer,\n  };\n\n  const handleTableChange = (\n    type,\n    {\n      data,\n      cellEdit,\n      page,\n      sizePerPage,\n      filters,\n      sortField,\n      sortOrder,\n      searchText,\n    },\n  ) => {\n    if (type === 'cellEdit') {\n      onUpdateItem &&\n        onUpdateItem(cellEdit.newValue, cellEdit.dataField, cellEdit.rowId);\n    }\n    if (type === 'pagination' && _.isEmpty(filters)) {\n      // if (sizePerPage > totalSize) return alert(\"You have not more records.\")\n      // if (page * sizePerPage > totalSize) return alert(\"You have not more records.\")\n      onPageSizeChange && onPageSizeChange(page, sizePerPage);\n    }\n    if (type === 'filter' || (type === 'pagination' && !_.isEmpty(filters))) {\n      if (type === 'pagination') {\n        if (sizePerPage > totalSize) return alert('You have not more records.');\n        if (page * sizePerPage > totalSize)\n          return alert('You have not more records.');\n      }\n      let filter: any = {};\n      for (const [key, value] of Object.entries(filters)) {\n        const values: any = value;\n        const object = { [key]: values.filterVal };\n        filter = Object.assign(filter, object);\n      }\n      if (onFilter) {\n        debounce(() => {\n          onFilter(\n            type,\n            filter,\n            type === 'filter' && page === 1 ? 0 : page,\n            sizePerPage,\n          );\n        });\n      }\n    }\n    if (type === 'search') {\n      debounce(() => {\n        onFilter && onFilter(type, { srText: searchText }, page, sizePerPage);\n      });\n    }\n    if (type === 'sort') {\n      let result;\n      if (sortOrder === 'asc') {\n        result = data.sort((a, b) => {\n          if (a[sortField] > b[sortField]) {\n            return 1;\n          } else if (b[sortField] > a[sortField]) {\n            return -1;\n          }\n          return 0;\n        });\n      } else {\n        result = data.sort((a, b) => {\n          if (a[sortField] > b[sortField]) {\n            return -1;\n          } else if (b[sortField] > a[sortField]) {\n            return 1;\n          }\n          return 0;\n        });\n      }\n    }\n  };\n\n  const rowStyle = (row, rowIndex) => {\n    switch (row?.colorScheme?.envRangeColor) {\n      case 'BOTH':\n        return {\n          backgroundColor: row?.colorScheme?.cellColor,\n          color: row?.colorScheme?.fontColor,\n        };\n        break;\n      case 'BACKGROUND':\n        return {\n          backgroundColor: row?.colorScheme?.cellColor,\n        };\n        break;\n      case 'FONT':\n        return {\n          color: row?.colorScheme?.fontColor,\n        };\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <PaginationProvider\n      pagination={paginationFactory(\n        totalSize !== 0 ? options : { page, sizePerPage, totalSize },\n      )}\n      keyField={id}\n      columns={columns}\n      data={data}\n    >\n      {({ paginationProps, paginationTableProps }) => (\n        <ToolkitProvider\n          keyField={id}\n          bootstrap4\n          data={data}\n          columns={columns}\n          search\n          columnToggle\n        >\n          {props => (\n            <div style={{ maxWidth: 200 }}>\n              <BootstrapTable\n                remote\n                {...props.baseProps}\n                noDataIndication='Table is Empty'\n                hover\n                {...paginationTableProps}\n                filter={filterFactory()}\n                headerClasses='bg-gray-500 text-white whitespace-nowrap'\n                onTableChange={handleTableChange}\n                rowStyle={rowStyle}\n              />\n            </div>\n          )}\n        </ToolkitProvider>\n      )}\n    </PaginationProvider>\n  );\n};\n","import React, { useState } from 'react';\nimport { observer } from 'mobx-react';\n\nimport { Confirm } from '@/library/models';\nimport dayjs from 'dayjs';\n\nimport { TableBootstrap } from './table-bootstrap.components';\n\nimport {\n  Form,\n  Tooltip,\n  Icons,\n  NumberFilter,\n  sortCaret,\n  customFilter,\n} from '@/library/components';\n\nimport { InputResult } from '../../../../../result-entry/general-result-entry/components/molecules/output/input-result.components';\n\nimport {\n  getResultStatus,\n  getTestStatus,\n  getAbnFlag,\n  getCretical,\n} from '../../../../../result-entry/general-result-entry/utils';\nimport { RefRanges } from './ref-ranges.component';\n\ninterface ResultProps {\n  data: any;\n  totalSize: number;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  onUpdate?: (selectedItem: Confirm) => void;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (value: any, dataField: string, id: string) => void;\n  onPageSizeChange?: (page: number, totalSize: number) => void;\n  onUpdateResult?: (fields: any, id: string) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n  onClickRow?: (item: any, index: number) => void;\n  onReport?: (item: any) => void;\n  onUpdateFields?: (fields: any, id: string) => void;\n}\n\nlet labId;\n\nexport const Result = observer((props: ResultProps) => {\n  const [selectedItem, setSelectedItem] = useState<any>({});\n  const [widthRefBox, setWidthRefBox] = useState('20px');\n  const [selectedRowId, setSelectedRowId] = useState('');\n  const [widthConculsionBox, setWidthConculsionBox] = useState('20px');\n  const [conclusionId, setWidthConculsionId] = useState('');\n  return (\n    <>\n      <div style={{ position: 'relative' }}>\n        <TableBootstrap\n          id='_id'\n          data={props.data}\n          totalSize={props.totalSize}\n          selectedItem={selectedItem}\n          columns={[\n            {\n              dataField: '_id',\n              text: 'Id',\n              hidden: true,\n              csvExport: false,\n            },\n\n            {\n              dataField: 'test',\n              text: 'Test',\n              sort: true,\n              editable: false,\n              headerClasses: 'textHeader3',\n            },\n            {\n              dataField: 'analyte',\n              text: 'Analyte',\n              sort: true,\n              editable: false,\n              headerClasses: 'textHeader1',\n            },\n            {\n              dataField: 'result',\n              text: 'Result',\n              sort: true,\n              headerClasses: 'textHeader1',\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  <InputResult\n                    row={row}\n                    onSelect={async result => {\n                      const rows = { ...row, ...result };\n                      props.onUpdateResult &&\n                        props.onUpdateResult(\n                          {\n                            ...rows,\n                            resultStatus: getResultStatus(\n                              rows.resultType,\n                              rows,\n                            ),\n                            testStatus: getTestStatus(rows.resultType, rows),\n                            abnFlag: getAbnFlag(rows.resultType, rows),\n                            critical: getCretical(rows.resultType, rows),\n                            ...result,\n                          },\n                          rows.patientResultId,\n                        );\n                    }}\n                  />\n                </>\n              ),\n            },\n            {\n              dataField: 'sampleId',\n              text: 'Sample Id',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'sampleType',\n              text: 'Sample Type',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'containerId',\n              text: 'Container Id',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'units',\n              text: 'Units',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'refRangesList',\n              text: 'Ref Ranges',\n              sort: true,\n              editable: false,\n              headerClasses: 'textHeaderxxm',\n              style: { width: widthRefBox },\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <div className='flex flex-row gap-2'>\n                      <span>\n                        {(row.loNor === 'NaN' && row.hiNor === 'NaN') ||\n                        (row.loNor === ' ' && row.hiNor === ' ')\n                          ? '-'\n                          : row.loNor === 'NaN' && row.hiNor === ' '\n                          ? '<'\n                          : row.loNor === ' ' && row.hiNor === 'NaN'\n                          ? '>'\n                          : row.loNor + '-' + row.hiNor}\n                      </span>\n                      <div>\n                        {row.refRangesList?.length > 0 && (\n                          <Tooltip\n                            tooltipText={\n                              row._id != selectedRowId ? 'Expand' : 'Collapse'\n                            }\n                          >\n                            <Icons.IconContext\n                              color='#000000'\n                              size='20'\n                              onClick={() => {\n                                if (row._id === selectedRowId) {\n                                  setSelectedRowId('');\n                                  setWidthRefBox('30px');\n                                } else {\n                                  setSelectedRowId(row._id);\n                                  setWidthRefBox('550px');\n                                }\n                              }}\n                            >\n                              {Icons.getIconTag(\n                                row._id != selectedRowId\n                                  ? Icons.IconBi.BiExpand\n                                  : Icons.IconBi.BiCollapse,\n                              )}\n                            </Icons.IconContext>\n                          </Tooltip>\n                        )}\n                      </div>\n                    </div>\n                    {selectedRowId == row._id ? (\n                      <div style={{ width: widthRefBox }}>\n                        <RefRanges\n                          id='_id'\n                          data={row?.refRangesList || []}\n                          totalSize={row?.refRangesList?.length || 0}\n                          columns={[\n                            {\n                              dataField: 'result',\n                              text: 'Result',\n                              editable: false,\n                              formatter: () => (\n                                <>\n                                  <span>{row.result}</span>\n                                </>\n                              ),\n                            },\n                            {\n                              dataField: 'rangeType',\n                              text: 'Range Type',\n                            },\n                            {\n                              dataField: 'low',\n                              text: 'Low',\n                            },\n                            {\n                              dataField: 'high',\n                              text: 'High',\n                            },\n                            {\n                              dataField: 'rangeSetOn',\n                              text: 'Range Set On',\n                            },\n                            {\n                              dataField: 'rangeId',\n                              text: 'Range Id',\n                            },\n                            {\n                              dataField: 'version',\n                              text: 'Range Version',\n                            },\n                          ]}\n                          onSelectedRow={rows => {}}\n                          onUpdateItem={(\n                            value: any,\n                            dataField: string,\n                            id: string,\n                          ) => {}}\n                        />\n                      </div>\n                    ) : null}\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'conclusion',\n              text: 'Conclusion',\n              editable: false,\n              style: { width: widthConculsionBox },\n              formatter: (cell, row) => {\n                return (\n                  <div className='flex flex-col'>\n                    <Tooltip\n                      tooltipText={\n                        row._id != conclusionId ? 'Expand' : 'Collapse'\n                      }\n                    >\n                      <Icons.IconContext\n                        color='#000000'\n                        size='20'\n                        onClick={() => {\n                          if (row._id === conclusionId) {\n                            setWidthConculsionId('');\n                            setWidthConculsionBox('30px');\n                          } else {\n                            setWidthConculsionId(row._id);\n                            setWidthConculsionBox('200px');\n                          }\n                        }}\n                      >\n                        {Icons.getIconTag(\n                          row._id != conclusionId\n                            ? Icons.IconBi.BiExpand\n                            : Icons.IconBi.BiCollapse,\n                        )}\n                      </Icons.IconContext>\n                    </Tooltip>\n\n                    {row._id === conclusionId && (\n                      <div style={{ width: widthConculsionBox }}>\n                        <Form.MultilineInput\n                          rows={3}\n                          placeholder='Conclusion'\n                          className='text-black'\n                          onBlur={conclusion => {\n                            props.onUpdateFields &&\n                              props.onUpdateFields({ conclusion }, row._id);\n                            setWidthConculsionId('');\n                            setWidthConculsionBox('30px');\n                          }}\n                          defaultValue={row?.conclusion}\n                        />\n                      </div>\n                    )}\n                  </div>\n                );\n              },\n            },\n\n            {\n              dataField: 'abnFlag',\n              text: 'Abn Flag',\n              sort: true,\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <Form.Toggle disabled={true} value={row.abnFlag} />\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'critical',\n              text: 'Critical',\n              sort: true,\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <Form.Toggle disabled={true} value={row.critical} />\n                  </>\n                );\n              },\n            },\n\n            {\n              dataField: 'remarks',\n              text: 'Remarks',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'deltaFlag',\n              text: 'Delta Flag',\n              sort: true,\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <Form.Toggle disabled={true} value={row.deltaFlag} />\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'deltaValue',\n              text: 'Delta Value',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'Result Status',\n              text: 'Result Status',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'testStatus',\n              text: 'Test Status',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'approvalDate',\n              text: 'Approval Date',\n              sort: true,\n              editable: false,\n              headerClasses: 'textHeader',\n              formatter: (cell, row) => {\n                return row.approvalDate\n                  ? dayjs(row.approvalDate).format('DD-MM-YYYY HH:mm:ss')\n                  : '';\n              },\n            },\n            {\n              dataField: 'autoRelease',\n              text: 'Auto Release',\n              sort: true,\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <Form.Toggle disabled={true} value={row.autoRelease} />\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'final',\n              text: 'Final',\n              sort: true,\n              editable: false,\n              // headerClasses: 'textHeaderl',\n            },\n            {\n              dataField: 'enteredBy',\n              text: 'Entered By',\n              sort: true,\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n            },\n            // {\n            //   text: 'Company Code',\n            //   dataField: 'companyCode',\n            //   sort: true,\n            //   editable: false,\n            // },\n            // {\n            //   text: 'Environment',\n            //   dataField: 'environment',\n            //   editable: false,\n            //   sort: true,\n            // },\n          ]}\n          isEditModify={props.isEditModify}\n          isSelectRow={true}\n          fileName='Pending Panel Approval'\n          onSelectedRow={rows => {\n            props.onSelectedRow &&\n              props.onSelectedRow(rows.map((item: any) => item._id));\n          }}\n          onUpdateItem={(value: any, dataField: string, id: string) => {\n            props.onUpdateItem && props.onUpdateItem(value, dataField, id);\n          }}\n          onPageSizeChange={(page, size) => {\n            props.onPageSizeChange && props.onPageSizeChange(page, size);\n          }}\n          onFilter={(type, filter, page, size) => {\n            props.onFilter && props.onFilter(type, filter, page, size);\n          }}\n          clearAllFilter={() => {}}\n          onClickRow={(item, index) => {\n            setSelectedItem(item);\n            props.onClickRow && props.onClickRow(item, index);\n          }}\n        />\n      </div>\n    </>\n  );\n});\n","/* eslint-disable */\nimport React, { useEffect, useState } from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport _ from 'lodash';\nimport ToolkitProvider, {\n  Search,\n  CSVExport,\n} from 'react-bootstrap-table2-toolkit/dist/react-bootstrap-table2-toolkit';\nimport cellEditFactory from 'react-bootstrap-table2-editor';\nimport paginationFactory, {\n  PaginationProvider,\n  PaginationListStandalone,\n  SizePerPageDropdownStandalone,\n  PaginationTotalStandalone,\n} from 'react-bootstrap-table2-paginator';\nimport filterFactory from 'react-bootstrap-table2-filter';\nimport dayjs from 'dayjs';\nimport '@/library/components/organisms/style.css';\nimport { debounce } from '@/core-utils';\n\nimport { Buttons, Icons, Tooltip } from '@/library/components';\n\nconst { SearchBar, ClearSearchButton } = Search;\nconst { ExportCSVButton } = CSVExport;\nimport { Result } from '../result/result.components';\n\ninterface TableBootstrapProps {\n  id: string;\n  data: any;\n  totalSize?: number;\n  searchPlaceholder?: string;\n  page?: number;\n  sizePerPage?: number;\n  columns: any;\n  fileName: string;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  isExport?: boolean;\n  isSelectRow?: boolean;\n  selectedItem?: any;\n  onDelete?: (selectedItem: any) => void;\n  onSelectedRow?: (selectedItem: any, type: string) => void;\n  onUpdateItem?: (value: any, dataField: string, id: string) => void;\n  onPageSizeChange?: (page: number, limit: number) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n  clearAllFilter?: () => void;\n  onClickRow?: (item: any, index: number) => void;\n  onFilterRecord?: (item: any) => void;\n  onUpdateResult?: (id: string, fields: any) => void;\n  onUpdateFields?: (item: any, id: string) => void;\n}\n\nexport const TableBootstrap = ({\n  id,\n  data,\n  totalSize = 10,\n  searchPlaceholder = 'Search by labId or sampleId',\n  page = 0,\n  sizePerPage = 10,\n  columns,\n  fileName,\n  isDelete = true,\n  isEditModify,\n  isExport = true,\n  isSelectRow,\n  selectedItem,\n  onSelectedRow,\n  onUpdateItem,\n  onPageSizeChange,\n  onFilter,\n  clearAllFilter,\n  onClickRow,\n  onFilterRecord,\n  onUpdateResult,\n  onUpdateFields,\n}: TableBootstrapProps) => {\n  const [selectedRow, setSelectedRow] = useState<any[]>();\n  const [isFilterOpen, setIsFilterOpen] = useState<boolean>(false);\n  const [expanded, setExpanded] = useState([0, 1]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      var expandButton: any = document.getElementsByClassName('expand-cell')[0];\n      expandButton?.click();\n    }, 1000);\n  }, []);\n\n  const statusData = [\n    { code: 'Pending', value: 'Pending', color: 'blue' },\n    { code: 'ReCheck', value: 'Recheck', color: 'yellow' },\n    { code: 'ReTest', value: 'Retest', color: 'orange' },\n    { code: 'Hold', value: 'Hold', color: 'indigo' },\n    { code: 'All', value: 'All', color: 'red' },\n    { code: 'ReCall', value: 'Recall', color: 'gray' },\n  ];\n\n  const sizePerPageRenderer = ({\n    options,\n    currSizePerPage,\n    onSizePerPageChange,\n  }) => (\n    <div className='btn-group items-center' role='group'>\n      {isSelectRow && (\n        <div className='flex flex-row gap-1 border-solid border-2 p-1'>\n          <Tooltip tooltipText='Approved'>\n            <Icons.IconContext\n              color='#fff'\n              size='30'\n              onClick={() => {\n                onSelectedRow && onSelectedRow(selectedRow, 'Approved');\n              }}\n            >\n              {Icons.getIconTag(Icons.Iconai.AiFillCheckCircle)}\n            </Icons.IconContext>\n          </Tooltip>\n          <Tooltip tooltipText='Rejected'>\n            <Icons.IconContext\n              color='#fff'\n              size='30'\n              onClick={() => {\n                onSelectedRow && onSelectedRow(selectedRow, 'Rejected');\n              }}\n            >\n              {Icons.getIconTag(Icons.Iconai.AiFillCloseCircle)}\n            </Icons.IconContext>\n          </Tooltip>\n        </div>\n      )}\n      <input\n        type='number'\n        min='0'\n        placeholder='No'\n        onChange={(e: any) => {\n          if (e.target.value) {\n            onSizePerPageChange(e.target.value);\n          }\n        }}\n        className='mr-2 ml-2 leading-4 p-2 w-14 focus:outline-none focus:ring block  shadow-sm sm:text-base border border-gray-300 rounded-md'\n      />\n      {options.map(option => (\n        <button\n          key={option.text}\n          type='button'\n          onClick={() => onSizePerPageChange(option.page)}\n          className={`btn  ${\n            currSizePerPage === `${option.page}` ? 'bg-primary' : 'bg-grey'\n          }`}\n        >\n          {option.text}\n        </button>\n      ))}\n    </div>\n  );\n\n  const options = {\n    cutome: true,\n    totalSize: totalSize,\n    paginationSize: 5,\n    pageStartIndex: 0,\n    firstPageText: '<<',\n    prePageText: '<',\n    nextPageText: '>',\n    lastPageText: '>>',\n    disablePageTitle: true,\n    hideSizePerPage: true,\n    showTotal: false,\n    alwaysShowAllBtns: true,\n    sizePerPageList: [\n      {\n        text: '10',\n        value: 10,\n      },\n      {\n        text: '20',\n        value: 20,\n      },\n      {\n        text: '30',\n        value: 30,\n      },\n      {\n        text: '40',\n        value: 40,\n      },\n      {\n        text: '50',\n        value: 50,\n      },\n    ],\n    hidePageListOnlyOnePage: true,\n    sizePerPageRenderer: sizePerPageRenderer,\n  };\n\n  let searchProps: any = {\n    placeholder: searchPlaceholder,\n  };\n\n  const handleOnSelect = (rows: any, isSelect) => {\n    if (isSelect) {\n      if (selectedRow) {\n        let itemSelected: any[] = selectedRow;\n        itemSelected.push(rows);\n        setSelectedRow(itemSelected);\n      } else {\n        setSelectedRow([rows]);\n      }\n    }\n  };\n\n  const handleOnSelectAll = (isSelect, rows) => {\n    if (isSelect) {\n      setSelectedRow(rows);\n    }\n  };\n\n  const handleTableChange = (\n    type,\n    {\n      data,\n      cellEdit,\n      page,\n      sizePerPage,\n      filters,\n      sortField,\n      sortOrder,\n      searchText,\n    },\n  ) => {\n    if (type === 'cellEdit' && isEditModify) {\n      onUpdateItem &&\n        onUpdateItem(cellEdit.newValue, cellEdit.dataField, cellEdit.rowId);\n    }\n    if (type === 'pagination' && _.isEmpty(filters)) {\n      // if (sizePerPage > totalSize) return alert(\"You have not more records.\")\n      // if (page * sizePerPage > totalSize) return alert(\"You have not more records.\")\n      onPageSizeChange && onPageSizeChange(page, sizePerPage);\n    }\n    if (type === 'filter' || (type === 'pagination' && !_.isEmpty(filters))) {\n      if (type === 'pagination') {\n        if (sizePerPage > totalSize) return alert('You have not more records.');\n        if (page * sizePerPage > totalSize)\n          return alert('You have not more records.');\n      }\n      let filter: any = {};\n      for (const [key, value] of Object.entries(filters)) {\n        const values: any = value;\n        const object = { [key]: values.filterVal };\n        filter = Object.assign(filter, object);\n      }\n      if (onFilter)\n        debounce(() => {\n          onFilter(\n            type,\n            filter,\n            type === 'filter' && page === 1 ? 0 : page,\n            sizePerPage,\n          );\n        });\n    }\n    if (type === 'search') {\n      debounce(() => {\n        onFilter && onFilter(type, { srText: searchText }, page, sizePerPage);\n      });\n    }\n    if (type === 'sort') {\n      let result;\n      if (sortOrder === 'asc') {\n        result = data.sort((a, b) => {\n          if (a[sortField] > b[sortField]) {\n            return 1;\n          } else if (b[sortField] > a[sortField]) {\n            return -1;\n          }\n          return 0;\n        });\n      } else {\n        result = data.sort((a, b) => {\n          if (a[sortField] > b[sortField]) {\n            return -1;\n          } else if (b[sortField] > a[sortField]) {\n            return 1;\n          }\n          return 0;\n        });\n      }\n    }\n  };\n\n  const CustomToggleList = ({ columns, onColumnToggle, toggles }) => (\n    <div className='btn-group btn-group-toggle' data-toggle='buttons'>\n      {columns\n        .map(column => ({\n          ...column,\n          toggle: toggles[column.dataField],\n        }))\n        .map((column, index) => {\n          if (index > 0) {\n            return (\n              <button\n                type='button'\n                key={column.dataField}\n                className={` btn btn-primary  btn-sm whitespace-nowrap ${\n                  column.toggle ? 'active' : ''\n                }`}\n                data-toggle='button'\n                aria-pressed={column.toggle ? 'true' : 'false'}\n                onClick={() => onColumnToggle(column.dataField)}\n              >\n                {column.text}\n              </button>\n            );\n          }\n        })}\n    </div>\n  );\n\n  const rowEvents = {\n    onClick: (e, row, rowIndex) => {\n      onClickRow && onClickRow(row, rowIndex);\n    },\n  };\n\n  const rowStyle = (row, rowIndex) => {\n    switch (row?.colorScheme?.envRangeColor) {\n      case 'BOTH':\n        return {\n          backgroundColor: row?.colorScheme?.cellColor,\n          color: row?.colorScheme?.fontColor,\n        };\n        break;\n      case 'BACKGROUND':\n        return {\n          backgroundColor: row?.colorScheme?.cellColor,\n        };\n        break;\n      case 'FONT':\n        return {\n          color: row?.colorScheme?.fontColor,\n        };\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleOnExpand = (row, isExpand, rowIndex, e) => {\n    if (isExpand) {\n      setExpanded([...expanded, row.id]);\n    } else {\n      setExpanded(expanded.filter(x => x !== row.id));\n    }\n  };\n\n  const expandRow = {\n    renderer: row => (\n      <div>\n        <Result\n          data={row[1] || []}\n          totalSize={row[1].length}\n          onUpdateResult={(fields: any, id: string) => {\n            onUpdateResult && onUpdateResult(id, fields);\n          }}\n          onUpdateFields={(fields: any, id: string) => {\n            onUpdateFields && onUpdateFields(fields, id);\n          }}\n        />\n      </div>\n    ),\n    showExpandColumn: true,\n    // onExpand: (row, isExpand, rowIndex, e) => {\n    //   console.log(row.id);\n    //   console.log(isExpand);\n    //   console.log(rowIndex);\n    //   console.log(e);\n    // },\n    // onExpandAll: (isExpandAll, rows, e) => {\n    //   console.log(isExpandAll);\n    //   console.log(rows);\n    //   console.log(e);\n    // },\n  };\n\n  return (\n    <PaginationProvider\n      pagination={paginationFactory(\n        totalSize !== 0 ? options : { page, sizePerPage, totalSize },\n      )}\n      keyField={id}\n      columns={columns}\n      data={data}\n    >\n      {({ paginationProps, paginationTableProps }) => (\n        <ToolkitProvider\n          keyField={id}\n          bootstrap4\n          data={data}\n          columns={columns}\n          search\n          exportCSV={{\n            fileName: `${fileName}_${dayjs(new Date()).format(\n              'YYYY-MM-DD HH:mm',\n            )}.csv`,\n            noAutoBOM: false,\n            blobType: 'text/csv;charset=ansi',\n            exportAll: false,\n            onlyExportFiltered: true,\n          }}\n          columnToggle\n        >\n          {props => (\n            <div>\n              <div className='flex items-center gap-2 flex-wrap justify-between'>\n                <div className='flex items-center  gap-2 flex-wrap'>\n                  <SearchBar\n                    {...searchProps}\n                    {...props.searchProps}\n                    onChange={value => {\n                      console.log({ value });\n                    }}\n                  />\n                  <ClearSearchButton\n                    className={`inline-flex ml-4 bg-gray-500 items-center small outline shadow-sm  font-medium  disabled:opacity-50 disabled:cursor-not-allowed text-center h-9 text-white`}\n                    {...props.searchProps}\n                  />\n                  <button\n                    className={`ml-2 px-2 focus:outline-none bg-gray-500 items-center  outline shadow-sm  font-medium  text-center rounded-md h-9 text-white`}\n                    onClick={clearAllFilter}\n                  >\n                    Clear all filters\n                  </button>\n                  {isExport && (\n                    <ExportCSVButton\n                      className={`inline-flex m-2.5 bg-gray-500 items-center  small outline shadow-sm  font-medium  disabled:opacity-50 disabled:cursor-not-allowed text-center h-9 text-white`}\n                      {...props.csvProps}\n                    >\n                      Export CSV!!\n                    </ExportCSVButton>\n                  )}\n\n                  {isFilterOpen ? (\n                    <Buttons.Button\n                      size='medium'\n                      type='outline'\n                      onClick={() => {\n                        setIsFilterOpen(!isFilterOpen);\n                      }}\n                    >\n                      <Icons.IconFa.FaChevronUp />\n                    </Buttons.Button>\n                  ) : (\n                    <Buttons.Button\n                      size='medium'\n                      type='outline'\n                      onClick={() => {\n                        setIsFilterOpen(!isFilterOpen);\n                      }}\n                    >\n                      <Icons.IconFa.FaChevronDown />\n                    </Buttons.Button>\n                  )}\n                  <div className='flex gap-4'>\n                    {statusData.map(status => (\n                      <button\n                        key={status.code}\n                        className={`px-4 py-2 bg-${status.color}-600 text-white rounded`}\n                        onClick={() => onFilterRecord?.(status.code)}\n                      >\n                        {status.value}\n                      </button>\n                    ))}\n                  </div>\n                </div>\n                <div className='flex bg-blue-700 w-10 h-10 rounded-full justify-center items-center text-xl'>\n                  <span className='text-white'>{totalSize}</span>\n                </div>\n              </div>\n              {isFilterOpen && (\n                <div className={'mb-2 overflow-auto h-10'}>\n                  <CustomToggleList\n                    contextual='primary'\n                    className='list-custom-class'\n                    btnClassName='list-btn-custom-class'\n                    {...props.columnToggleProps}\n                  />\n                </div>\n              )}\n              <div className='scrollTable mb-2'>\n                <BootstrapTable\n                  keyField='_id'\n                  remote\n                  {...props.baseProps}\n                  noDataIndication='Table is Empty'\n                  hover\n                  {...paginationTableProps}\n                  filter={filterFactory()}\n                  headerClasses='bg-gray-500 text-white whitespace-nowrap'\n                  // selectRow={\n                  //   isSelectRow\n                  //     ? {\n                  //         mode: 'checkbox',\n                  //         onSelect: handleOnSelect,\n                  //         onSelectAll: handleOnSelectAll,\n                  //       }\n                  //     : undefined\n                  // }\n                  cellEdit={\n                    isEditModify\n                      ? cellEditFactory({\n                          mode: 'dbclick',\n                          blurToSave: true,\n                        })\n                      : undefined\n                  }\n                  rowEvents={rowEvents}\n                  rowStyle={rowStyle}\n                  onTableChange={handleTableChange}\n                  expandRow={expandRow}\n                />\n              </div>\n            </div>\n          )}\n        </ToolkitProvider>\n      )}\n    </PaginationProvider>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport {\n  Form,\n  Tooltip,\n  Icons,\n  NumberFilter,\n  sortCaret,\n  customFilter,\n} from '@/library/components';\nimport dayjs from 'dayjs';\nimport _ from 'lodash';\n\nimport { TableBootstrap } from './table-bootstrap.components';\nimport { RefRanges } from '../result/ref-ranges.component';\nimport { InputResult } from '../../../../../result-entry/general-result-entry/components/molecules/output/input-result.components';\n\nimport {\n  getResultStatus,\n  getTestStatus,\n  getAbnFlag,\n  getCretical,\n} from '../../../../../result-entry/general-result-entry/utils';\n\ninterface PanelApprovalListProps {\n  data: any;\n  totalSize: number;\n  isView?: boolean;\n  isDelete?: boolean;\n  isUpdate?: boolean;\n  isExport?: boolean;\n  isApproval?: boolean;\n  selectedId?: string;\n  selectedItems?: any;\n  filterRecord?: string;\n  onSelectedRow?: (selectedItem: any, type: string) => void;\n  onUpdateFields?: (fields: any, id: string[]) => void;\n  onUpdateResult?: (fields: any, id: string) => void;\n  onExpand?: (items: any) => void;\n  onRecheck?: (id: string, patientResultId: string) => void;\n  onRetest?: (id: string, patientResultId: string) => void;\n  onPageSizeChange?: (page: number, totalSize: number) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n  onClickRow?: (item: any, index: number) => void;\n  onReport?: (item: any) => void;\n  onFilterRecord?: (item: any) => void;\n}\n\nlet labId;\n\nexport const PanelApprovalList = (props: PanelApprovalListProps) => {\n  const [selectId, setSelectId] = useState('');\n  const [localData, setLocalData] = useState(props.data);\n  const [selectedRowId, setSelectedRowId] = useState('');\n  const [widthRefBox, setWidthRefBox] = useState('20px');\n  const [widthConculsionBox, setWidthConculsionBox] = useState('20px');\n  const [conclusionId, setWidthConculsionId] = useState('');\n\n  useEffect(() => {\n    setLocalData(JSON.parse(JSON.stringify(props.data)));\n  }, [props.data, props.selectedId]);\n\n  // useEffect(() => {\n  //   const filterDataByHoldRecord = (data, holdRecord) => {\n  //     if (holdRecord === 'Pending') {\n  //       return data.filter(item => item.approvalStatus === 'Pending');\n  //     } else if (holdRecord === 'Done') {\n  //       return data.filter(item => item.approvalStatus === 'Done');\n  //     } else {\n  //       return data;\n  //     }\n  //   };\n  //   setSelectId(props.selectedId || '');\n  //   setLocalData(\n  //     props.selectedId\n  //       ? props.data\n  //           ?.filter(item => item._id === props.selectedId)\n  //           ?.map(item => ({ ...item, selectedId: props.selectedId }))\n  //       : filterDataByHoldRecord(props.data, props.filterRecord),\n  //   );\n  //   // eslint-disable-next-line react-hooks/exhaustive-deps\n  // }, [props.selectedId, props.data, props.filterRecord]);\n\n  // useEffect(() => {\n  //   setLocalData(JSON.parse(JSON.stringify(localData)));\n  //   // eslint-disable-next-line react-hooks/exhaustive-deps\n  // }, [selectedRowId]);\n\n  return (\n    <>\n      <div className={`${props.isView ? 'shown' : 'hidden'}`}>\n        <TableBootstrap\n          id='_id'\n          data={localData}\n          totalSize={props.totalSize}\n          columns={[\n            {\n              dataField: '_id',\n              text: 'Id',\n              hidden: true,\n              csvExport: false,\n            },\n            {\n              dataField: 'labId',\n              text: 'Lab Id',\n              sort: true,\n              editable: false,\n              formatter: (cell, row) => {\n                return <span>{row[1][0]?.labId}</span>;\n              },\n            },\n            {\n              dataField: 'panel',\n              text: 'Panel',\n              sort: true,\n              editable: false,\n              headerClasses: 'textHeaderl',\n              formatter: (cell, row) => {\n                return <span>{row[1][0]?.panel}</span>;\n              },\n            },\n            {\n              dataField: 'dueDate',\n              text: 'Due Date',\n              sort: true,\n              editable: false,\n              formatter: (cell, row) => {\n                return row[1][0]?.dueDate\n                  ? dayjs(row[1][0]?.dueDate).format('DD-MM-YYYY HH:mm:ss')\n                  : '';\n              },\n            },\n\n            {\n              dataField: 'status',\n              text: 'Status',\n              sort: true,\n              editable: false,\n              formatter: (cell, row) => {\n                return <span>{row[1][0]?.status}</span>;\n              },\n            },\n\n            {\n              dataField: 'comments',\n              text: 'Comments',\n              sort: true,\n              editable: false,\n              formatter: (cell, row) => {\n                return <span>{row[1][0]?.comments}</span>;\n              },\n            },\n            {\n              dataField: 'pLab',\n              text: 'PLab',\n              sort: true,\n              editable: false,\n              formatter: (cell, row) => {\n                return <span>{row[1][0]?.pLab}</span>;\n              },\n            },\n            {\n              dataField: 'department',\n              text: 'Department',\n              sort: true,\n              editable: false,\n              formatter: (cell, row) => {\n                return <span>{row[1][0]?.department}</span>;\n              },\n            },\n            {\n              dataField: 'approvalStatus',\n              text: 'Action',\n              sort: true,\n              editable: false,\n              formatter: (cellContent, row) => (\n                <div className='flex flex-row gap-1' key={row[1][0]?._id}>\n                  {props.isApproval && (\n                    <>\n                      <Tooltip tooltipText='Approved'>\n                        <Icons.IconContext\n                          color='#fff'\n                          size='20'\n                          isDisable={\n                            row[1][0]?.approvalStatus == 'Hold' ? true : false\n                          }\n                          onClick={() => {\n                            props.onUpdateFields &&\n                              props.onUpdateFields(\n                                {\n                                  approvalStatus: 'Approved',\n                                },\n                                _.map(row[1], '_id'),\n                              );\n                            props.onExpand && props.onExpand('');\n                          }}\n                        >\n                          {Icons.getIconTag(Icons.Iconai.AiFillCheckCircle)}\n                        </Icons.IconContext>\n                      </Tooltip>\n                      <Tooltip\n                        tooltipText={`${\n                          row[1][0]?.approvalStatus == 'Hold'\n                            ? 'Pending'\n                            : 'Hold'\n                        } `}\n                      >\n                        <Icons.IconContext\n                          color='#fff'\n                          size='20'\n                          onClick={() => {\n                            props.onUpdateFields &&\n                              props.onUpdateFields(\n                                {\n                                  approvalStatus:\n                                    row[1][0]?.approvalStatus == 'Hold'\n                                      ? 'Pending'\n                                      : 'Hold',\n                                },\n                                _.map(row[1], '_id'),\n                              );\n                          }}\n                        >\n                          {row[1][0]?.approvalStatus == 'Hold'\n                            ? Icons.getIconTag(Icons.Iconmd.MdOutlinePending)\n                            : Icons.getIconTag(Icons.Iconmd.MdBackHand)}\n                        </Icons.IconContext>\n                      </Tooltip>\n                      <Tooltip tooltipText='Recheck'>\n                        <Icons.IconContext\n                          color='#fff'\n                          size='20'\n                          isDisable={\n                            row[1][0]?.approvalStatus == 'Hold' ? true : false\n                          }\n                          onClick={() => {\n                            props.onRecheck &&\n                              props.onRecheck(\n                                row[1][0]?._id,\n                                row[1][0]?.patientResultId,\n                              );\n                          }}\n                        >\n                          <Icons.RIcon\n                            nameIcon='GoIssueReopened'\n                            propsIcon={{\n                              color:\n                                row[1][0]?.approvalStatus == 'Hold'\n                                  ? '#808080'\n                                  : '#ffffff',\n                            }}\n                          />\n                        </Icons.IconContext>\n                      </Tooltip>\n                      <Tooltip tooltipText='Retest'>\n                        <Icons.IconContext\n                          color='#fff'\n                          size='20'\n                          isDisable={\n                            row[1][0]?.approvalStatus == 'Hold' ? true : false\n                          }\n                          onClick={() => {\n                            props.onRetest &&\n                              props.onRetest(\n                                row[1][0]?._id,\n                                row[1][0]?.patientResultId,\n                              );\n                          }}\n                        >\n                          <Icons.RIcon\n                            nameIcon='TbBrandSpeedtest'\n                            propsIcon={{\n                              color:\n                                row[1][0]?.approvalStatus == 'Hold'\n                                  ? '#808080'\n                                  : '#ffffff',\n                            }}\n                          />\n                        </Icons.IconContext>\n                      </Tooltip>\n                    </>\n                  )}\n                  {selectId == row[1][0]._id ? (\n                    <Tooltip tooltipText='Expand'>\n                      <Icons.IconContext\n                        color='#fff'\n                        size='20'\n                        onClick={() => {\n                          props.onExpand && props.onExpand('');\n                        }}\n                      >\n                        {Icons.getIconTag(Icons.Iconai.AiFillMinusCircle)}\n                      </Icons.IconContext>\n                    </Tooltip>\n                  ) : (\n                    <Tooltip tooltipText='Expand'>\n                      <Icons.IconContext\n                        color='#fff'\n                        size='20'\n                        onClick={() => {\n                          props.onExpand && props.onExpand(row[1][0]);\n                        }}\n                      >\n                        {Icons.getIconTag(Icons.Iconai.AiFillPlusCircle)}\n                      </Icons.IconContext>\n                    </Tooltip>\n                  )}\n                </div>\n              ),\n              headerClasses: 'sticky right-0  bg-gray-500 text-white z-50',\n              classes: (cell, row, rowIndex, colIndex) => {\n                return 'sticky right-0 bg-gray-500';\n              },\n              style: (cell, row, rowIndex, colIndex) => {\n                return {\n                  zIndex: props.data?.length - rowIndex,\n                };\n              },\n            },\n          ]}\n          isDelete={props.isDelete}\n          isEditModify={props.isUpdate}\n          isExport={props.isExport}\n          isSelectRow={true}\n          fileName='Report Panel Approval'\n          onSelectedRow={(rows, type) => {\n            props.onSelectedRow && props.onSelectedRow(rows, type);\n          }}\n          onFilter={(type, filter, page, size) => {\n            props.onFilter && props.onFilter(type, filter, page, size);\n          }}\n          onPageSizeChange={(page, size) => {\n            props.onPageSizeChange && props.onPageSizeChange(page, size);\n          }}\n          clearAllFilter={() => {\n            labId('');\n          }}\n          onFilterRecord={item => {\n            props.onFilterRecord && props.onFilterRecord(item);\n          }}\n          // diff action to handle\n          // onUpdateFields={(fields: any, id: string) => {\n          //   props.onUpdateFields && props.onUpdateFields({ ...fields }, id);\n          // }}\n          onUpdateResult={(id, fields) => {\n            props.onUpdateResult && props.onUpdateResult(id, fields);\n          }}\n        />\n      </div>\n    </>\n  );\n};\n","/* eslint-disable */\nimport React, { useState } from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport _ from 'lodash';\nimport ToolkitProvider, {\n  Search,\n  CSVExport,\n} from 'react-bootstrap-table2-toolkit/dist/react-bootstrap-table2-toolkit';\nimport cellEditFactory from 'react-bootstrap-table2-editor';\nimport paginationFactory, {\n  PaginationProvider,\n  PaginationListStandalone,\n  SizePerPageDropdownStandalone,\n  PaginationTotalStandalone,\n} from 'react-bootstrap-table2-paginator';\nimport filterFactory from 'react-bootstrap-table2-filter';\nimport dayjs from 'dayjs';\nimport '@/library/components/organisms/style.css';\n\nimport { Buttons, Icons } from '@/library/components';\n\nconst { SearchBar, ClearSearchButton } = Search;\nconst { ExportCSVButton } = CSVExport;\n\ninterface TableBootstrapProps {\n  id: string;\n  data: any;\n  totalSize?: number;\n  searchPlaceholder?: string;\n  page?: number;\n  sizePerPage?: number;\n  columns: any;\n  fileName: string;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  isSelectRow?: boolean;\n  selectedItem?: any;\n  onDelete?: (selectedItem: any) => void;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (value: any, dataField: string, id: string) => void;\n  onPageSizeChange?: (page: number, limit: number) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n  clearAllFilter?: () => void;\n  onClickRow?: (item: any, index: number) => void;\n}\nexport const TableBootstrap = ({\n  id,\n  data,\n  totalSize = 10,\n  searchPlaceholder = 'Search...',\n  page = 0,\n  sizePerPage = 10,\n  columns,\n  fileName,\n  isEditModify,\n  isSelectRow,\n  selectedItem,\n  onSelectedRow,\n  onUpdateItem,\n  onPageSizeChange,\n  onFilter,\n  clearAllFilter,\n  onClickRow,\n}: TableBootstrapProps) => {\n  const [selectedRow, setSelectedRow] = useState<any[]>();\n  const [isFilterOpen, setIsFilterOpen] = useState<boolean>(false);\n\n  const customTotal = (from, to, size) => {\n    return (\n      <>\n        <div className='clearfix' />\n        <span>\n          Showing {from} to {to} of {size} Results\n        </span>\n      </>\n    );\n  };\n\n  const sizePerPageRenderer = ({\n    options,\n    currSizePerPage,\n    onSizePerPageChange,\n  }) => (\n    <div className='btn-group items-center' role='group'>\n      <input\n        type='number'\n        min='0'\n        placeholder='No'\n        onChange={(e: any) => {\n          if (e.target.value) {\n            onSizePerPageChange(e.target.value);\n          }\n        }}\n        className='mr-2 ml-2 leading-4 p-2 w-14 focus:outline-none focus:ring block  shadow-sm sm:text-base border border-gray-300 rounded-md'\n      />\n      {options.map(option => (\n        <button\n          key={option.text}\n          type='button'\n          onClick={() => onSizePerPageChange(option.page)}\n          className={`btn  ${\n            currSizePerPage === `${option.page}` ? 'bg-primary' : 'bg-grey'\n          }`}\n        >\n          {option.text}\n        </button>\n      ))}\n    </div>\n  );\n  const options = {\n    cutome: true,\n    totalSize: totalSize,\n    paginationSize: 5,\n    pageStartIndex: 0,\n    firstPageText: '<<',\n    prePageText: '<',\n    nextPageText: '>',\n    lastPageText: '>>',\n    disablePageTitle: true,\n    paginationTotalRenderer: customTotal,\n    hideSizePerPage: true,\n    showTotal: false,\n    alwaysShowAllBtns: true,\n    sizePerPageList: [\n      {\n        text: '10',\n        value: 10,\n      },\n      {\n        text: '20',\n        value: 20,\n      },\n      {\n        text: '30',\n        value: 30,\n      },\n      {\n        text: '40',\n        value: 40,\n      },\n      {\n        text: '50',\n        value: 50,\n      },\n    ],\n    hidePageListOnlyOnePage: true,\n    sizePerPageRenderer: sizePerPageRenderer,\n  };\n  let searchProps: any = {\n    placeholder: searchPlaceholder,\n  };\n  const handleOnSelect = (rows: any, isSelect) => {\n    if (isSelect) {\n      if (selectedRow) {\n        let itemSelected: any[] = selectedRow;\n        itemSelected.push(rows);\n        setSelectedRow(itemSelected);\n      } else {\n        setSelectedRow([rows]);\n      }\n    }\n  };\n\n  const handleOnSelectAll = (isSelect, rows) => {\n    if (isSelect) {\n      setSelectedRow(rows);\n    }\n  };\n\n  const handleTableChange = (\n    type,\n    {\n      data,\n      cellEdit,\n      page,\n      sizePerPage,\n      filters,\n      sortField,\n      sortOrder,\n      searchText,\n    },\n  ) => {\n    // console.log({type});\n    if (type === 'cellEdit' && isEditModify) {\n      onUpdateItem &&\n        onUpdateItem(cellEdit.newValue, cellEdit.dataField, cellEdit.rowId);\n    }\n    if (type === 'pagination' && _.isEmpty(filters)) {\n      // if (sizePerPage > totalSize) return alert(\"You have not more records.\")\n      // if (page * sizePerPage > totalSize) return alert(\"You have not more records.\")\n      onPageSizeChange && onPageSizeChange(page, sizePerPage);\n    }\n    if (type === 'filter' || (type === 'pagination' && !_.isEmpty(filters))) {\n      if (type === 'pagination') {\n        if (sizePerPage > totalSize) return alert('You have not more records.');\n        if (page * sizePerPage > totalSize)\n          return alert('You have not more records.');\n      }\n      let filter: any = {};\n      for (const [key, value] of Object.entries(filters)) {\n        const values: any = value;\n        const object = { [key]: values.filterVal };\n        filter = Object.assign(filter, object);\n      }\n      onFilter &&\n        onFilter(\n          type,\n          filter,\n          type === 'filter' && page === 1 ? 0 : page,\n          sizePerPage,\n        );\n    }\n    if (type === 'search') {\n      setTimeout(() => {\n        onFilter && onFilter(type, { srText: searchText }, page, sizePerPage);\n      }, 2000);\n    }\n    if (type === 'sort') {\n      let result;\n      if (sortOrder === 'asc') {\n        result = data.sort((a, b) => {\n          if (a[sortField] > b[sortField]) {\n            return 1;\n          } else if (b[sortField] > a[sortField]) {\n            return -1;\n          }\n          return 0;\n        });\n      } else {\n        result = data.sort((a, b) => {\n          if (a[sortField] > b[sortField]) {\n            return -1;\n          } else if (b[sortField] > a[sortField]) {\n            return 1;\n          }\n          return 0;\n        });\n      }\n    }\n  };\n\n  const CustomToggleList = ({ columns, onColumnToggle, toggles }) => (\n    <div className='btn-group btn-group-toggle' data-toggle='buttons'>\n      {columns\n        .map(column => ({\n          ...column,\n          toggle: toggles[column.dataField],\n        }))\n        .map((column, index) => {\n          if (index > 0) {\n            return (\n              <button\n                type='button'\n                key={column.dataField}\n                className={` btn btn-primary  btn-sm whitespace-nowrap ${\n                  column.toggle ? 'active' : ''\n                }`}\n                data-toggle='button'\n                aria-pressed={column.toggle ? 'true' : 'false'}\n                onClick={() => onColumnToggle(column.dataField)}\n              >\n                {column.text}\n              </button>\n            );\n          }\n        })}\n    </div>\n  );\n\n  const rowEvents = {\n    onClick: (e, row, rowIndex) => {\n      onClickRow && onClickRow(row, rowIndex);\n    },\n  };\n\n  const rowStyle = (row, rowIndex) => {\n    if (row._id == selectedItem?._id) {\n      return { backgroundColor: '#a9a9a9' };\n    }\n  };\n\n  return (\n    <PaginationProvider\n      pagination={paginationFactory(\n        totalSize !== 0 ? options : { page, sizePerPage, totalSize },\n      )}\n      keyField={id}\n      columns={columns}\n      data={data}\n    >\n      {({ paginationProps, paginationTableProps }) => (\n        <ToolkitProvider\n          keyField={id}\n          bootstrap4\n          data={data}\n          columns={columns}\n          search\n          exportCSV={{\n            fileName: `${fileName}_${dayjs(new Date()).format(\n              'YYYY-MM-DD HH:mm',\n            )}.csv`,\n            noAutoBOM: false,\n            blobType: 'text/csv;charset=ansi',\n            exportAll: false,\n            onlyExportFiltered: true,\n          }}\n          columnToggle\n        >\n          {props => (\n            <div>\n              <div className='scrollTable'>\n                <BootstrapTable\n                  remote\n                  {...props.baseProps}\n                  noDataIndication='Table is Empty'\n                  hover\n                  {...paginationTableProps}\n                  filter={filterFactory()}\n                  headerClasses='bg-gray-500 text-white whitespace-nowrap'\n                  onTableChange={handleTableChange}\n                  rowEvents={rowEvents}\n                  rowStyle={rowStyle}\n                />\n              </div>\n            </div>\n          )}\n        </ToolkitProvider>\n      )}\n    </PaginationProvider>\n  );\n};\n","import React, { useState } from 'react';\nimport { observer } from 'mobx-react';\nimport { Form } from '@/library/components';\nimport { Confirm } from '@/library/models';\nimport dayjs from 'dayjs';\n\nimport { TableBootstrap } from './table-bootstrap.components';\n\ninterface PatientDemographicsListProps {\n  data: any;\n  totalSize: number;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  onUpdate?: (selectedItem: Confirm) => void;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (value: any, dataField: string, id: string) => void;\n  onPageSizeChange?: (page: number, totalSize: number) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n  onClickRow?: (item: any, index: number) => void;\n  onReport?: (item: any) => void;\n}\n\nexport const PatientDemographicsList = observer(\n  (props: PatientDemographicsListProps) => {\n    const [selectedItem, setSelectedItem] = useState<any>({});\n    return (\n      <>\n        <div style={{ position: 'relative' }}>\n          <TableBootstrap\n            id='_id'\n            data={props.data}\n            totalSize={props.totalSize}\n            selectedItem={selectedItem}\n            columns={[\n              {\n                dataField: '_id',\n                text: 'Id',\n                hidden: true,\n                csvExport: false,\n              },\n              {\n                dataField: 'pId',\n                text: 'Pid',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'name',\n                text: 'Name',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'age',\n                text: 'Age',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'sex',\n                text: 'Sex',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'dob',\n                text: 'DOB',\n                sort: true,\n                editable: false,\n                formatter: (cell, row) => {\n                  return row?.dob\n                    ? dayjs(row.dob).format('DD-MM-YYYY HH:mm:ss')\n                    : '';\n                },\n              },\n              {\n                dataField: 'patientMobileNo',\n                text: 'patientMobileNo',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'doctorId',\n                text: 'Doctor Id',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'doctorMobileNo',\n                text: 'Doctor Mobile No',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'registrationLocation',\n                text: 'Registration Location',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'contactNo',\n                text: 'Contact Number',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'history',\n                text: 'History',\n                sort: true,\n                csvFormatter: (col, row) =>\n                  `${row.history ? (row.history ? 'Yes' : 'No') : 'No'}`,\n                editable: false,\n                formatter: (cell, row) => {\n                  return (\n                    <>\n                      {' '}\n                      <Form.Toggle disabled={true} value={row.history} />\n                    </>\n                  );\n                },\n              },\n              // {\n              //   text: 'Company Code',\n              //   dataField: 'companyCode',\n              //   sort: true,\n              //   editable: false,\n              // },\n              // {\n              //   text: 'Environment',\n              //   dataField: 'environment',\n              //   editable: false,\n              //   sort: true,\n              // },\n            ]}\n            isEditModify={props.isEditModify}\n            isSelectRow={true}\n            fileName='Pending Panel Approval'\n            onSelectedRow={rows => {\n              props.onSelectedRow &&\n                props.onSelectedRow(rows.map((item: any) => item._id));\n            }}\n            onUpdateItem={(value: any, dataField: string, id: string) => {\n              props.onUpdateItem && props.onUpdateItem(value, dataField, id);\n            }}\n            onPageSizeChange={(page, size) => {\n              props.onPageSizeChange && props.onPageSizeChange(page, size);\n            }}\n            onFilter={(type, filter, page, size) => {\n              props.onFilter && props.onFilter(type, filter, page, size);\n            }}\n            clearAllFilter={() => {}}\n            onClickRow={(item, index) => {\n              setSelectedItem(item);\n              props.onClickRow && props.onClickRow(item, index);\n            }}\n          />\n        </div>\n      </>\n    );\n  },\n);\n","import React, { useEffect, useMemo, useState } from 'react';\nimport { observer } from 'mobx-react';\nimport _ from 'lodash';\nimport { Toast, MainPageHeading } from '@/library/components';\nimport { useForm } from 'react-hook-form';\nimport { RouterFlow } from '@/flows';\nimport { PanelApprovalList, PatientDemographicsList } from '../components';\nimport '@/library/assets/css/accordion.css';\nimport { useStores } from '@/stores';\nimport 'react-accessible-accordion/dist/fancy-example.css';\n\nconst PanelApproval = observer(() => {\n  const { panelApprovalStore, routerStore, loginStore, patientResultStore } =\n    useStores();\n\n  const {\n    control,\n    handleSubmit,\n    formState: { errors },\n    setValue,\n  } = useForm();\n  const [data, setData] = useState<Array<any>>([]);\n  const [receiptPath, setReceiptPath] = useState<string>();\n  const [expandItem, setExpandItem] = useState<any>([]);\n  const [tableReload, setTableReload] = useState<boolean>(false);\n  const [selectId, setSelectId] = useState('');\n  const [filterRecord, setFilterRecord] = useState<string>('');\n\n  useEffect(() => {\n    const uniqueList = _.groupBy(\n      panelApprovalStore.panelApprovalList,\n      item => `${item.labId}-${item.panelCode}`,\n    );\n    if (uniqueList)\n      setData(Object.keys(uniqueList).map(key => [key, uniqueList[key]]));\n  }, [panelApprovalStore.panelApprovalList]);\n\n  const updateRecords = payload => {\n    const { type, data } = payload;\n    switch (type) {\n      case 'update': {\n        panelApprovalStore.panelApprovalService\n          .update({\n            input: {\n              ...data.fields,\n              _id: data.id,\n            },\n          })\n          .then((res: any) => {\n            if (res.updatePanelApproval.success) {\n              Toast.success({\n                message: `😊 ${res.updatePanelApproval.message}`,\n              });\n              panelApprovalStore.panelApprovalService.listPanelApproval({});\n              setTableReload(!tableReload);\n            }\n          });\n        break;\n      }\n      case 'updateMany': {\n        panelApprovalStore.panelApprovalService\n          .update({\n            input: {\n              updateMany: {\n                fields: data.rows,\n                type: data.type,\n              },\n            },\n          })\n          .then((res: any) => {\n            if (res.updatePanelApproval.success) {\n              Toast.success({\n                message: `😊 ${res.updatePanelApproval.message}`,\n              });\n              panelApprovalStore.panelApprovalService.listPanelApproval({});\n              setTableReload(!tableReload);\n            }\n          });\n        break;\n      }\n      case 'updateByIds': {\n        panelApprovalStore.panelApprovalService\n          .updateByIds({\n            input: {\n              ...data.fields,\n              ids: data.ids,\n            },\n          })\n          .then((res: any) => {\n            if (res.updateByIdsPanelApproval.success) {\n              Toast.success({\n                message: `😊 ${res.updateByIdsPanelApproval.message}`,\n              });\n              panelApprovalStore.panelApprovalService.listPanelApproval({});\n            }\n          });\n        break;\n      }\n    }\n  };\n\n  const updateResultRecords = (id, payload) => {\n    patientResultStore.patientResultService\n      .updateSingleFiled({\n        input: {\n          result: payload?.result,\n          resultType: payload?.resultType,\n          file: payload?.file,\n          labId: payload?.labId,\n          analyteCode: payload?.analyteCode,\n          analyteName: payload?.analyteName,\n          testStatus: payload?.testStatus,\n          rangeType: payload?.rangeType,\n          critical: payload?.critical,\n          abnFlag: payload?.abnFlag,\n          refRangesList: payload?.refRangesList,\n          testCode: payload?.testCode,\n          testName: payload?.testName,\n          panelCode: payload?.panelCode,\n          resultDate: payload?.resultDate,\n          reportPriority: payload?.reportPriority,\n          deliveryMode: payload?.deliveryMode,\n          units: payload?.units,\n          conclusion: payload?.conclusion,\n          loNor: payload?.loNor,\n          hiNor: payload?.hiNor,\n          resultStatus: payload?.resultStatus,\n          panelStatus: payload?.panelStatus,\n          enteredBy: loginStore.login?.userId,\n          _id: id,\n          __v: undefined,\n          flagUpdate: undefined,\n        },\n      })\n      .then(res => {\n        if (res.updatePatientResult.success) {\n          Toast.success({\n            message: `😊 ${res.updatePatientResult.message}`,\n            timer: 2000,\n          });\n          panelApprovalStore.panelApprovalService.listPanelApproval({});\n        }\n      });\n    setTableReload(!tableReload);\n  };\n\n  const panelApprovalTable = useMemo(\n    () => (\n      <PanelApprovalList\n        data={data || []}\n        totalSize={panelApprovalStore.panelApprovalListCount}\n        selectedId={selectId}\n        filterRecord={filterRecord}\n        isView={RouterFlow.checkPermission(routerStore.userPermission, 'View')}\n        isDelete={RouterFlow.checkPermission(\n          routerStore.userPermission,\n          'Delete',\n        )}\n        isUpdate={RouterFlow.checkPermission(\n          routerStore.userPermission,\n          'Update',\n        )}\n        isExport={RouterFlow.checkPermission(\n          routerStore.userPermission,\n          'Export',\n        )}\n        isApproval={RouterFlow.checkPermission(\n          routerStore.userPermission,\n          'Approval',\n        )}\n        onSelectedRow={(rows, type) => {\n          updateRecords({\n            show: true,\n            type: 'updateMany',\n            data: { rows, type },\n            title: 'Are you sure?',\n            body: 'Update items!',\n          });\n        }}\n        onUpdateFields={(fields: any, ids: string[]) => {\n          updateRecords({\n            show: true,\n            type: 'updateByIds',\n            data: { fields, ids },\n            title: 'Are you sure?',\n            body: 'Update items!',\n          });\n        }}\n        onUpdateResult={(fields: any, id: string) => {\n          updateResultRecords(id, fields);\n        }}\n        onExpand={items => {\n          console.log({ items });\n          if (typeof items == 'object') {\n            setSelectId(items?._id);\n            setExpandItem([items]);\n          } else {\n            setExpandItem([]);\n          }\n        }}\n        onPageSizeChange={(page, limit) => {\n          panelApprovalStore.panelApprovalService.listPanelApproval({\n            page,\n            limit,\n          });\n        }}\n        onFilter={(type, filter, page, limit) => {\n          panelApprovalStore.panelApprovalService.filter({\n            input: { type, filter, page, limit },\n          });\n        }}\n        onRecheck={async (id: string, patientResultId: string) => {\n          await patientResultStore.patientResultService\n            .updateStatus({\n              input: {\n                filter: {\n                  id,\n                  patientResultId,\n                  mode: 'reCheck',\n                  approvalStatus: 'ReCheck',\n                },\n              },\n            })\n            .then(res => {\n              Toast.success({\n                message: `😊 ${res.updateStatusPatientResult.message}`,\n              });\n              panelApprovalStore.panelApprovalService?.listPanelApproval({});\n            });\n        }}\n        onRetest={async (id: string, patientResultId: string) => {\n          await patientResultStore.patientResultService\n            .updateStatus({\n              input: {\n                filter: {\n                  id,\n                  patientResultId,\n                  mode: 'reTest',\n                  approvalStatus: 'ReTest',\n                },\n              },\n            })\n            .then(res => {\n              Toast.success({\n                message: `😊 ${res.updateStatusPatientResult.message}`,\n              });\n              panelApprovalStore.panelApprovalService?.listPanelApproval({});\n            });\n        }}\n        onFilterRecord={status => {\n          if (status == 'ReCall') return alert('WIP');\n          else if (status == 'All') {\n            panelApprovalStore.panelApprovalService.listPanelApproval({\n              isNotEqualToApproved: true,\n            });\n          } else {\n            panelApprovalStore.panelApprovalService.find({\n              input: { filter: { approvalStatus: status } },\n            });\n          }\n        }}\n      />\n    ),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [data, tableReload, selectId, filterRecord],\n  );\n\n  return (\n    <>\n      <MainPageHeading\n        title={routerStore.selectedComponents?.title || ''}\n        store={loginStore}\n      />\n      <div className='p-3 rounded-lg shadow-xl overflow-auto'>\n        {/* <span className='font-bold text-lg underline'>Panel Approval</span> */}\n        {panelApprovalTable}\n        <span className='text-red hidden'>\n          Note: Report Priority= Daily single-single update.\n        </span>\n      </div>\n      {expandItem?.length > 0 && (\n        <>\n          <div className='p-1 rounded-lg shadow-xl overflow-auto mt-4'>\n            <span className='font-bold text-lg underline'>\n              Patient Demographics\n            </span>\n            <PatientDemographicsList\n              data={expandItem || []}\n              totalSize={expandItem.length}\n            />\n          </div>\n        </>\n      )}\n    </>\n  );\n});\n\nexport default PanelApproval;\n"],"names":["TableBootstrap","Search","SearchBar","ClearSearchButton","CSVExport","ExportCSVButton","_ref","id","data","_ref$totalSize","totalSize","_ref$page","searchPlaceholder","page","_ref$sizePerPage","sizePerPage","columns","fileName","isEditModify","selectedItem","isSelectRow","onUpdateItem","onSelectedRow","onPageSizeChange","onFilter","onClickRow","clearAllFilter","_useState","useState","_useState2","_slicedToArray","_useState3","_useState4","options","cutome","paginationSize","pageStartIndex","firstPageText","prePageText","nextPageText","lastPageText","disablePageTitle","paginationTotalRenderer","from","to","size","_jsxs","_Fragment","children","_jsx","className","hideSizePerPage","showTotal","alwaysShowAllBtns","sizePerPageList","text","value","hidePageListOnlyOnePage","sizePerPageRenderer","_ref2","currSizePerPage","onSizePerPageChange","role","type","min","placeholder","onChange","e","target","map","option","onClick","concat","handleTableChange","_ref3","cellEdit","filters","sortField","sortOrder","searchText","newValue","dataField","rowId","_","alert","filter","_i","_Object$entries","Object","entries","length","_Object$entries$_i","key","values","object","_defineProperty","filterVal","assign","setTimeout","srText","sort","a","b","rowEvents","row","rowIndex","rowStyle","_id","backgroundColor","PaginationProvider","pagination","paginationFactory","keyField","_ref5","paginationProps","paginationTableProps","ToolkitProvider","bootstrap4","search","exportCSV","dayjs","Date","format","noAutoBOM","blobType","exportAll","onlyExportFiltered","columnToggle","props","BootstrapTable","_objectSpread","remote","baseProps","noDataIndication","hover","filterFactory","headerClasses","onTableChange","RefRanges","_ref$data","debounce","_row$colorScheme","_row$colorScheme2","_row$colorScheme3","_row$colorScheme4","_row$colorScheme5","colorScheme","envRangeColor","cellColor","color","fontColor","_ref4","style","maxWidth","Result","observer","setSelectedItem","widthRefBox","setWidthRefBox","_useState5","_useState6","selectedRowId","setSelectedRowId","_useState7","_useState8","widthConculsionBox","setWidthConculsionBox","_useState9","_useState10","conclusionId","setWidthConculsionId","position","hidden","csvExport","editable","editorRenderer","editorProps","column","columnIndex","InputResult","onSelect","_asyncToGenerator","_regeneratorRuntime","mark","_callee","result","rows","wrap","_context","prev","next","onUpdateResult","resultStatus","getResultStatus","resultType","testStatus","getTestStatus","abnFlag","getAbnFlag","critical","getCretical","patientResultId","stop","_x","apply","arguments","width","formatter","cell","_row$refRangesList","_row$refRangesList2","loNor","hiNor","refRangesList","Tooltip","tooltipText","Icons","Form","onBlur","conclusion","onUpdateFields","defaultValue","disabled","deltaFlag","approvalDate","autoRelease","csvFormatter","col","item","index","_ref$searchPlaceholde","isDelete","_ref$isExport","isExport","onFilterRecord","selectedRow","isFilterOpen","setIsFilterOpen","useEffect","expandButton","document","getElementsByClassName","click","statusData","code","searchProps","CustomToggleList","onColumnToggle","toggles","toggle","expandRow","renderer","fields","showExpandColumn","console","log","csvProps","Buttons","status","contextual","btnClassName","columnToggleProps","cellEditFactory","mode","blurToSave","undefined","PanelApprovalList","selectId","localData","setLocalData","_useState11","_useState12","JSON","parse","stringify","selectedId","isView","_row$1$","labId","_row$1$2","panel","_row$1$3","_row$1$4","dueDate","_row$1$5","_row$1$6","comments","_row$1$7","pLab","_row$1$8","department","cellContent","_row$1$9","_row$1$10","_row$1$11","_row$1$13","_row$1$14","_row$1$17","_row$1$18","_row$1$21","isApproval","isDisable","approvalStatus","onExpand","_row$1$12","_row$1$15","_row$1$16","onRecheck","nameIcon","propsIcon","_row$1$19","_row$1$20","onRetest","classes","colIndex","_props$data","zIndex","isUpdate","PatientDemographicsList","dob","history","PanelApproval","_routerStore$selected","_useStores","useStores","panelApprovalStore","routerStore","loginStore","patientResultStore","_useForm","useForm","control","handleSubmit","formState","errors","setValue","setData","expandItem","setExpandItem","tableReload","setTableReload","setSelectId","filterRecord","uniqueList","panelApprovalList","panelCode","keys","updateRecords","payload","panelApprovalService","update","input","then","res","updatePanelApproval","success","Toast","message","listPanelApproval","updateMany","updateByIds","ids","updateByIdsPanelApproval","panelApprovalTable","useMemo","panelApprovalListCount","RouterFlow","userPermission","show","title","body","_loginStore$login","patientResultService","updateSingleFiled","file","analyteCode","analyteName","rangeType","testCode","testName","resultDate","reportPriority","deliveryMode","units","panelStatus","enteredBy","login","userId","__v","flagUpdate","updatePatientResult","timer","updateResultRecords","items","limit","updateStatus","_panelApprovalStore$p","updateStatusPatientResult","_x2","_callee2","_context2","_panelApprovalStore$p2","_x3","_x4","isNotEqualToApproved","find","MainPageHeading","selectedComponents","store"],"sourceRoot":""}