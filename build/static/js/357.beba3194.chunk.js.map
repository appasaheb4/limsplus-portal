{"version":3,"file":"static/js/357.beba3194.chunk.js","mappings":"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","sources":["features/settings/login-activity/screens/login-activity.screen.tsx"],"sourcesContent":["import React, {useEffect} from 'react';\nimport {observer} from 'mobx-react';\nimport {\n  Header,\n  PageHeading,\n  PageHeadingLabDetails,\n  TableBootstrap,\n  DateFilter,\n  textFilter,\n  customFilter,\n} from '@/library/components';\nimport dayjs from 'dayjs';\nimport {useStores} from '@/stores';\n// import { DateFilter } from \"@/library/components/Organisms\"\n\nlet userId;\nlet systemInfo;\nlet ipInfo;\n\nconst LoginActivity = observer(() => {\n  const {loginStore, loginActivityStore, routerStore} = useStores();\n  useEffect(() => {\n    loginActivityStore.fetchLoginActivity();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return (\n    <>\n      <Header>\n        <PageHeading title={routerStore.selectedComponents?.title || ''} />\n        <PageHeadingLabDetails store={loginStore} />\n      </Header>\n      <div className='mx-auto  flex-wrap'>\n        <div className='p-2 rounded-lg shadow-xl overflow-auto'>\n          <div style={{position: 'relative'}}>\n            <TableBootstrap\n              id='_id'\n              data={loginActivityStore.listLoginActivity || []}\n              totalSize={loginActivityStore.listLoginActivityCount}\n              columns={[\n                {\n                  dataField: '_id',\n                  text: 'Id',\n                  hidden: true,\n                  csvExport: false,\n                },\n                {\n                  dataField: 'userId',\n                  text: 'User details',\n                  sort: true,\n                  csvFormatter: (cell, row, rowIndex) =>\n                    `UserId: ${row.user.userId}, User Name: ${row.user.fullName},  Lab: ${row.user.lab}, Role: ${row.user.role}`,\n                  filter: textFilter({\n                    getFilter: filter => {\n                      userId = filter;\n                    },\n                  }),\n                  headerClasses: 'textHeader5',\n                  editable: false,\n                  formatter: (cell, row) => {\n                    return (\n                      <div>\n                        <h6>{`UserId: ${row.user?.userId}`} </h6>\n                        <h6>{`User Name: ${row.user?.fullName}`}</h6>\n                        <h6>{`Lab: ${row.user?.lab}`}</h6>\n                        <h6>{`Role: ${row.user?.role}`}</h6>\n                      </div>\n                    );\n                  },\n                },\n                {\n                  dataField: 'systemInfo',\n                  text: 'System info',\n                  sort: true,\n                  filter: textFilter({\n                    getFilter: filter => {\n                      systemInfo = filter;\n                    },\n                  }),\n                  csvFormatter: (cell, row, rowIndex) =>\n                    `Device:${row.systemInfo.device}, OS, name:${row.systemInfo?.workstation?.os?.name},  version:${row.systemInfo?.workstation?.os?.version}, Browser,name: ${row.systemInfo?.workstation?.browser?.name}\n                    version:${row.systemInfo?.workstation?.browser?.version}`,\n                  headerClasses: 'textHeader5',\n                  formatter: (cell, row) => {\n                    return (\n                      <div>\n                        <h6>{`Device: ${row.systemInfo?.device}`} </h6>\n                        <h6> OS:</h6>\n                        <h6 className='ml-4'>\n                          {`name: ${row.systemInfo?.workstation?.os?.name}\n                                      version:${row.systemInfo?.workstation?.os?.version}`}\n                        </h6>\n                        <h6> Browser:</h6>\n                        <h6 className='ml-4'>\n                          {`name: ${row.systemInfo?.workstation?.browser?.name}\n                                      version:${row.systemInfo?.workstation?.browser?.version}`}\n                        </h6>\n                      </div>\n                    );\n                  },\n                },\n                {\n                  dataField: 'ipInfo',\n                  text: 'Ip Information',\n                  sort: true,\n                  filter: textFilter({\n                    getFilter: filter => {\n                      ipInfo = filter;\n                    },\n                  }),\n                  headerClasses: 'textHeader3',\n                  csvFormatter: (cell, row, rowIndex) =>\n                    `Ip:${row.systemInfo.ipInfo.ip}, Address:${row.systemInfo.ipInfo.city}, ${row.systemInfo.ipInfo.region}, ${row.systemInfo.ipInfo.country}, Location:${row.systemInfo.ipInfo.ll}`,\n                  formatter: (cell, row) => {\n                    return (\n                      <>\n                        <div>\n                          <h6>Ip: {row.systemInfo?.ipInfo?.ip}</h6>\n                          {row.systemInfo.ipInfo.city && (\n                            <>\n                              <h6>\n                                Address:{' '}\n                                {`${row.systemInfo.ipInfo.city}, ${row.systemInfo.ipInfo.region}, ${row.systemInfo.ipInfo.country}`}\n                              </h6>\n                              <h6>\n                                Location: {`${row.systemInfo?.ipInfo?.ll}`}\n                              </h6>\n                            </>\n                          )}\n                        </div>\n                      </>\n                    );\n                  },\n                },\n                {\n                  dataField: 'dateOfEntry',\n                  text: 'In',\n                  headerClasses: 'textHeader4',\n                  sort: true,\n                  csvFormatter: (cell, row, rowIndex) =>\n                    row.dateOfEntry\n                      ? dayjs(row.dateOfEntry).format('YYYY-MM-DD h:mm:ss a')\n                      : '',\n                  filter: customFilter(),\n                  filterRenderer: (onFilter, column) => (\n                    <DateFilter onFilter={onFilter} column={column} />\n                  ),\n                  formatter: (cell, row) => {\n                    return dayjs(row.dateOfEntry).format(\n                      'YYYY-MM-DD h:mm:ss a',\n                    );\n                  },\n                },\n                {\n                  dataField: 'lastUpdated',\n                  text: 'Out',\n                  headerClasses: 'textHeader4',\n                  sort: true,\n                  csvFormatter: (cell, row, rowIndex) =>\n                    row.lastUpdated\n                      ? dayjs(row.lastUpdated).format('YYYY-MM-DD h:mm:ss a')\n                      : '',\n                  filter: customFilter(),\n                  filterRenderer: (onFilter, column) => (\n                    <DateFilter onFilter={onFilter} column={column} />\n                  ),\n                  formatter: (cell, row) => {\n                    return row.lastUpdated\n                      ? dayjs(row.lastUpdated).format('YYYY-MM-DD h:mm:ss a')\n                      : 'Active User';\n                  },\n                },\n              ]}\n              onPageSizeChange={(page, size) => {\n                loginActivityStore.fetchLoginActivity(page, size);\n              }}\n              onFilter={(type, filter, page, limit) => {\n                loginActivityStore.LoginActivityService.filter({\n                  input: {type, filter, page, limit},\n                });\n              }}\n              clearAllFilter={() => {\n                userId('');\n                systemInfo('');\n                ipInfo('');\n              }}\n              isEditModify={false}\n              isSelectRow={false}\n              fileName='Login Activity'\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n});\n\nexport default LoginActivity;\n"],"names":["userId","systemInfo","ipInfo","LoginActivity","observer","useStores","loginStore","loginActivityStore","routerStore","useEffect","fetchLoginActivity","title","selectedComponents","store","className","style","position","id","data","listLoginActivity","totalSize","listLoginActivityCount","columns","dataField","text","hidden","csvExport","sort","csvFormatter","cell","row","rowIndex","user","fullName","lab","role","filter","textFilter","getFilter","headerClasses","editable","formatter","device","workstation","os","name","version","browser","ip","city","region","country","ll","dateOfEntry","dayjs","format","customFilter","filterRenderer","onFilter","column","lastUpdated","onPageSizeChange","page","size","type","limit","LoginActivityService","input","clearAllFilter","isEditModify","isSelectRow","fileName"],"sourceRoot":""}