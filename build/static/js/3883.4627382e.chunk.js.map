{"version":3,"file":"static/js/3883.4627382e.chunk.js","mappings":"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","sources":["features/patient-reports/delivery-queue/components/molecules/report-delivery-list.components.tsx","features/patient-reports/delivery-queue/components/molecules/table-bootstrap-report.components.tsx","features/patient-reports/delivery-queue/components/molecules/table-bootstrap.components.tsx","features/patient-reports/delivery-queue/components/molecules/order-delivered-list.components.tsx","features/patient-reports/delivery-queue/components/molecules/modal-generate-reports.component.tsx","features/patient-reports/delivery-queue/screens/delivery-queue.screen.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { observer } from 'mobx-react';\nimport {\n  Tooltip,\n  Icons,\n  textFilter,\n  customFilter,\n  DateFilter,\n  NumberFilter,\n  sortCaret,\n} from '@/library/components';\nimport dayjs from 'dayjs';\nimport { TableBootstrapReport } from './table-bootstrap-report.components';\n\nlet labId;\nlet name;\nlet externalLabId;\nlet employeeCode;\nlet visitId;\nlet deliveryId;\nlet deliveryDate;\nlet reportDate;\nlet deliveryStatus;\nlet reportType;\nlet deliveryMode;\nlet destination;\nlet comments;\nlet startDate;\nlet endDate;\nlet errorMsg;\nlet clientCode;\nlet clientName;\nlet registrationLocation;\nlet registrationLocationCode;\nlet doctorCode;\nlet doctorName;\nlet qrCode;\nlet pdf;\nlet enteredBy;\nlet userComments;\nlet companyCode;\nlet environment;\n\ninterface ReportDeliveryProps {\n  data: any;\n  totalSize: number;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  selectedId?: string;\n  isPagination?: boolean;\n  onUpdate?: (selectedItem: any) => void;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (value: any, dataField: string, id: string) => void;\n  onPageSizeChange?: (page: number, totalSize: number) => void;\n  onUpdateDeliveryStatus?: () => void;\n  onPagination?: (type: string) => void;\n  onReport: (items: any) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n  onClickRow?: (item: any, index: number) => void;\n  onExpand?: (items: any) => void;\n}\n\nexport const ReportDeliveryList = observer((props: ReportDeliveryProps) => {\n  const [selectId, setSelectId] = useState('');\n  const [localData, setLocalData] = useState(props.data);\n\n  useEffect(() => {\n    setSelectId(props.selectedId || '');\n    setLocalData(\n      props.selectedId\n        ? props.data.map(item => {\n            return { ...item, selectedId: props.selectedId };\n          })\n        : props.data,\n    );\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.selectedId, props.data]);\n\n  return (\n    <>\n      <div style={{ position: 'relative' }}>\n        <TableBootstrapReport\n          id='_id'\n          data={localData}\n          totalSize={props.totalSize}\n          isPagination={props.isPagination}\n          columns={[\n            {\n              dataField: '_id',\n              text: 'Id',\n              hidden: true,\n              csvExport: false,\n            },\n            {\n              dataField: 'labId',\n              text: 'Lab Id',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              editable: false,\n              headerClasses: 'textHeader3',\n              filter: customFilter({\n                getFilter: filter => {\n                  labId = filter;\n                },\n              }),\n              filterRenderer: (onFilter, column) => (\n                <NumberFilter onFilter={onFilter} column={column} />\n              ),\n            },\n            {\n              dataField: 'name',\n              text: 'Name',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              editable: false,\n              headerClasses: 'textHeader3',\n              filter: textFilter({\n                getFilter: filter => {\n                  name = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'deliveryId',\n              text: 'Delivery Id',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              editable: false,\n              headerClasses: 'textHeader3',\n              filter: customFilter({\n                getFilter: filter => {\n                  deliveryId = filter;\n                },\n              }),\n              filterRenderer: (onFilter, column) => (\n                <NumberFilter onFilter={onFilter} column={column} />\n              ),\n            },\n            {\n              dataField: 'deliveryDate',\n              text: 'Delivery Date',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              editable: false,\n              headerClasses: 'textHeader11',\n              filter: customFilter({\n                getFilter: filter => {\n                  deliveryDate = filter;\n                },\n              }),\n              filterRenderer: (onFilter, column) => (\n                <DateFilter onFilter={onFilter} column={column} />\n              ),\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    {row.deliveryDate\n                      ? dayjs(row.deliveryDate).format('DD-MM-YYYY HH:mm:ss')\n                      : ''}\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'reportDate',\n              text: 'Report Date',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              editable: false,\n              headerClasses: 'textHeader11',\n              filter: customFilter({\n                getFilter: filter => {\n                  reportDate = filter;\n                },\n              }),\n              filterRenderer: (onFilter, column) => (\n                <DateFilter onFilter={onFilter} column={column} />\n              ),\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    {row.reportDate\n                      ? dayjs(row.reportDate).format('DD-MM-YYYY HH:mm:ss')\n                      : ''}\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'deliveryStatus',\n              text: 'Delivery Status',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              editable: false,\n              headerClasses: 'textHeader3',\n              filter: textFilter({\n                getFilter: filter => {\n                  deliveryStatus = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'reportType',\n              text: 'Report Type',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              editable: false,\n              headerClasses: 'textHeader3',\n              filter: textFilter({\n                getFilter: filter => {\n                  reportType = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'reportPriority',\n              text: 'Report Priority',\n              headerClasses: 'textHeader4',\n              sort: true,\n              csvFormatter: (col, row) =>\n                row?.reportPriority ? row.reportPriority : '',\n              editable: false,\n            },\n            {\n              dataField: 'deliveryMode',\n              text: 'Delivery Mode',\n              headerClasses: 'textHeader4',\n              sort: true,\n              csvFormatter: (col, row) =>\n                row?.deliveryMode ? row.deliveryMode : '',\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <div className='flex flex-row flex-wrap gap-2'>\n                    {typeof row?.deliveryMode != 'string' &&\n                      row?.deliveryMode?.map(item => (\n                        <span className='bg-blue-800 rounded-md p-2 text-white'>\n                          {item.value}\n                        </span>\n                      ))}\n                  </div>\n                );\n              },\n            },\n            {\n              dataField: 'destination',\n              text: 'Destination',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              editable: false,\n              headerClasses: 'textHeader3',\n              filter: textFilter({\n                getFilter: filter => {\n                  destination = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'comments',\n              text: 'Comments',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n              headerClasses: 'textHeader3',\n              filter: textFilter({\n                getFilter: filter => {\n                  comments = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'startDate',\n              text: 'Start Date',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              editable: false,\n              headerClasses: 'textHeader11',\n              filter: customFilter({\n                getFilter: filter => {\n                  startDate = filter;\n                },\n              }),\n              filterRenderer: (onFilter, column) => (\n                <DateFilter onFilter={onFilter} column={column} />\n              ),\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    {row.startDate\n                      ? dayjs(row.startDate).format('DD-MM-YYYY HH:mm:ss')\n                      : ''}\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'endDate',\n              text: 'End Date',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              editable: false,\n              headerClasses: 'textHeader11',\n              filter: customFilter({\n                getFilter: filter => {\n                  endDate = filter;\n                },\n              }),\n              filterRenderer: (onFilter, column) => (\n                <DateFilter onFilter={onFilter} column={column} />\n              ),\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    {row.endDate\n                      ? dayjs(row.endDate).format('DD-MM-YYYY HH:mm:ss')\n                      : ''}\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'errorMsg',\n              text: 'Error Msg',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n              headerClasses: 'textHeader3',\n              filter: textFilter({\n                getFilter: filter => {\n                  errorMsg = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'clientCode',\n              text: 'Client Code',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n              headerClasses: 'textHeader3',\n              filter: textFilter({\n                getFilter: filter => {\n                  clientCode = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'clientName',\n              text: 'Client Name',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n              headerClasses: 'textHeader3',\n              filter: textFilter({\n                getFilter: filter => {\n                  clientName = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'registrationLocation',\n              text: 'Registration Location',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n              headerClasses: 'textHeader8',\n              filter: textFilter({\n                getFilter: filter => {\n                  registrationLocation = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'registrationLocationCode',\n              text: 'Registration Location Code',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n              headerClasses: 'textHeader8',\n              filter: textFilter({\n                getFilter: filter => {\n                  registrationLocationCode = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'doctorCode',\n              text: 'Doctor Code',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n              headerClasses: 'textHeader3',\n              filter: textFilter({\n                getFilter: filter => {\n                  doctorCode = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'doctorName',\n              text: 'Doctor Name',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n              headerClasses: 'textHeader3',\n              filter: textFilter({\n                getFilter: filter => {\n                  doctorName = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'qrCode',\n              text: 'Qr Code',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n              headerClasses: 'textHeader3',\n              filter: textFilter({\n                getFilter: filter => {\n                  qrCode = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'pdf',\n              text: 'PDF',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n              headerClasses: 'textHeader3',\n              filter: textFilter({\n                getFilter: filter => {\n                  pdf = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'externalLabId',\n              text: 'External Lab Id',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              editable: false,\n              headerClasses: 'textHeader3',\n              filter: textFilter({\n                getFilter: filter => {\n                  externalLabId = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'employeeCode',\n              text: 'Employee Code',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              editable: false,\n              headerClasses: 'textHeader3',\n              filter: textFilter({\n                getFilter: filter => {\n                  employeeCode = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'enteredBy',\n              text: 'Entered By',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n              headerClasses: 'textHeader3',\n              filter: textFilter({\n                getFilter: filter => {\n                  enteredBy = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'userComments',\n              text: 'User Comments',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n              headerClasses: 'textHeader3',\n              filter: textFilter({\n                getFilter: filter => {\n                  userComments = filter;\n                },\n              }),\n            },\n            {\n              text: 'Company Code',\n              dataField: 'companyCode',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              editable: false,\n              csvFormatter: col => (col ? col : ''),\n              filter: textFilter({\n                getFilter: filter => {\n                  companyCode = filter;\n                },\n              }),\n              headerClasses: 'textHeader2',\n            },\n            {\n              text: 'Company Code',\n              dataField: 'companyCode',\n              editable: false,\n              headerClasses: 'textHeader2',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              csvFormatter: col => (col ? col : ''),\n              filter: textFilter({\n                getFilter: filter => {\n                  environment = filter;\n                },\n              }),\n            },\n            {\n              dataField: 'environment',\n              text: 'Environment',\n              headerClasses: 'textHeader2',\n              sort: true,\n              headerStyle: {\n                fontSize: 0,\n              },\n              editable: false,\n              sortCaret: (order, column) => sortCaret(order, column),\n              csvFormatter: col => (col ? col : ''),\n              filter: textFilter({\n                getFilter: filter => {\n                  environment = filter;\n                },\n              }),\n              // editorRenderer: (\n              //   editorProps,\n              //   value,\n              //   row,\n              //   column,\n              //   rowIndex,\n              //   columnIndex,\n              // ) => (\n              //   <>\n              //     <select\n              //       value={row.environment}\n              //       className='leading-4 p-2 focus:ring-indigo-500 ocus:border-indigo-500 block w-full shadow-sm sm:text-base border-2 rounded-md'\n              //       onChange={e => {\n              //         const environment = e.target.value;\n              //         props.onUpdateItem &&\n              //           props.onUpdateItem(environment, column.dataField, row._id);\n              //       }}\n              //     >\n              //       <option selected>Select</option>\n              //       {lookupItems(props.extraData.lookupItems, 'ENVIRONMENT').map(\n              //         (item: any, index: number) => (\n              //           <option key={index} value={item.code}>\n              //             {lookupValue(item)}\n              //           </option>\n              //         ),\n              //       )}\n              //     </select>\n              //   </>\n              // ),\n            },\n            {\n              dataField: 'operation',\n              text: 'Action',\n              editable: false,\n              csvExport: false,\n              hidden: !props.isDelete,\n              formatter: (cellContent, row) => (\n                <>\n                  <div className='flex flex-row'>\n                    <Tooltip tooltipText='Cancel' position='bottom'>\n                      <Icons.IconContext\n                        color='#fff'\n                        size='20'\n                        onClick={() =>\n                          props.onUpdate &&\n                          props.onUpdate({\n                            type: 'cancel',\n                            visitId: row?.visitId,\n                            show: true,\n                            id: row._id,\n                            title: 'Are you sure?',\n                            body: 'Cancel item',\n                          })\n                        }\n                      >\n                        {Icons.getIconTag(Icons.IconGi.GiCancel)}\n                      </Icons.IconContext>\n                    </Tooltip>\n                    <Tooltip tooltipText='Hold' position='bottom'>\n                      <Icons.IconContext\n                        color='#fff'\n                        size='20'\n                        onClick={() =>\n                          props.onUpdate &&\n                          props.onUpdate({\n                            type: 'hold',\n                            visitId: row?.visitId,\n                            show: true,\n                            id: row._id,\n                            title: 'Are you sure?',\n                            body: 'Hold item',\n                          })\n                        }\n                      >\n                        {Icons.getIconTag(Icons.Iconmd.MdBackHand)}\n                      </Icons.IconContext>\n                    </Tooltip>\n\n                    <Tooltip tooltipText='Generate Report'>\n                      <Icons.IconContext\n                        color='#ffffff'\n                        size='20'\n                        onClick={() =>\n                          props.onUpdate &&\n                          props.onUpdate({\n                            type: 'done',\n                            visitId: row?.visitId,\n                            show: true,\n                            id: row._id,\n                            title: 'Are you sure?',\n                            body: 'Generate pdf status update',\n                          })\n                        }\n                      >\n                        {Icons.getIconTag(Icons.IconTb.TbExchange)}\n                      </Icons.IconContext>\n                    </Tooltip>\n                    <Tooltip tooltipText='Report'>\n                      <Icons.IconContext\n                        color={\n                          row?.deliveryStatus == 'Done' ? '#ffffff' : '#5A5A5A'\n                        }\n                        size='20'\n                        onClick={() => {\n                          if (row?.deliveryStatus == 'Done')\n                            props.onReport && props.onReport(row);\n                        }}\n                      >\n                        {Icons.getIconTag(Icons.IconBs.BsFilePdf)}\n                      </Icons.IconContext>\n                    </Tooltip>\n\n                    {selectId == row._id ? (\n                      <Tooltip tooltipText='Expand'>\n                        <Icons.IconContext\n                          color='#fff'\n                          size='20'\n                          onClick={() => {\n                            props.onExpand && props.onExpand('');\n                          }}\n                        >\n                          {Icons.getIconTag(Icons.Iconai.AiFillMinusCircle)}\n                        </Icons.IconContext>\n                      </Tooltip>\n                    ) : (\n                      <Tooltip tooltipText='Expand'>\n                        <Icons.IconContext\n                          color='#fff'\n                          size='20'\n                          onClick={() => {\n                            props.onExpand && props.onExpand(row);\n                          }}\n                        >\n                          {Icons.getIconTag(Icons.Iconai.AiFillPlusCircle)}\n                        </Icons.IconContext>\n                      </Tooltip>\n                    )}\n                  </div>\n                </>\n              ),\n              headerClasses: 'sticky right-0  bg-gray-500 text-white z-50',\n              classes: (cell, row, rowIndex, colIndex) => {\n                return 'sticky right-0 bg-gray-500';\n              },\n              style: (cell, row, rowIndex, colIndex) => {\n                return {\n                  zIndex: props.data?.length - rowIndex,\n                };\n              },\n            },\n          ]}\n          isEditModify={props.isEditModify}\n          isSelectRow={true}\n          fileName='Report Delivery'\n          onSelectedRow={rows => {\n            props.onSelectedRow &&\n              props.onSelectedRow(rows.map((item: any) => item._id));\n          }}\n          onUpdateItem={(value: any, dataField: string, id: string) => {\n            props.onUpdateItem && props.onUpdateItem(value, dataField, id);\n          }}\n          onPageSizeChange={(page, size) => {\n            props.onPageSizeChange && props.onPageSizeChange(page, size);\n          }}\n          onFilter={(type, filter, page, size) => {\n            props.onFilter && props.onFilter(type, filter, page, size);\n          }}\n          clearAllFilter={() => {\n            labId('');\n            name('');\n            externalLabId('');\n            employeeCode('');\n            deliveryId('');\n            deliveryDate();\n            reportDate();\n            deliveryStatus('');\n            reportType('');\n            deliveryMode('');\n            destination('');\n            comments('');\n            startDate();\n            endDate();\n            errorMsg('');\n            clientCode('');\n            clientName('');\n            registrationLocation('');\n            registrationLocationCode('');\n            doctorCode('');\n            doctorName('');\n            qrCode('');\n            pdf('');\n            enteredBy('');\n            userComments('');\n            companyCode('');\n            environment('');\n          }}\n          onUpdateDeliveryStatus={() => {\n            props.onUpdateDeliveryStatus && props.onUpdateDeliveryStatus();\n          }}\n          onPagination={type => {\n            props.onPagination && props.onPagination(type);\n          }}\n        />\n      </div>\n    </>\n  );\n});\n","/* eslint-disable */\nimport React, {useState} from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport _ from 'lodash';\nimport ToolkitProvider, {\n  Search,\n  CSVExport,\n} from 'react-bootstrap-table2-toolkit/dist/react-bootstrap-table2-toolkit';\nimport cellEditFactory from 'react-bootstrap-table2-editor';\nimport paginationFactory, {\n  PaginationProvider,\n  PaginationListStandalone,\n  SizePerPageDropdownStandalone,\n  PaginationTotalStandalone,\n} from 'react-bootstrap-table2-paginator';\nimport filterFactory from 'react-bootstrap-table2-filter';\nimport dayjs from 'dayjs';\nimport '@/library/components/organisms/style.css';\nimport {debounce} from '@/core-utils';\n\nimport {Buttons, Icons, Tooltip} from '@/library/components';\n\nconst {SearchBar, ClearSearchButton} = Search;\nconst {ExportCSVButton} = CSVExport;\n\ninterface TableBootstrapReportProps {\n  id: string;\n  data: any;\n  totalSize?: number;\n  searchPlaceholder?: string;\n  page?: number;\n  sizePerPage?: number;\n  columns: any;\n  fileName: string;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  isSelectRow?: boolean;\n  selectedItem?: any;\n  isPagination?: boolean;\n  onDelete?: (selectedItem: any) => void;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (value: any, dataField: string, id: string) => void;\n  onPageSizeChange?: (page: number, limit: number) => void;\n  onPagination?: (type: string) => void;\n  onUpdateDeliveryStatus?: () => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n  clearAllFilter?: () => void;\n  onClickRow?: (item: any, index: number) => void;\n}\nexport const TableBootstrapReport = ({\n  id,\n  data,\n  totalSize = 10,\n  searchPlaceholder = 'Search...',\n  page = 0,\n  sizePerPage = 10,\n  columns,\n  fileName,\n  isEditModify,\n  isSelectRow,\n  selectedItem,\n  isPagination = true,\n  onSelectedRow,\n  onUpdateItem,\n  onPageSizeChange,\n  onUpdateDeliveryStatus,\n  onFilter,\n  onPagination,\n  clearAllFilter,\n  onClickRow,\n}: TableBootstrapReportProps) => {\n  const [selectedRow, setSelectedRow] = useState<any[]>();\n  const [isFilterOpen, setIsFilterOpen] = useState<boolean>(false);\n\n  const customTotal = (from, to, size) => {\n    return (\n      <>\n        <div className='clearfix' />\n        <span>\n          Showing {from} to {to} of {size} Results\n        </span>\n      </>\n    );\n  };\n\n  const sizePerPageRenderer = ({\n    options,\n    currSizePerPage,\n    onSizePerPageChange,\n  }) => (\n    <div className='btn-group items-center' role='group'>\n      <input\n        type='number'\n        min='0'\n        placeholder='No'\n        onChange={(e: any) => {\n          if (e.target.value) {\n            onSizePerPageChange(e.target.value);\n          }\n        }}\n        className='mr-2 ml-2 leading-4 p-2 w-14 focus:outline-none focus:ring block  shadow-sm sm:text-base border border-gray-300 rounded-md'\n      />\n      {options.map(option => (\n        <button\n          key={option.text}\n          type='button'\n          onClick={() => onSizePerPageChange(option.page)}\n          className={`btn  ${\n            currSizePerPage === `${option.page}` ? 'bg-primary' : 'bg-grey'\n          }`}\n        >\n          {option.text}\n        </button>\n      ))}\n    </div>\n  );\n  const options = {\n    cutome: true,\n    totalSize: totalSize,\n    paginationSize: 5,\n    pageStartIndex: 0,\n    firstPageText: '<<',\n    prePageText: '<',\n    nextPageText: '>',\n    lastPageText: '>>',\n    disablePageTitle: true,\n    paginationTotalRenderer: customTotal,\n    hideSizePerPage: true,\n    showTotal: false,\n    alwaysShowAllBtns: true,\n    sizePerPageList: [\n      {\n        text: '10',\n        value: 10,\n      },\n      {\n        text: '20',\n        value: 20,\n      },\n      {\n        text: '30',\n        value: 30,\n      },\n      {\n        text: '40',\n        value: 40,\n      },\n      {\n        text: '50',\n        value: 50,\n      },\n    ],\n    hidePageListOnlyOnePage: true,\n    sizePerPageRenderer: sizePerPageRenderer,\n  };\n  let searchProps: any = {\n    placeholder: searchPlaceholder,\n  };\n\n  const handleTableChange = (\n    type,\n    {\n      data,\n      cellEdit,\n      page,\n      sizePerPage,\n      filters,\n      sortField,\n      sortOrder,\n      searchText,\n    },\n  ) => {\n    // console.log({type});\n    if (type === 'cellEdit' && isEditModify) {\n      onUpdateItem &&\n        onUpdateItem(cellEdit.newValue, cellEdit.dataField, cellEdit.rowId);\n    }\n    if (type === 'pagination' && _.isEmpty(filters)) {\n      // if (sizePerPage > totalSize) return alert(\"You have not more records.\")\n      // if (page * sizePerPage > totalSize) return alert(\"You have not more records.\")\n      onPageSizeChange && onPageSizeChange(page, sizePerPage);\n    }\n    if (type === 'filter' || (type === 'pagination' && !_.isEmpty(filters))) {\n      if (type === 'pagination') {\n        if (sizePerPage > totalSize) return alert('You have not more records.');\n        if (page * sizePerPage > totalSize)\n          return alert('You have not more records.');\n      }\n      let filter: any = {};\n      for (const [key, value] of Object.entries(filters)) {\n        const values: any = value;\n        const object = {[key]: values.filterVal};\n        filter = Object.assign(filter, object);\n      }\n      if (onFilter)\n        debounce(() => {\n          onFilter(\n            type,\n            filter,\n            type === 'filter' && page === 1 ? 0 : page,\n            sizePerPage,\n          );\n        });\n    }\n    if (type === 'search') {\n      debounce(() => {\n        onFilter && onFilter(type, {srText: searchText}, page, sizePerPage);\n      });\n    }\n    if (type === 'sort') {\n      let result;\n      if (sortOrder === 'asc') {\n        result = data.sort((a, b) => {\n          if (a[sortField] > b[sortField]) {\n            return 1;\n          } else if (b[sortField] > a[sortField]) {\n            return -1;\n          }\n          return 0;\n        });\n      } else {\n        result = data.sort((a, b) => {\n          if (a[sortField] > b[sortField]) {\n            return -1;\n          } else if (b[sortField] > a[sortField]) {\n            return 1;\n          }\n          return 0;\n        });\n      }\n    }\n  };\n\n  const CustomToggleList = ({columns, onColumnToggle, toggles}) => (\n    <div className='btn-group btn-group-toggle' data-toggle='buttons'>\n      {columns\n        .map(column => ({\n          ...column,\n          toggle: toggles[column.dataField],\n        }))\n        .map((column, index) => {\n          if (index > 0) {\n            return (\n              <button\n                type='button'\n                key={column.dataField}\n                className={` btn btn-primary  btn-sm whitespace-nowrap ${\n                  column.toggle ? 'active' : ''\n                }`}\n                data-toggle='button'\n                aria-pressed={column.toggle ? 'true' : 'false'}\n                onClick={() => onColumnToggle(column.dataField)}\n              >\n                {column.text}\n              </button>\n            );\n          }\n        })}\n    </div>\n  );\n\n  const rowStyle = (row, rowIndex) => {\n    if (row?.isAnyCritical || (row?.isAnyABNFlag && row?.isAnyCritical)) {\n      return {\n        backgroundColor: '#FF0000',\n        color: '#FFFF00',\n      };\n    } else if (row?.isAnyABNFlag) {\n      return {\n        backgroundColor: '#FFFF00',\n        color: '#FF0000',\n      };\n    }\n  };\n\n  return (\n    <PaginationProvider\n      pagination={paginationFactory(\n        totalSize !== 0 ? options : {page, sizePerPage, totalSize},\n      )}\n      keyField={id}\n      columns={columns}\n      data={data}\n    >\n      {({paginationProps, paginationTableProps}) => (\n        <ToolkitProvider\n          keyField={id}\n          bootstrap4\n          data={data}\n          columns={columns}\n          search\n          exportCSV={{\n            fileName: `${fileName}_${dayjs(new Date()).format(\n              'YYYY-MM-DD HH:mm',\n            )}.csv`,\n            noAutoBOM: false,\n            blobType: 'text/csv;charset=ansi',\n            exportAll: false,\n            onlyExportFiltered: true,\n          }}\n          columnToggle\n        >\n          {props => (\n            <div>\n              <div className='flex items-center gap-2 flex-wrap'>\n                <SearchBar\n                  {...searchProps}\n                  {...props.searchProps}\n                  onChange={value => {\n                    console.log({value});\n                  }}\n                  style={{marginTop: 10}}\n                />\n                <ClearSearchButton\n                  className={`inline-flex bg-gray-500 items-center small outline shadow-sm  font-medium  disabled:opacity-50 disabled:cursor-not-allowed text-center h-9 text-white`}\n                  {...props.searchProps}\n                />\n                <button\n                  className={`px-2 focus:outline-none bg-gray-500 items-center  outline shadow-sm  font-medium  text-center rounded-md h-9 text-white`}\n                  onClick={clearAllFilter}\n                >\n                  Clear all filters\n                </button>\n                <ExportCSVButton\n                  className={`inline-flex bg-gray-500 items-center  small outline shadow-sm  font-medium  disabled:opacity-50 disabled:cursor-not-allowed text-center h-9 text-white`}\n                  {...props.csvProps}\n                >\n                  Export CSV!!\n                </ExportCSVButton>\n                {isFilterOpen ? (\n                  <Buttons.Button\n                    size='medium'\n                    type='outline'\n                    onClick={() => {\n                      setIsFilterOpen(!isFilterOpen);\n                    }}\n                  >\n                    <Icons.IconFa.FaChevronUp />\n                  </Buttons.Button>\n                ) : (\n                  <Buttons.Button\n                    size='medium'\n                    type='outline'\n                    onClick={() => {\n                      setIsFilterOpen(!isFilterOpen);\n                    }}\n                  >\n                    <Icons.IconFa.FaChevronDown />\n                  </Buttons.Button>\n                )}\n                <Tooltip\n                  tooltipText='All generate report update'\n                  position='top'\n                >\n                  <Buttons.Button\n                    size='medium'\n                    type='outline'\n                    onClick={() => {\n                      onUpdateDeliveryStatus && onUpdateDeliveryStatus();\n                    }}\n                  >\n                    <Icons.IconTb.TbExchange />\n                  </Buttons.Button>\n                </Tooltip>\n              </div>\n              {isFilterOpen && (\n                <div className={'mb-2 overflow-auto h-10'}>\n                  <CustomToggleList\n                    contextual='primary'\n                    className='list-custom-class'\n                    btnClassName='list-btn-custom-class'\n                    {...props.columnToggleProps}\n                  />\n                </div>\n              )}\n              <div className='scrollTable'>\n                <BootstrapTable\n                  remote\n                  {...props.baseProps}\n                  noDataIndication='Table is Empty'\n                  hover\n                  {...paginationTableProps}\n                  filter={filterFactory()}\n                  headerClasses='bg-gray-500 text-white whitespace-nowrap'\n                  onTableChange={handleTableChange}\n                  rowStyle={rowStyle}\n                />\n              </div>\n\n              <div className='flex items-center gap-2 mt-2'>\n                <Icons.IconContext\n                  color='#fff'\n                  size='25'\n                  style={{\n                    backgroundColor: '#808080',\n                    width: 32,\n                    height: 32,\n                    borderRadius: 16,\n                    align: 'center',\n                    padding: 4,\n                  }}\n                  onClick={async () => {\n                    onPagination && onPagination('next');\n                  }}\n                >\n                  <Icons.IconBi.BiSkipNext />\n                </Icons.IconContext>\n                <Icons.IconContext\n                  color='#fff'\n                  size='25'\n                  style={{\n                    backgroundColor: '#808080',\n                    width: 32,\n                    height: 32,\n                    borderRadius: 16,\n                    align: 'center',\n                    padding: 4,\n                  }}\n                  onClick={async () => {\n                    onPagination && onPagination('prev');\n                  }}\n                >\n                  <Icons.IconBi.BiSkipPrevious />\n                </Icons.IconContext>\n              </div>\n            </div>\n          )}\n        </ToolkitProvider>\n      )}\n    </PaginationProvider>\n  );\n};\n","/* eslint-disable */\nimport React, {useState} from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport _ from 'lodash';\nimport ToolkitProvider, {\n  Search,\n  CSVExport,\n} from 'react-bootstrap-table2-toolkit/dist/react-bootstrap-table2-toolkit';\nimport cellEditFactory from 'react-bootstrap-table2-editor';\nimport paginationFactory, {\n  PaginationProvider,\n  PaginationListStandalone,\n  SizePerPageDropdownStandalone,\n  PaginationTotalStandalone,\n} from 'react-bootstrap-table2-paginator';\nimport filterFactory from 'react-bootstrap-table2-filter';\nimport dayjs from 'dayjs';\nimport '@/library/components/organisms/style.css';\nimport {debounce} from '@/core-utils';\n\nimport {Buttons, Icons, Tooltip} from '@/library/components';\n\nconst {SearchBar, ClearSearchButton} = Search;\nconst {ExportCSVButton} = CSVExport;\n\ninterface TableBootstrapProps {\n  id: string;\n  data: any;\n  totalSize?: number;\n  searchPlaceholder?: string;\n  page?: number;\n  sizePerPage?: number;\n  columns: any;\n  fileName: string;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  isSelectRow?: boolean;\n  selectedItem?: any;\n  isPagination?: boolean;\n  onDelete?: (selectedItem: any) => void;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (value: any, dataField: string, id: string) => void;\n  onPageSizeChange?: (page: number, limit: number) => void;\n  onUpdateDeliveryStatus?: () => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n  clearAllFilter?: () => void;\n  onClickRow?: (item: any, index: number) => void;\n}\nexport const TableBootstrap = ({\n  id,\n  data,\n  totalSize = 10,\n  searchPlaceholder = 'Search...',\n  page = 0,\n  sizePerPage = 10,\n  columns,\n  fileName,\n  isEditModify,\n  isSelectRow,\n  selectedItem,\n  isPagination = true,\n  onSelectedRow,\n  onUpdateItem,\n  onPageSizeChange,\n  onUpdateDeliveryStatus,\n  onFilter,\n  clearAllFilter,\n  onClickRow,\n}: TableBootstrapProps) => {\n  const [selectedRow, setSelectedRow] = useState<any[]>();\n  const [isFilterOpen, setIsFilterOpen] = useState<boolean>(false);\n\n  const customTotal = (from, to, size) => {\n    return (\n      <>\n        <div className='clearfix' />\n        <span>\n          Showing {from} to {to} of {size} Results\n        </span>\n      </>\n    );\n  };\n\n  const sizePerPageRenderer = ({\n    options,\n    currSizePerPage,\n    onSizePerPageChange,\n  }) => (\n    <div className='btn-group items-center' role='group'>\n      <input\n        type='number'\n        min='0'\n        placeholder='No'\n        onChange={(e: any) => {\n          if (e.target.value) {\n            onSizePerPageChange(e.target.value);\n          }\n        }}\n        className='mr-2 ml-2 leading-4 p-2 w-14 focus:outline-none focus:ring block  shadow-sm sm:text-base border border-gray-300 rounded-md'\n      />\n      {options.map(option => (\n        <button\n          key={option.text}\n          type='button'\n          onClick={() => onSizePerPageChange(option.page)}\n          className={`btn  ${\n            currSizePerPage === `${option.page}` ? 'bg-primary' : 'bg-grey'\n          }`}\n        >\n          {option.text}\n        </button>\n      ))}\n    </div>\n  );\n  const options = {\n    cutome: true,\n    totalSize: totalSize,\n    paginationSize: 5,\n    pageStartIndex: 0,\n    firstPageText: '<<',\n    prePageText: '<',\n    nextPageText: '>',\n    lastPageText: '>>',\n    disablePageTitle: true,\n    paginationTotalRenderer: customTotal,\n    hideSizePerPage: true,\n    showTotal: false,\n    alwaysShowAllBtns: true,\n    sizePerPageList: [\n      {\n        text: '10',\n        value: 10,\n      },\n      {\n        text: '20',\n        value: 20,\n      },\n      {\n        text: '30',\n        value: 30,\n      },\n      {\n        text: '40',\n        value: 40,\n      },\n      {\n        text: '50',\n        value: 50,\n      },\n    ],\n    hidePageListOnlyOnePage: true,\n    sizePerPageRenderer: sizePerPageRenderer,\n  };\n  let searchProps: any = {\n    placeholder: searchPlaceholder,\n  };\n\n  const handleTableChange = (\n    type,\n    {\n      data,\n      cellEdit,\n      page,\n      sizePerPage,\n      filters,\n      sortField,\n      sortOrder,\n      searchText,\n    },\n  ) => {\n    // console.log({type});\n    if (type === 'cellEdit' && isEditModify) {\n      onUpdateItem &&\n        onUpdateItem(cellEdit.newValue, cellEdit.dataField, cellEdit.rowId);\n    }\n    if (type === 'pagination' && _.isEmpty(filters)) {\n      // if (sizePerPage > totalSize) return alert(\"You have not more records.\")\n      // if (page * sizePerPage > totalSize) return alert(\"You have not more records.\")\n      onPageSizeChange && onPageSizeChange(page, sizePerPage);\n    }\n    if (type === 'filter' || (type === 'pagination' && !_.isEmpty(filters))) {\n      if (type === 'pagination') {\n        if (sizePerPage > totalSize) return alert('You have not more records.');\n        if (page * sizePerPage > totalSize)\n          return alert('You have not more records.');\n      }\n      let filter: any = {};\n      for (const [key, value] of Object.entries(filters)) {\n        const values: any = value;\n        const object = {[key]: values.filterVal};\n        filter = Object.assign(filter, object);\n      }\n      if (onFilter)\n        debounce(() => {\n          onFilter(\n            type,\n            filter,\n            type === 'filter' && page === 1 ? 0 : page,\n            sizePerPage,\n          );\n        });\n    }\n    if (type === 'search') {\n      debounce(() => {\n        onFilter && onFilter(type, {srText: searchText}, page, sizePerPage);\n      });\n    }\n    if (type === 'sort') {\n      let result;\n      if (sortOrder === 'asc') {\n        result = data.sort((a, b) => {\n          if (a[sortField] > b[sortField]) {\n            return 1;\n          } else if (b[sortField] > a[sortField]) {\n            return -1;\n          }\n          return 0;\n        });\n      } else {\n        result = data.sort((a, b) => {\n          if (a[sortField] > b[sortField]) {\n            return -1;\n          } else if (b[sortField] > a[sortField]) {\n            return 1;\n          }\n          return 0;\n        });\n      }\n    }\n  };\n\n  const CustomToggleList = ({columns, onColumnToggle, toggles}) => (\n    <div className='btn-group btn-group-toggle' data-toggle='buttons'>\n      {columns\n        .map(column => ({\n          ...column,\n          toggle: toggles[column.dataField],\n        }))\n        .map((column, index) => {\n          if (index > 0) {\n            return (\n              <button\n                type='button'\n                key={column.dataField}\n                className={` btn btn-primary  btn-sm whitespace-nowrap ${\n                  column.toggle ? 'active' : ''\n                }`}\n                data-toggle='button'\n                aria-pressed={column.toggle ? 'true' : 'false'}\n                onClick={() => onColumnToggle(column.dataField)}\n              >\n                {column.text}\n              </button>\n            );\n          }\n        })}\n    </div>\n  );\n\n  const rowEvents = {\n    onClick: (e, row, rowIndex) => {\n      onClickRow && onClickRow(row, rowIndex);\n    },\n  };\n\n  // const rowStyle = (row, rowIndex) => {\n  //   if (row._id == selectedItem?._id) {\n  //     return {backgroundColor: '#000000'};\n  //   }\n  // };\n\n  const rowStyle = (row, rowIndex) => {\n    switch (row?.colorScheme?.envRangeColor) {\n      case 'BOTH':\n        return {\n          backgroundColor: row?.colorScheme?.cellColor,\n          color: row?.colorScheme?.fontColor,\n        };\n        break;\n      case 'BACKGROUND':\n        return {\n          backgroundColor: row?.colorScheme?.cellColor,\n        };\n        break;\n      case 'FONT':\n        return {\n          color: row?.colorScheme?.fontColor,\n        };\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <PaginationProvider\n      pagination={paginationFactory(\n        totalSize !== 0 ? options : {page, sizePerPage, totalSize},\n      )}\n      keyField={id}\n      columns={columns}\n      data={data}\n    >\n      {({paginationProps, paginationTableProps}) => (\n        <ToolkitProvider\n          keyField={id}\n          bootstrap4\n          data={data}\n          columns={columns}\n          search\n          exportCSV={{\n            fileName: `${fileName}_${dayjs(new Date()).format(\n              'YYYY-MM-DD HH:mm',\n            )}.csv`,\n            noAutoBOM: false,\n            blobType: 'text/csv;charset=ansi',\n            exportAll: false,\n            onlyExportFiltered: true,\n          }}\n          columnToggle\n        >\n          {props => (\n            <div>\n              <div className='flex items-center gap-2 flex-wrap'>\n                <SearchBar\n                  {...searchProps}\n                  {...props.searchProps}\n                  onChange={value => {\n                    console.log({value});\n                  }}\n                  style={{marginTop: 10}}\n                />\n                <ClearSearchButton\n                  className={`inline-flex bg-gray-500 items-center small outline shadow-sm  font-medium  disabled:opacity-50 disabled:cursor-not-allowed text-center h-9 text-white`}\n                  {...props.searchProps}\n                />\n                <button\n                  className={`px-2 focus:outline-none bg-gray-500 items-center  outline shadow-sm  font-medium  text-center rounded-md h-9 text-white`}\n                  onClick={clearAllFilter}\n                >\n                  Clear all filters\n                </button>\n                <ExportCSVButton\n                  className={`inline-flex bg-gray-500 items-center  small outline shadow-sm  font-medium  disabled:opacity-50 disabled:cursor-not-allowed text-center h-9 text-white`}\n                  {...props.csvProps}\n                >\n                  Export CSV!!\n                </ExportCSVButton>\n                {isFilterOpen ? (\n                  <Buttons.Button\n                    size='medium'\n                    type='outline'\n                    onClick={() => {\n                      setIsFilterOpen(!isFilterOpen);\n                    }}\n                  >\n                    <Icons.IconFa.FaChevronUp />\n                  </Buttons.Button>\n                ) : (\n                  <Buttons.Button\n                    size='medium'\n                    type='outline'\n                    onClick={() => {\n                      setIsFilterOpen(!isFilterOpen);\n                    }}\n                  >\n                    <Icons.IconFa.FaChevronDown />\n                  </Buttons.Button>\n                )}\n              </div>\n              {isFilterOpen && (\n                <div className={'mb-2 overflow-auto h-10'}>\n                  <CustomToggleList\n                    contextual='primary'\n                    className='list-custom-class'\n                    btnClassName='list-btn-custom-class'\n                    {...props.columnToggleProps}\n                  />\n                </div>\n              )}\n              <div className='scrollTable'>\n                <BootstrapTable\n                  remote\n                  {...props.baseProps}\n                  noDataIndication='Table is Empty'\n                  hover\n                  {...paginationTableProps}\n                  filter={filterFactory()}\n                  headerClasses='bg-gray-500 text-white whitespace-nowrap'\n                  onTableChange={handleTableChange}\n                  rowEvents={rowEvents}\n                  rowStyle={rowStyle}\n                />\n              </div>\n              {isPagination && (\n                <>\n                  <div className='flex items-center gap-2 mt-2'>\n                    <SizePerPageDropdownStandalone\n                      {...Object.assign(\n                        {},\n                        {...paginationProps, hideSizePerPage: false},\n                      )}\n                    />\n                    <PaginationListStandalone {...paginationProps} />\n                  </div>\n                  {/* <div className='flex items-center gap-2 mt-2'>\n                    <PaginationTotalStandalone {...paginationProps} />\n                  </div> */}\n                </>\n              )}\n            </div>\n          )}\n        </ToolkitProvider>\n      )}\n    </PaginationProvider>\n  );\n};\n","import React from 'react';\nimport {observer} from 'mobx-react';\nimport {\n  Form,\n} from '@/library/components';\nimport {Confirm} from '@/library/models';\nimport {TableBootstrap} from './table-bootstrap.components';\n\ninterface OrderDeliveredProps {\n  data: any;\n  totalSize: number;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  onDelete?: (selectedItem: Confirm) => void;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (value: any, dataField: string, id: string) => void;\n  onPageSizeChange?: (page: number, totalSize: number) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n}\n\nexport const OrderDeliveredList = observer((props: OrderDeliveredProps) => {\n  return (\n    <>\n      <div style={{position: 'relative'}}>\n        <TableBootstrap\n          id='_id'\n          data={props.data}\n          totalSize={props.totalSize}\n          columns={[\n            {\n              dataField: '_id',\n              text: 'Id',\n              hidden: true,\n              csvExport: false,\n            },\n            {\n              dataField: 'deliveryId',\n              text: 'Delivery Id',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'labId',\n              text: 'Lab Id',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'orderId',\n              text: 'Order Id',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'panelCode',\n              text: 'Panel Code',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'panelName',\n              text: 'Panel Name',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'testCode',\n              text: 'Test Code',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'testName',\n              text: 'Test Name',\n              sort: true,\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n            },\n            {\n              dataField: 'analyteCode',\n              text: 'Analyte Code',\n              sort: true,\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n            },\n            {\n              dataField: 'analyteName',\n              text: 'Analyte Name',\n              sort: true,\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n            },\n            {\n              dataField: 'rep',\n              text: 'Rep',\n              sort: true,\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n            },\n            {\n              dataField: 'delivered',\n              text: 'Delivered',\n              sort: true,\n              csvFormatter: (col, row) =>\n                `${row.delivered ? (row.delivered ? 'Yes' : 'No') : 'No'}`,\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <Form.Toggle disabled={true} value={row.delivered} />\n                  </>\n                );\n              },\n            },\n          ]}\n          isEditModify={props.isEditModify}\n          isSelectRow={true}\n          fileName='Order Delivered'\n          onSelectedRow={rows => {\n            props.onSelectedRow &&\n              props.onSelectedRow(rows.map((item: any) => item._id));\n          }}\n          onUpdateItem={(value: any, dataField: string, id: string) => {\n            props.onUpdateItem && props.onUpdateItem(value, dataField, id);\n          }}\n          onPageSizeChange={(page, size) => {\n            props.onPageSizeChange && props.onPageSizeChange(page, size);\n          }}\n          onFilter={(type, filter, page, size) => {\n            props.onFilter && props.onFilter(type, filter, page, size);\n          }}\n          clearAllFilter={() => {}}\n        />\n      </div>\n    </>\n  );\n});\n","/* eslint-disable  */\nimport React, {useEffect, useState} from 'react';\nimport {Container} from 'reactstrap';\nimport _ from 'lodash';\nimport {Icons, Tooltip, Form, Modal} from '@components';\nimport {pdf, PDFViewer, Document} from '@react-pdf/renderer';\n\nimport {\n  PdfTemp0001,\n  PdfTemp0002,\n  PdfTemp0003,\n  PdfTemp0004,\n  PdfTemp0005,\n  PdfTemp0006,\n  PdfTemp0007,\n  PdfTemp0008,\n} from '@/features/report-builder/report-template/components';\n\nimport printjs from 'print-js';\n\ninterface ModalGenerateReportsProps {\n  show?: boolean;\n  title?: string;\n  data?: any;\n  templateDetails?: any;\n  onClick: (data: any, item: any, index: number) => void;\n  onClose: () => void;\n  onReceiptUpload: (file: any, type: string) => void;\n}\n\nexport const ModalGenerateReports = ({\n  show = false,\n  data,\n  templateDetails,\n  onClose,\n  onReceiptUpload,\n}: ModalGenerateReportsProps) => {\n  const [reportList, setReportList] = useState<any>();\n  const [showModal, setShowModal] = React.useState(show);\n  const [isWithHeader, setWithHeader] = useState(true);\n  const [isPdfViewer, setPdfViewer] = useState(false);\n\n  useEffect(() => {\n    setShowModal(show);\n  }, [show]);\n\n  useEffect(() => {\n    if (data) {\n      let newObj = _.mapKeys(data, (value, key) => key.split(' -')[0]);\n      let arrReportList: any = [];\n      for (const values of Object.entries(newObj)) {\n        let templateReportOrder = 0;\n        values[1].map(item =>\n          item?.patientResultList?.map(e => {\n            if (e.reportTemplate?.split(' - ')[0] == values[0]) {\n              templateReportOrder = e.reportTemplateOrder;\n            }\n          }),\n        );\n        arrReportList.push({\n          template: values[0],\n          patientReports: values[1],\n          order: templateReportOrder,\n        });\n      }\n      arrReportList = _.orderBy(arrReportList, 'order', 'asc');\n      setReportList(arrReportList);\n    }\n  }, [data]);\n\n  const getReports = reports => {\n    const documentTitle = 'Delivery Queue';\n    return (\n      <Document title={documentTitle}>\n        {reports.map(item => (\n          <>\n            {item.template == 'TEMP0001' &&\n              _.uniqBy(item?.patientReports, 'labId').map(\n                (patientReports: any) => (\n                  <PdfTemp0001\n                    data={{\n                      patientReports: {\n                        ...patientReports,\n                        patientResultList:\n                          patientReports?.patientResultList?.filter(\n                            item =>\n                              item?.reportTemplate?.split(' -')[0] ==\n                              'TEMP0001',\n                          ),\n                      },\n                      pageBranding: templateDetails?.find(\n                        item => item.templateCode == 'TEMP0001',\n                      ),\n                    }}\n                    isWithHeader={isWithHeader}\n                  />\n                ),\n              )}\n\n            {item.template == 'TEMP0002' &&\n              _.uniqBy(item?.patientReports, 'labId').map(\n                (patientReports: any) => (\n                  <PdfTemp0002\n                    data={{\n                      patientReports: {\n                        ...patientReports,\n                        patientResultList:\n                          patientReports?.patientResultList?.filter(\n                            item =>\n                              item?.reportTemplate?.split(' -')[0] ==\n                              'TEMP0002',\n                          ),\n                      },\n                      pageBranding: templateDetails?.find(\n                        item => item.templateCode == 'TEMP0002',\n                      ),\n                    }}\n                    isWithHeader={isWithHeader}\n                  />\n                ),\n              )}\n\n            {item.template == 'TEMP0003' &&\n              _.uniqBy(item?.patientReports, 'labId').map(\n                (patientReports: any) => (\n                  <PdfTemp0003\n                    data={{\n                      patientReports: {\n                        ...patientReports,\n                        patientResultList:\n                          patientReports?.patientResultList?.filter(\n                            item =>\n                              item?.reportTemplate?.split(' -')[0] ==\n                              'TEMP0003',\n                          ),\n                      },\n                      pageBranding: templateDetails?.find(\n                        item => item.templateCode == 'TEMP0003',\n                      ),\n                    }}\n                    isWithHeader={isWithHeader}\n                  />\n                ),\n              )}\n            {item.template == 'TEMP0004' &&\n              _.uniqBy(item?.patientReports, 'labId').map(\n                (patientReports: any) => (\n                  <PdfTemp0004\n                    data={{\n                      patientReports: {\n                        ...patientReports,\n                        patientResultList:\n                          patientReports?.patientResultList?.filter(\n                            item =>\n                              item?.reportTemplate?.split(' -')[0] ==\n                              'TEMP0004',\n                          ),\n                      },\n                      pageBranding: templateDetails?.find(\n                        item => item?.templateCode == 'TEMP0004',\n                      ),\n                    }}\n                    isWithHeader={isWithHeader}\n                  />\n                ),\n              )}\n            {item.template == 'TEMP0005' &&\n              _.uniqBy(item?.patientReports, 'labId').map(\n                (patientReports: any) => (\n                  <PdfTemp0005\n                    data={{\n                      patientReports: {\n                        ...patientReports,\n                        patientResultList:\n                          patientReports?.patientResultList?.filter(\n                            item =>\n                              item?.reportTemplate?.split(' -')[0] ==\n                              'TEMP0005',\n                          ),\n                      },\n                      pageBranding: templateDetails?.find(\n                        item => item.templateCode == 'TEMP0005',\n                      ),\n                    }}\n                    isWithHeader={isWithHeader}\n                  />\n                ),\n              )}\n            {item.template == 'TEMP0006' &&\n              _.uniqBy(item?.patientReports, 'labId').map(\n                (patientReports: any) => (\n                  <PdfTemp0006\n                    data={{\n                      patientReports: {\n                        ...patientReports,\n                        patientResultList:\n                          patientReports?.patientResultList?.filter(\n                            item =>\n                              item?.reportTemplate?.split(' -')[0] ==\n                              'TEMP0006',\n                          ),\n                      },\n                      pageBranding: templateDetails?.find(\n                        item => item.templateCode == 'TEMP0006',\n                      ),\n                    }}\n                    isWithHeader={isWithHeader}\n                  />\n                ),\n              )}\n            {item.template == 'TEMP0007' &&\n              _.uniqBy(item?.patientReports, 'labId').map(\n                (patientReports: any) => (\n                  <PdfTemp0007\n                    data={{\n                      patientReports: {\n                        ...patientReports,\n                        patientResultList:\n                          patientReports?.patientResultList?.filter(\n                            item =>\n                              item?.reportTemplate?.split(' -')[0] ==\n                              'TEMP0007',\n                          ),\n                      },\n                      pageBranding: templateDetails?.find(\n                        item => item.templateCode == 'TEMP0007',\n                      ),\n                    }}\n                    isWithHeader={isWithHeader}\n                  />\n                ),\n              )}\n            {item.template == 'TEMP0008' &&\n              _.uniqBy(item?.patientReports, 'labId').map(\n                (patientReports: any) => (\n                  <PdfTemp0008\n                    data={{\n                      patientReports: {\n                        ...patientReports,\n                        patientResultList:\n                          patientReports?.patientResultList?.filter(\n                            item =>\n                              item?.reportTemplate?.split(' -')[0] ==\n                              'TEMP0008',\n                          ),\n                      },\n                      pageBranding: templateDetails?.find(\n                        item => item.templateCode == 'TEMP0008',\n                      ),\n                    }}\n                    isWithHeader={isWithHeader}\n                  />\n                ),\n              )}\n          </>\n        ))}\n      </Document>\n    );\n  };\n\n  return (\n    <Container>\n      {showModal && (\n        <>\n          <div className='justify-center items-center  overflow-x-hidden overflow-y-auto fixed inset-0 z-50 outline-none focus:outline-none'>\n            <div className='relative w-auto my-6 mx-auto max-w-3xl'>\n              <div className='border-0 rounded-lg shadow-lg relative flex flex-col w-full bg-white outline-none focus:outline-none'>\n                <div className='flex items-start justify-between p-3 border-b border-solid border-gray-300 rounded-t'>\n                  <h3 className='text-3xl font-semibold'>\n                    {'Generate Reports'}\n                  </h3>\n                  <button\n                    className='p-1  border-0 text-black opacity-1 ml-6 float-right text-3xl leading-none font-semibold outline-none focus:outline-none'\n                    onClick={() => {\n                      setShowModal(false);\n                      onClose && onClose();\n                    }}\n                  >\n                    <span className=' text-black h-6 w-6 text-2xl block outline-none focus:outline-none'>\n                      ×\n                    </span>\n                  </button>\n                </div>\n                <div className='relative p-2 flex-auto'>\n                  <div className='flex flex-row items-center justify-center gap-2'>\n                    {data && (\n                      <div className='flex flex-col gap-3'>\n                        <Form.InputRadio\n                          label='Report Type'\n                          labelStyle={{fontWeight: 'bold', fontSize: 16}}\n                          value={isWithHeader ? 'withHeader' : 'withoutHeader'}\n                          values={[\n                            {value: 'withHeader', label: 'With Header'},\n                            {value: 'withoutHeader', label: 'Without Header'},\n                          ]}\n                          onChange={value => {\n                            setWithHeader(value == 'withHeader' ? true : false);\n                          }}\n                        />\n                        <div className='flex flex-row content-center justify-center gap-2'>\n                          <Tooltip tooltipText='View'>\n                            <Icons.IconContext\n                              color='#fff'\n                              size='25'\n                              style={{\n                                backgroundColor: '#808080',\n                                width: 32,\n                                height: 32,\n                                borderRadius: 16,\n                                align: 'center',\n                                padding: 4,\n                              }}\n                              onClick={async () => {\n                                setPdfViewer(true);\n                                onClose && onClose();\n                              }}\n                            >\n                              {Icons.getIconTag(Icons.Iconmd.MdOutlinePreview)}\n                            </Icons.IconContext>\n                          </Tooltip>\n                          <Tooltip tooltipText='Print'>\n                            <Icons.IconContext\n                              color='#fff'\n                              size='25'\n                              style={{\n                                backgroundColor: '#808080',\n                                width: 32,\n                                height: 32,\n                                borderRadius: 16,\n                                align: 'center',\n                                padding: 4,\n                              }}\n                              onClick={async () => {\n                                const doc = await getReports(reportList);\n                                const blob = await pdf(doc).toBlob();\n                                const blobURL = URL.createObjectURL(blob);\n                                printjs({\n                                  printable: blobURL,\n                                  type: 'pdf',\n                                  showModal: true,\n                                });\n                                onClose && onClose();\n                              }}\n                            >\n                              {Icons.getIconTag(Icons.IconBi.BiPrinter)}\n                            </Icons.IconContext>\n                          </Tooltip>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n                <div className='flex items-center  p-3 border-t border-solid border-gray-300 rounded-b justify-between'>\n                  <span className='text-red'>\n                    Note: ResultType FR & BO report opening new tab runtime\n                  </span>\n                  <button\n                    className='text-red background-transparent font-bold uppercase  text-sm outline-none focus:outline-none'\n                    type='button'\n                    style={{transition: 'all .15s ease'}}\n                    onClick={() => {\n                      setShowModal(false);\n                      onClose && onClose();\n                    }}\n                  >\n                    Close\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className='opacity-25 fixed inset-0 z-40 bg-black'></div>\n        </>\n      )}\n\n      <Modal\n        title='Delivery Queue Reports'\n        show={isPdfViewer}\n        close={() => {\n          setPdfViewer(false);\n        }}\n        autoClose={\n          _.has(reportList, 'TEMP0007')\n            ? _.size(reportList) == 1\n              ? true\n              : false\n            : _.has(reportList, 'TEMP0008')\n            ? _.size(reportList) == 1\n              ? true\n              : false\n            : false\n        }\n        children={\n          isPdfViewer ? (\n            <PDFViewer\n              style={{\n                width: window.innerWidth,\n                height: window.innerHeight / 1.2,\n              }}\n              showToolbar={false}\n            >\n              {getReports(reportList)}\n            </PDFViewer>\n          ) : null\n        }\n      />\n    </Container>\n  );\n};\n","import React, { useState, useEffect, useMemo } from 'react';\nimport { observer } from 'mobx-react';\nimport _ from 'lodash';\nimport {\n  Header,\n  PageHeading,\n  PageHeadingLabDetails,\n  Toast,\n} from '@/library/components';\nimport { useForm } from 'react-hook-form';\nimport { RouterFlow } from '@/flows';\nimport {\n  ReportDeliveryList,\n  OrderDeliveredList,\n  ModalGenerateReports,\n} from '../components';\nimport '@/library/assets/css/accordion.css';\nimport { useStores } from '@/stores';\nimport 'react-accessible-accordion/dist/fancy-example.css';\n\nconst DeliveryQueue = observer(() => {\n  const { deliveryQueueStore, routerStore, loginStore, reportSettingStore } =\n    useStores();\n\n  const {\n    control,\n    handleSubmit,\n    formState: { errors },\n    setValue,\n  } = useForm();\n\n  const [modalGenerateReports, setModalGenerateReports] = useState<any>();\n  const [selectId, setSelectId] = useState('');\n  const [reloadTable, setReloadTable] = useState<boolean>(false);\n\n  const getDeliveryList = () => {\n    const loginDetails = loginStore.login;\n    if (loginDetails?.role == 'CORPORATE_PORTAL') {\n      deliveryQueueStore.deliveryQueueService\n        .findByFields({\n          input: {\n            filter: {\n              clientCode: loginDetails.lab,\n            },\n          },\n        })\n        .then(res => {\n          if (res.findByFieldsDeliveryQueue.success) {\n            deliveryQueueStore.updateReportDeliveryList({\n              deliveryQueues: {\n                data: res.findByFieldsDeliveryQueue?.data,\n                paginatorInfo: {\n                  count: res.findByFieldsDeliveryQueue?.data?.length,\n                },\n              },\n            });\n          }\n        });\n      return;\n    } else {\n      deliveryQueueStore.deliveryQueueService.listDeliveryQueue();\n      return;\n    }\n  };\n\n  useEffect(() => {\n    getDeliveryList();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const getValue = value =>\n    typeof value === 'string' ? value?.toUpperCase() : value;\n\n  const filterPlainArray = (array, filters) => {\n    const filterKeys = Object.keys(filters);\n    // console.log({filterKeys});\n    return array.filter(item => {\n      return filterKeys.every(key => {\n        console.log({ key });\n        if (!filters[key].length) return true;\n        return filters[key].find(\n          filter => getValue(filter) === getValue(item[key]),\n        );\n      });\n    });\n  };\n\n  const getReportDeliveryList = arr => {\n    const list: any = [];\n    const grouped = _.groupBy(arr, 'reportPriority');\n    if (grouped?.Progressive) {\n      const allProgressive: any = grouped?.Progressive;\n      const result = _.map(\n        _.groupBy(allProgressive, function (item) {\n          return item.labId && item.panelCode;\n        }),\n        g => _.maxBy(g, 'deliveryId'),\n      );\n      list.push(...result);\n    }\n    if (grouped['All Together']) {\n      const arrAllTogather: any = grouped['All Together'];\n      const result = _.map(_.groupBy(arrAllTogather, 'labId'), g =>\n        _.maxBy(g, 'deliveryId'),\n      );\n      list.push(...result);\n    }\n    if (grouped['One Today']) {\n      const arrOneToday: any = grouped['One Today'];\n      const result: any = _.map(\n        _.groupBy(arrOneToday, function (item) {\n          return item.labId && item.approvalDate;\n        }),\n      );\n      result?.filter(item => {\n        if (item?.find(o => o?.reportType == 'Final')) {\n          list.push(item?.find(o => o?.reportType == 'Final'));\n        } else {\n          list.push(\n            ..._.map(\n              _.groupBy(item, function (o) {\n                return o.labId && o.approvalDate;\n              }),\n              g => _.maxBy(g, 'deliveryId'),\n            ),\n          );\n        }\n      });\n    }\n    if (grouped.Daily) {\n      const arrDaily: any = grouped.Daily;\n      const result: any = _.map(\n        _.groupBy(arrDaily, function (item) {\n          return item.labId && item.approvalDate;\n        }),\n      );\n      result?.filter(item => {\n        if (item?.find(o => o?.reportType == 'Final')) {\n          list.push(item?.find(o => o?.reportType == 'Final'));\n        } else {\n          list.push(\n            ..._.map(\n              _.groupBy(item, function (o) {\n                return o.labId && o.approvalDate;\n              }),\n              g => _.maxBy(g, 'deliveryId'),\n            ),\n          );\n        }\n      });\n    }\n    return list;\n  };\n\n  const getOrderDeliveredList = async (item: any) =>\n    new Promise<any>((resolve, reject) => {\n      let filter: any = {};\n      if (item.reportPriority == 'Progressive') {\n        filter = {\n          labId: item.labId,\n          panelCode: item.panelCode,\n        };\n      } else if (\n        (item.reportPriority == 'One Today' ||\n          item.reportPriority == 'Daily') &&\n        item.reportType == 'Interim'\n      ) {\n        filter = {\n          labId: item.labId,\n          reportType: 'Interim',\n          approvalDate: item?.approvalDate,\n        };\n      } else {\n        filter = {\n          labId: item.labId,\n        };\n      }\n      deliveryQueueStore.deliveryQueueService\n        .findByFields({\n          input: {\n            filter,\n          },\n        })\n        .then(res => {\n          if (res.findByFieldsDeliveryQueue.success) {\n            let data = res.findByFieldsDeliveryQueue.data;\n            data = _.unionBy(data, (o: any) => {\n              return o.patientResultId;\n            });\n            data = _.orderBy(data, 'deliveryId', 'desc');\n            resolve(data);\n          }\n        });\n    });\n\n  const updateRecords = async (payload: any) => {\n    const { type, id, visitId, ids } = payload;\n    if (type == 'cancel' || type == 'hold' || type == 'done') {\n      await deliveryQueueStore.deliveryQueueService\n        .updateDeliveryQueue({\n          input: {\n            _id: id,\n            visitId: visitId,\n            deliveryStatus:\n              type == 'cancel' ? 'Cancel' : type == 'hold' ? 'Hold' : 'Done',\n          },\n        })\n        .then(res => {\n          if (res.updateDeliveryQueue.success) {\n            Toast.success({\n              message: `😊 ${res.updateDeliveryQueue.message}`,\n            });\n          }\n        });\n    } else {\n      await deliveryQueueStore.deliveryQueueService\n        .updateDeliveryQueueByVisitIds({\n          input: {\n            filter: {\n              ids: ids,\n              visitId: visitId,\n              deliveryStatus: 'Done',\n            },\n          },\n        })\n        .then(res => {\n          if (res.updateByVisitIdsDeliveryQueue.success) {\n            Toast.success({\n              message: `😊 ${res.updateByVisitIdsDeliveryQueue.message}`,\n            });\n          }\n        });\n    }\n    if (global?.filter?.mode == 'pagination') {\n      deliveryQueueStore.deliveryQueueService.listDeliveryQueue(\n        global?.filter?.pageNo,\n        100,\n      );\n    } else if (global?.filter?.mode == 'filter') {\n      deliveryQueueStore.deliveryQueueService.filter({\n        input: {\n          type: global?.filter?.type,\n          filter: global?.filter?.filter,\n          page: global?.filter?.page,\n          limit: global?.filter?.limit,\n        },\n      });\n    } else {\n      deliveryQueueStore.deliveryQueueService.listDeliveryQueue();\n    }\n    setReloadTable(!reloadTable);\n  };\n\n  const reportDeliveryList = useMemo(\n    () => (\n      <ReportDeliveryList\n        data={\n          getReportDeliveryList(deliveryQueueStore.reportDeliveryList) || []\n        }\n        totalSize={\n          getReportDeliveryList(deliveryQueueStore.reportDeliveryList)?.length\n        }\n        isPagination={loginStore.login?.role == 'SYSADMIN' ? true : false}\n        selectedId={selectId}\n        isDelete={RouterFlow.checkPermission(\n          routerStore.userPermission,\n          'Delete',\n        )}\n        isEditModify={RouterFlow.checkPermission(\n          routerStore.userPermission,\n          'Update',\n        )}\n        onUpdate={selectedItem => updateRecords(selectedItem)}\n        onFilter={(type, filter, page, limit) => {\n          global.filter = {\n            mode: 'filter',\n            type,\n            filter,\n            page,\n            limit,\n          };\n          if (loginStore.login?.role == 'SYSADMIN') {\n            deliveryQueueStore.deliveryQueueService.filter({\n              input: { type, filter, page, limit },\n            });\n          } else {\n            if (type == 'filter') {\n              console.log({\n                list: filterPlainArray(\n                  deliveryQueueStore.reportDeliveryListCopy,\n                  filter,\n                ),\n              });\n            } else {\n              if (filter.srText == '') {\n                return deliveryQueueStore.updateReportDeliveryList(\n                  deliveryQueueStore.reportDeliveryListCopy,\n                );\n              }\n              const list = deliveryQueueStore.reportDeliveryListCopy;\n              const data = list?.filter(res => {\n                return JSON.stringify(res)\n                  .toLocaleLowerCase()\n                  .match(filter.srText?.toLocaleLowerCase());\n              });\n              deliveryQueueStore.updateReportDeliveryList(data);\n            }\n          }\n        }}\n        onExpand={async item => {\n          setSelectId(item._id);\n          if (typeof item == 'object') {\n            getOrderDeliveredList(item).then(result => {\n              deliveryQueueStore.updateOrderDeliveredList(result);\n            });\n          } else {\n            deliveryQueueStore.updateOrderDeliveredList([]);\n          }\n        }}\n        onUpdateDeliveryStatus={() => {\n          updateRecords({\n            type: 'updateAllDeliveryStatus',\n            ids: deliveryQueueStore.reportDeliveryList?.map(item => item._id),\n            visitId: deliveryQueueStore.reportDeliveryList?.map(\n              item => item.visitId,\n            ),\n            show: true,\n            title: 'Are you sure?',\n            body: 'All generate pdf status update',\n          });\n        }}\n        onReport={async item => {\n          const result = await getOrderDeliveredList(item);\n          deliveryQueueStore.deliveryQueueService\n            .listPatientReports(result[0]?.labId)\n            .then(res => {\n              if (res.getPatientReports.success) {\n                let patientResultList: any[] = [];\n                result?.filter(item => {\n                  if (item?.reportTemplate) {\n                    patientResultList.push({\n                      ...res.getPatientReports.data,\n                      patientResult: item,\n                    });\n                  }\n                });\n                const uniqByPatientResult = _.uniqBy(result, (item: any) => {\n                  return item?.reportTemplate;\n                });\n\n                const reportTemplateList: any[] = [];\n                uniqByPatientResult.filter(item => {\n                  reportTemplateList.push(item?.reportTemplate?.split(' -')[0]);\n                });\n\n                if (reportTemplateList?.length > 0) {\n                  reportSettingStore.templatePatientResultService\n                    .getTempPatientResultListByTempCodes({\n                      input: {\n                        filter: {\n                          reportTemplateList,\n                        },\n                      },\n                    })\n                    .then(async res => {\n                      patientResultList = patientResultList.filter(item => {\n                        const reportSettings =\n                          res.getTempPatientResultListByTempCodes.list.find(\n                            e =>\n                              e.templateCode ==\n                              item.patientResult.reportTemplate.split(' -')[0],\n                          );\n                        return Object.assign(item, { reportSettings });\n                      });\n\n                      const grouped = _.groupBy(\n                        patientResultList,\n                        item => item.patientResult.reportTemplate,\n                      );\n\n                      if (_.isEmpty(grouped)) {\n                        return Toast.error({\n                          message: '😌 Report template not found.',\n                        });\n                      } else {\n                        setModalGenerateReports({\n                          show: true,\n                          data: grouped,\n                          templateDetails:\n                            res.getTempPatientResultListByTempCodes.list,\n                        });\n                      }\n                    });\n                }\n              } else {\n                alert(res.getPatientReports.message);\n              }\n            });\n        }}\n        onPagination={(type: string) => {\n          let pageNo = deliveryQueueStore.orderDeliveryPageNo;\n          if (type == 'next')\n            pageNo = deliveryQueueStore.orderDeliveryPageNo + 1;\n          else pageNo == 0 ? (pageNo = 0) : (pageNo = pageNo - 1);\n          deliveryQueueStore.deliveryQueueService.listDeliveryQueue(\n            pageNo,\n            100,\n          );\n          deliveryQueueStore.updateOrderDeliveryPageNo(pageNo);\n          global.filter = { mode: 'pagination', pageNo, limit: 100 };\n        }}\n      />\n    ),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [deliveryQueueStore.reportDeliveryList, selectId, reloadTable],\n  );\n\n  return (\n    <>\n      <Header>\n        <PageHeading title={routerStore.selectedComponents?.title || ''} />\n        <PageHeadingLabDetails store={loginStore} />\n      </Header>\n      <div className='p-3 rounded-lg shadow-xl overflow-auto'>\n        <span className='font-bold text-lg underline'>Report Delivery</span>\n        {reportDeliveryList}\n      </div>\n\n      {deliveryQueueStore.orderDeliveredList?.length > 0 && (\n        <div className='p-3 rounded-lg shadow-xl overflow-auto'>\n          <span className='font-bold text-lg underline'>Order Delivered</span>\n          <OrderDeliveredList\n            data={deliveryQueueStore.orderDeliveredList || []}\n            totalSize={deliveryQueueStore.orderDeliveredListCount}\n          />\n        </div>\n      )}\n\n      <ModalGenerateReports\n        {...modalGenerateReports}\n        onClose={() => {\n          setModalGenerateReports({ show: false });\n        }}\n      />\n    </>\n  );\n});\n\nexport default DeliveryQueue;\n"],"names":["labId","name","externalLabId","employeeCode","deliveryId","deliveryDate","reportDate","deliveryStatus","reportType","destination","comments","startDate","endDate","errorMsg","clientCode","clientName","registrationLocation","registrationLocationCode","doctorCode","doctorName","qrCode","pdf","enteredBy","userComments","companyCode","environment","SearchBar","Search","ClearSearchButton","ExportCSVButton","CSVExport","TableBootstrapReport","_ref","id","data","_ref$totalSize","totalSize","_ref$searchPlaceholde","searchPlaceholder","_ref$page","page","_ref$sizePerPage","sizePerPage","columns","fileName","isEditModify","onUpdateItem","isSelectRow","selectedItem","isPagination","onSelectedRow","onPageSizeChange","onUpdateDeliveryStatus","onFilter","onPagination","clearAllFilter","_useState","onClickRow","useState","_useState2","_slicedToArray","_useState3","_useState4","isFilterOpen","setIsFilterOpen","options","cutome","paginationSize","pageStartIndex","firstPageText","prePageText","nextPageText","lastPageText","disablePageTitle","paginationTotalRenderer","from","to","size","_jsxs","_Fragment","children","_jsx","className","hideSizePerPage","showTotal","alwaysShowAllBtns","sizePerPageList","text","value","hidePageListOnlyOnePage","sizePerPageRenderer","_ref2","currSizePerPage","onSizePerPageChange","role","type","min","placeholder","onChange","e","target","map","option","onClick","concat","searchProps","handleTableChange","_ref3","cellEdit","filters","sortField","sortOrder","searchText","newValue","dataField","rowId","_","alert","filter","_i","_Object$entries","Object","entries","length","_Object$entries$_i","key","values","object","_defineProperty","filterVal","assign","debounce","srText","sort","a","b","CustomToggleList","_ref4","onColumnToggle","toggles","column","_objectSpread","toggle","index","rowStyle","row","rowIndex","isAnyCritical","isAnyABNFlag","backgroundColor","color","PaginationProvider","pagination","paginationFactory","keyField","_ref5","paginationProps","paginationTableProps","ToolkitProvider","bootstrap4","search","exportCSV","dayjs","Date","format","noAutoBOM","blobType","exportAll","onlyExportFiltered","columnToggle","props","console","log","style","marginTop","csvProps","Buttons","Icons","Tooltip","tooltipText","position","contextual","btnClassName","columnToggleProps","BootstrapTable","remote","baseProps","noDataIndication","hover","filterFactory","headerClasses","onTableChange","width","height","borderRadius","align","padding","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","stop","_callee2","_context2","ReportDeliveryList","observer","selectId","setSelectId","localData","setLocalData","useEffect","selectedId","item","hidden","csvExport","headerStyle","fontSize","sortCaret","order","editable","customFilter","getFilter","filterRenderer","NumberFilter","textFilter","DateFilter","formatter","cell","csvFormatter","col","reportPriority","deliveryMode","_row$deliveryMode","isDelete","cellContent","onUpdate","visitId","show","_id","title","body","onReport","onExpand","classes","colIndex","_props$data","zIndex","rows","TableBootstrap","_ref$isPagination","rowEvents","_row$colorScheme","_row$colorScheme2","_row$colorScheme3","_row$colorScheme4","_row$colorScheme5","colorScheme","envRangeColor","cellColor","fontColor","SizePerPageDropdownStandalone","PaginationListStandalone","OrderDeliveredList","delivered","Form","disabled","ModalGenerateReports","_ref$show","templateDetails","onClose","onReceiptUpload","reportList","setReportList","_React$useState","React","_React$useState2","showModal","setShowModal","isWithHeader","setWithHeader","_useState5","_useState6","isPdfViewer","setPdfViewer","newObj","split","arrReportList","_loop","templateReportOrder","_item$patientResultLi","patientResultList","_e$reportTemplate","reportTemplate","reportTemplateOrder","push","template","patientReports","getReports","reports","Document","_patientReports$patie","PdfTemp0001","_item$reportTemplate","pageBranding","find","templateCode","_patientReports$patie2","PdfTemp0002","_item$reportTemplate2","_patientReports$patie3","PdfTemp0003","_item$reportTemplate3","_patientReports$patie4","PdfTemp0004","_item$reportTemplate4","_patientReports$patie5","PdfTemp0005","_item$reportTemplate5","_patientReports$patie6","PdfTemp0006","_item$reportTemplate6","_patientReports$patie7","PdfTemp0007","_item$reportTemplate7","_patientReports$patie8","PdfTemp0008","_item$reportTemplate8","Container","label","labelStyle","fontWeight","doc","blob","blobURL","sent","toBlob","URL","createObjectURL","printjs","printable","transition","Modal","close","autoClose","PDFViewer","window","innerWidth","innerHeight","showToolbar","DeliveryQueue","_routerStore$selected","_deliveryQueueStore$o","_useStores","useStores","deliveryQueueStore","routerStore","loginStore","reportSettingStore","_useForm","useForm","control","handleSubmit","formState","errors","setValue","modalGenerateReports","setModalGenerateReports","reloadTable","setReloadTable","loginDetails","login","deliveryQueueService","findByFields","input","lab","then","res","_res$findByFieldsDeli","_res$findByFieldsDeli2","_res$findByFieldsDeli3","findByFieldsDeliveryQueue","success","updateReportDeliveryList","deliveryQueues","paginatorInfo","count","listDeliveryQueue","getDeliveryList","getValue","toUpperCase","filterPlainArray","array","filterKeys","keys","every","getReportDeliveryList","arr","list","grouped","Progressive","allProgressive","result","panelCode","g","apply","_toConsumableArray","arrAllTogather","arrOneToday","approvalDate","o","Daily","arrDaily","getOrderDeliveredList","abrupt","Promise","resolve","reject","patientResultId","_x","arguments","updateRecords","payload","_global","_global$filter","_global3","_global3$filter","ids","_global2","_global2$filter","_global4","_global4$filter","_global5","_global5$filter","_global6","_global6$filter","_global7","_global7$filter","updateDeliveryQueue","Toast","message","updateDeliveryQueueByVisitIds","updateByVisitIdsDeliveryQueue","global","mode","pageNo","limit","_x2","reportDeliveryList","useMemo","_getReportDeliveryLis","_loginStore$login","RouterFlow","userPermission","_loginStore$login2","reportDeliveryListCopy","_filter$srText","JSON","stringify","toLocaleLowerCase","match","_callee3","_context3","updateOrderDeliveredList","_x3","_deliveryQueueStore$r","_deliveryQueueStore$r2","_callee5","_result$","_context5","listPatientReports","getPatientReports","patientResult","uniqByPatientResult","reportTemplateList","templatePatientResultService","getTempPatientResultListByTempCodes","_callee4","_context4","reportSettings","error","_x5","_x4","orderDeliveryPageNo","updateOrderDeliveryPageNo","Header","PageHeading","selectedComponents","PageHeadingLabDetails","store","orderDeliveredList","orderDeliveredListCount"],"sourceRoot":""}