{"version":3,"sources":["features/settings/loginActivity/stores/index.ts","features/settings/loginActivity/services/loginActivity-services.ts","features/settings/loginActivity/stores/loginActivity-store.ts","features/settings/loginActivity/services/index.ts","features/settings/loginActivity/scenes/LoginActivity.tsx"],"names":["Stores","BaseService","loginActivityStore","version","makeAutoObservable","this","Promise","resolve","reject","Clients","get","then","res","data","catch","error","list","listLoginActivity","observable","action","React","createContext","LoginActivity","Search","SearchBar","ClearSearchButton","CSVExport","ExportCSVButton","observer","useEffect","fetchLoginActivity","Header","PageHeading","title","RootStore","routerStore","selectedComponents","className","style","position","TableBootstrap","id","columns","dataField","text","hidden","csvExport","sort","filter","LibraryComponents","Utils","textFilter","headerStyle","minWidth","editable","getFilter","onFilter","filterValue","csvFormatter","cell","row","rowIndex","systemInfo","ipInfo","ip","city","region","country","ll","formatter","moment","dateOfEntry","format","undefined","lastUpdated","isEditModify","isSelectRow","fileName"],"mappings":"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","file":"static/js/7.ea83ce81.chunk.js","sourcesContent":["import React from 'react';\n\nimport LoginActivityStore from './loginActivity-store';\n  \nexport const Stores = {\n  loginActivityStore: new LoginActivityStore(),\n};\n\nexport const Contexts = {\n  loginActivityContext: React.createContext(Stores.loginActivityStore),\n};\n","/**\n * @fileoverview Use this file invoke Memetoons API\n * implementation related to Memetoons standards\n * @package Feed Service\n * @author limsplus\n */\nimport * as Models from \"../models\"\nimport BaseService from \"@lp/library/modules/base-service\"\n\nclass LoginActivityService extends BaseService {\n  listLoginActivity = () =>\n    new Promise<Models.ILoginActivity[]>((resolve, reject) => {\n      this.client\n        .get(`auth/listLoginActivity`)\n        .then((res) => {\n          resolve(res.data.data)\n        })\n        .catch((error) => {\n          reject({ error })\n        })\n    })\n}\n\nexport default LoginActivityService\n","import { version } from \"mobx-sync\"\nimport { makeAutoObservable, action, observable } from \"mobx\"\nimport * as Models from \"../models\"\nimport * as Services from \"../services\"\n\n@version(0.1)\nclass LoginActivityStore {\n  @observable listLoginActivity?: Models.ILoginActivity[] = []\n  constructor() {\n    makeAutoObservable(this)\n  }\n\n  @action fetchLoginActivity() {\n    Services.listLoginActivity().then((list) => {\n      // console.log({ rolMapping: list })\n      this.listLoginActivity = list\n    })\n  }\n}  \nexport default LoginActivityStore\n","import * as Clients from \"@lp/library/clients\"\nimport * as Models from \"../models\"\n\nimport LoginActivityService from './loginActivity-services';\nexport{LoginActivityService}\n\nconst RELATIVE_PATH = \"/auth\"\n\nexport const listLoginActivity = () =>\n  new Promise<Models.ILoginActivity[]>((resolve, reject) => {\n    const client = Clients.createLimsPlusClient()\n    client\n      .get(`${RELATIVE_PATH}/listLoginActivity`)\n      .then((res) => {\n        resolve(res.data.data)\n      })\n      .catch((error) => {\n        reject({ error })\n      })\n  })\n","/* eslint-disable */\nimport React, { useEffect } from \"react\"\nimport { observer } from \"mobx-react\"\nimport * as LibraryComponents from \"@lp/library/components\"\nimport moment from \"moment\"\nimport BootstrapTable from \"react-bootstrap-table-next\"\nimport ToolkitProvider, { Search, CSVExport } from \"react-bootstrap-table2-toolkit\"\nimport paginationFactory from \"react-bootstrap-table2-paginator\"\n\nconst { SearchBar, ClearSearchButton } = Search\nconst { ExportCSVButton } = CSVExport\n\nimport { Stores } from \"../stores\"\nimport { Stores as RootStore } from \"@lp/library/stores\"\n\nconst LoginActivity = observer(() => {\n  useEffect(() => {\n    Stores.loginActivityStore.fetchLoginActivity()\n  }, [])\n  return (\n    <>\n      <LibraryComponents.Atoms.Header>\n        <LibraryComponents.Atoms.PageHeading\n          title={RootStore.routerStore.selectedComponents?.title || \"\"}\n        />\n      </LibraryComponents.Atoms.Header>\n      <div className=\" mx-auto  flex-wrap\">\n        <div className=\"p-2 rounded-lg shadow-xl overflow-auto\">\n          <div style={{ position: \"relative\" }}>\n            <LibraryComponents.Organisms.TableBootstrap\n              id=\"_id\"\n              data={Stores.loginActivityStore.listLoginActivity || []}\n              columns={[\n                {\n                  dataField: \"_id\",\n                  text: \"Id\",\n                  hidden: true,\n                  csvExport: false,\n                },\n                {\n                  dataField: \"user.fullName\",\n                  text: \"User name\",\n                  sort: true,\n                  filter: LibraryComponents.Organisms.Utils.textFilter(),\n                  headerStyle: { minWidth: \"200px\" },\n                  editable: false,\n                },\n                {\n                  dataField: \"user.userId\",\n                  text: \"User Id\",\n                  sort: true,\n                  filter: LibraryComponents.Organisms.Utils.textFilter(),\n                  headerStyle: { minWidth: \"200px\" },\n                },\n                {\n                  dataField: \"user.lab\",\n                  text: \"Lab\",\n                  sort: true,\n                  filter: LibraryComponents.Organisms.Utils.textFilter(),\n                  headerStyle: { minWidth: \"200px\" },\n                },\n                {\n                  dataField: \"user.role\",\n                  text: \"Role\",\n                  sort: true,\n                  filter: LibraryComponents.Organisms.Utils.textFilter(),\n                  headerStyle: { minWidth: \"200px\" },\n                },\n                {\n                  dataField: \"systemInfo.device\",\n                  text: \"Device\",\n                  sort: true,\n                  filter: LibraryComponents.Organisms.Utils.textFilter(),\n                  headerStyle: { minWidth: \"200px\" },\n                },\n                {\n                  dataField: \"systemInfo.v4\",\n                  text: \"Ip Information\",\n                  filter: LibraryComponents.Organisms.Utils.textFilter({\n                    getFilter: (filter) => {\n                      // qualityFilter was assigned once the component has been mounted.\n                      //qualityFilter = filter;\n                    },\n                    onFilter: (filterValue) => {\n                      if (filterValue) {\n                      }\n                    },\n                  }),\n                  headerStyle: { minWidth: \"200px\" },\n                  csvFormatter: (cell, row, rowIndex) =>\n                    `Ip:${row.systemInfo.ipInfo.ip}, Address:${row.systemInfo.ipInfo.city}, ${row.systemInfo.ipInfo.region}, ${row.systemInfo.ipInfo.country}, Location:${row.systemInfo.ipInfo.ll}`,\n                  formatter: (cell, row) => {\n                    return (\n                      <>\n                        <div>\n                          <h6>Ip: {row.systemInfo.ipInfo.ip}</h6>\n                          {row.systemInfo.ipInfo.city && (\n                            <>\n                              <h6>\n                                Address:{\" \"}\n                                {`${row.systemInfo.ipInfo.city}, ${row.systemInfo.ipInfo.region}, ${row.systemInfo.ipInfo.country}`}\n                              </h6>\n                              <h6>Location: {`${row.systemInfo.ipInfo.ll}`}</h6>\n                            </>\n                          )}\n                        </div>\n                      </>\n                    )\n                  },\n                },\n\n                {\n                  dataField: \"dateOfEntry\",\n                  text: \"In\",\n                  sort: true,\n                  filter: LibraryComponents.Organisms.Utils.textFilter(),\n                  headerStyle: { minWidth: \"200px\" },\n                  formatter: (cell, row) => {\n                    return moment(row.dateOfEntry).format(\"YYYY-MM-DD h:mm:ss a\")\n                  },\n                },\n                {\n                  dataField: \"lastUpdated\",\n                  text: \"Out\",\n                  sort: true,\n                  formatter: (cell, row) => {\n                    return row.lastUpdated !== undefined\n                      ? moment(row.lastUpdated).format(\"YYYY-MM-DD h:mm:ss a\")\n                      : \"Active User\"\n                  },\n                },\n              ]}\n              isEditModify={false}\n              isSelectRow={false}\n              fileName=\"Login Activity\"\n              // onSelectedRow={(rows) => {\n              //   props.onSelectedRow &&\n              //     props.onSelectedRow(rows.map((item: any) => item._id))\n              // }}\n              // onUpdateItem={(value: any, dataField: string, id: string) => {\n              //   props.onUpdateItem && props.onUpdateItem(value, dataField, id)\n              // }}\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  )\n})\n\nexport default LoginActivity\n"],"sourceRoot":""}