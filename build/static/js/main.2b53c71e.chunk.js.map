{"version":3,"sources":["features/collection/department/stores/index.ts","features/collection/roles/stores/index.ts","features/banner/stores/index.ts","library/assets/index.ts","config/styles.ts","config/api.ts","library/clients/limsplus-client.ts","library/clients/storage-client.ts","features/users/scenes/Users.tsx","library/assets/applogo.jpg","features/changePassword/scenes/changePassword.tsx","features/collection/labs/util/validation.ts","features/collection/labs/scenes/Lab.tsx","features/collection/deginisation/util/validation.ts","features/collection/deginisation/scenes/deginisation.tsx","features/collection/department/util/validation.ts","features/collection/department/scenes/department.tsx","library/models/index.ts","features/banner/scenes/banner.tsx","library/stores/rootStore.ts","library/stores/index.ts","library/components/list.tsx","library/components/form.tsx","library/components/button.tsx","library/components/icon.tsx","library/components/grid.tsx","library/components/modal/modalChangePassword.tsx","library/components/modal/modalConfirm.tsx","library/components/header.tsx","library/components/page-heading.tsx","features/users/services/index.ts","redux/reducers/sidebarReducers.ts","redux/reducers/layoutReducer.ts","redux/reducers/themeReducer.ts","redux/reducers/index.ts","redux/constants.ts","redux/store/index.ts","layouts/components/Loader.tsx","layouts/components/Async.tsx","routes/index.ts","layouts/components/Wrapper.tsx","layouts/components/Sidebar.tsx","layouts/components/Main.tsx","layouts/components/Navbar.tsx","redux/actions/sidebarActions.ts","layouts/components/Content.tsx","layouts/components/Footer.tsx","layouts/components/Settings.tsx","redux/actions/layoutActions.ts","layouts/Dashboard.tsx","layouts/Landing.tsx","layouts/Auth.tsx","features/login/scenes/Page404.tsx","layouts/components/ScrollToTop.tsx","routes/Routes.tsx","App.tsx","index.tsx","features/dashborad/scenes/dashbord.tsx","features/dashborad/index.ts","features/banner/index.ts","features/collection/labs/index.ts","features/collection/deginisation/index.ts","features/collection/department/index.ts","features/collection/roles/util/validation.ts","features/collection/roles/scenes/role.tsx","features/collection/roles/index.ts","features/users/pipes/index.ts","features/users/index.ts","features/login/index.ts","features/changePassword/index.ts","features/collection/labs/services/index.ts","features/collection/deginisation/services/index.ts","features/collection/department/services/index.ts","features/collection/roles/services/index.ts","features/banner/services/index.ts","features/login/scenes/login.tsx","library/utils/array.ts","library/utils/validation.ts","library/utils/utilites.ts","features/users/stores/index.ts","features/collection/labs/stores/index.ts","features/collection/deginisation/stores/index.ts"],"names":["DepartmentStore","version","lab","code","name","Services","then","res","console","log","department","listDepartment","this","init","observable","ignore","action","RoleStore","role","listRole","BannerStore","banner","listBanner","COLORS","LIMSPLUS_API_HOST","createLimsPlusClient","token","Axios","create","baseURL","Config","headers","getItem","key","Promise","resolve","reject","a","result","window","localStorage","JSON","parse","setItem","value","stringify","SearchBar","Search","ClearSearchButton","ExportCSVButton","CSVExport","Users","observer","rootStore","React","useContext","Contexts","useState","errors","setErrors","deleteUser","setDeleteUser","useEffect","userStore","loadUser","afterSaveCell","oldValue","newValue","row","column","dataField","id","_id","data","LibraryComponents","success","fluid","title","subTitle","className","cols","direction","space","justify","fill","Input","label","placeholder","user","userId","onChange","Utils","single","updateUser","onBlur","length","setExitsUserId","checkExitsUserId","InputWrapper","e","target","selected","labStore","listLabs","map","item","index","type","password","deginisation","deginisationStore","listDeginisation","description","InputRadio","values","status","fullName","departmentStore","InputDate","moment","exipreDate","format","date","Date","add","exipreDays","formatDate","size","onClick","roleStore","align","icon","Save","undefined","warning","setProcessLoading","Features","Pipes","addUser","clear","Remove","style","overflowX","keyField","userList","columns","text","sort","editable","width","editorRenderer","editorProps","rowIndex","columnIndex","formatter","cell","editor","Type","SELECT","getOptions","csvExport","cellContent","show","body","search","exportCSV","fileName","noAutoBOM","blobType","props","searchProps","csvProps","baseProps","noDataIndication","hover","cellEdit","cellEditFactory","mode","blurToSave","ModalConfirm","click","module","exports","ChangePassword","history","useHistory","changePassword","setChangePassword","Clients","isLogin","changePass","ModalChangePassword","Object","assign","push","error","close","constraintsLabs","presence","minimum","message","Lab","RootStoreContext","deleteItem","setDeleteItem","labs","Util","updateLabs","fetchListLab","constraintsDeginisation","Deginisation","updateDescription","fetchListDeginisation","constraintsDepartment","Container","updateDepartment","fetchListDepartment","StatusCode","Banner","bannerStore","updateBanner","InputFile","image","files","LibraryModels","CREATED","setTimeout","location","reload","src","alt","fetchListBanner","store","processLoading","UsersStore","LabStore","DeginisationStore","corporate","primary","secondary","tertiary","info","danger","modern","classic","AsyncTrunk","RootStore","storage","storageKey","delay","fetchListRole","createContext","List","spacingClass","paddingClass","padding","backgroundClass","background","alignClass","justifyClass","fillClass","children","Label","htmlFor","required","disabled","autoComplete","checked","SelectOption","MultilineInput","rows","Button","buttonSizeClass","buttonColorClass","roundedClass","pill","Icon","buttonOffset","getIconClass","iconSizeClass","iconColorClass","stroke","viewBox","xmlns","strokeLinecap","strokeLinejoin","strokeWidth","d","Add","Check","Plus","aria-hidden","Spinner","cx","cy","r","stroke-width","Tick","small","Grid","oldPassword","updateChangePassword","newPassword","confirmPassword","transition","showModal","setShowModal","Header","PageHeading","onLogin","post","catch","get","delete","updateUserSingleFiled","userInfo","initialState","isOpen","isSticky","isBoxed","themes","currentTheme","combineReducers","sidebar","state","actions","layout","theme","payload","toastr","createStore","rootReducer","Loader","Row","color","asyncComponent","importComponent","component","default","setState","C","Component","Default","async","Collection_Lab","Collection_Deginisation","Collection_Department","Collection_Role","User","loginRoutes","path","Login","dashboardRoutes","header","SlidersIcon","bannerRoutes","LayoutIcon","collectionRoutes","userRoutes","dashboard","login","connect","SidebarCategory","withRouter","badgeColor","badgeText","to","pathname","indexOf","data-toggle","aria-expanded","Badge","Collapse","SidebarItem","activeClassName","Sidebar","pathName","_routes","routes","forEach","route","isActive","open","isHome","containsHome","initOpenRoutes","openRoutes","setOpenRoutes","href","category","Fragment","keys","toggle","inputLogin","faCircle","Main","classNames","notifications","time","messages","avatar","NavbarDropdown","count","showBadge","footer","UncontrolledDropdown","nav","inNavbar","DropdownToggle","DropdownMenu","right","ListGroup","DropdownItem","NavbarDropdownItem","spacing","ListGroupItem","noGutters","Col","xs","app","dispatch","Navbar","light","expand","Form","inline","aria-label","navbar","Nav","MessageCircle","BellOff","caret","divider","clearLogin","Content","Footer","getFullYear","Settings","setWrapperRef","bind","handleClickOutside","document","addEventListener","removeEventListener","node","event","ref","toggleSidebar","tag","faAngleRight","Dashboard","Landing","Auth","sm","md","lg","Page404","ScrollToTop","prevProps","scrollTo","childRoutes","Layout","exact","render","Routes","LandingLayout","DashboardLayout","App","Assets","Item","interval","innerWidth","height","innerHeight","Caption","updateInputUser","navigate","moduleKeys","moduleFeatures","modulesArray","moduleKey","sceneMap","Map","moduleObject","Scenes","sceneKey","set","featuresArray","Definition","feature","group","items","filter","timeOut","newestOnTop","position","transitionIn","transitionOut","progressBar","closeOnToastrClick","BOTTOM_RIGHT","ReactDOM","StrictMode","getElementById","Dashbord","Stores","constraintsRole","updateRole","loginStore","addLab","deleteLab","addDeginisation","deleteDeginisation","adddepartment","deletedepartment","addrole","deleterole","addBanner","form","FormData","append","Accept","deleteBanner","flatten","array","concat","unique","Array","from","Set","validate","extend","validators","datetime","options","utc","dateOnly","constraintsLogin","pattern","constraintsChangePassword","constraintsUser","earliest","subtract","checkNotUndefined","object","initUser","initLogin","initLab"],"mappings":"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","file":"static/js/main.2b53c71e.chunk.js","sourcesContent":["import { version, ignore } from \"mobx-sync\";\r\nimport { action, observable } from \"mobx\";\r\nimport * as Models from \"../models\";\r\nimport * as Services from \"../services\";\r\n\r\n@version(0.1)\r\nclass DepartmentStore {\r\n  @observable listDepartment: Models.IDepartment[] = [];\r\n  @ignore @observable department?: Models.IDepartment;\r\n\r\n  private init() {\r\n    return {\r\n      lab: \"\",\r\n      code: \"\",\r\n      name: \"\",\r\n    };\r\n  }\r\n\r\n  fetchListDepartment() {\r\n    Services.listDepartment().then((res) => {\r\n      console.log({ department: res });\r\n      this.listDepartment = res;\r\n    });\r\n  }\r\n\r\n  @action updateDepartment = (department: Models.IDepartment) => {\r\n    this.department = department;\r\n  };\r\n\r\n  @action clear() {\r\n    this.department = this.init();\r\n  }\r\n}\r\n\r\nexport default DepartmentStore;\r\n","import { version, ignore } from \"mobx-sync\";\r\nimport { action, observable } from \"mobx\";\r\nimport * as Models from \"../models\";\r\nimport * as Services from \"../services\";\r\n\r\n@version(0.1)\r\nclass RoleStore {\r\n  @observable listRole: Models.IRole[] = [];\r\n  @ignore @observable role?: Models.IRole;\r\n\r\n  private init() {\r\n    return {\r\n      code: \"\",\r\n      name: \"\",\r\n    };\r\n  }\r\n\r\n  fetchListRole() {\r\n    Services.listRole().then((res) => {\r\n      console.log({ role: res });\r\n      this.listRole = res;\r\n    });\r\n  }\r\n\r\n  @action updateRole = (role: Models.IRole) => {\r\n    this.role = role;\r\n  };\r\n\r\n  @action clear() {\r\n    this.role = this.init();\r\n  }\r\n}\r\n\r\nexport default RoleStore;\r\n","import { version, ignore } from \"mobx-sync\";\r\nimport { action, observable } from \"mobx\";\r\nimport * as Models from \"../models\";\r\nimport * as Services from \"../services\";\r\n\r\n@version(0.1)\r\nclass BannerStore {\r\n  @ignore @observable banner?: Models.IBanner;\r\n  @observable listBanner: Models.IBanner[] = [];\r\n  @action fetchListBanner() {\r\n    Services.listBanner().then((banner) => {\r\n      console.log({ banner });\r\n      this.listBanner = banner;\r\n    });\r\n  }\r\n  @action updateBanner = (banner: Models.IBanner) => {\r\n    this.banner = banner;\r\n  };\r\n}\r\nexport default BannerStore;\r\n","import logo from \"./applogo.jpg\";\n\nexport { logo };\n","export enum COLORS {\n  PRIMARY = \"#454CBF\",\n  SECONDARY = \"#C57C85\",\n  ACCENT = \"#422a68\",\n  BLACK = \"#000000\",\n  GREY_0 = \"#4A4A4A\",\n  GREY_1 = \"#707070\",\n  LIGHT_1 = \"#EbEbEb\",\n  WHITE = \"#FFFFFF\",\n  BACKGROUND = \"#FFFFFF\",\n  RED = \"#FF0000\",\n  LIGHT_WHITE = \"#F4F6F6\",\n  ORANGE = \"#ffae1a\",\n  MONO = \"#754C00\",\n}\n","//export const LIMSPLUS_API_HOST = \"http://localhost:8080/api\";\r\nexport const LIMSPLUS_API_HOST = \"https://limsplus-api.azurewebsites.net/api\";\r\n","import Axios from \"axios\";\r\n\r\nimport * as Config from \"@lp/config\";\r\n\r\nexport default function createLimsPlusClient(token?: string) {\r\n  return Axios.create({\r\n    baseURL: Config.Api.LIMSPLUS_API_HOST,\r\n    headers: {\r\n      \"x-limsplus-Key\":  \r\n        token ||\r\n        \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzM4NCJ9.eyJsYWIiOiJEUiBMQUwgUEFUSExBQlMgLSBERUxISSIsInVzZXJJZCI6IjEyMzQ1NiJ9.OqExKrvy2AdzunV942z7U23shX7A0AJZrrIhi2qmq3rUFk9bXCrTRGdoa2k1k2iT\",\r\n    },\r\n  });\r\n}\r\n","export function getItem<T>(key: string): Promise<T> {\r\n  return new Promise<T>(async (resolve, reject) => {\r\n    const result = window && window.localStorage.getItem(key);\r\n    if (!result) {\r\n      reject();\r\n    } else {\r\n      resolve((await JSON.parse(result)) as T);\r\n    }\r\n  });\r\n}\r\n\r\nexport function setItem(key: string, value: any): Promise<boolean> {\r\n  return new Promise<boolean>(async (resolve, reject) => {\r\n    (await window) && window.localStorage.setItem(key, JSON.stringify(value));\r\n    resolve(true);\r\n  });\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport * as LibraryComponents from \"@lp/library/components\";\r\nimport * as Models from \"../models\";\r\nimport * as Utils from \"@lp/library/utils\";\r\nimport moment from \"moment\";\r\nimport * as Features from \"@lp/features\";\r\nimport Contexts from \"@lp/library/stores\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport cellEditFactory, { Type } from \"react-bootstrap-table2-editor\";\r\nimport ToolkitProvider, {\r\n  Search,\r\n  CSVExport,\r\n} from \"react-bootstrap-table2-toolkit\";\r\nimport * as Services from \"../services\";\r\nimport { Container } from \"reactstrap\";\r\n\r\nconst { SearchBar, ClearSearchButton } = Search;\r\nconst { ExportCSVButton } = CSVExport;\r\n\r\nconst Users = observer(() => {\r\n  const rootStore = React.useContext(Contexts.rootStore);\r\n  const [errors, setErrors] = useState<Models.Users>();\r\n  const [deleteUser, setDeleteUser] = useState<any>({});\r\n\r\n  useEffect(() => {\r\n    rootStore.userStore.loadUser();\r\n  }, []);\r\n\r\n  const afterSaveCell = (oldValue, newValue, row, column) => {\r\n    if (oldValue !== newValue) {\r\n      Services.updateUserSingleFiled({\r\n        newValue,\r\n        dataField: column.dataField,\r\n        id: row._id,\r\n      }).then((res) => {\r\n        if (res.data) {\r\n          rootStore.userStore.loadUser();\r\n          LibraryComponents.ToastsStore.success(`User update.`);\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container fluid>\r\n        <LibraryComponents.Header>\r\n          <LibraryComponents.PageHeading\r\n            title=\"User\"\r\n            subTitle=\"Add, Edit & Delete User\"\r\n          />\r\n        </LibraryComponents.Header>\r\n        <div className=\" mx-auto  p-4  flex-wrap\">\r\n          <div className=\"m-1 p-2 rounded-lg shadow-xl\">\r\n            <LibraryComponents.Grid cols={2}>\r\n              <LibraryComponents.List\r\n                direction=\"col\"\r\n                space={4}\r\n                justify=\"stretch\"\r\n                fill\r\n              >\r\n                <LibraryComponents.Form.Input\r\n                  label=\"User Id\"\r\n                  id=\"userId\"\r\n                  placeholder=\"User Id\"\r\n                  value={rootStore.userStore.user.userId}\r\n                  onChange={(userId) => {\r\n                    setErrors({\r\n                      ...errors,\r\n                      userId: Utils.validate.single(\r\n                        userId,\r\n                        Utils.constraintsUser.userId\r\n                      ),\r\n                    });\r\n                    rootStore.userStore.updateUser({\r\n                      ...rootStore.userStore.user,\r\n                      userId,\r\n                    });\r\n                  }}\r\n                  onBlur={(userId) => {\r\n                    Services.checkExitsUserId(userId).then((res) => {\r\n                      if (res)\r\n                        if (res.length > 0)\r\n                          rootStore.userStore.setExitsUserId(true);\r\n                        else rootStore.userStore.setExitsUserId(false);\r\n                    });\r\n                  }}\r\n                />\r\n                {errors?.userId && (\r\n                  <span className=\"text-red-600 font-medium relative\">\r\n                    {errors.userId}\r\n                  </span>\r\n                )}\r\n                {rootStore.userStore.checkExitsUserId && (\r\n                  <span className=\"text-red-600 font-medium relative\">\r\n                    UserId already exits. Please use other userid.\r\n                  </span>\r\n                )}\r\n\r\n                <LibraryComponents.Form.InputWrapper label=\"Lab\" id=\"lab\">\r\n                  <select\r\n                    name=\"lab\"\r\n                    className=\"leading-4 p-2 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-base border border-gray-300 rounded-md\"\r\n                    onChange={(e) => {\r\n                      const lab = e.target.value;\r\n                      setErrors({\r\n                        ...errors,\r\n                        lab: Utils.validate.single(\r\n                          lab,\r\n                          Utils.constraintsUser.lab\r\n                        ),\r\n                      });\r\n                      rootStore.userStore.updateUser({\r\n                        ...rootStore.userStore.user,\r\n                        lab,\r\n                      });\r\n                    }}\r\n                  >\r\n                    <option selected>Select</option>\r\n                    {rootStore.labStore.listLabs.map(\r\n                      (item: any, index: number) => (\r\n                        <option key={item.name} value={item.code}>\r\n                          {item.name}\r\n                        </option>\r\n                      )\r\n                    )}\r\n                  </select>\r\n                </LibraryComponents.Form.InputWrapper>\r\n                {errors?.lab && (\r\n                  <span className=\"text-red-600 font-medium relative\">\r\n                    {errors.lab}\r\n                  </span>\r\n                )}\r\n                <LibraryComponents.Form.Input\r\n                  label=\"Password\"\r\n                  name=\"password\"\r\n                  type=\"password\"\r\n                  placeholder=\"Password\"\r\n                  value={rootStore.userStore.user.password}\r\n                  onChange={(password) => {\r\n                    setErrors({\r\n                      ...errors,\r\n                      password: Utils.validate.single(\r\n                        password,\r\n                        Utils.constraintsUser.password\r\n                      ),\r\n                    });\r\n                    rootStore.userStore.updateUser({\r\n                      ...rootStore.userStore.user,\r\n                      password,\r\n                    });\r\n                  }}\r\n                />\r\n                {errors?.password && (\r\n                  <span className=\"text-red-600 font-medium relative\">\r\n                    {errors.password}\r\n                  </span>\r\n                )}\r\n                <LibraryComponents.Form.InputWrapper\r\n                  label=\"Deginisation\"\r\n                  id=\"deginisation\"\r\n                >\r\n                  <select\r\n                    name=\"deginisation\"\r\n                    className=\"leading-4 p-2 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-base border border-gray-300 rounded-md\"\r\n                    onChange={(e) => {\r\n                      const deginisation = e.target.value;\r\n                      setErrors({\r\n                        ...errors,\r\n                        deginisation:\r\n                          deginisation !== \"\"\r\n                            ? Utils.validate.single(\r\n                                deginisation,\r\n                                Utils.constraintsUser.deginisation\r\n                              )\r\n                            : \"Deginisation requried\",\r\n                      });\r\n                      rootStore.userStore.updateUser({\r\n                        ...rootStore.userStore.user,\r\n                        deginisation,\r\n                      });\r\n                    }}\r\n                  >\r\n                    <option selected>Select</option>\r\n                    {rootStore.deginisationStore.listDeginisation.map(\r\n                      (item: any, index: number) => (\r\n                        <option key={item.description} value={item.code}>\r\n                          {item.description}\r\n                        </option>\r\n                      )\r\n                    )}\r\n                  </select>\r\n                </LibraryComponents.Form.InputWrapper>\r\n                {errors?.deginisation && (\r\n                  <span className=\"text-red-600 font-medium relative\">\r\n                    {errors.deginisation}\r\n                  </span>\r\n                )}\r\n                <LibraryComponents.Form.InputRadio\r\n                  label=\"Status\"\r\n                  name=\"status\"\r\n                  values={[\"Active\", \"Retired\", \"Disable\"]}\r\n                  value={rootStore.userStore.user.status}\r\n                  onChange={(status) => {\r\n                    setErrors({\r\n                      ...errors,\r\n                      status:\r\n                        status !== \"\"\r\n                          ? Utils.validate.single(\r\n                              status,\r\n                              Utils.constraintsUser.status\r\n                            )\r\n                          : \"Status requried\",\r\n                    });\r\n                    rootStore.userStore.updateUser({\r\n                      ...rootStore.userStore.user,\r\n                      status,\r\n                    });\r\n                  }}\r\n                />\r\n              </LibraryComponents.List>\r\n              <LibraryComponents.List\r\n                direction=\"col\"\r\n                space={4}\r\n                justify=\"stretch\"\r\n                fill\r\n              >\r\n                <LibraryComponents.Form.Input\r\n                  label=\"Full Name\"\r\n                  id=\"fullName\"\r\n                  placeholder=\"Full Name\"\r\n                  value={rootStore.userStore.user.fullName}\r\n                  onChange={(fullName) => {\r\n                    setErrors({\r\n                      ...errors,\r\n                      fullName:\r\n                        fullName !== \"\"\r\n                          ? Utils.validate.single(\r\n                              fullName,\r\n                              Utils.constraintsUser.fullName\r\n                            )\r\n                          : \"Full Name required!\",\r\n                    });\r\n                    rootStore.userStore.updateUser({\r\n                      ...rootStore.userStore.user,\r\n                      fullName,\r\n                    });\r\n                  }}\r\n                />\r\n                {errors?.fullName && (\r\n                  <span className=\"text-red-600 font-medium relative\">\r\n                    {errors.fullName}\r\n                  </span>\r\n                )}\r\n\r\n                <LibraryComponents.Form.InputWrapper\r\n                  label=\"Department\"\r\n                  id=\"department\"\r\n                >\r\n                  <select\r\n                    name=\"department\"\r\n                    className=\"leading-4 p-2 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-base border border-gray-300 rounded-md\"\r\n                    onChange={(e) => {\r\n                      const department = e.target.value;\r\n                      setErrors({\r\n                        ...errors,\r\n                        department:\r\n                          department !== \"\"\r\n                            ? Utils.validate.single(\r\n                                department,\r\n                                Utils.constraintsUser.department\r\n                              )\r\n                            : \"Department required!\",\r\n                      });\r\n                      rootStore.userStore.updateUser({\r\n                        ...rootStore.userStore.user,\r\n                        department,\r\n                      });\r\n                    }}\r\n                  >\r\n                    <option selected>Select</option>\r\n                    {rootStore.departmentStore.listDepartment.map(\r\n                      (item: any, index: number) => (\r\n                        <option key={item.name} value={item.code}>\r\n                          {item.name}\r\n                        </option>\r\n                      )\r\n                    )}\r\n                  </select>\r\n                </LibraryComponents.Form.InputWrapper>\r\n                {errors?.department && (\r\n                  <span className=\"text-red-600 font-medium relative\">\r\n                    {errors.department}\r\n                  </span>\r\n                )}\r\n\r\n                <LibraryComponents.List space={3} direction=\"row\">\r\n                  <LibraryComponents.Form.InputDate\r\n                    label=\"Exipre Date\"\r\n                    id=\"exipreData\"\r\n                    value={moment(rootStore.userStore.user.exipreDate).format(\r\n                      \"YYYY-MM-DD\"\r\n                    )}\r\n                    onChange={(e: any) => {\r\n                      let date = new Date(e.target.value);\r\n                      date = new Date(\r\n                        moment(date)\r\n                          .add(rootStore.userStore.user.exipreDays, \"days\")\r\n                          .format(\"YYYY-MM-DD HH:mm\")\r\n                      );\r\n                      const formatDate = moment(date).format(\r\n                        \"YYYY-MM-DD HH:mm\"\r\n                      );\r\n                      setErrors({\r\n                        ...errors,\r\n                        exipreDate: Utils.validate.single(\r\n                          formatDate,\r\n                          Utils.constraintsUser.exipreDate\r\n                        ),\r\n                      });\r\n                      rootStore.userStore.updateUser({\r\n                        ...rootStore.userStore.user,\r\n                        exipreDate: new Date(formatDate),\r\n                      });\r\n                    }}\r\n                  />\r\n                  {errors?.exipreDate && (\r\n                    <span className=\"text-red-600 font-medium relative\">\r\n                      {errors.exipreDate}\r\n                    </span>\r\n                  )}\r\n\r\n                  <LibraryComponents.Form.Input\r\n                    type=\"number\"\r\n                    label=\"Exipre Days\"\r\n                    id=\"exipreDays\"\r\n                    placeholder=\"Exipre Days\"\r\n                    value={rootStore.userStore.user.exipreDays}\r\n                    onChange={(exipreDays) => {\r\n                      setErrors({\r\n                        ...errors,\r\n                        exipreDays:\r\n                          exipreDays !== \"\"\r\n                            ? Utils.validate.single(\r\n                                exipreDays,\r\n                                Utils.constraintsUser.exipreDays\r\n                              )\r\n                            : \"Exipre Days required!\",\r\n                      });\r\n                      rootStore.userStore.updateUser({\r\n                        ...rootStore.userStore.user,\r\n                        exipreDays,\r\n                      });\r\n                    }}\r\n                  />\r\n\r\n                  <LibraryComponents.Button\r\n                    size=\"small\"\r\n                    type=\"solid\"\r\n                    onClick={() => {\r\n                      const date = new Date(\r\n                        moment(rootStore.userStore.user.exipreDate)\r\n                          .add(rootStore.userStore.user.exipreDays, \"days\")\r\n                          .format(\"YYYY-MM-DD HH:mm\")\r\n                      );\r\n                      const exipreDate = new Date(\r\n                        moment(date).format(\"YYYY-MM-DD HH:mm\")\r\n                      );\r\n                      rootStore.userStore.updateUser({\r\n                        ...rootStore.userStore.user,\r\n                        exipreDate,\r\n                      });\r\n                    }}\r\n                  >\r\n                    Apply Days\r\n                  </LibraryComponents.Button>\r\n                  {errors?.exipreDays && (\r\n                    <span className=\"text-red-600 font-medium relative\">\r\n                      {errors.exipreDays}\r\n                    </span>\r\n                  )}\r\n                </LibraryComponents.List>\r\n\r\n                <LibraryComponents.Form.InputWrapper label=\"Role\" id=\"role\">\r\n                  <select\r\n                    name=\"role\"\r\n                    className=\"leading-4 p-2 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-base border border-gray-300 rounded-md\"\r\n                    onChange={(e) => {\r\n                      const role = e.target.value;\r\n                      setErrors({\r\n                        ...errors,\r\n                        role:\r\n                          role !== \"\"\r\n                            ? Utils.validate.single(\r\n                                role,\r\n                                Utils.constraintsUser.role\r\n                              )\r\n                            : \"Role required!\",\r\n                      });\r\n                      rootStore.userStore.updateUser({\r\n                        ...rootStore.userStore.user,\r\n                        role,\r\n                      });\r\n                    }}\r\n                  >\r\n                    <option selected>Select</option>\r\n                    {rootStore.roleStore.listRole.map(\r\n                      (item: any, index: number) => (\r\n                        <option key={item.description} value={item.code}>\r\n                          {item.description}\r\n                        </option>\r\n                      )\r\n                    )}\r\n                  </select>\r\n                </LibraryComponents.Form.InputWrapper>\r\n                {errors?.role && (\r\n                  <span className=\"text-red-600 font-medium relative\">\r\n                    {errors.role}\r\n                  </span>\r\n                )}\r\n              </LibraryComponents.List>\r\n            </LibraryComponents.Grid>\r\n            <br />\r\n\r\n            <LibraryComponents.List direction=\"row\" space={3} align=\"center\">\r\n              <LibraryComponents.Button\r\n                size=\"medium\"\r\n                type=\"solid\"\r\n                icon={LibraryComponents.Icons.Save}\r\n                onClick={() => {\r\n                  if (\r\n                    Utils.validate(\r\n                      rootStore.userStore.user,\r\n                      Utils.constraintsLogin\r\n                    ) === undefined &&\r\n                    !rootStore.userStore.checkExitsUserId\r\n                  ) {\r\n                    rootStore.setProcessLoading(true);\r\n                    Features.Users.Pipes.addUser(rootStore.userStore).then(\r\n                      (res) => {\r\n                        rootStore.setProcessLoading(false);\r\n                        LibraryComponents.ToastsStore.success(`User created.`);\r\n                        rootStore.userStore.clear();\r\n                        rootStore.userStore.loadUser();\r\n                      }\r\n                    );\r\n                  } else {\r\n                    LibraryComponents.ToastsStore.warning(\r\n                      \"Please enter all information!\"\r\n                    );\r\n                  }\r\n                }}\r\n              >\r\n                Save\r\n              </LibraryComponents.Button>\r\n              <LibraryComponents.Button\r\n                size=\"medium\"\r\n                type=\"outline\"\r\n                icon={LibraryComponents.Icons.Remove}\r\n                onClick={() => {\r\n                  rootStore.userStore.clear();\r\n                }}\r\n              >\r\n                Clear\r\n              </LibraryComponents.Button>\r\n            </LibraryComponents.List>\r\n          </div>\r\n          <br />\r\n          <div\r\n            className=\"m-1  rounded-lg shadow-xl\"\r\n            style={{ overflowX: \"scroll\" }}\r\n          >\r\n            <ToolkitProvider\r\n              keyField=\"id\"\r\n              data={rootStore.userStore.userList || []}\r\n              columns={[\r\n                {\r\n                  dataField: \"userId\",\r\n                  text: \"UserId\",\r\n                  sort: true,\r\n                  editable: false,\r\n                  style: { width: 200 },\r\n                },\r\n                {\r\n                  dataField: \"lab\",\r\n                  text: \"Lab\",\r\n                  editorRenderer: (\r\n                    editorProps,\r\n                    value,\r\n                    row,\r\n                    column,\r\n                    rowIndex,\r\n                    columnIndex\r\n                  ) => (\r\n                    <>\r\n                      <select\r\n                        name=\"lab\"\r\n                        className=\"leading-4 p-2 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-base border border-gray-300 rounded-md\"\r\n                        onChange={(e) => {\r\n                          const lab = e.target.value;\r\n                          Services.updateUserSingleFiled({\r\n                            newValue: lab,\r\n                            dataField: column.dataField,\r\n                            id: row._id,\r\n                          }).then((res) => {\r\n                            if (res.data) {\r\n                              rootStore.userStore.loadUser();\r\n                              LibraryComponents.ToastsStore.success(\r\n                                `User update.`\r\n                              );\r\n                            }\r\n                          });\r\n                        }}\r\n                      >\r\n                        <option selected>{row.lab}</option>\r\n                        {rootStore.labStore.listLabs.map(\r\n                          (item: any, index: number) => (\r\n                            <option key={item.name} value={item.code}>\r\n                              {item.name}\r\n                            </option>\r\n                          )\r\n                        )}\r\n                      </select>\r\n                    </>\r\n                  ),\r\n                },\r\n                {\r\n                  dataField: \"fullName\",\r\n                  text: \"Full Name\",\r\n                },\r\n                {\r\n                  dataField: \"department\",\r\n                  text: \"Department\",\r\n                  editorRenderer: (\r\n                    editorProps,\r\n                    value,\r\n                    row,\r\n                    column,\r\n                    rowIndex,\r\n                    columnIndex\r\n                  ) => (\r\n                    <>\r\n                      <select\r\n                        name=\"department\"\r\n                        className=\"leading-4 p-2 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-base border border-gray-300 rounded-md\"\r\n                        onChange={(e) => {\r\n                          const department = e.target.value;\r\n                          Services.updateUserSingleFiled({\r\n                            newValue: department,\r\n                            dataField: column.dataField,\r\n                            id: row._id,\r\n                          }).then((res) => {\r\n                            if (res.data) {\r\n                              rootStore.userStore.loadUser();\r\n                              LibraryComponents.ToastsStore.success(\r\n                                `User update.`\r\n                              );\r\n                            }\r\n                          });\r\n                        }}\r\n                      >\r\n                        <option selected>{row.department}</option>\r\n                        {rootStore.departmentStore.listDepartment.map(\r\n                          (item: any, index: number) => (\r\n                            <option key={item.name} value={item.code}>\r\n                              {item.name}\r\n                            </option>\r\n                          )\r\n                        )}\r\n                      </select>\r\n                    </>\r\n                  ),\r\n                },\r\n                {\r\n                  dataField: \"deginisation\",\r\n                  text: \"Deginisation\",\r\n                  editorRenderer: (\r\n                    editorProps,\r\n                    value,\r\n                    row,\r\n                    column,\r\n                    rowIndex,\r\n                    columnIndex\r\n                  ) => (\r\n                    <>\r\n                      <select\r\n                        name=\"deginisation\"\r\n                        className=\"leading-4 p-2 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-base border border-gray-300 rounded-md\"\r\n                        onChange={(e) => {\r\n                          const deginisation = e.target.value;\r\n                          Services.updateUserSingleFiled({\r\n                            newValue: deginisation,\r\n                            dataField: column.dataField,\r\n                            id: row._id,\r\n                          }).then((res) => {\r\n                            if (res.data) {\r\n                              rootStore.userStore.loadUser();\r\n                              LibraryComponents.ToastsStore.success(\r\n                                `User update.`\r\n                              );\r\n                            }\r\n                          });\r\n                        }}\r\n                      >\r\n                        <option selected>{row.deginisation}</option>\r\n                        {rootStore.deginisationStore.listDeginisation.map(\r\n                          (item: any, index: number) => (\r\n                            <option key={item.description} value={item.code}>\r\n                              {item.description}\r\n                            </option>\r\n                          )\r\n                        )}\r\n                      </select>\r\n                    </>\r\n                  ),\r\n                },\r\n                {\r\n                  dataField: \"role\",\r\n                  text: \"Role\",\r\n                  editorRenderer: (\r\n                    editorProps,\r\n                    value,\r\n                    row,\r\n                    column,\r\n                    rowIndex,\r\n                    columnIndex\r\n                  ) => (\r\n                    <>\r\n                      <select\r\n                        name=\"role\"\r\n                        className=\"leading-4 p-2 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-base border border-gray-300 rounded-md\"\r\n                        onChange={(e) => {\r\n                          const role = e.target.value;\r\n                          Services.updateUserSingleFiled({\r\n                            newValue: role,\r\n                            dataField: column.dataField,\r\n                            id: row._id,\r\n                          }).then((res) => {\r\n                            if (res.data) {\r\n                              rootStore.userStore.loadUser();\r\n                              LibraryComponents.ToastsStore.success(\r\n                                `User update.`\r\n                              );\r\n                            }\r\n                          });\r\n                        }}\r\n                      >\r\n                        <option selected>{row.role}</option>\r\n                        {rootStore.roleStore.listRole.map(\r\n                          (item: any, index: number) => (\r\n                            <option key={item.description} value={item.code}>\r\n                              {item.description}\r\n                            </option>\r\n                          )\r\n                        )}\r\n                      </select>\r\n                    </>\r\n                  ),\r\n                },\r\n                {\r\n                  text: \"Exipre Date\",\r\n                  dataField: \"exipreDate\",\r\n                  formatter: (cell, row) => {\r\n                    return moment(row.exipreDate).format(\"YYYY-MM-DD\");\r\n                  },\r\n                  editorRenderer: (\r\n                    editorProps,\r\n                    value,\r\n                    row,\r\n                    column,\r\n                    rowIndex,\r\n                    columnIndex\r\n                  ) => (\r\n                    <>\r\n                      <LibraryComponents.Form.InputDate\r\n                        label=\"Exipre Date\"\r\n                        id=\"exipreData\"\r\n                        value={moment(row.exipreDate).format(\"YYYY-MM-DD\")}\r\n                        onChange={(e: any) => {\r\n                          let date = new Date(e.target.value);\r\n                          date = new Date(\r\n                            moment(date).format(\"YYYY-MM-DD HH:mm\")\r\n                          );\r\n                          const formatDate = moment(date).format(\r\n                            \"YYYY-MM-DD HH:mm\"\r\n                          );\r\n\r\n                          Services.updateUserSingleFiled({\r\n                            newValue: new Date(formatDate),\r\n                            dataField: column.dataField,\r\n                            id: row._id,\r\n                          }).then((res) => {\r\n                            if (res.data) {\r\n                              rootStore.userStore.loadUser();\r\n                              LibraryComponents.ToastsStore.success(\r\n                                `User update.`\r\n                              );\r\n                            }\r\n                          });\r\n                        }}\r\n                      />\r\n                    </>\r\n                  ),\r\n                },\r\n                {\r\n                  text: \"Status\",\r\n                  dataField: \"status\",\r\n                  style: {\r\n                    width: 120,\r\n                  },\r\n                  editor: {\r\n                    type: Type.SELECT,\r\n                    getOptions: () => {\r\n                      return [\r\n                        {\r\n                          value: \"Active\",\r\n                          label: \"Active\",\r\n                        },\r\n                        {\r\n                          value: \"Retired\",\r\n                          label: \"Retired\",\r\n                        },\r\n                        {\r\n                          value: \"Disable\",\r\n                          label: \"Disable\",\r\n                        },\r\n                      ];\r\n                    },\r\n                  },\r\n                },\r\n                {\r\n                  dataField: \"opration\",\r\n                  text: \"Delete\",\r\n                  editable: false,\r\n                  csvExport: false,\r\n                  formatter: (cellContent, row) => (\r\n                    <>\r\n                      <LibraryComponents.Button\r\n                        size=\"small\"\r\n                        type=\"outline\"\r\n                        icon={LibraryComponents.Icons.Remove}\r\n                        onClick={() => {\r\n                          setDeleteUser({\r\n                            show: true,\r\n                            id: row._id,\r\n                            title: \"Are you sure?\",\r\n                            body: `Delete ${row.fullName} user!`,\r\n                          });\r\n                        }}\r\n                      >\r\n                        Delete\r\n                      </LibraryComponents.Button>\r\n                    </>\r\n                  ),\r\n                },\r\n              ]}\r\n              search\r\n              exportCSV={{\r\n                fileName: `users_${moment(new Date()).format(\r\n                  \"YYYY-MM-DD HH:mm\"\r\n                )}.csv`,\r\n                noAutoBOM: false,\r\n                blobType: \"text/csv;charset=ansi\",\r\n              }}\r\n            >\r\n              {(props) => (\r\n                <div>\r\n                  <SearchBar {...props.searchProps} />\r\n                  <ClearSearchButton\r\n                    className={`inline-flex ml-4 bg-gray-500 items-center  small outline shadow-sm  font-medium  disabled:opacity-50 disabled:cursor-not-allowed text-center`}\r\n                    {...props.searchProps}\r\n                  />\r\n                  <ExportCSVButton\r\n                    className={`inline-flex ml-2 bg-gray-500 items-center  small outline shadow-sm  font-medium  disabled:opacity-50 disabled:cursor-not-allowed text-center`}\r\n                    {...props.csvProps}\r\n                  >\r\n                    Export CSV!!\r\n                  </ExportCSVButton>\r\n                  <hr />\r\n                  <BootstrapTable\r\n                    {...props.baseProps}\r\n                    noDataIndication=\"Table is Empty\"\r\n                    hover\r\n                    cellEdit={cellEditFactory({\r\n                      mode: \"dbclick\",\r\n                      blurToSave: true,\r\n                      afterSaveCell,\r\n                    })}\r\n                  />\r\n                </div>\r\n              )}\r\n            </ToolkitProvider>\r\n          </div>\r\n          <LibraryComponents.Modal.ModalConfirm\r\n            {...deleteUser}\r\n            click={() => {\r\n              Services.deleteUser(deleteUser.id).then((res: any) => {\r\n                if (res.status) {\r\n                  LibraryComponents.ToastsStore.success(`User deleted.`);\r\n                  setDeleteUser({ show: false });\r\n                  rootStore.userStore.loadUser();\r\n                }\r\n              });\r\n            }}\r\n          />\r\n        </div>\r\n      </Container>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default Users;\r\n","module.exports = __webpack_public_path__ + \"static/media/applogo.fa8b0d4a.jpg\";","import React, { useEffect, useState } from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport * as Clients from \"@lp/library/clients\";\r\nimport * as LibraryComponents from \"@lp/library/components\";\r\nimport * as Services from \"@lp/features/users/services\";\r\nimport Contexts from \"@lp/library/stores\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst ChangePassword = observer(() => {\r\n  const history = useHistory();\r\n  const rootStore = React.useContext(Contexts.rootStore);\r\n  const [changePassword, setChangePassword] = useState(true);\r\n  useEffect(() => {\r\n    Clients.storageClient.getItem(\"isLogin\").then((isLogin: any) => {\r\n      if (isLogin) {\r\n        if (isLogin.changePass !== true) setChangePassword(true);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"max-w-xl mx-auto  py-20  flex-wrap p-4  bg-gray-100 \">\r\n        {changePassword && (\r\n          <LibraryComponents.Modal.ModalChangePassword\r\n            click={() => {\r\n              Clients.storageClient.getItem(\"isLogin\").then((isLogin: any) => {\r\n                Clients.storageClient.setItem(\"isLogin\", {\r\n                  ...isLogin,\r\n                  changePass: true,\r\n                });\r\n                const body = Object.assign(\r\n                  isLogin,\r\n                  rootStore.userStore.changePassword\r\n                );\r\n                Services.changePassword(body).then((res) => {\r\n                  if (res) {\r\n                    LibraryComponents.ToastsStore.success(`Password changed!`);\r\n                    history.push(\"/dashboard\");\r\n                  } else {\r\n                    LibraryComponents.ToastsStore.error(\r\n                      `Please enter correct old password`\r\n                    );\r\n                  }\r\n                });\r\n              });\r\n              setChangePassword(false);\r\n            }}\r\n            close={() => {\r\n              Clients.storageClient.getItem(\"isLogin\").then((isLogin: any) => {\r\n                Clients.storageClient.setItem(\"isLogin\", {\r\n                  ...isLogin,\r\n                  changePass: true,\r\n                });\r\n              });\r\n              history.push(\"/dashboard\");\r\n              setChangePassword(false);\r\n              console.log(\"close\");\r\n            }}\r\n          />\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default ChangePassword;\r\n","import validate from \"validate.js\";\nexport { validate };\nexport const constraintsLabs = {\n  code: {\n    presence: true,\n    length: {\n      minimum: 4,\n      message: \"Code must be least 4 characters \",\n    },\n  },\n  name: {\n    presence: true,\n    length: {\n      minimum: 4,\n      message: \"Name must be least 4 characters\",\n    },\n  },\n};\n","import React, { useState, useContext, useEffect } from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport * as LibraryComponents from \"@lp/library/components\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport cellEditFactory, { Type } from \"react-bootstrap-table2-editor\";\r\nimport ToolkitProvider, {\r\n  Search,\r\n  CSVExport,\r\n} from \"react-bootstrap-table2-toolkit\";\r\nimport moment from \"moment\";\r\n\r\nimport * as Models from \"../models\";\r\nimport * as Util from \"../util\";\r\nimport RootStoreContext from \"@lp/library/stores\";\r\nimport * as Services from \"../services\";\r\n\r\nconst { SearchBar, ClearSearchButton } = Search;\r\nconst { ExportCSVButton } = CSVExport;\r\n\r\nconst Lab = observer(() => {\r\n  const rootStore = useContext(RootStoreContext.rootStore);\r\n  const [errors, setErrors] = useState<Models.Labs>();\r\n  const [deleteItem, setDeleteItem] = useState<any>({});\r\n\r\n  return (\r\n    <>\r\n      <LibraryComponents.Header>\r\n        <LibraryComponents.PageHeading\r\n          title=\"Lab\"\r\n          subTitle=\"Add, Edit & Delete Lab\"\r\n        />\r\n      </LibraryComponents.Header>\r\n      <div className=\" mx-auto  p-4  flex-wrap\">\r\n        <div className=\"m-1 p-2 rounded-lg shadow-xl\">\r\n          <LibraryComponents.Grid cols={2}>\r\n            <LibraryComponents.List\r\n              direction=\"col\"\r\n              space={4}\r\n              justify=\"stretch\"\r\n              fill\r\n            >\r\n              <LibraryComponents.Form.Input\r\n                label=\"Code\"\r\n                id=\"code\"\r\n                placeholder=\"Code\"\r\n                value={rootStore.labStore.labs?.code}\r\n                onChange={(code) => {\r\n                  setErrors({\r\n                    ...errors,\r\n                    code: Util.validate.single(code, Util.constraintsLabs.code),\r\n                  });\r\n                  rootStore.labStore.updateLabs({\r\n                    ...rootStore.labStore.labs,\r\n                    code,\r\n                  });\r\n                }}\r\n              />\r\n              {errors?.code && (\r\n                <span className=\"text-red-600 font-medium relative\">\r\n                  {errors.code}\r\n                </span>\r\n              )}\r\n              <LibraryComponents.Form.Input\r\n                label=\"Name\"\r\n                name=\"name\"\r\n                placeholder=\"Name\"\r\n                value={rootStore.labStore.labs?.name}\r\n                onChange={(name) => {\r\n                  setErrors({\r\n                    ...errors,\r\n                    name: Util.validate.single(name, Util.constraintsLabs.name),\r\n                  });\r\n                  rootStore.labStore.updateLabs({\r\n                    ...rootStore.labStore.labs,\r\n                    name,\r\n                  });\r\n                }}\r\n              />\r\n\r\n              {errors?.name && (\r\n                <span className=\"text-red-600 font-medium relative\">\r\n                  {errors.name}\r\n                </span>\r\n              )}\r\n            </LibraryComponents.List>\r\n          </LibraryComponents.Grid>\r\n          <br />\r\n\r\n          <LibraryComponents.List direction=\"row\" space={3} align=\"center\">\r\n            <LibraryComponents.Button\r\n              size=\"medium\"\r\n              type=\"solid\"\r\n              icon={LibraryComponents.Icons.Save}\r\n              onClick={() => {\r\n                if (\r\n                  Util.validate(\r\n                    rootStore.labStore.labs,\r\n                    Util.constraintsLabs\r\n                  ) === undefined\r\n                ) {\r\n                  rootStore.setProcessLoading(true);\r\n                  Services.addLab(rootStore.labStore.labs).then((res) => {\r\n                    rootStore.setProcessLoading(false);\r\n                    LibraryComponents.ToastsStore.success(`Lab created.`);\r\n                    rootStore.labStore.fetchListLab();\r\n                    rootStore.labStore.clear();\r\n                  });\r\n                } else {\r\n                  LibraryComponents.ToastsStore.warning(\r\n                    \"Please enter all information!\"\r\n                  );\r\n                }\r\n              }}\r\n            >\r\n              Save\r\n            </LibraryComponents.Button>\r\n            <LibraryComponents.Button\r\n              size=\"medium\"\r\n              type=\"outline\"\r\n              icon={LibraryComponents.Icons.Remove}\r\n              onClick={() => {\r\n                rootStore.labStore.clear();\r\n              }}\r\n            >\r\n              Clear\r\n            </LibraryComponents.Button>\r\n          </LibraryComponents.List>\r\n        </div>\r\n        <br />\r\n        <div className=\"m-1 p-2 rounded-lg shadow-xl\">\r\n          <ToolkitProvider\r\n            keyField=\"id\"\r\n            data={rootStore.labStore.listLabs || []}\r\n            columns={[\r\n              {\r\n                dataField: \"code\",\r\n                text: \"Code\",\r\n                sort: true,\r\n              },\r\n              {\r\n                dataField: \"name\",\r\n                text: \"name\",\r\n              },\r\n              {\r\n                dataField: \"opration\",\r\n                text: \"Delete\",\r\n                editable: false,\r\n                csvExport: false,\r\n                formatter: (cellContent, row) => (\r\n                  <>\r\n                    <LibraryComponents.Button\r\n                      size=\"small\"\r\n                      type=\"outline\"\r\n                      icon={LibraryComponents.Icons.Remove}\r\n                      onClick={() => {\r\n                        setDeleteItem({\r\n                          show: true,\r\n                          id: row._id,\r\n                          title: \"Are you sure?\",\r\n                          body: `Delete ${row.name} lab!`,\r\n                        });\r\n                      }}\r\n                    >\r\n                      Delete\r\n                    </LibraryComponents.Button>\r\n                  </>\r\n                ),\r\n              },\r\n            ]}\r\n            search\r\n            exportCSV={{\r\n              fileName: `labs_${moment(new Date()).format(\r\n                \"YYYY-MM-DD HH:mm\"\r\n              )}.csv`,\r\n              noAutoBOM: false,\r\n              blobType: \"text/csv;charset=ansi\",\r\n            }}\r\n          >\r\n            {(props) => (\r\n              <div>\r\n                <SearchBar {...props.searchProps} />\r\n                <ClearSearchButton\r\n                  className={`inline-flex ml-4 bg-gray-500 items-center  small outline shadow-sm  font-medium  disabled:opacity-50 disabled:cursor-not-allowed text-center`}\r\n                  {...props.searchProps}\r\n                />\r\n                <ExportCSVButton\r\n                  className={`inline-flex ml-2 bg-gray-500 items-center  small outline shadow-sm  font-medium  disabled:opacity-50 disabled:cursor-not-allowed text-center`}\r\n                  {...props.csvProps}\r\n                >\r\n                  Export CSV!!\r\n                </ExportCSVButton>\r\n                <br />\r\n                <BootstrapTable\r\n                  {...props.baseProps}\r\n                  noDataIndication=\"Table is Empty\"\r\n                  hover\r\n                  // cellEdit={cellEditFactory({\r\n                  //   mode: \"dbclick\",\r\n                  //   blurToSave: true,\r\n                  //   // afterSaveCell,\r\n                  // })}\r\n                />\r\n              </div>\r\n            )}\r\n          </ToolkitProvider>\r\n        </div>\r\n        <LibraryComponents.Modal.ModalConfirm\r\n          {...deleteItem}\r\n          click={() => {\r\n            Services.deleteLab(deleteItem.id).then((res: any) => {\r\n              if (res.status) {\r\n                LibraryComponents.ToastsStore.success(`Lab deleted.`);\r\n                setDeleteItem({ show: false });\r\n                rootStore.labStore.fetchListLab();\r\n              }\r\n            });\r\n          }}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default Lab;\r\n","import validate from \"validate.js\";\r\nexport { validate };\r\nexport const constraintsDeginisation = {\r\n  code: {\r\n    presence: true,\r\n    length: {\r\n      minimum: 4,\r\n      message: \"Code must be least 4 characters \",\r\n    },\r\n  },\r\n  description: {\r\n    presence: true,\r\n    length: {\r\n      minimum: 4,\r\n      message: \"Description must be least 4 characters\",\r\n    },\r\n  },\r\n};\r\n","import React, { useState, useContext, useEffect } from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport * as LibraryComponents from \"@lp/library/components\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport cellEditFactory, { Type } from \"react-bootstrap-table2-editor\";\r\nimport ToolkitProvider, {\r\n  Search,\r\n  CSVExport,\r\n} from \"react-bootstrap-table2-toolkit\";\r\nimport moment from \"moment\";\r\n\r\nimport * as Models from \"../models\";\r\nimport * as Util from \"../util\";\r\nimport RootStoreContext from \"@lp/library/stores\";\r\nimport * as Services from \"../services\";\r\n\r\nconst { SearchBar, ClearSearchButton } = Search;\r\nconst { ExportCSVButton } = CSVExport;\r\n\r\nconst Deginisation = observer(() => {\r\n  const rootStore = useContext(RootStoreContext.rootStore);\r\n  const [errors, setErrors] = useState<Models.IDeginisation>();\r\n  const [deleteItem, setDeleteItem] = useState<any>({});\r\n\r\n  return (\r\n    <>\r\n      <LibraryComponents.Header>\r\n        <LibraryComponents.PageHeading\r\n          title=\"Deginisation\"\r\n          subTitle=\"Add, Edit & Delete Deginisation\"\r\n        />\r\n      </LibraryComponents.Header>\r\n      <div className=\" mx-auto  p-4  flex-wrap\">\r\n        <div className=\"m-1 p-2 rounded-lg shadow-xl\">\r\n          <LibraryComponents.Grid cols={2}>\r\n            <LibraryComponents.List\r\n              direction=\"col\"\r\n              space={4}\r\n              justify=\"stretch\"\r\n              fill\r\n            >\r\n              <LibraryComponents.Form.Input\r\n                label=\"Code\"\r\n                id=\"code\"\r\n                placeholder=\"Code\"\r\n                value={rootStore.deginisationStore.deginisation?.code}\r\n                onChange={(code) => {\r\n                  setErrors({\r\n                    ...errors,\r\n                    code: Util.validate.single(\r\n                      code,\r\n                      Util.constraintsDeginisation.code\r\n                    ),\r\n                  });\r\n                  rootStore.deginisationStore.updateDescription({\r\n                    ...rootStore.deginisationStore.deginisation,\r\n                    code,\r\n                  });\r\n                }}\r\n              />\r\n              {errors?.code && (\r\n                <span className=\"text-red-600 font-medium relative\">\r\n                  {errors.code}\r\n                </span>\r\n              )}\r\n              <LibraryComponents.Form.Input\r\n                label=\"Description\"\r\n                name=\"description\"\r\n                placeholder=\"description\"\r\n                value={rootStore.deginisationStore.deginisation?.description}\r\n                onChange={(description) => {\r\n                  setErrors({\r\n                    ...errors,\r\n                    description: Util.validate.single(\r\n                      description,\r\n                      Util.constraintsDeginisation.description\r\n                    ),\r\n                  });\r\n                  rootStore.deginisationStore.updateDescription({\r\n                    ...rootStore.deginisationStore.deginisation,\r\n                    description,\r\n                  });\r\n                }}\r\n              />\r\n              {errors?.description && (\r\n                <span className=\"text-red-600 font-medium relative\">\r\n                  {errors.description}\r\n                </span>\r\n              )}\r\n            </LibraryComponents.List>\r\n          </LibraryComponents.Grid>\r\n          <br />\r\n\r\n          <LibraryComponents.List direction=\"row\" space={3} align=\"center\">\r\n            <LibraryComponents.Button\r\n              size=\"medium\"\r\n              type=\"solid\"\r\n              icon={LibraryComponents.Icons.Save}\r\n              onClick={() => {\r\n                if (\r\n                  Util.validate(\r\n                    rootStore.deginisationStore.deginisation,\r\n                    Util.constraintsDeginisation\r\n                  ) === undefined\r\n                ) {\r\n                  rootStore.setProcessLoading(true);\r\n                  Services.addDeginisation(\r\n                    rootStore.deginisationStore.deginisation\r\n                  ).then((res) => {\r\n                    rootStore.setProcessLoading(false);\r\n                    LibraryComponents.ToastsStore.success(\r\n                      `Deginisation created.`\r\n                    );\r\n                    rootStore.deginisationStore.fetchListDeginisation();\r\n                    rootStore.deginisationStore.clear();\r\n                  });\r\n                } else {\r\n                  LibraryComponents.ToastsStore.warning(\r\n                    \"Please enter all information!\"\r\n                  );\r\n                }\r\n              }}\r\n            >\r\n              Save\r\n            </LibraryComponents.Button>\r\n            <LibraryComponents.Button\r\n              size=\"medium\"\r\n              type=\"outline\"\r\n              icon={LibraryComponents.Icons.Remove}\r\n              onClick={() => {\r\n                rootStore.deginisationStore.clear();\r\n              }}\r\n            >\r\n              Clear\r\n            </LibraryComponents.Button>\r\n          </LibraryComponents.List>\r\n        </div>\r\n        <br />\r\n        <div className=\"m-1 p-2 rounded-lg shadow-xl\">\r\n          <ToolkitProvider\r\n            keyField=\"id\"\r\n            data={rootStore.deginisationStore.listDeginisation || []}\r\n            columns={[\r\n              {\r\n                dataField: \"code\",\r\n                text: \"Code\",\r\n                sort: true,\r\n              },\r\n              {\r\n                dataField: \"description\",\r\n                text: \"Description\",\r\n              },\r\n              {\r\n                dataField: \"opration\",\r\n                text: \"Delete\",\r\n                editable: false,\r\n                csvExport: false,\r\n                formatter: (cellContent, row) => (\r\n                  <>\r\n                    <LibraryComponents.Button\r\n                      size=\"small\"\r\n                      type=\"outline\"\r\n                      icon={LibraryComponents.Icons.Remove}\r\n                      onClick={() => {\r\n                        setDeleteItem({\r\n                          show: true,\r\n                          id: row._id,\r\n                          title: \"Are you sure?\",\r\n                          body: `Delete ${row.description} deginisation!`,\r\n                        });\r\n                      }}\r\n                    >\r\n                      Delete\r\n                    </LibraryComponents.Button>\r\n                  </>\r\n                ),\r\n              },\r\n            ]}\r\n            search\r\n            exportCSV={{\r\n              fileName: `deginisation_${moment(new Date()).format(\r\n                \"YYYY-MM-DD HH:mm\"\r\n              )}.csv`,\r\n              noAutoBOM: false,\r\n              blobType: \"text/csv;charset=ansi\",\r\n            }}\r\n          >\r\n            {(props) => (\r\n              <div>\r\n                <SearchBar {...props.searchProps} />\r\n                <ClearSearchButton\r\n                  className={`inline-flex ml-4 bg-gray-500 items-center  small outline shadow-sm  font-medium  disabled:opacity-50 disabled:cursor-not-allowed text-center`}\r\n                  {...props.searchProps}\r\n                />\r\n                <ExportCSVButton\r\n                  className={`inline-flex ml-2 bg-gray-500 items-center  small outline shadow-sm  font-medium  disabled:opacity-50 disabled:cursor-not-allowed text-center`}\r\n                  {...props.csvProps}\r\n                >\r\n                  Export CSV!!\r\n                </ExportCSVButton>\r\n                <hr />\r\n                <BootstrapTable\r\n                  {...props.baseProps}\r\n                  noDataIndication=\"Table is Empty\"\r\n                  hover\r\n                  // cellEdit={cellEditFactory({\r\n                  //   mode: \"dbclick\",\r\n                  //   blurToSave: true,\r\n                  //   // afterSaveCell,\r\n                  // })}\r\n                />\r\n              </div>\r\n            )}\r\n          </ToolkitProvider>\r\n        </div>\r\n        <LibraryComponents.Modal.ModalConfirm\r\n          {...deleteItem}\r\n          click={() => {\r\n            Services.deleteDeginisation(deleteItem.id).then((res: any) => {\r\n              if (res.status) {\r\n                LibraryComponents.ToastsStore.success(`Deginisation deleted.`);\r\n                setDeleteItem({ show: false });\r\n                rootStore.deginisationStore.fetchListDeginisation();\r\n              }\r\n            });\r\n          }}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default Deginisation;\r\n","import validate from \"validate.js\";\r\nexport { validate };\r\nexport const constraintsDepartment = {\r\n  lab: {\r\n    presence: true,\r\n    length: {\r\n      minimum: 2,\r\n      message: \"Lab must be least 2 characters \",\r\n    },\r\n  },\r\n  code: {\r\n    presence: true,\r\n    length: {\r\n      minimum: 4,\r\n      message: \"Code must be least 4 characters \",\r\n    },\r\n  },\r\n  name: {\r\n    presence: true,\r\n    length: {\r\n      minimum: 4,\r\n      message: \"Name must be least 4 characters\",\r\n    },\r\n  },\r\n};\r\n","import React, { useState, useContext, useEffect } from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport * as LibraryComponents from \"@lp/library/components\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport cellEditFactory, { Type } from \"react-bootstrap-table2-editor\";\r\nimport ToolkitProvider, {\r\n  Search,\r\n  CSVExport,\r\n} from \"react-bootstrap-table2-toolkit\";\r\nimport moment from \"moment\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  CardGroup,\r\n  Col,\r\n  Container,\r\n  Form,\r\n  Input,\r\n  InputGroup,\r\n  InputGroupAddon,\r\n  InputGroupText,\r\n  Row,\r\n} from \"reactstrap\";\r\n\r\nimport * as Models from \"../models\";\r\nimport * as Util from \"../util\";\r\nimport RootStoreContext from \"@lp/library/stores\";\r\nimport * as Services from \"../services\";\r\n\r\nconst { SearchBar, ClearSearchButton } = Search;\r\nconst { ExportCSVButton } = CSVExport;\r\n\r\nconst department = observer(() => {\r\n  const rootStore = useContext(RootStoreContext.rootStore);\r\n  const [errors, setErrors] = useState<Models.IDepartment>();\r\n  const [deleteItem, setDeleteItem] = useState<any>({});\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        <LibraryComponents.Header>\r\n          <LibraryComponents.PageHeading\r\n            title=\"Department\"\r\n            subTitle=\"Add, Edit & Delete Lab\"\r\n          />\r\n        </LibraryComponents.Header>\r\n        <div className=\" mx-auto  p-4\">\r\n          <div className=\"m-1 p-2 rounded-lg shadow-xl\">\r\n            <LibraryComponents.Grid cols={2}>\r\n              <LibraryComponents.List\r\n                direction=\"col\"\r\n                space={4}\r\n                justify=\"stretch\"\r\n                fill\r\n              >\r\n                <LibraryComponents.Form.InputWrapper label=\"Lab\" id=\"lab\">\r\n                  <select\r\n                    name=\"lab\"\r\n                    className=\"leading-4 p-2 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-base border border-gray-300 rounded-md\"\r\n                    onChange={(e) => {\r\n                      const lab = e.target.value;\r\n                      setErrors({\r\n                        ...errors,\r\n                        lab: Util.validate.single(\r\n                          lab,\r\n                          Util.constraintsDepartment.lab\r\n                        ),\r\n                      });\r\n                      rootStore.departmentStore.updateDepartment({\r\n                        ...rootStore.departmentStore.department,\r\n                        lab,\r\n                      });\r\n                    }}\r\n                  >\r\n                    <option selected>Select</option>\r\n                    {rootStore.labStore.listLabs.map(\r\n                      (item: any, index: number) => (\r\n                        <option key={item.name} value={item.code}>\r\n                          {item.name}\r\n                        </option>\r\n                      )\r\n                    )}\r\n                  </select>\r\n                </LibraryComponents.Form.InputWrapper>\r\n\r\n                <LibraryComponents.Form.Input\r\n                  label=\"Code\"\r\n                  id=\"code\"\r\n                  placeholder=\"Code\"\r\n                  value={rootStore.departmentStore.department?.code}\r\n                  onChange={(code) => {\r\n                    setErrors({\r\n                      ...errors,\r\n                      code: Util.validate.single(\r\n                        code,\r\n                        Util.constraintsDepartment.code\r\n                      ),\r\n                    });\r\n                    rootStore.departmentStore.updateDepartment({\r\n                      ...rootStore.departmentStore.department,\r\n                      code,\r\n                    });\r\n                  }}\r\n                />\r\n                {errors?.code && (\r\n                  <span className=\"text-red-600 font-medium relative\">\r\n                    {errors.code}\r\n                  </span>\r\n                )}\r\n                <LibraryComponents.Form.Input\r\n                  label=\"Name\"\r\n                  name=\"name\"\r\n                  placeholder=\"Name\"\r\n                  value={rootStore.departmentStore.department?.name}\r\n                  onChange={(name) => {\r\n                    setErrors({\r\n                      ...errors,\r\n                      name: Util.validate.single(\r\n                        name,\r\n                        Util.constraintsDepartment.name\r\n                      ),\r\n                    });\r\n                    rootStore.departmentStore.updateDepartment({\r\n                      ...rootStore.departmentStore.department,\r\n                      name,\r\n                    });\r\n                  }}\r\n                />\r\n\r\n                {errors?.name && (\r\n                  <span className=\"text-red-600 font-medium relative\">\r\n                    {errors.name}\r\n                  </span>\r\n                )}\r\n              </LibraryComponents.List>\r\n            </LibraryComponents.Grid>\r\n            <br />\r\n\r\n            <LibraryComponents.List direction=\"row\" space={3} align=\"center\">\r\n              <LibraryComponents.Button\r\n                size=\"medium\"\r\n                type=\"solid\"\r\n                icon={LibraryComponents.Icons.Save}\r\n                onClick={() => {\r\n                  if (\r\n                    Util.validate(\r\n                      rootStore.departmentStore.department,\r\n                      Util.constraintsDepartment\r\n                    ) === undefined\r\n                  ) {\r\n                    rootStore.setProcessLoading(true);\r\n                    Services.adddepartment(\r\n                      rootStore.departmentStore.department\r\n                    ).then((res) => {\r\n                      rootStore.setProcessLoading(false);\r\n                      LibraryComponents.ToastsStore.success(\r\n                        `Department created.`\r\n                      );\r\n                      rootStore.departmentStore.fetchListDepartment();\r\n                      rootStore.departmentStore.clear();\r\n                    });\r\n                  } else {\r\n                    LibraryComponents.ToastsStore.warning(\r\n                      \"Please enter all information!\"\r\n                    );\r\n                  }\r\n                }}\r\n              >\r\n                Save\r\n              </LibraryComponents.Button>\r\n              <LibraryComponents.Button\r\n                size=\"medium\"\r\n                type=\"outline\"\r\n                icon={LibraryComponents.Icons.Remove}\r\n                onClick={() => {\r\n                  rootStore.departmentStore.clear();\r\n                }}\r\n              >\r\n                Clear\r\n              </LibraryComponents.Button>\r\n            </LibraryComponents.List>\r\n          </div>\r\n          <br />\r\n          <div className=\"m-1 p-1 rounded-lg shadow-xl flex flex-row\">\r\n            \r\n            <ToolkitProvider\r\n              keyField=\"id\"\r\n              data={rootStore.departmentStore.listDepartment || []}\r\n              columns={[\r\n                {\r\n                  dataField: \"lab\",\r\n                  text: \"Lab\",\r\n                  sort: true,\r\n                },\r\n                {\r\n                  dataField: \"code\",\r\n                  text: \"Code\",\r\n                  sort: true,\r\n                },\r\n                {\r\n                  dataField: \"name\",\r\n                  text: \"name\",\r\n                },\r\n                {\r\n                  dataField: \"opration\",\r\n                  text: \"Delete\",\r\n                  editable: false,\r\n                  csvExport: false,\r\n                  formatter: (cellContent, row) => (\r\n                    <>\r\n                      <LibraryComponents.Button\r\n                        size=\"small\"\r\n                        type=\"outline\"\r\n                        icon={LibraryComponents.Icons.Remove}\r\n                        onClick={() => {\r\n                          setDeleteItem({\r\n                            show: true,\r\n                            id: row._id,\r\n                            title: \"Are you sure?\",\r\n                            body: `Delete ${row.name} lab!`,\r\n                          });\r\n                        }}\r\n                      >\r\n                        Delete\r\n                      </LibraryComponents.Button>\r\n                    </>\r\n                  ),\r\n                },\r\n              ]}\r\n              search\r\n              exportCSV={{\r\n                fileName: `department_${moment(new Date()).format(\r\n                  \"YYYY-MM-DD HH:mm\"\r\n                )}.csv`,\r\n                noAutoBOM: false,\r\n                blobType: \"text/csv;charset=ansi\",\r\n              }}\r\n            >\r\n              {(props) => (\r\n                <div>\r\n                  <SearchBar {...props.searchProps} />\r\n                  <ClearSearchButton\r\n                    className={`inline-flex ml-4 bg-gray-500 items-center  small outline shadow-sm  font-medium  disabled:opacity-50 disabled:cursor-not-allowed text-center`}\r\n                    {...props.searchProps}\r\n                  />\r\n                  <ExportCSVButton\r\n                    className={`inline-flex ml-2 bg-gray-500 items-center  small outline shadow-sm  font-medium  disabled:opacity-50 disabled:cursor-not-allowed text-center`}\r\n                    {...props.csvProps}\r\n                  >\r\n                    Export CSV!!\r\n                  </ExportCSVButton>\r\n                  <hr />\r\n                  <BootstrapTable\r\n                    {...props.baseProps}\r\n                    noDataIndication=\"Table is Empty\"\r\n                    hover\r\n                    // cellEdit={cellEditFactory({\r\n                    //   mode: \"dbclick\",\r\n                    //   blurToSave: true,\r\n                    //   // afterSaveCell,\r\n                    // })}\r\n                  />\r\n                </div>\r\n              )}\r\n            </ToolkitProvider>\r\n          </div>\r\n          <LibraryComponents.Modal.ModalConfirm\r\n            {...deleteItem}\r\n            click={() => {\r\n              Services.deletedepartment(deleteItem.id).then((res: any) => {\r\n                if (res.status) {\r\n                  LibraryComponents.ToastsStore.success(`Department deleted.`);\r\n                  setDeleteItem({ show: false });\r\n                  rootStore.departmentStore.fetchListDepartment();\r\n                }\r\n              });\r\n            }}\r\n          />\r\n        </div>\r\n      </Container>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default department;\r\n","export enum StatusCode {\n    SUCCESS = 200,\n    CREATED = 201,\n    BAD_REQUEST = 400,\n    UNAUTHORIZED = 401,\n    NOT_FOUND = 404,\n    SERVER_ERROR = 500,\n  }","import React, { useState } from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport * as LibraryComponents from \"@lp/library/components\";\r\nimport * as LibraryModels from \"@lp/library/models\";\r\nimport * as Models from \"../models\";\r\nimport * as Utils from \"@lp/library/utils\";\r\nimport moment from \"moment\";\r\nimport * as Features from \"@lp/features\";\r\nimport Contexts from \"@lp/library/stores\";\r\nimport * as Services from \"../services\";\r\n\r\nconst Banner = observer(() => {\r\n  const rootStore = React.useContext(Contexts.rootStore);\r\n  const [errors, setErrors] = useState<Models.IBanner>();\r\n  const [deleteItem, setDeleteItem] = useState<any>({});\r\n\r\n  return (\r\n    <>\r\n      <LibraryComponents.Header>\r\n        <LibraryComponents.PageHeading\r\n          title=\"Banner\"\r\n          subTitle=\"Add, Edit & Delete Banner\"\r\n        />\r\n      </LibraryComponents.Header>\r\n      <div className=\" mx-auto  p-4  flex-wrap\">\r\n        <div className=\"m-1 p-2 rounded-lg shadow-xl\">\r\n          <LibraryComponents.Grid cols={2}>\r\n            <LibraryComponents.List\r\n              direction=\"col\"\r\n              space={4}\r\n              justify=\"stretch\"\r\n              fill\r\n            >\r\n              <LibraryComponents.Form.Input\r\n                label=\"Title\"\r\n                id=\"title\"\r\n                placeholder=\"Title\"\r\n                value={rootStore.bannerStore.banner?.title}\r\n                onChange={(title) => {\r\n                  rootStore.bannerStore.updateBanner({\r\n                    ...rootStore.bannerStore.banner,\r\n                    title,\r\n                  });\r\n                }}\r\n              />\r\n              <LibraryComponents.Form.InputFile\r\n                label=\"File\"\r\n                id=\"file\"\r\n                placeholder=\"File\"\r\n                //value={rootStore.bannerStore.banner?.image}\r\n                onChange={(e) => {\r\n                  const image = e.target.files[0];\r\n                  rootStore.bannerStore.updateBanner({\r\n                    ...rootStore.bannerStore.banner,\r\n                    image,\r\n                  });\r\n                }}\r\n              />\r\n            </LibraryComponents.List>\r\n          </LibraryComponents.Grid>\r\n          <br />\r\n\r\n          <LibraryComponents.List direction=\"row\" space={3} align=\"center\">\r\n            <LibraryComponents.Button\r\n              size=\"medium\"\r\n              type=\"solid\"\r\n              icon={LibraryComponents.Icons.Save}\r\n              onClick={() => {\r\n                rootStore.setProcessLoading(true);\r\n                Services.addBanner(rootStore.bannerStore.banner).then((res) => {\r\n                  if (res.status === LibraryModels.StatusCode.CREATED) {\r\n                    LibraryComponents.ToastsStore.success(`Banner created.`);\r\n                    setTimeout(() => {\r\n                      window.location.reload();\r\n                    }, 2000);\r\n                  }\r\n                });\r\n              }}\r\n            >\r\n              Save\r\n            </LibraryComponents.Button>\r\n            <LibraryComponents.Button\r\n              size=\"medium\"\r\n              type=\"outline\"\r\n              icon={LibraryComponents.Icons.Remove}\r\n              onClick={() => {\r\n                rootStore.userStore.clear();\r\n              }}\r\n            >\r\n              Clear\r\n            </LibraryComponents.Button>\r\n          </LibraryComponents.List>\r\n        </div>\r\n        <br />\r\n        <div className=\"m-1 p-2 rounded-lg shadow-xl\">\r\n          <table className=\"border-separate border border-green-800 w-full\">\r\n            <thead>\r\n              <tr>\r\n                <th className=\"border border-green-600\">Title</th>\r\n                <th className=\"border border-green-600\">Image</th>\r\n                <th className=\"border border-green-600\">Delete</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {rootStore.bannerStore.listBanner?.map((item, index) => (\r\n                <tr>\r\n                  <td className=\"border border-green-600 text-center\">\r\n                    {item.title}\r\n                  </td>\r\n                  <td className=\"border border-green-600\">\r\n                    <img\r\n                      src={item.image}\r\n                      className=\"w-60 h-40 ml-6\"\r\n                      alt=\"logo\"\r\n                    />\r\n                  </td>\r\n\r\n                  <td className=\"border border-green-600 text-center p-1\">\r\n                    <LibraryComponents.Button\r\n                      size=\"small\"\r\n                      type=\"outline\"\r\n                      icon={LibraryComponents.Icons.Remove}\r\n                      onClick={() => {\r\n                        setDeleteItem({\r\n                          show: true,\r\n                          id: item._id,\r\n                          title: \"Are you sure?\",\r\n                          body: `Delete ${item.title}!`,\r\n                        });\r\n                      }}\r\n                    >\r\n                      Delete\r\n                    </LibraryComponents.Button>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        <LibraryComponents.Modal.ModalConfirm\r\n          {...deleteItem}\r\n          click={() => {\r\n            Services.deleteBanner(deleteItem.id).then((res: any) => {\r\n              console.log({ res });\r\n\r\n              if (res.status) {\r\n                LibraryComponents.ToastsStore.success(`Banner deleted.`);\r\n                setDeleteItem({ show: false });\r\n                rootStore.bannerStore.fetchListBanner();\r\n              }\r\n            });\r\n          }}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default Banner;\r\n","import { action, observable } from \"mobx\";\r\nimport { version, ignore } from \"mobx-sync\";\r\nimport * as Clients from \"@lp/library/clients\";\r\n\r\nimport UsersStore from \"@lp/features/users/stores\";\r\nimport LabStore from \"@lp/features/collection/labs/stores\";\r\nimport DeginisationStore from \"@lp/features/collection/deginisation/stores\";\r\nimport DepartmentStore from \"@lp/features/collection/department/stores\";\r\nimport RoleStore from \"@lp/features/collection/roles/stores\";\r\nimport BannerStore from \"@lp/features/banner/stores\";\r\n\r\n@version(1.0)\r\nclass RootStore {\r\n  @ignore @observable processLoading: boolean = false;\r\n  @observable isLogin = Clients.storageClient.getItem(\"isLogin\");\r\n\r\n  @observable userStore = new UsersStore();\r\n  @observable labStore = new LabStore();\r\n  @observable deginisationStore = new DeginisationStore();\r\n  @observable departmentStore = new DepartmentStore();\r\n  @observable roleStore = new RoleStore();\r\n  @observable bannerStore = new BannerStore();\r\n\r\n  @action setProcessLoading(processLoading: boolean) {\r\n    this.processLoading = processLoading;\r\n  }\r\n\r\n  @observable themes = {\r\n    corporate: {\r\n      primary: \"#3B82EC\",\r\n      secondary: \"#495057\",\r\n      tertiary: \"#0069fc\",\r\n      success: \"#4BBF73\",\r\n      info: \"#1F9BCF\",\r\n      warning: \"#f0ad4e\",\r\n      danger: \"#d9534f\",\r\n    },\r\n    modern: {\r\n      primary: \"#2c7be5\",\r\n      secondary: \"#9d7bd8\",\r\n      tertiary: \"#5997eb\",\r\n      success: \"#4caf50\",\r\n      info: \"#47bac1\",\r\n      warning: \"#ff9800\",\r\n      danger: \"#e51c23\",\r\n    },\r\n    classic: {\r\n      primary: \"#47bac1\",\r\n      secondary: \"#a180da\",\r\n      tertiary: \"#5fc27e\",\r\n      success: \"#5fc27e\",\r\n      info: \"#5b7dff\",\r\n      warning: \"#fcc100\",\r\n      danger: \"#f44455\",\r\n    },\r\n  };\r\n}\r\nconst store = new RootStore();\r\nexport default store;\r\n","import React from \"react\";\r\nimport RootStore from \"./rootStore\";\r\nimport { AsyncTrunk } from \"mobx-sync\";\r\n\r\nconst trunk = new AsyncTrunk(RootStore, {\r\n  storage: localStorage,\r\n  storageKey: \"__persist_mobx_stores__\",\r\n  delay: 1e3,\r\n});\r\n\r\ntrunk.init().then(() => {\r\n  RootStore.labStore.fetchListLab();\r\n  RootStore.bannerStore.fetchListBanner();\r\n  RootStore.deginisationStore.fetchListDeginisation();\r\n  RootStore.departmentStore.fetchListDepartment();\r\n  RootStore.roleStore.fetchListRole();\r\n});\r\n\r\nconst Contexts = {\r\n  rootStore: React.createContext(RootStore),\r\n  userStore: React.createContext(RootStore.userStore),\r\n  labStore: React.createContext(RootStore.labStore),\r\n  deginisationStore: React.createContext(RootStore.deginisationStore),\r\n  departmentStore: React.createContext(RootStore.departmentStore),\r\n  roleStore: React.createContext(RootStore.roleStore),\r\n  bannerStore: React.createContext(RootStore.bannerStore),\r\n};\r\n\r\nexport default Contexts;\r\n","import React from \"react\";\r\n\r\ninterface ListProps {\r\n  direction?: \"row\" | \"col\";\r\n  space?: number;\r\n  padding?: boolean;\r\n  background?: boolean;\r\n  align?: \"start\" | \"between\" | \"center\" | \"end\";\r\n  justify?: \"start\" | \"end\" | \"center\" | \"stretch\";\r\n  fill?: boolean;\r\n}\r\n\r\nconst List: React.FunctionComponent<ListProps> = (props) => {\r\n  const spacingClass = props.space\r\n    ? `space-${props.direction === \"col\" ? \"y\" : \"x\"}-${props.space}`\r\n    : \"\";\r\n\r\n  const paddingClass = props.padding ? `p-${props.space}` : \"\";\r\n\r\n  const backgroundClass = props.background ? \"bg-gray-100\" : \"\";\r\n\r\n  const alignClass = props.align ? `justify-${props.align}` : \"\";\r\n  const justifyClass = props.justify ? `items-${props.justify}` : \"items-center\";\r\n\r\n  const fillClass = props.fill ? \"flex-1\" : \"\";\r\n  return (\r\n    <span\r\n      className={`flex flex-${\r\n        props.direction || \"row\"\r\n      } ${spacingClass} ${paddingClass} ${backgroundClass} ${alignClass} ${fillClass} ${justifyClass}`}\r\n    >\r\n      {props.children}\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import React from \"react\";\r\nimport * as LibraryComponents from \"@lp/library/components\";\r\n\r\ninterface LabelProps {\r\n  htmlFor: string;\r\n}\r\n\r\nexport const Label: React.FunctionComponent<LabelProps> = (props) => (\r\n  <>\r\n    <label\r\n      htmlFor={props.htmlFor}\r\n      className=\"block text-xs font-medium text-gray-700 mb-1\"\r\n    >\r\n      {props.children}\r\n    </label>\r\n  </>\r\n);\r\n\r\ninterface InputWrapperProps {\r\n  id?: string;\r\n  label: string;\r\n}\r\n\r\nexport const InputWrapper: React.FunctionComponent<InputWrapperProps> = (\r\n  props\r\n) => (\r\n  <div>\r\n    <Label htmlFor={props.id || \"\"}>{props.label}</Label>\r\n    {props.children}\r\n  </div>\r\n);\r\n\r\ninterface InputProps extends InputWrapperProps {\r\n  value?: any;\r\n  name?: string;\r\n  placeholder?: string;\r\n  type?: string;\r\n  required?: boolean;\r\n  disabled?: boolean;\r\n  onChange?: (e: any) => void;\r\n  onBlur?: (e: any) => void;\r\n}\r\n\r\nexport const Input = (props: InputProps) => (\r\n  <InputWrapper label={props.label} id={props.id}>\r\n    <input\r\n      type={props.type || \"text\"}\r\n      id={props.id}\r\n      name={props.name}\r\n      placeholder={props.placeholder}\r\n      required={props.required || false}\r\n      disabled={props.disabled || false}\r\n      autoComplete=\"given-name\"\r\n      value={props.value}\r\n      onChange={(e) => props.onChange && props.onChange(e.target.value)}\r\n      className=\"leading-4 p-2 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-base border border-gray-300 rounded-md\"\r\n      onBlur={(e) => props.onBlur && props.onBlur(e.target.value)}\r\n    />\r\n  </InputWrapper>\r\n);\r\n\r\ninterface InputRadioProps extends InputWrapperProps {\r\n  values?: string[];\r\n  value?: string;\r\n  name?: string;\r\n  required?: boolean;\r\n  disabled?: boolean;\r\n  onChange?: (e: any) => void;\r\n}\r\n\r\nexport const InputRadio = (props: InputRadioProps) => (\r\n  <InputWrapper label={props.label} id={props.id}>\r\n    {props.values?.map((item, key) => (\r\n      <div className=\"ml-4\">\r\n        <LibraryComponents.List space={3} direction=\"row\">\r\n          <input\r\n            key={key}\r\n            type=\"radio\"\r\n            id={props.id}\r\n            name={props.name}\r\n            value={props.value}\r\n            checked={item === props.value ? true : false}\r\n            onChange={(e) => props.onChange && props.onChange(item)}\r\n            className=\"leading-4 p-2 focus:ring-indigo-500 focus:border-indigo-500 block  shadow-sm sm:text-base border border-gray-300 rounded-md\"\r\n          />\r\n          <Label htmlFor={props.id || \"\"}>{item}</Label>\r\n        </LibraryComponents.List>\r\n      </div>\r\n    ))}\r\n  </InputWrapper>\r\n);\r\n\r\ninterface InputDateProps extends InputWrapperProps {\r\n  value?: any;\r\n  name?: string;\r\n  placeholder?: string;\r\n  disabled?: boolean;\r\n  onChange?: (e: any) => void;\r\n}\r\n\r\nexport const InputDate = (props: InputDateProps) => (\r\n  <InputWrapper label={props.label} id={props.id}>\r\n    <input\r\n      type=\"date\"\r\n      id={props.id}\r\n      name={props.name}\r\n      disabled={props.disabled || false}\r\n      value={props.value}\r\n      onChange={(e) => props.onChange && props.onChange(e)}\r\n      className=\"leading-4 p-2 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-base border border-gray-300 rounded-md\"\r\n    />\r\n  </InputWrapper>\r\n);\r\n\r\ninterface SelectOptionProps extends InputWrapperProps {\r\n  value?: any;\r\n  values?: any[];\r\n  name?: string;\r\n  key: string;\r\n  disabled?: boolean;\r\n  onChange?: (e: any) => void;\r\n}\r\n\r\nexport const SelectOption = (props: SelectOptionProps) => (\r\n  <InputWrapper label={props.label} id={props.id}>\r\n    <select\r\n      name={props.name}\r\n      className=\"leading-4 p-2 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-base border border-gray-300 rounded-md\"\r\n      onChange={(e) => props.onChange && props.onChange(e.target.value)}\r\n    >\r\n      <option selected>Select</option>\r\n      {props.values?.map((item: any, index: number) => (\r\n        <option key={item[props.key]} value={item[props.key]}>\r\n          {item[props.key]}\r\n        </option>\r\n      ))}\r\n    </select>\r\n  </InputWrapper>\r\n);\r\n\r\ninterface InputFileProps extends InputWrapperProps {\r\n  value?: any;\r\n  name?: string;\r\n  placeholder?: string;\r\n  disabled?: boolean;\r\n  onChange?: (e: any) => void;\r\n}\r\n\r\nexport const InputFile = (props: InputFileProps) => (\r\n  <InputWrapper label={props.label} id={props.id}>\r\n    <input\r\n      type=\"file\"\r\n      id={props.id}\r\n      name={props.name}\r\n      disabled={props.disabled || false}\r\n      value={props.value}\r\n      onChange={(e) => props.onChange && props.onChange(e)}\r\n      className=\"leading-4 p-2 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-base border border-gray-300 rounded-md\"\r\n    />\r\n  </InputWrapper>\r\n);\r\n\r\nexport const MultilineInput = (props: InputProps) => (\r\n  <InputWrapper label={props.label} id={props.id}>\r\n    <textarea\r\n      id={props.id}\r\n      autoComplete=\"given-name\"\r\n      value={props.value}\r\n      rows={5}\r\n      onChange={(e) => props.onChange && props.onChange(e.target.value)}\r\n      className=\"leading-4 p-2 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-base border border-gray-300 rounded-md\"\r\n    />\r\n  </InputWrapper>\r\n);\r\n\r\ninterface TagInputProps extends InputWrapperProps {\r\n  value?: string[];\r\n  onChange: (tags: string[]) => void;\r\n}\r\n\r\n// export const TagInput = (props: TagInputProps) => {\r\n//   const [search, setSearch] = React.useState<string>(\"\");\r\n//   return (\r\n//     <InputWrapper label={props.label} id={props.id}>\r\n//       <div className=\"p-2 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-base border border-gray-300 rounded-md flex flex-wrap\">\r\n//         {props.value?.map((tag, index) => (\r\n//           <div className=\"my-0.5 mr-1\">\r\n//             <Button\r\n//               pill={true}\r\n//               size=\"small\"\r\n//               type=\"solid\"\r\n//               icon={Icons.Remove}\r\n//               onClick={() => {\r\n//                 let newArray = [...(props.value || [])];\r\n//                 newArray.splice(index, 1);\r\n//                 props.onChange(newArray);\r\n//               }}\r\n//             >\r\n//               {tag}\r\n//             </Button>\r\n//           </div>\r\n//         ))}\r\n//         <div className=\"self-stretch flex items-center\">\r\n//           <input\r\n//             type=\"search\"\r\n//             value={search}\r\n//             onChange={({ target: { value: search } }) => setSearch(search)}\r\n//             className={`text-sm min-w-0 outline-none ring-0 ${\r\n//               props.value?.length ? \"w-16\" : \"w-full\"\r\n//             } my-0.5`}\r\n//             onKeyDown={(e) => {\r\n//               if (e.key === \"Enter\") {\r\n//                 props.onChange(\r\n//                   Array.from(new Set([...(props.value || []), search]))\r\n//                 );\r\n//                 setSearch(\"\");\r\n//               }\r\n//             }}\r\n//           />\r\n//         </div>\r\n//       </div>\r\n//     </InputWrapper>\r\n//   );\r\n// };\r\n","import React from \"react\";\r\nimport { IconProps } from \"./icon\";\r\n\r\ninterface ButtonProps {\r\n  type?: \"solid\" | \"outline\";\r\n  onClick?: () => void;\r\n  size?: \"small\" | \"medium\" | \"large\";\r\n  icon?: React.FunctionComponent<IconProps>;\r\n  pill?: boolean;\r\n  disabled?: string;\r\n}\r\n\r\nconst Button: React.FunctionComponent<ButtonProps> = (props) => {\r\n  const buttonSizeClass =\r\n    props.size === \"small\"\r\n      ? `px-2 py-1 text-xs`\r\n      : props.size === \"large\"\r\n      ? `px-4 py-2 text-base`\r\n      : \"px-3 py-2 text-sm\";\r\n\r\n  const buttonColorClass =\r\n    props.type === \"solid\"\r\n      ? \"text-white bg-indigo-600 hover:bg-indigo-700 hover:shadow-lg\"\r\n      : \"text-gray-600 border border-gray-400 hover:shadow-lg\";\r\n\r\n  const roundedClass = props.pill ? \"rounded-full\" : \"rounded-lg\";\r\n\r\n  const Icon = props.icon;\r\n\r\n  return (\r\n    <button\r\n      onClick={props.onClick}\r\n      type=\"button\"\r\n      disabled={!!props.disabled}\r\n      title={props.disabled}\r\n      className={`inline-flex items-center ${buttonSizeClass} ${roundedClass} shadow-sm  font-medium ${buttonColorClass} disabled:opacity-50 disabled:cursor-not-allowed text-center`}\r\n    >\r\n      {Icon && (\r\n        <Icon\r\n          size={props.size}\r\n          type={props.type === \"solid\" ? \"inverse\" : \"solid\"}\r\n          buttonOffset\r\n        />\r\n      )}\r\n      {props.children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\n\r\nexport interface IconProps {\r\n  type?: \"solid\" | \"inverse\";\r\n  size?: \"small\" | \"medium\" | \"large\";\r\n  buttonOffset?: boolean;\r\n  small?: boolean;\r\n}\r\n\r\nconst getIconClass = (props: IconProps) => {\r\n  const iconSizeClass =\r\n    props.size === \"small\"\r\n      ? `h-3 w-3`\r\n      : props.size === \"large\"\r\n      ? `h-6 h-6`\r\n      : \"h-5 w-5\";\r\n\r\n  const iconColorClass =\r\n    props.type === \"solid\" ? \"text-gray-600\" : \"text-white\";\r\n\r\n  return `${\r\n    props.buttonOffset && \"-ml-1 -mt-1 mr-2\"\r\n  } ${iconSizeClass} ${iconColorClass}`;\r\n};\r\n\r\nexport const Save: React.FunctionComponent<IconProps> = (props: IconProps) => {\r\n  return (\r\n    <svg\r\n      className={getIconClass(props)}\r\n      fill=\"none\"\r\n      stroke=\"currentColor\"\r\n      viewBox=\"0 0 24 24\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n    >\r\n      <path\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n        strokeWidth={2}\r\n        d=\"M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V4\"\r\n      />\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport const Add: React.FunctionComponent<IconProps> = (props: IconProps) => {\r\n  return (\r\n    <svg\r\n      className={getIconClass(props)}\r\n      fill=\"none\"\r\n      stroke=\"currentColor\"\r\n      viewBox=\"0 0 24 24\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n    >\r\n      <path\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n        strokeWidth={2}\r\n        d=\"M14.613,10c0,0.23-0.188,0.419-0.419,0.419H10.42v3.774c0,0.23-0.189,0.42-0.42,0.42s-0.419-0.189-0.419-0.42v-3.774H5.806c-0.23,0-0.419-0.189-0.419-0.419s0.189-0.419,0.419-0.419h3.775V5.806c0-0.23,0.189-0.419,0.419-0.419s0.42,0.189,0.42,0.419v3.775h3.774C14.425,9.581,14.613,9.77,14.613,10 M17.969,10c0,4.401-3.567,7.969-7.969,7.969c-4.402,0-7.969-3.567-7.969-7.969c0-4.402,3.567-7.969,7.969-7.969C14.401,2.031,17.969,5.598,17.969,10 M17.13,10c0-3.932-3.198-7.13-7.13-7.13S2.87,6.068,2.87,10c0,3.933,3.198,7.13,7.13,7.13S17.13,13.933,17.13,10\"\r\n      ></path>\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport const Remove: React.FunctionComponent<IconProps> = (\r\n  props: IconProps\r\n) => {\r\n  return (\r\n    <svg\r\n      className={`${getIconClass({ ...props, buttonOffset: false })} ${\r\n        props.buttonOffset ? \"-ml-1 mr-2\" : \"\"\r\n      }`}\r\n      fill=\"none\"\r\n      stroke=\"currentColor\"\r\n      viewBox=\"0 0 24 24\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n    >\r\n      <path\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n        strokeWidth={2}\r\n        d=\"M6 18L18 6M6 6l12 13\"\r\n      />\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport const Check: React.FunctionComponent<IconProps> = (props: IconProps) => {\r\n  return (\r\n    <svg\r\n      className={`${getIconClass({ ...props, buttonOffset: false })} ${\r\n        props.buttonOffset ? \"-ml-1 mr-2\" : \"\"\r\n      }`}\r\n      fill=\"none\"\r\n      stroke=\"currentColor\"\r\n      viewBox=\"0 0 24 24\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n    >\r\n      <path\r\n        fill=\"none\"\r\n        d=\"M7.197,16.963H7.195c-0.204,0-0.399-0.083-0.544-0.227l-6.039-6.082c-0.3-0.302-0.297-0.788,0.003-1.087\r\n\t\t\t\t\t\t\tC0.919,9.266,1.404,9.269,1.702,9.57l5.495,5.536L18.221,4.083c0.301-0.301,0.787-0.301,1.087,0c0.301,0.3,0.301,0.787,0,1.087\r\n\t\t\t\t\t\t\tL7.741,16.738C7.596,16.882,7.401,16.963,7.197,16.963z\"\r\n      ></path>\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport const Plus: React.FunctionComponent<IconProps> = (props: IconProps) => (\r\n  <svg\r\n    className={getIconClass(props)}\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    viewBox=\"0 0 20 20\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth={2}\r\n    aria-hidden=\"true\"\r\n  >\r\n    <path d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\r\n  </svg>\r\n);\r\n\r\nexport const Spinner: React.FunctionComponent<IconProps> = (\r\n  props: IconProps\r\n) => (\r\n  <svg\r\n    className={`animate-spin ${getIconClass(props)}`}\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    fill=\"none\"\r\n    viewBox=\"0 0 24 24\"\r\n  >\r\n    <circle\r\n      className=\"opacity-25\"\r\n      cx=\"12\"\r\n      cy=\"12\"\r\n      r=\"10\"\r\n      stroke=\"currentColor\"\r\n      stroke-width=\"4\"\r\n    ></circle>\r\n    <path\r\n      className=\"opacity-75\"\r\n      fill=\"currentColor\"\r\n      d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\r\n    ></path>\r\n  </svg>\r\n);\r\n\r\nexport const Tick: React.FunctionComponent<IconProps> = (props) => (\r\n  <svg\r\n    className={`${getIconClass(props)} ${props.small && \"w-3 h-3\"}`}\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    viewBox=\"0 0 24 24\"\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n  >\r\n    <path\r\n      strokeLinecap=\"round\"\r\n      strokeLinejoin=\"round\"\r\n      strokeWidth={3}\r\n      d=\"M5 13l4 4L19 7\"\r\n    />\r\n  </svg>\r\n);\r\n","import React from \"react\";\r\n\r\ninterface GridProps {\r\n  cols?: number;\r\n}\r\n\r\nconst Grid: React.FunctionComponent<GridProps> = (props) => (\r\n  <div className={`grid grid-cols-${props.cols || 1} gap-3 flex-1`}>\r\n    {props.children}\r\n  </div>\r\n);\r\n\r\nexport default Grid;\r\n","import React, { useEffect, useState } from \"react\";\nimport * as LibraryComponents from \"@lp/library/components\";\nimport * as Models from \"@lp/features/users/models\";\nimport * as Utils from \"@lp/library/utils\";\nimport Contexts from \"@lp/library/stores\";\n\ninterface ModalProps {\n  title?: string;\n  click: () => void;\n  close: () => void;\n}\n\nexport default function ModalChangePassword(props: ModalProps) {\n  const rootStore = React.useContext(Contexts.rootStore);\n  const [errors, setErrors] = useState<Models.ChangePassword>();\n\n  // useEffect(() => {\n  //   setShowModal(props.show);\n  // }, [props]);\n\n  return (\n    <>\n      <>\n        <div className=\"justify-center items-center flex overflow-x-hidden overflow-y-auto fixed inset-0 z-50 outline-none focus:outline-none\">\n          <div className=\"relative w-full my-6 mx-auto max-w-3xl\">\n            {/*content*/}\n            <div className=\"border-0 rounded-lg shadow-lg relative flex flex-col w-full bg-white outline-none focus:outline-none\">\n              {/*header*/}\n              <div className=\"flex items-start justify-between p-5 border-b border-solid border-gray-300 rounded-t\">\n                <h3 className=\"text-3xl font-semibold\">Change Password</h3>\n                <button\n                  className=\"p-1  border-0 text-black opacity-1 ml-6 float-right text-3xl leading-none font-semibold outline-none focus:outline-none\"\n                  onClick={() => props.close()}\n                >\n                  <span className=\" text-black h-6 w-6 text-2xl block outline-none focus:outline-none\">\n                    ×\n                  </span>\n                </button>\n              </div>\n              {/*body*/}\n              <div className=\"relative p-6 flex-auto\">\n                <LibraryComponents.List\n                  direction=\"col\"\n                  space={4}\n                  justify=\"stretch\"\n                  fill\n                >\n                  <LibraryComponents.Form.Input\n                    type=\"password\"\n                    label=\"Old Password\"\n                    name=\"oldPassword\"\n                    placeholder=\"Old Password\"\n                    value={rootStore.userStore.changePassword?.oldPassword}\n                    onChange={(oldPassword) => {\n                      setErrors({\n                        ...errors,\n                        oldPassword: Utils.validate.single(\n                          oldPassword,\n                          Utils.constraintsChangePassword.oldPassword\n                        ),\n                      });\n                      rootStore.userStore.updateChangePassword({\n                        ...rootStore.userStore.changePassword,\n                        oldPassword,\n                      });\n                    }}\n                  />\n                  {errors?.oldPassword && (\n                    <span className=\"text-red-600 font-medium relative\">\n                      {errors.oldPassword}\n                    </span>\n                  )}\n                  <LibraryComponents.Form.Input\n                    type=\"password\"\n                    label=\"New Password\"\n                    name=\"newPassword\"\n                    placeholder=\"New Password\"\n                    value={rootStore.userStore.changePassword?.newPassword}\n                    onChange={(newPassword) => {\n                      setErrors({\n                        ...errors,\n                        newPassword:\n                          rootStore.userStore.changePassword?.oldPassword !==\n                          newPassword\n                            ? Utils.validate.single(\n                                newPassword,\n                                Utils.constraintsChangePassword.newPassword\n                              )\n                            : \"Please use diff password!\",\n                      });\n                      rootStore.userStore.updateChangePassword({\n                        ...rootStore.userStore.changePassword,\n                        newPassword,\n                      });\n                    }}\n                  />\n                  {errors?.newPassword && (\n                    <span className=\"text-red-600 font-medium relative\">\n                      {errors.newPassword}\n                    </span>\n                  )}\n                  <LibraryComponents.Form.Input\n                    type=\"password\"\n                    label=\"Confirm Password\"\n                    name=\"confirmPassword\"\n                    placeholder=\"Confirm Password\"\n                    value={rootStore.userStore.changePassword?.confirmPassword}\n                    onChange={(confirmPassword) => {\n                      setErrors({\n                        ...errors,\n                        confirmPassword:\n                          rootStore.userStore.changePassword?.newPassword !==\n                          confirmPassword\n                            ? \"Please enter same password!\"\n                            : Utils.validate.single(\n                                confirmPassword,\n                                Utils.constraintsChangePassword.confirmPassword\n                              ),\n                      });\n                      rootStore.userStore.updateChangePassword({\n                        ...rootStore.userStore.changePassword,\n                        confirmPassword,\n                      });\n                    }}\n                  />\n                  {errors?.confirmPassword && (\n                    <span className=\"text-red-600 font-medium relative\">\n                      {errors.confirmPassword}\n                    </span>\n                  )}\n                </LibraryComponents.List>\n              </div>\n              {/*footer*/}\n              <div className=\"flex items-center justify-end p-6 border-t border-solid border-gray-300 rounded-b\">\n                <button\n                  className=\"text-red-500 background-transparent font-bold uppercase px-6 py-2 text-sm outline-none focus:outline-none mr-1 mb-1\"\n                  type=\"button\"\n                  style={{ transition: \"all .15s ease\" }}\n                  onClick={() => props.close()}\n                >\n                  Later\n                </button>\n                <button\n                  className=\"bg-green-500 text-white active:bg-green-600 font-bold uppercase text-sm px-6 py-3 rounded shadow hover:shadow-lg outline-none focus:outline-none mr-1 mb-1\"\n                  type=\"button\"\n                  style={{ transition: \"all .15s ease\" }}\n                  onClick={() => {\n                    if (\n                      Utils.validate(\n                        rootStore.userStore.changePassword,\n                        Utils.constraintsChangePassword\n                      ) === undefined &&\n                      !Utils.checkNotUndefined(errors)\n                    ) {\n                      props.click();\n                    } else {\n                      LibraryComponents.ToastsStore.warning(\n                        \"Please enter all information!\"\n                      );\n                    }\n                  }}\n                >\n                  Change\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"opacity-25 fixed inset-0 z-40 bg-black\"></div>\n      </>\n    </>\n  );\n}\n","import React, { useEffect } from \"react\";\r\nimport { Container } from \"reactstrap\";\r\n\r\ninterface ModalProps {\r\n  show?: boolean;\r\n  title?: string;\r\n  body?: string;\r\n  click: () => void;\r\n}\r\n\r\nexport default function ModalConfirm(props: ModalProps) {\r\n  const [showModal, setShowModal] = React.useState(props.show);\r\n  useEffect(() => {\r\n    setShowModal(props.show);\r\n  }, [props]);\r\n\r\n  return (\r\n    <Container>\r\n      {showModal && (\r\n        <>\r\n          <div\r\n            className=\"justify-center items-center  overflow-x-hidden overflow-y-auto fixed inset-0 z-50 outline-none focus:outline-none\"\r\n            onClick={() => setShowModal(false)}\r\n          >\r\n            <div className=\"relative w-auto my-6 mx-auto max-w-3xl\">\r\n              {/*content*/}\r\n              <div className=\"border-0 rounded-lg shadow-lg relative flex flex-col w-full bg-white outline-none focus:outline-none\">\r\n                {/*header*/}\r\n                <div className=\"flex items-start justify-between p-5 border-b border-solid border-gray-300 rounded-t\">\r\n                  <h3 className=\"text-3xl font-semibold\">{props.title}</h3>\r\n                  <button\r\n                    className=\"p-1  border-0 text-black opacity-1 ml-6 float-right text-3xl leading-none font-semibold outline-none focus:outline-none\"\r\n                    onClick={() => setShowModal(false)}\r\n                  >\r\n                    <span className=\" text-black h-6 w-6 text-2xl block outline-none focus:outline-none\">\r\n                      ×\r\n                    </span>\r\n                  </button>\r\n                </div>\r\n                {/*body*/}\r\n                <div className=\"relative p-6 flex-auto\">\r\n                  <p className=\"my-4 text-gray-600 text-lg leading-relaxed\">\r\n                    {props.body}\r\n                  </p>\r\n                </div>\r\n                {/*footer*/}\r\n                <div className=\"flex items-center justify-end p-6 border-t border-solid border-gray-300 rounded-b\">\r\n                  <button\r\n                    className=\"text-red-500 background-transparent font-bold uppercase px-6 py-2 text-sm outline-none focus:outline-none mr-1 mb-1\"\r\n                    type=\"button\"\r\n                    style={{ transition: \"all .15s ease\" }}\r\n                    onClick={() => setShowModal(false)}\r\n                  >\r\n                    Close\r\n                  </button>\r\n                  <button\r\n                    className=\"bg-green-500 text-white active:bg-green-600 font-bold uppercase text-sm px-6 py-3 rounded shadow hover:shadow-lg outline-none focus:outline-none mr-1 mb-1\"\r\n                    type=\"button\"\r\n                    style={{ transition: \"all .15s ease\" }}\r\n                    onClick={() => {\r\n                      setShowModal(false);\r\n                      props.click();\r\n                    }}\r\n                  >\r\n                    yes\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"opacity-25 fixed inset-0 z-40 bg-black\"></div>\r\n        </>\r\n      )}\r\n    </Container>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nconst Header: React.FunctionComponent<any> = (props) => (\r\n  <div className=\"sticky top-0 z-20 flex justify-between items-center px-4 py-3 border-b border-gray-200 bg-white\">\r\n    {props.children}\r\n  </div>\r\n);\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\ninterface PageHeadingProps {\r\n  title: string;\r\n  subTitle?: string;\r\n}\r\n\r\nconst PageHeading: React.FunctionComponent<PageHeadingProps> = (props) => (\r\n  <div>\r\n    <h2 className=\"text-lg font-bold leading-4 text-gray-900 mt-0\">\r\n      {props.title}\r\n    </h2>\r\n    {props.subTitle && (\r\n      <p className=\"text-xs leading-4 text-gray-500 m-0\">{props.subTitle}</p>\r\n    )}\r\n  </div>\r\n);\r\n\r\nexport default PageHeading;\r\n","import * as Clients from \"@lp/library/clients\";\nimport * as Models from \"@lp/features/users/models\";\n\nconst RELATIVE_PATH = \"/auth\";\n\nexport const onLogin = (user: Models.Login) =>\n  new Promise<Models.Login>((resolve, reject) => {\n    const client = Clients.createLimsPlusClient();\n    client\n      .post(`${RELATIVE_PATH}/login`, user)\n      .then((res) => {\n        resolve(res.data.data as Models.Login);\n      })\n      .catch((error) => {\n        reject({ error });\n      });\n  });\n\nexport const addUser = (user: Models.Users) =>\n  new Promise<Models.Users>((resolve, reject) => {\n    const client = Clients.createLimsPlusClient();\n    client\n      .post(`${RELATIVE_PATH}/addUser`, user)\n      .then((res) => {\n        resolve(res.data.data as Models.Users);\n      })\n      .catch((error) => {\n        reject({ error });\n      });\n  });\n\nexport const userList = () =>\n  new Promise<Models.Users[]>((resolve, reject) => {\n    const client = Clients.createLimsPlusClient();\n    client\n      .get(`${RELATIVE_PATH}/listUser`)\n      .then((res) => {\n        resolve(res.data.data);\n      })\n      .catch((error) => {\n        reject({ error });\n      });\n  });\n\nexport const deleteUser = (id: string) =>\n  new Promise<Models.Users[]>((resolve, reject) => {\n    const client = Clients.createLimsPlusClient();\n    client\n      .delete(`${RELATIVE_PATH}/deleteUser/${id}`)\n      .then((res) => {\n        resolve(res.data);\n      })\n      .catch((error) => {\n        reject({ error });\n      });\n  });\n\nexport const changePassword = (body: any) =>\n  new Promise<any>((resolve, reject) => {\n    const client = Clients.createLimsPlusClient();\n    client\n      .post(`${RELATIVE_PATH}/changePassword`, body)\n      .then((res) => {\n        resolve(res.data.data);\n      })\n      .catch((error) => {\n        reject({ error });\n      });\n  });\n\nexport const checkExitsUserId = (userId: string) =>\n  new Promise<any>((resolve, reject) => {\n    const client = Clients.createLimsPlusClient();\n    client\n      .post(`${RELATIVE_PATH}/checkExitsUserId`, { userId })\n      .then((res) => {\n        resolve(res.data.data);\n      })\n      .catch((error) => {\n        reject({ error });\n      });\n  });\n\nexport const updateUserSingleFiled = (userInfo: any) =>\n  new Promise<any>((resolve, reject) => {\n    const client = Clients.createLimsPlusClient();\n    client\n      .post(`${RELATIVE_PATH}/updateUserSingleFiled`, userInfo)\n      .then((res) => {\n        resolve(res);\n      })\n      .catch((error) => {\n        reject({ error });\n      });\n  });\n","import * as types from \"../constants\";\r\n\r\nconst initialState = {\r\n  isOpen: true,\r\n  isSticky: false\r\n};\r\n\r\nexport default function reducer(state = initialState, actions) {\r\n  switch (actions.type) {\r\n    case types.SIDEBAR_VISIBILITY_TOGGLE:\r\n      return {\r\n        ...state,\r\n        isOpen: !state.isOpen\r\n      };\r\n    case types.SIDEBAR_VISIBILITY_SHOW:\r\n      return {\r\n        ...state,\r\n        isOpen: true\r\n      };\r\n    case types.SIDEBAR_VISIBILITY_HIDE:\r\n      return {\r\n        ...state,\r\n        isOpen: false\r\n      };\r\n\r\n    case types.SIDEBAR_STICKY_TOGGLE:\r\n      return {\r\n        ...state,\r\n        isSticky: !state.isSticky\r\n      };\r\n    case types.SIDEBAR_STICKY_ENABLE:\r\n      return {\r\n        ...state,\r\n        isSticky: true\r\n      };\r\n    case types.LAYOUT_BOXED_ENABLE:\r\n    case types.LAYOUT_BOXED_TOGGLE:\r\n    case types.SIDEBAR_STICKY_DISABLE:\r\n      return {\r\n        ...state,\r\n        isSticky: false\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import * as types from \"../constants\";\r\n\r\nconst initialState = {\r\n  isBoxed: false\r\n};\r\n\r\nexport default function reducer(state = initialState, actions) {\r\n  switch (actions.type) {\r\n    case types.LAYOUT_BOXED_TOGGLE:\r\n      return {\r\n        ...state,\r\n        isBoxed: !state.isBoxed\r\n      };\r\n    case types.LAYOUT_BOXED_ENABLE:\r\n      return {\r\n        ...state,\r\n        isBoxed: true\r\n      };\r\n    case types.SIDEBAR_STICKY_ENABLE:\r\n    case types.SIDEBAR_STICKY_TOGGLE:\r\n    case types.LAYOUT_BOXED_DISABLE:\r\n      return {\r\n        ...state,\r\n        isBoxed: false\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import * as types from \"../constants\";\r\n\r\nconst themes = {\r\n  corporate: {\r\n    primary: \"#3B82EC\",\r\n    secondary: \"#495057\",\r\n    tertiary: \"#0069fc\",\r\n    success: \"#4BBF73\",\r\n    info: \"#1F9BCF\",\r\n    warning: \"#f0ad4e\",\r\n    danger: \"#d9534f\"\r\n  },\r\n  modern: {\r\n    primary: \"#2c7be5\",\r\n    secondary: \"#9d7bd8\",\r\n    tertiary: \"#5997eb\",\r\n    success: \"#4caf50\",\r\n    info: \"#47bac1\",\r\n    warning: \"#ff9800\",\r\n    danger: \"#e51c23\"\r\n  },\r\n  classic: {\r\n    primary: \"#47bac1\",\r\n    secondary: \"#a180da\",\r\n    tertiary: \"#5fc27e\",\r\n    success: \"#5fc27e\",\r\n    info: \"#5b7dff\",\r\n    warning: \"#fcc100\",\r\n    danger: \"#f44455\"\r\n  }\r\n};\r\n\r\nconst initialState = {\r\n  currentTheme: themes.corporate,\r\n  themes: themes\r\n};\r\n\r\nexport default function reducer(state = initialState, actions) {\r\n  switch (actions.type) {\r\n    case types.THEME_TOGGLE:\r\n      return {\r\n        ...state,\r\n        currentTheme: state.themes[actions.payload]\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport sidebar from \"./sidebarReducers\";\r\nimport layout from \"./layoutReducer\";\r\nimport theme from \"./themeReducer\";\r\n\r\nimport { reducer as toastr } from \"react-redux-toastr\";\r\n\r\nexport default combineReducers({\r\n  sidebar,\r\n  layout,\r\n  theme,\r\n  toastr\r\n});\r\n","// Sidebar\r\nexport const SIDEBAR_VISIBILITY_TOGGLE = \"SIDEBAR_VISIBILITY_TOGGLE\";\r\nexport const SIDEBAR_VISIBILITY_SHOW = \"SIDEBAR_VISIBILITY_SHOW\";\r\nexport const SIDEBAR_VISIBILITY_HIDE = \"SIDEBAR_VISIBILITY_HIDE\";\r\nexport const SIDEBAR_STICKY_TOGGLE = \"SIDEBAR_STICKY_TOGGLE\";\r\nexport const SIDEBAR_STICKY_ENABLE = \"SIDEBAR_STICKY_ENABLE\";\r\nexport const SIDEBAR_STICKY_DISABLE = \"SIDEBAR_STICKY_DISABLE\";\r\n\r\n// Layout\r\nexport const LAYOUT_BOXED_TOGGLE = \"LAYOUT_BOXED_TOGGLE\";\r\nexport const LAYOUT_BOXED_ENABLE = \"LAYOUT_BOXED_ENABLE\";\r\nexport const LAYOUT_BOXED_DISABLE = \"LAYOUT_BOXED_DISABLE\";\r\n\r\n// Theme\r\nexport const THEME_TOGGLE = \"THEME_TOGGLE\";\r\n","import { createStore } from \"redux\";\r\nimport rootReducer from \"../reducers/index\";\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport { Container, Row, Spinner } from \"reactstrap\";\r\n\r\nconst Loader = () => (\r\n  <Container fluid className=\"vh-50 d-flex\">\r\n    <Row className=\"justify-content-center align-self-center w-100 text-center\">\r\n      <Spinner color=\"primary\" />\r\n    </Row>\r\n  </Container>\r\n);\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\n\r\nimport Loader from \"./Loader\";\r\n\r\ntype Props = {};\r\ntype State = { component: any };\r\n\r\nexport default function asyncComponent(importComponent) {\r\n  class AsyncComponent extends React.Component<Props, State> {\r\n    constructor(props) {\r\n      super(props);\r\n\r\n      this.state = {\r\n        component: null,\r\n      };\r\n    }\r\n\r\n    async componentDidMount() {\r\n      const { default: component } = await importComponent();\r\n      this.setState({\r\n        component: component,\r\n      });\r\n    }\r\n\r\n    render() {\r\n      const { component } = this.state;\r\n\r\n      const C = component;\r\n\r\n      return C ? <C {...this.props} /> : <Loader />;\r\n    }\r\n  }\r\n\r\n  return AsyncComponent;\r\n}\r\n","import async from \"../layouts/components/Async\";\r\n\r\nimport {\r\n  Bell as Bellicon,\r\n  BookOpen as BookOpenIcon,\r\n  Calendar as CalendarIcon,\r\n  CheckSquare as CheckSquareIcon,\r\n  Grid as GridIcon,\r\n  Heart as HeartIcon,\r\n  Layout as LayoutIcon,\r\n  List as ListIcon,\r\n  MapPin as MapPinIcon,\r\n  Monitor as MonitorIcon,\r\n  PieChart as PieChartIcon,\r\n  Sliders as SlidersIcon,\r\n  Users as UsersIcon,\r\n} from \"react-feather\";\r\n\r\n// Landing\r\nimport Login from \"@lp/features/login/scenes/login\";\r\n\r\n// Dashboards\r\nconst Default = async(() => import(\"@lp/features/Default\"));\r\n\r\n// Banner\r\nconst Banner = async(() => import(\"@lp/features/banner/scenes/banner\"));\r\n\r\n// Collection\r\nconst Collection_Lab = async(\r\n  () => import(\"@lp/features/collection/labs/scenes/Lab\")\r\n);\r\nconst Collection_Deginisation = async(\r\n  () => import(\"@lp/features/collection/deginisation/scenes/deginisation\")\r\n);\r\nconst Collection_Department = async(\r\n  () => import(\"@lp/features/collection/department/scenes/department\")\r\n);\r\nconst Collection_Role = async(\r\n  () => import(\"@lp/features/collection/labs/scenes/Lab\")\r\n);\r\n\r\n// User\r\nconst User = async(() => import(\"@lp/features/users/scenes/Users\"));\r\nconst ChangePassword = async(\r\n  () => import(\"@lp/features/changePassword/scenes/changePassword\")\r\n);\r\n\r\n// Routes\r\nconst loginRoutes = {\r\n  path: \"/\",\r\n  name: \"Login\",\r\n  component: Login,\r\n  children: null,\r\n};\r\n\r\nconst dashboardRoutes = {\r\n  path: \"/dashboard\",\r\n  name: \"Dashboard\",\r\n  header: \"Dashboard\",\r\n  icon: SlidersIcon,\r\n  children: [\r\n    {\r\n      path: \"/dashboard\",\r\n      name: \"Default\",\r\n      component: Default,\r\n    },\r\n  ],\r\n};\r\n\r\nconst bannerRoutes = {\r\n  path: \"/banner\",\r\n  name: \"Banner\",\r\n  icon: LayoutIcon,\r\n  children: [\r\n    {\r\n      path: \"/banner\",\r\n      name: \"Banner\",\r\n      component: Banner,\r\n    },\r\n  ],\r\n};\r\n\r\nconst collectionRoutes = {\r\n  path: \"/collection\",\r\n  name: \"Collection\",\r\n  icon: LayoutIcon,\r\n  children: [\r\n    {\r\n      path: \"/collection/lab\",\r\n      name: \"Lab\",\r\n      component: Collection_Lab,\r\n    },\r\n    {\r\n      path: \"/collection/deginisation\",\r\n      name: \"Deginisation\",\r\n      component: Collection_Deginisation,\r\n    },\r\n    {\r\n      path: \"/collection/department\",\r\n      name: \"Department\",\r\n      component: Collection_Department,\r\n    },\r\n    {\r\n      path: \"/collection/role\",\r\n      name: \"Role\",\r\n      component: Collection_Role,\r\n    },\r\n  ],\r\n};\r\n\r\nconst userRoutes = {\r\n  path: \"/user\",\r\n  name: \"User\",\r\n  icon: LayoutIcon,\r\n  children: [\r\n    {\r\n      path: \"/user\",\r\n      name: \"User\",\r\n      component: User,\r\n    },\r\n    {\r\n      path: \"/user/changePassword\",\r\n      name: \"Change Password\",\r\n      component: ChangePassword,\r\n    },\r\n  ],\r\n};\r\n\r\n// Dashboard specific routes\r\nexport const dashboard = [\r\n  dashboardRoutes,\r\n  bannerRoutes,\r\n  collectionRoutes,\r\n  userRoutes,\r\n];\r\n\r\n// Landing specific routes\r\nexport const login = [loginRoutes];\r\n\r\n// All routes\r\nexport default [dashboardRoutes, bannerRoutes, collectionRoutes, userRoutes];\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nconst Wrapper = ({ layout, children }) => (\r\n  <div className={\"wrapper \" + (layout.isBoxed ? \"wrapper-boxed\" : \"\")}>\r\n    {children}\r\n  </div>\r\n);\r\n\r\nexport default connect((store) => ({\r\n  layout: store.layout,\r\n}))(Wrapper);\r\n","import React, { useState } from \"react\";\r\nimport { NavLink, withRouter } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { observer } from \"mobx-react\";\r\nimport Contexts from \"@lp/library/stores\";\r\n\r\nimport { Badge, Collapse } from \"reactstrap\";\r\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\r\n\r\nimport { Box } from \"react-feather\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCircle } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport routes from \"../../routes/index\";\r\n\r\nconst initOpenRoutes = (location) => {\r\n  /* Open collapse element that matches current url */\r\n  const pathName = location.pathname;\r\n\r\n  let _routes = {};\r\n\r\n  routes.forEach((route: any, index) => {\r\n    const isActive = pathName.indexOf(route.path) === 0;\r\n    const isOpen = route.open;\r\n    const isHome = route.containsHome && pathName === \"/\" ? true : false;\r\n\r\n    _routes = Object.assign({}, _routes, {\r\n      [index]: isActive || isOpen || isHome,\r\n    });\r\n  });\r\n\r\n  return _routes;\r\n};\r\n\r\nconst SidebarCategory = withRouter(\r\n  ({\r\n    name,\r\n    badgeColor,\r\n    badgeText,\r\n    icon: Icon,\r\n    isOpen,\r\n    children,\r\n    onClick,\r\n    location,\r\n    to,\r\n  }) => {\r\n    const getSidebarItemClass = (path) => {\r\n      return location.pathname.indexOf(path) !== -1 ||\r\n        (location.pathname === \"/\" && path === \"/dashboard\")\r\n        ? \"active\"\r\n        : \"\";\r\n    };\r\n\r\n    return (\r\n      <li className={\"sidebar-item \" + getSidebarItemClass(to)}>\r\n        <span\r\n          data-toggle=\"collapse\"\r\n          className={\"sidebar-link \" + (!isOpen ? \"collapsed\" : \"\")}\r\n          onClick={onClick}\r\n          aria-expanded={isOpen ? \"true\" : \"false\"}\r\n        >\r\n          <span className=\"align-middle\">{name}</span>\r\n          {badgeColor && badgeText ? (\r\n            <Badge color={badgeColor} size={18} className=\"sidebar-badge\">\r\n              {badgeText}\r\n            </Badge>\r\n          ) : null}\r\n        </span>\r\n        <Collapse isOpen={isOpen}>\r\n          <ul id=\"item\" className={\"sidebar-dropdown list-unstyled\"}>\r\n            {children}\r\n          </ul>\r\n        </Collapse>\r\n      </li>\r\n    );\r\n  }\r\n);\r\n\r\nconst SidebarItem = withRouter(\r\n  ({ name, badgeColor, badgeText, icon: Icon, location, to }) => {\r\n    const getSidebarItemClass = (path) => {\r\n      return location.pathname === path ? \"active\" : \"\";\r\n    };\r\n\r\n    return (\r\n      <li className={\"sidebar-item \" + getSidebarItemClass(to)}>\r\n        <NavLink to={to} className=\"sidebar-link\" activeClassName=\"active\">\r\n          {Icon ? <Icon size={18} className=\"align-middle mr-3\" /> : null}\r\n          {name}\r\n          {badgeColor && badgeText ? (\r\n            <Badge color={badgeColor} size={18} className=\"sidebar-badge\">\r\n              {badgeText}\r\n            </Badge>\r\n          ) : null}\r\n        </NavLink>\r\n      </li>\r\n    );\r\n  }\r\n);\r\n\r\nconst Sidebar = observer(({ location, sidebar, layout }) => {\r\n  const rootStore = React.useContext(Contexts.rootStore);\r\n  const [openRoutes, setOpenRoutes] = useState(() => initOpenRoutes(location));\r\n\r\n  const toggle = (index) => {\r\n    // Collapse all elements\r\n    Object.keys(openRoutes).forEach(\r\n      (item) =>\r\n        openRoutes[index] ||\r\n        setOpenRoutes((openRoutes) =>\r\n          Object.assign({}, openRoutes, { [item]: false })\r\n        )\r\n    );\r\n\r\n    // Toggle selected element\r\n    setOpenRoutes((openRoutes) =>\r\n      Object.assign({}, openRoutes, { [index]: !openRoutes[index] })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <nav\r\n      className={\r\n        \"sidebar\" +\r\n        (!sidebar.isOpen ? \" toggled\" : \"\") +\r\n        (sidebar.isSticky ? \" sidebar-sticky\" : \"\")\r\n      }\r\n    >\r\n      <div className=\"sidebar-content\">\r\n        <PerfectScrollbar>\r\n          <a className=\"sidebar-brand\" href=\"/\">\r\n            <Box className=\"align-middle text-primary\" size={24} />{\" \"}\r\n            <span className=\"align-middle\">Lims Plus</span>\r\n          </a>\r\n\r\n          <ul className=\"sidebar-nav\">\r\n            {routes.map((category: any, index) => {\r\n              return (\r\n                <React.Fragment key={index}>\r\n                  {/* {category.header ? (\r\n                    <li className=\"sidebar-header\">{category.header}</li>\r\n                  ) : null} */}\r\n\r\n                  {category.children ? (\r\n                    <SidebarCategory\r\n                      name={category.name}\r\n                      badgeColor={category.badgeColor}\r\n                      badgeText={category.badgeText}\r\n                      icon={category.icon}\r\n                      to={category.path}\r\n                      isOpen={openRoutes[index]}\r\n                      onClick={() => toggle(index)}\r\n                    >\r\n                      {category.children.map((route, index) => (\r\n                        <SidebarItem\r\n                          key={index}\r\n                          name={route.name}\r\n                          to={route.path}\r\n                          badgeColor={route.badgeColor}\r\n                          badgeText={route.badgeText}\r\n                        />\r\n                      ))}\r\n                    </SidebarCategory>\r\n                  ) : (\r\n                    <SidebarItem\r\n                      name={category.name}\r\n                      to={category.path}\r\n                      icon={category.icon}\r\n                      badgeColor={category.badgeColor}\r\n                      badgeText={category.badgeText}\r\n                    />\r\n                  )}\r\n                </React.Fragment>\r\n              );\r\n            })}\r\n          </ul>\r\n\r\n          {!layout.isBoxed && !sidebar.isSticky ? (\r\n            <div className=\"sidebar-bottom d-none d-lg-block\">\r\n              <div className=\"media\">\r\n                {/* <img\r\n                  className=\"rounded-circle mr-3\"\r\n                  src={avatar}\r\n                  alt=\"Chris Wood\"\r\n                  width=\"40\"\r\n                  height=\"40\"\r\n                /> */}\r\n                <div className=\"media-body\">\r\n                  <h5 className=\"mb-1\">\r\n                    {rootStore.userStore.inputLogin.userId}\r\n                  </h5>\r\n                  <div>\r\n                    <FontAwesomeIcon icon={faCircle} className=\"text-success\" />{\" \"}\r\n                    Online\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ) : null}\r\n        </PerfectScrollbar>\r\n      </div>\r\n    </nav>\r\n  );\r\n});\r\n\r\nexport default withRouter(\r\n  connect((store) => ({\r\n    sidebar: store.sidebar,\r\n    layout: store.layout,\r\n  }))(Sidebar)\r\n);\r\n","import React from \"react\";\r\nimport classNames from \"classnames\";\r\n\r\nconst Main = ({ className, children }) => (\r\n  <div className={classNames(\"main\", className)}>{children}</div>\r\n);\r\n\r\nexport default Main;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { toggleSidebar } from \"../../redux/actions/sidebarActions\";\r\nimport * as Clients from \"@lp/library/clients\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Contexts from \"@lp/library/stores\";\r\n\r\nimport {\r\n  Row,\r\n  Col,\r\n  Collapse,\r\n  Navbar,\r\n  Nav,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  ListGroup,\r\n  ListGroupItem,\r\n  Form,\r\n  Input,\r\n} from \"reactstrap\";\r\n\r\nimport {\r\n  AlertCircle,\r\n  Bell,\r\n  BellOff,\r\n  Home,\r\n  MessageCircle,\r\n  PieChart,\r\n  Settings,\r\n  User,\r\n  UserPlus,\r\n} from \"react-feather\";\r\n\r\nconst notifications = [\r\n  {\r\n    type: \"important\",\r\n    title: \"Update completed\",\r\n    description: \"Restart server 12 to complete the update.\",\r\n    time: \"2h ago\",\r\n  },\r\n  {\r\n    type: \"default\",\r\n    title: \"Lorem ipsum\",\r\n    description: \"Aliquam ex eros, imperdiet vulputate hendrerit et.\",\r\n    time: \"6h ago\",\r\n  },\r\n  {\r\n    type: \"login\",\r\n    title: \"Login from 192.186.1.1\",\r\n    description: \"\",\r\n    time: \"6h ago\",\r\n  },\r\n  {\r\n    type: \"request\",\r\n    title: \"New connection\",\r\n    description: \"Anna accepted your request.\",\r\n    time: \"12h ago\",\r\n  },\r\n];\r\n\r\nconst messages = [\r\n  {\r\n    name: \"Ashley Briggs\",\r\n    avatar: \"\",\r\n    description: \"Nam pretium turpis et arcu. Duis arcu tortor.\",\r\n    time: \"15m ago\",\r\n  },\r\n  {\r\n    name: \"Chris Wood\",\r\n    avatar: \"\",\r\n    description: \"Curabitur ligula sapien euismod vitae.\",\r\n    time: \"2h ago\",\r\n  },\r\n  {\r\n    name: \"Stacie Hall\",\r\n    avatar: \"\",\r\n    description: \"Pellentesque auctor neque nec urna.\",\r\n    time: \"4h ago\",\r\n  },\r\n  {\r\n    name: \"Bertha Martin\",\r\n    avatar: \"\",\r\n    description: \"Aenean tellus metus, bibendum sed, posuere ac, mattis non.\",\r\n    time: \"5h ago\",\r\n  },\r\n];\r\n\r\ninterface InputProps {\r\n  children: any;\r\n  count?: any;\r\n  showBadge?: any;\r\n  header?: any;\r\n  footer?: any;\r\n  icon?: any;\r\n}\r\n\r\nconst NavbarDropdown: React.FunctionComponent<InputProps> = ({\r\n  children,\r\n  count,\r\n  showBadge,\r\n  header,\r\n  footer,\r\n  icon: Icon,\r\n}) => (\r\n  <UncontrolledDropdown nav inNavbar className=\"mr-2\">\r\n    <DropdownToggle nav className=\"nav-icon dropdown-toggle\">\r\n      <div className=\"position-relative\">\r\n        <Icon className=\"align-middle\" size={18} />\r\n        {showBadge ? <span className=\"indicator\">{count}</span> : null}\r\n      </div>\r\n    </DropdownToggle>\r\n    <DropdownMenu right className=\"dropdown-menu-lg py-0\">\r\n      <div className=\"dropdown-menu-header position-relative\">\r\n        {count} {header}\r\n      </div>\r\n      <ListGroup>{children}</ListGroup>\r\n      <DropdownItem header className=\"dropdown-menu-footer\">\r\n        <span className=\"text-muted\">{footer}</span>\r\n      </DropdownItem>\r\n    </DropdownMenu>\r\n  </UncontrolledDropdown>\r\n);\r\n\r\ninterface NavbarItemProps {\r\n  icon: any;\r\n  title?: any;\r\n  description?: any;\r\n  time?: any;\r\n  spacing?: any;\r\n}\r\n\r\nconst NavbarDropdownItem: React.FunctionComponent<NavbarItemProps> = ({\r\n  icon,\r\n  title,\r\n  description,\r\n  time,\r\n  spacing,\r\n}) => (\r\n  <ListGroupItem>\r\n    <Row noGutters className=\"align-items-center\">\r\n      <Col xs={2}>{icon}</Col>\r\n      <Col xs={10} className=\"pl-2\">\r\n        <div className=\"text-dark\">{title}</div>\r\n        <div className=\"text-muted small mt-1\">{description}</div>\r\n        <div className=\"text-muted small mt-1\">{time}</div>\r\n      </Col>\r\n    </Row>\r\n  </ListGroupItem>\r\n);\r\n\r\nconst NavbarComponent = ({ dispatch }) => {\r\n  const history = useHistory();\r\n  const rootStore = React.useContext(Contexts.rootStore);\r\n  return (\r\n    <Navbar color=\"white\" light expand>\r\n      <span\r\n        className=\"sidebar-toggle d-flex mr-2\"\r\n        onClick={() => {\r\n          dispatch(toggleSidebar());\r\n        }}\r\n      >\r\n        <i className=\"hamburger align-self-center\" />\r\n      </span>\r\n\r\n      <Form inline>\r\n        <Input\r\n          type=\"text\"\r\n          placeholder=\"Search projects...\"\r\n          aria-label=\"Search\"\r\n          className=\"form-control-no-border mr-sm-2\"\r\n        />\r\n      </Form>\r\n\r\n      <Collapse navbar>\r\n        <Nav className=\"ml-auto\" navbar>\r\n          <NavbarDropdown\r\n            header=\"New Messages\"\r\n            footer=\"Show all messages\"\r\n            icon={MessageCircle}\r\n            count={messages.length}\r\n            showBadge\r\n          >\r\n            {messages.map((item, key) => {\r\n              return (\r\n                <NavbarDropdownItem\r\n                  key={key}\r\n                  icon={\r\n                    <img\r\n                      className=\"avatar img-fluid rounded-circle\"\r\n                      src={item.avatar}\r\n                      alt={item.name}\r\n                    />\r\n                  }\r\n                  title={item.name}\r\n                  description={item.description}\r\n                  time={item.time}\r\n                  spacing\r\n                />\r\n              );\r\n            })}\r\n          </NavbarDropdown>\r\n\r\n          <NavbarDropdown\r\n            header=\"New Notifications\"\r\n            footer=\"Show all notifications\"\r\n            icon={BellOff}\r\n            count={notifications.length}\r\n          >\r\n            {notifications.map((item, key) => {\r\n              let icon = <Bell size={18} className=\"text-warning\" />;\r\n\r\n              if (item.type === \"important\") {\r\n                icon = <AlertCircle size={18} className=\"text-danger\" />;\r\n              }\r\n\r\n              if (item.type === \"login\") {\r\n                icon = <Home size={18} className=\"text-primary\" />;\r\n              }\r\n\r\n              if (item.type === \"request\") {\r\n                icon = <UserPlus size={18} className=\"text-success\" />;\r\n              }\r\n\r\n              return (\r\n                <NavbarDropdownItem\r\n                  key={key}\r\n                  icon={icon}\r\n                  title={item.title}\r\n                  description={item.description}\r\n                  time={item.time}\r\n                />\r\n              );\r\n            })}\r\n          </NavbarDropdown>\r\n\r\n          <UncontrolledDropdown nav inNavbar>\r\n            <span className=\"d-inline-block d-sm-none\">\r\n              <DropdownToggle nav caret>\r\n                <Settings size={18} className=\"align-middle\" />\r\n              </DropdownToggle>\r\n            </span>\r\n            <span className=\"d-none d-sm-inline-block\">\r\n              <DropdownToggle nav caret>\r\n                <span className=\"text-dark\">Profile</span>\r\n              </DropdownToggle>\r\n            </span>\r\n            <DropdownMenu right>\r\n              {/* <DropdownItem>\r\n                <User size={18} className=\"align-middle mr-2\" />\r\n                Profile\r\n              </DropdownItem> */}\r\n              <DropdownItem>\r\n                <PieChart size={18} className=\"align-middle mr-2\" />\r\n                Analytics\r\n              </DropdownItem>\r\n              <DropdownItem divider />\r\n              <DropdownItem>Settings & Privacy</DropdownItem>\r\n              <DropdownItem>Help</DropdownItem>\r\n              <DropdownItem\r\n                onClick={() => {\r\n                  Clients.storageClient.setItem(\"isLogin\", null);\r\n                  rootStore.userStore.clearLogin();\r\n                  history.push(\"/\");\r\n                }}\r\n              >\r\n                Sign out\r\n              </DropdownItem>\r\n            </DropdownMenu>\r\n          </UncontrolledDropdown>\r\n        </Nav>\r\n      </Collapse>\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nexport default connect((store) => ({\r\n  app: store.app,\r\n}))(NavbarComponent);\r\n","import * as types from \"../constants\";\r\n\r\nexport function toggleSidebar() {\r\n  return {\r\n    type: types.SIDEBAR_VISIBILITY_TOGGLE\r\n  };\r\n}\r\n\r\nexport function showSidebar() {\r\n  return {\r\n    type: types.SIDEBAR_VISIBILITY_SHOW\r\n  };\r\n}\r\n\r\nexport function hideSidebar() {\r\n  return {\r\n    type: types.SIDEBAR_VISIBILITY_HIDE\r\n  };\r\n}\r\n\r\nexport function toggleStickySidebar() {\r\n  return {\r\n    type: types.SIDEBAR_STICKY_TOGGLE\r\n  };\r\n}\r\n\r\nexport function enableStickySidebar() {\r\n  return {\r\n    type: types.SIDEBAR_STICKY_ENABLE\r\n  };\r\n}\r\n\r\nexport function disableStickySidebar() {\r\n  return {\r\n    type: types.SIDEBAR_STICKY_DISABLE\r\n  };\r\n}\r\n","import React from \"react\";\r\n\r\nconst Content = ({ children }) => <div className=\"content\">{children}</div>;\r\n\r\nexport default Content;\r\n","import React from \"react\";\r\nimport { Container, Row, Col } from \"reactstrap\";\r\n\r\nconst Footer = () => (\r\n  <footer className=\"footer\">\r\n    <Container fluid>\r\n      <Row className=\"text-muted\">\r\n        <Col xs=\"6\" className=\"text-left\">\r\n          <ul className=\"list-inline\">\r\n            <li className=\"list-inline-item\">\r\n              <span className=\"text-muted\">Support</span>\r\n            </li>\r\n            <li className=\"list-inline-item\">\r\n              <span className=\"text-muted\">Help Center</span>\r\n            </li>\r\n            <li className=\"list-inline-item\">\r\n              <span className=\"text-muted\">Privacy</span>\r\n            </li>\r\n            <li className=\"list-inline-item\">\r\n              <span className=\"text-muted\">Terms of Service</span>\r\n            </li>\r\n          </ul>\r\n        </Col>\r\n        <Col xs=\"6\" className=\"text-right\">\r\n          <p className=\"mb-0\">\r\n            &copy; {new Date().getFullYear()} -{\" \"}\r\n            <span className=\"text-muted\">Lims Plus</span>\r\n          </p>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  </footer>\r\n);\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { toggleBoxedLayout } from \"../../redux/actions/layoutActions\";\r\nimport { toggleStickySidebar } from \"../../redux/actions/sidebarActions\";\r\nimport { toggleSidebar } from \"../../redux/actions/sidebarActions\";\r\nimport { enableClassicTheme } from \"../../redux/actions/themeActions\";\r\nimport { enableCorporateTheme } from \"../../redux/actions/themeActions\";\r\nimport { enableModernTheme } from \"../../redux/actions/themeActions\";\r\n\r\nimport { Badge, Button } from \"reactstrap\";\r\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\r\n\r\nimport { Settings as SettingsIcon } from \"react-feather\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faAngleRight,\r\n  faShoppingCart,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\ntype Props = { layout; sidebar; dispatch };\r\ntype State = { isOpen: boolean };\r\n\r\nclass Settings extends React.Component<Props, State> {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isOpen: false,\r\n    };\r\n\r\n    this.setWrapperRef = this.setWrapperRef.bind(this);\r\n    this.handleClickOutside = this.handleClickOutside.bind(this);\r\n  }\r\n\r\n  toggleSidebar() {\r\n    this.setState({ isOpen: !this.state.isOpen });\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.addEventListener(\"mousedown\", this.handleClickOutside);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener(\"mousedown\", this.handleClickOutside);\r\n  }\r\n\r\n  setWrapperRef(node) {\r\n    //  this.wrapperRef = node;\r\n  }\r\n\r\n  handleClickOutside(event) {\r\n    // if (this.wrapperRef && !this.wrapperRef.contains(event.target)) {\r\n    //   this.setState({ isOpen: false });\r\n    // }\r\n  }\r\n\r\n  render() {\r\n    const { isOpen } = this.state;\r\n    const { layout, sidebar, dispatch } = this.props;\r\n\r\n    return (\r\n      <div\r\n        ref={this.setWrapperRef}\r\n        className={\"settings \" + (isOpen ? \"open\" : \"\")}\r\n      >\r\n        <div className=\"settings-toggle\" onClick={() => this.toggleSidebar()}>\r\n          <SettingsIcon />\r\n        </div>\r\n\r\n        <div className=\"settings-panel\">\r\n          <div className=\"settings-content\">\r\n            <PerfectScrollbar>\r\n              <div className=\"settings-title\">\r\n                <Button close onClick={() => this.toggleSidebar()} />\r\n\r\n                <h4>Settings</h4>\r\n              </div>\r\n\r\n              <div className=\"settings-section\">\r\n                <small className=\"d-block text-uppercase font-weight-bold text-muted mb-2\">\r\n                  Layouts\r\n                </small>\r\n\r\n                <ul className=\"settings-layouts\">\r\n                  <li>\r\n                    <span\r\n                      className=\"settings-layouts-item\"\r\n                      onClick={() =>\r\n                        dispatch(toggleStickySidebar(), this.toggleSidebar())\r\n                      }\r\n                    >\r\n                      {sidebar.isSticky ? \"Static Sidebar\" : \"Sticky Sidebar\"}\r\n                      <Badge tag=\"small\" className=\"float-right mt-1\">\r\n                        <FontAwesomeIcon icon={faAngleRight} />\r\n                      </Badge>\r\n                    </span>\r\n                  </li>\r\n                  <li>\r\n                    <span\r\n                      className=\"settings-layouts-item\"\r\n                      onClick={() =>\r\n                        dispatch(toggleSidebar(), this.toggleSidebar())\r\n                      }\r\n                    >\r\n                      {sidebar.isOpen ? \"Collapsed Sidebar\" : \"Visible Sidebar\"}\r\n                      <Badge tag=\"small\" className=\"float-right mt-1\">\r\n                        <FontAwesomeIcon icon={faAngleRight} />\r\n                      </Badge>\r\n                    </span>\r\n                  </li>\r\n                  <li>\r\n                    <span\r\n                      className=\"settings-layouts-item\"\r\n                      onClick={() =>\r\n                        dispatch(toggleBoxedLayout(), this.toggleSidebar())\r\n                      }\r\n                    >\r\n                      {layout.isBoxed ? \"Full Layout\" : \"Boxed Layout\"}\r\n                      <Badge tag=\"small\" className=\"float-right mt-1\">\r\n                        <FontAwesomeIcon icon={faAngleRight} />\r\n                      </Badge>\r\n                    </span>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n            </PerfectScrollbar>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect((store) => ({\r\n  layout: store.layout,\r\n  sidebar: store.sidebar,\r\n}))(Settings);\r\n","import * as types from \"../constants\";\r\n\r\nexport function toggleBoxedLayout() {\r\n  return {\r\n    type: types.LAYOUT_BOXED_TOGGLE\r\n  };\r\n}\r\n\r\nexport function enableBoxedLayout() {\r\n  return {\r\n    type: types.LAYOUT_BOXED_ENABLE\r\n  };\r\n}\r\n\r\nexport function disableBoxedLayout() {\r\n  return {\r\n    type: types.LAYOUT_BOXED_DISABLE\r\n  };\r\n}\r\n","import React from \"react\";\r\n\r\nimport Wrapper from \"./components/Wrapper\";\r\nimport Sidebar from \"./components/Sidebar\";\r\nimport Main from \"./components/Main\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport Content from \"./components/Content\";\r\nimport Footer from \"./components/Footer\";\r\nimport Settings from \"./components/Settings\";\r\n\r\nconst Dashboard = ({ children }) => (\r\n  <React.Fragment>\r\n    <Wrapper>\r\n      <Sidebar />\r\n      <Main className={null}>\r\n        <Navbar />\r\n        <Content>{children}</Content>\r\n        <Footer />\r\n      </Main>\r\n    </Wrapper>\r\n    <Settings />\r\n  </React.Fragment>\r\n);\r\n\r\nexport default Dashboard;\r\n","import React from \"react\";\r\n\r\nimport Main from \"./components/Main\";\r\n\r\nconst Landing = ({ children }) => <div>{children}</div>;\r\n\r\nexport default Landing;\r\n","import React from \"react\";\r\n\r\nimport { Col, Container, Row } from \"reactstrap\";\r\n\r\nimport Main from \"./components/Main\";\r\nimport Settings from \"./components/Settings\";\r\n\r\nconst Auth = ({ children }) => (\r\n  <React.Fragment>\r\n    <Main className=\"d-flex w-100 justify-content-center\">\r\n      <Container className=\"d-flex flex-column\">\r\n        <Row className=\"h-100\">\r\n          <Col sm=\"10\" md=\"8\" lg=\"6\" className=\"mx-auto d-table h-100\">\r\n            <div className=\"d-table-cell align-middle\">{children}</div>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </Main>\r\n    <Settings  />\r\n  </React.Fragment>\r\n);\r\n\r\nexport default Auth;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { Button } from \"reactstrap\";\r\n\r\nconst Page404 = () => (\r\n  <div className=\"text-center\">\r\n    <h1 className=\"display-1 font-weight-bold\">404</h1>\r\n    <p className=\"h1\">Page not found</p>\r\n    <p className=\"h2 font-weight-normal mt-3 mb-4\">\r\n      The page you are looking for might have been removed.\r\n    </p>\r\n    <Link to=\"/dashboard\">\r\n      <Button color=\"primary\" size=\"lg\">\r\n        Return to website\r\n      </Button>\r\n    </Link>\r\n  </div>\r\n);\r\n\r\nexport default Page404;\r\n","import React from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\ntype Props = { location: any };\r\n\r\nclass ScrollToTop extends React.Component<Props> {\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.location !== prevProps.location) {\r\n      window.scrollTo(0, 0);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default withRouter(ScrollToTop);\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport { login, dashboard as dashboardRoutes } from \"./index\";\r\n\r\nimport DashboardLayout from \"../layouts/Dashboard\";\r\nimport LandingLayout from \"../layouts/Landing\";\r\nimport AuthLayout from \"../layouts/Auth\";\r\nimport Page404 from \"@lp/features/login/scenes/Page404\";\r\n\r\nimport ScrollToTop from \"@lp/layouts/components/ScrollToTop\";\r\n\r\nconst childRoutes = (Layout, routes) =>\r\n  routes.map(({ children, path, component: Component }, index) =>\r\n    children ? (\r\n      // Route item with children\r\n      children.map(({ path, component: Component }, index) => (\r\n        <Route\r\n          key={index}\r\n          path={path}\r\n          exact\r\n          render={(props) => (\r\n            <Layout>\r\n              <Component {...props} />\r\n            </Layout>\r\n          )}\r\n        />\r\n      ))\r\n    ) : (\r\n      // Route item without children\r\n      <Route\r\n        key={index}\r\n        path={path}\r\n        exact\r\n        render={(props) => (\r\n          <Layout>\r\n            <Component {...props} />\r\n          </Layout>\r\n        )}\r\n      />\r\n    )\r\n  );\r\n\r\nconst Routes = () => (\r\n  <Router>\r\n    <ScrollToTop>\r\n      <Switch>\r\n        {childRoutes(LandingLayout, login)}\r\n        {childRoutes(DashboardLayout, dashboardRoutes)}\r\n        <Route\r\n          render={() => (\r\n            <AuthLayout>\r\n              <Page404 />\r\n            </AuthLayout>\r\n          )}\r\n        />\r\n      </Switch>\r\n    </ScrollToTop>\r\n  </Router>\r\n);\r\n\r\nexport default Routes;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport { Router, Link, RouteComponentProps, navigate } from \"@reach/router\";\r\nimport * as Features from \"@lp/features\";\r\nimport * as LibraryComponents from \"@lp/library/components\";\r\nimport Contexts from \"@lp/library/stores\";\r\nimport * as Models from \"@lp/models\";\r\nimport * as ModelsUser from \"@lp/features/users/models\";\r\nimport * as Utils from \"@lp/library/utils\";\r\nimport * as Assets from \"@lp/library/assets\";\r\nimport * as Clients from \"@lp/library/clients\";\r\nimport * as Bootstrap from \"react-bootstrap\";\r\nimport { Provider } from \"react-redux\";\r\nimport ReduxToastr from \"react-redux-toastr\";\r\n\r\nimport store from \"./redux/store/index\";\r\n\r\nimport Routes from \"./routes/Routes\";\r\n\r\ninterface LoginPageProps extends RouteComponentProps {\r\n  definitions: Models.Definition[];\r\n}\r\n\r\nconst LoginPage: React.FunctionComponent<LoginPageProps> = observer((props) => {\r\n  const rootStore = React.useContext(Contexts.rootStore);\r\n  const [errors, setErrors] = useState<ModelsUser.Login>();\r\n\r\n  return (\r\n    <>\r\n      <div className=\"h-screen w-screen fixed left-0 top-0 bg-gray-600 flex flex-col justify-center\">\r\n        <div className=\"grid grid-cols-2\">\r\n          <div className=\"flex flex-col justify-center items-center md:w-32 lg:w-48\">\r\n            <img src={Assets.logo} className=\"w-20 h-15\" alt=\"logo\" />\r\n            <div className=\"mt-2 mb-2\">\r\n              <Bootstrap.Carousel>\r\n                {rootStore.bannerStore.listBanner.map((item, index) => (\r\n                  <Bootstrap.Carousel.Item interval={5000}>\r\n                    <img\r\n                      src={item.image}\r\n                      style={{\r\n                        width: window.innerWidth / 3,\r\n                        height: window.innerHeight / 2,\r\n                      }}\r\n                      alt=\"First slide\"\r\n                    />\r\n                    <Bootstrap.Carousel.Caption>\r\n                      <h3 className=\"text-black\">{item.title}</h3>\r\n                    </Bootstrap.Carousel.Caption>\r\n                  </Bootstrap.Carousel.Item>\r\n                ))}\r\n              </Bootstrap.Carousel>\r\n            </div>\r\n            <h2 className=\"text-2xl text-white font-bold\">Lims Plus</h2>\r\n          </div>\r\n\r\n          <div className=\"bg-white p-6 rounded-md max-w-md\">\r\n            <LibraryComponents.List\r\n              direction=\"col\"\r\n              space={4}\r\n              justify=\"stretch\"\r\n              fill\r\n            >\r\n              <LibraryComponents.Form.InputWrapper label=\"Lab\" id=\"lab\">\r\n                <select\r\n                  name=\"lab\"\r\n                  className=\"leading-4 p-2 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-base border border-gray-300 rounded-md\"\r\n                  onChange={(e) => {\r\n                    const lab = e.target.value;\r\n                    setErrors({\r\n                      ...errors,\r\n                      lab: Utils.validate.single(\r\n                        lab,\r\n                        Utils.constraintsLogin.lab\r\n                      ),\r\n                    });\r\n                    rootStore.userStore.updateInputUser({\r\n                      ...rootStore.userStore.inputLogin,\r\n                      lab,\r\n                    });\r\n                  }}\r\n                >\r\n                  <option selected>Select</option>\r\n                  {rootStore.labStore.listLabs.map(\r\n                    (item: any, index: number) => (\r\n                      <option key={item.name} value={item.name}>\r\n                        {item.name}\r\n                      </option>\r\n                    )\r\n                  )}\r\n                </select>\r\n              </LibraryComponents.Form.InputWrapper>\r\n              {errors?.lab && (\r\n                <span className=\"text-red-600 font-medium relative\">\r\n                  {errors.lab}\r\n                </span>\r\n              )}\r\n              <LibraryComponents.Form.Input\r\n                label=\"User Id\"\r\n                id=\"userId\"\r\n                placeholder=\"User Id\"\r\n                value={rootStore.userStore.inputLogin.userId}\r\n                onChange={(userId) => {\r\n                  setErrors({\r\n                    ...errors,\r\n                    userId: Utils.validate.single(\r\n                      userId,\r\n                      Utils.constraintsLogin.userId\r\n                    ),\r\n                  });\r\n                  rootStore.userStore.updateInputUser({\r\n                    ...rootStore.userStore.inputLogin,\r\n                    userId,\r\n                  });\r\n                }}\r\n              />\r\n              {errors?.userId && (\r\n                <span className=\"text-red-600 font-medium relative\">\r\n                  {errors.userId}\r\n                </span>\r\n              )}\r\n              <LibraryComponents.Form.Input\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                id=\"password\"\r\n                placeholder=\"Password\"\r\n                value={rootStore.userStore.inputLogin.password}\r\n                onChange={(password) => {\r\n                  setErrors({\r\n                    ...errors,\r\n                    password: Utils.validate.single(\r\n                      password,\r\n                      Utils.constraintsLogin.password\r\n                    ),\r\n                  });\r\n                  rootStore.userStore.updateInputUser({\r\n                    ...rootStore.userStore.inputLogin,\r\n                    password,\r\n                  });\r\n                }}\r\n              />\r\n              {errors?.password && (\r\n                <span className=\"text-red-600 font-medium relative\">\r\n                  {errors.password}\r\n                </span>\r\n              )}\r\n            </LibraryComponents.List>\r\n            <br />\r\n            <LibraryComponents.List direction=\"row\" space={3} align=\"center\">\r\n              <LibraryComponents.Button\r\n                size=\"medium\"\r\n                type=\"solid\"\r\n                icon={LibraryComponents.Icons.Check}\r\n                onClick={() => {\r\n                  if (\r\n                    Utils.validate(\r\n                      rootStore.userStore.inputLogin,\r\n                      Utils.constraintsLogin\r\n                    ) === undefined\r\n                  ) {\r\n                    rootStore.setProcessLoading(true);\r\n                    Features.Users.Pipes.onLogin(rootStore.userStore.inputLogin)\r\n                      .then((res) => {\r\n                        rootStore.setProcessLoading(false);\r\n                        if (res.length <= 0) {\r\n                          LibraryComponents.ToastsStore.error(\r\n                            \"User not found. Please enter correct information!\"\r\n                          );\r\n                        } else {\r\n                          LibraryComponents.ToastsStore.success(\r\n                            `Welcome ${res[0].userId}`\r\n                          );\r\n                          Clients.storageClient.setItem(\"isLogin\", res[0]);\r\n                          navigate(\"/dashbord\");\r\n                        }\r\n                      })\r\n                      .catch(() => {\r\n                        LibraryComponents.ToastsStore.error(\r\n                          \"User not found. Please enter correct information!\"\r\n                        );\r\n                      });\r\n                  } else {\r\n                    LibraryComponents.ToastsStore.warning(\r\n                      \"Please enter all information!\"\r\n                    );\r\n                  }\r\n                }}\r\n              >\r\n                Login\r\n              </LibraryComponents.Button>\r\n              <LibraryComponents.Button\r\n                size=\"medium\"\r\n                type=\"outline\"\r\n                icon={LibraryComponents.Icons.Remove}\r\n                onClick={() => {\r\n                  rootStore.userStore.clearLogin();\r\n                }}\r\n              >\r\n                Clear\r\n              </LibraryComponents.Button>\r\n            </LibraryComponents.List>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      ;\r\n    </>\r\n  );\r\n});\r\n\r\nconst App = observer(() => {\r\n  const moduleKeys = Object.keys(Features);\r\n  const moduleFeatures = (Features as any) as Models.Modules;\r\n  const modulesArray = moduleKeys.map((moduleKey) => moduleFeatures[moduleKey]);\r\n  const sceneMap = new Map<string, React.FunctionComponent>();\r\n\r\n  // Clients.storageClient.getItem(\"isLogin\").then((isLogin) => {\r\n  //   console.log({ isLogin });\r\n  //   if (isLogin) {\r\n  //     const path = window.location.pathname;\r\n  //     if (path !== \"/\") navigate(window.location.pathname);\r\n  //     else navigate(\"/dashbord\");\r\n  //   } else {\r\n  //     navigate(\"/\");\r\n  //   }\r\n  // });\r\n\r\n  modulesArray.forEach((moduleObject) => {\r\n    Object.keys(moduleObject.Scenes).forEach((sceneKey) => {\r\n      sceneMap.set(sceneKey, moduleObject.Scenes[sceneKey]);\r\n    });\r\n  });\r\n\r\n  const featuresArray = Utils.flatten(\r\n    modulesArray.map((module) => module.Definition)\r\n  );\r\n\r\n  const featureGroups = Utils.unique(\r\n    featuresArray.map((feature) => feature.category)\r\n  );\r\n\r\n  const groups = featureGroups.map((group) => ({\r\n    label: group,\r\n    items: featuresArray.filter((feature) => feature.category === group),\r\n  }));\r\n\r\n  return (\r\n    <>\r\n      {/* <div className=\"fixed w-52 bg-gray-800 h-screen\">\r\n        <div className=\"px-4 py-3 flex flex-row justify-start items-center mb-3\">\r\n          <div className=\"flex-1 mt-1\">\r\n            <p className=\"m-0 flex-1 text-lg font-bold text-white leading-4\">\r\n              Lims Plus\r\n            </p>\r\n            <p className=\"m-0 mt-2 flex-1 text-xs text-indigo-300 leading-4\">\r\n              Administration\r\n            </p>\r\n          </div>\r\n        </div>\r\n        {groups.map((group) => (\r\n          <div className=\"py-3 px-2\">\r\n            <p className=\"px-2 m-0 text-xs text-indigo-300 leading-4 mb-2\">\r\n              {group.label}\r\n            </p>\r\n            {group.items.map((item) => (\r\n              <Link\r\n                to={item.path.replace(\"/*\", \"\")}\r\n                onClick={() => {\r\n                  if (item.category === \"Login Out\") {\r\n                    Clients.storageClient.setItem(\"isLogin\", null);\r\n                    window.location.reload();\r\n                  }\r\n                }}\r\n                getProps={({ isCurrent }) => {\r\n                  return {\r\n                    className: isCurrent\r\n                      ? \"block hover:bg-indigo-800 bg-indigo-800 rounded-lg\"\r\n                      : \"block hover:bg-indigo-800 rounded-lg\",\r\n                  };\r\n                }}\r\n              >\r\n                <div className=\"px-2 py-2 flex flex-row items-center justify-start\">\r\n                  <svg\r\n                    className=\"w-6 h-6 text-indigo-300\"\r\n                    fill=\"none\"\r\n                    stroke=\"currentColor\"\r\n                    viewBox=\"0 0 24 24\"\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                  >\r\n                    <path\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                      strokeWidth={2}\r\n                      d={item.icon}\r\n                    />\r\n                  </svg>\r\n                  <p className=\"block text-white text-sm ml-3\">{item.label}</p>\r\n                </div>\r\n              </Link>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div> */}\r\n\r\n      {/* <div className=\"ml-52 bg-gray-100 min-h-screen\">\r\n         {rootStore.processLoading && <LibraryComponents.Loader />}\r\n        <Router>\r\n          <LoginPage\r\n            path=\"/\"\r\n            definitions={Utils.flatten(groups.map((g) => g.items))}\r\n          />\r\n          {featuresArray.map((feature) => {\r\n            const Component = sceneMap.get(\r\n              feature.component\r\n            ) as React.FunctionComponent<RouteComponentProps>;\r\n            return <Component path={feature.path} />;\r\n          })}\r\n        </Router>\r\n        \r\n      </div> */}\r\n      <Provider store={store}>\r\n        <Routes />\r\n        <ReduxToastr\r\n          timeOut={5000}\r\n          newestOnTop={true}\r\n          position=\"top-right\"\r\n          transitionIn=\"fadeIn\"\r\n          transitionOut=\"fadeOut\"\r\n          progressBar\r\n          closeOnToastrClick\r\n        />\r\n      </Provider>\r\n      <LibraryComponents.ToastsContainer\r\n        position={LibraryComponents.ToastsContainerPosition.BOTTOM_RIGHT}\r\n        store={LibraryComponents.ToastsStore}\r\n        className=\"h-20\"\r\n      />\r\n    </>\r\n  );\r\n});\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n","import React, { useEffect, useState } from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport * as LibraryComponents from \"@lp/library/components\";\r\nimport * as Clients from \"@lp/library/clients\";\r\n\r\n\r\n\r\nconst Dashbord = observer(() => {\r\n  \r\n\r\n \r\n\r\n  return (\r\n    <>\r\n      <LibraryComponents.Header>\r\n        <LibraryComponents.PageHeading title=\"Dashboard\" />\r\n      </LibraryComponents.Header>\r\n     \r\n    </>\r\n  );\r\n});\r\n\r\nexport default Dashbord;\r\n","import * as Scenes from \"./scenes\";\r\nimport Definition from \"./definition.json\";\r\n\r\nexport default { Scenes, Definition };\r\n","import * as Scenes from \"./scenes\";\r\nimport * as Services from \"./services\";\r\n// import * as Pipes from \"./pipes\";\r\nimport Stores from \"./stores\";\r\nimport Definition from \"./definition.json\";\r\n\r\nexport default { Scenes, Stores, Services, Definition };\r\n","import * as Scenes from \"./scenes\";\r\nimport * as Services from \"./services\";\r\nimport Stores from \"./stores\";\r\nimport Definition from \"./definition.json\";\r\n\r\nexport default { Scenes, Stores, Services, Definition };\r\n","import * as Scenes from \"./scenes\";\r\nimport * as Services from \"./services\";\r\nimport Stores from \"./stores\";\r\nimport Definition from \"./definition.json\";\r\n\r\nexport default { Scenes, Stores, Services, Definition };\r\n","import * as Scenes from \"./scenes\";\r\nimport * as Services from \"./services\";\r\nimport Stores from \"./stores\";\r\nimport Definition from \"./definition.json\";\r\n\r\nexport default { Scenes, Stores, Services, Definition };\r\n","import validate from \"validate.js\";\r\nexport { validate };\r\nexport const constraintsRole = {\r\n  code: {\r\n    presence: true,\r\n    length: {\r\n      minimum: 4,\r\n      message: \"Code must be least 4 characters \",\r\n    },\r\n  },\r\n  description: {\r\n    presence: true,\r\n    length: {\r\n      minimum: 4,\r\n      message: \"Description must be least 4 characters\",\r\n    },\r\n  },\r\n};\r\n","import React, { useState, useContext, useEffect } from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport * as LibraryComponents from \"@lp/library/components\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport cellEditFactory, { Type } from \"react-bootstrap-table2-editor\";\r\nimport ToolkitProvider, {\r\n  Search,\r\n  CSVExport,\r\n} from \"react-bootstrap-table2-toolkit\";\r\nimport moment from \"moment\";\r\n\r\nimport * as Models from \"../models\";\r\nimport * as Util from \"../util\";\r\nimport RootStoreContext from \"@lp/library/stores\";\r\nimport * as Services from \"../services\";\r\n\r\nconst { SearchBar, ClearSearchButton } = Search;\r\nconst { ExportCSVButton } = CSVExport;\r\n\r\nconst role = observer(() => {\r\n  const rootStore = useContext(RootStoreContext.rootStore);\r\n  const [errors, setErrors] = useState<Models.IRole>();\r\n  const [deleteItem, setDeleteItem] = useState<any>({});\r\n\r\n  return (\r\n    <>\r\n      <LibraryComponents.Header>\r\n        <LibraryComponents.PageHeading\r\n          title=\"Role\"\r\n          subTitle=\"Add, Edit & Delete Lab\"\r\n        />\r\n      </LibraryComponents.Header>\r\n      <div className=\" mx-auto  p-4  flex-wrap\">\r\n        <div className=\"m-1 p-2 rounded-lg shadow-xl\">\r\n          <LibraryComponents.Grid cols={2}>\r\n            <LibraryComponents.List\r\n              direction=\"col\"\r\n              space={4}\r\n              justify=\"stretch\"\r\n              fill\r\n            >\r\n              <LibraryComponents.Form.Input\r\n                label=\"Code\"\r\n                id=\"code\"\r\n                placeholder=\"Code\"\r\n                value={rootStore.roleStore.role?.code}\r\n                onChange={(code) => {\r\n                  setErrors({\r\n                    ...errors,\r\n                    code: Util.validate.single(code, Util.constraintsRole.code),\r\n                  });\r\n                  rootStore.roleStore.updateRole({\r\n                    ...rootStore.roleStore.role,\r\n                    code,\r\n                  });\r\n                }}\r\n              />\r\n              {errors?.code && (\r\n                <span className=\"text-red-600 font-medium relative\">\r\n                  {errors.code}\r\n                </span>\r\n              )}\r\n              <LibraryComponents.Form.Input\r\n                label=\"Description\"\r\n                name=\"description\"\r\n                placeholder=\"Description\"\r\n                value={rootStore.roleStore.role?.description}\r\n                onChange={(description) => {\r\n                  setErrors({\r\n                    ...errors,\r\n                    description: Util.validate.single(\r\n                      description,\r\n                      Util.constraintsRole.description\r\n                    ),\r\n                  });\r\n                  rootStore.roleStore.updateRole({\r\n                    ...rootStore.roleStore.role,\r\n                    description,\r\n                  });\r\n                }}\r\n              />\r\n\r\n              {errors?.description && (\r\n                <span className=\"text-red-600 font-medium relative\">\r\n                  {errors.description}\r\n                </span>\r\n              )}\r\n            </LibraryComponents.List>\r\n          </LibraryComponents.Grid>\r\n          <br />\r\n\r\n          <LibraryComponents.List direction=\"row\" space={3} align=\"center\">\r\n            <LibraryComponents.Button\r\n              size=\"medium\"\r\n              type=\"solid\"\r\n              icon={LibraryComponents.Icons.Save}\r\n              onClick={() => {\r\n                if (\r\n                  Util.validate(\r\n                    rootStore.roleStore.role,\r\n                    Util.constraintsRole\r\n                  ) === undefined\r\n                ) {\r\n                  rootStore.setProcessLoading(true);\r\n                  Services.addrole(rootStore.roleStore.role).then((res) => {\r\n                    rootStore.setProcessLoading(false);\r\n                    LibraryComponents.ToastsStore.success(`Role created.`);\r\n                    rootStore.roleStore.fetchListRole();\r\n                    rootStore.roleStore.clear();\r\n                  });\r\n                } else {\r\n                  LibraryComponents.ToastsStore.warning(\r\n                    \"Please enter all information!\"\r\n                  );\r\n                }\r\n              }}\r\n            >\r\n              Save\r\n            </LibraryComponents.Button>\r\n            <LibraryComponents.Button\r\n              size=\"medium\"\r\n              type=\"outline\"\r\n              icon={LibraryComponents.Icons.Remove}\r\n              onClick={() => {\r\n                rootStore.roleStore.clear();\r\n              }}\r\n            >\r\n              Clear\r\n            </LibraryComponents.Button>\r\n          </LibraryComponents.List>\r\n        </div>\r\n        <br />\r\n        <div className=\"m-1 p-2 rounded-lg shadow-xl\">\r\n          <ToolkitProvider\r\n            keyField=\"id\"\r\n            data={rootStore.roleStore.listRole || []}\r\n            columns={[\r\n              {\r\n                dataField: \"code\",\r\n                text: \"Code\",\r\n                sort: true,\r\n              },\r\n              {\r\n                dataField: \"description\",\r\n                text: \"Description\",\r\n              },\r\n              {\r\n                dataField: \"opration\",\r\n                text: \"Delete\",\r\n                editable: false,\r\n                csvExport: false,\r\n                formatter: (cellContent, row) => (\r\n                  <>\r\n                    <LibraryComponents.Button\r\n                      size=\"small\"\r\n                      type=\"outline\"\r\n                      icon={LibraryComponents.Icons.Remove}\r\n                      onClick={() => {\r\n                        setDeleteItem({\r\n                          show: true,\r\n                          id: row._id,\r\n                          title: \"Are you sure?\",\r\n                          body: `Delete ${row.description} lab!`,\r\n                        });\r\n                      }}\r\n                    >\r\n                      Delete\r\n                    </LibraryComponents.Button>\r\n                  </>\r\n                ),\r\n              },\r\n            ]}\r\n            search\r\n            exportCSV={{\r\n              fileName: `roles_${moment(new Date()).format(\r\n                \"YYYY-MM-DD HH:mm\"\r\n              )}.csv`,\r\n              noAutoBOM: false,\r\n              blobType: \"text/csv;charset=ansi\",\r\n            }}\r\n          >\r\n            {(props) => (\r\n              <div>\r\n                <SearchBar {...props.searchProps} />\r\n                <ClearSearchButton\r\n                  className={`inline-flex ml-4 bg-gray-500 items-center  small outline shadow-sm  font-medium  disabled:opacity-50 disabled:cursor-not-allowed text-center`}\r\n                  {...props.searchProps}\r\n                />\r\n                <ExportCSVButton\r\n                  className={`inline-flex ml-2 bg-gray-500 items-center  small outline shadow-sm  font-medium  disabled:opacity-50 disabled:cursor-not-allowed text-center`}\r\n                  {...props.csvProps}\r\n                >\r\n                  Export CSV!!\r\n                </ExportCSVButton>\r\n                <hr />\r\n                <BootstrapTable\r\n                  {...props.baseProps}\r\n                  noDataIndication=\"Table is Empty\"\r\n                  hover\r\n                  // cellEdit={cellEditFactory({\r\n                  //   mode: \"dbclick\",\r\n                  //   blurToSave: true,\r\n                  //   // afterSaveCell,\r\n                  // })}\r\n                />\r\n              </div>\r\n            )}\r\n          </ToolkitProvider>\r\n        </div>\r\n        <LibraryComponents.Modal.ModalConfirm\r\n          {...deleteItem}\r\n          click={() => {\r\n            Services.deleterole(deleteItem.id).then((res: any) => {\r\n              if (res.status) {\r\n                LibraryComponents.ToastsStore.success(`Role deleted.`);\r\n                setDeleteItem({ show: false });\r\n                rootStore.roleStore.fetchListRole();\r\n              }\r\n            });\r\n          }}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default role;\r\n","import * as Scenes from \"./scenes\";\r\nimport * as Services from \"./services\";\r\nimport Stores from \"./stores\";\r\nimport Definition from \"./definition.json\";\r\n\r\nexport default { Scenes, Stores, Services, Definition };\r\n","import * as Services from \"../services\";\nimport * as Models from \"../models\";\n\nexport const onLogin = (loginStore: Models.Login): Promise<any> => {\n  return new Promise((resolve, reject) => {\n    try {\n      Services.onLogin(loginStore)\n        .then((res: any) => {\n          resolve(res);\n        })\n        .catch((error) => {\n          reject(error);\n        });\n    } catch (error) {\n      console.log(\"error new\");\n\n      reject(error);\n    }\n  });\n};\nexport const addUser = (userStore: any): Promise<any> => {\n  return new Promise((resolve, reject) => {\n    try {\n      console.log({ user: userStore.user });\n\n      Services.addUser(userStore.user).then((res: any) => {\n        console.log({ res });\n        resolve(res.data);\n      });\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n","import * as Scenes from \"./scenes\";\r\nimport * as Services from \"./services\";\r\nimport * as Pipes from \"./pipes\";\r\nimport Stores from \"./stores\";\r\nimport Definition from \"./definition.json\";\r\n\r\nexport default { Scenes, Stores, Services, Pipes, Definition };\r\n","import * as Scenes from \"./scenes\";\r\nimport Definition from \"./definition.json\";\r\nexport default { Scenes, Definition };\r\n","import * as Scenes from \"./scenes\";\r\nimport Definition from \"./definition.json\";\r\n\r\nexport default { Scenes, Definition };\r\n","import * as Clients from \"@lp/library/clients\";\nimport * as Models from \"../models\";\n\nconst RELATIVE_PATH = \"/lab\";\n\nexport const listLabs = () =>\n  new Promise<Models.Labs[]>((resolve, reject) => {\n    const client = Clients.createLimsPlusClient();\n    client\n      .get(`${RELATIVE_PATH}/listlabs`)\n      .then((res) => {\n        resolve(res.data.data);\n      })\n      .catch((error) => {\n        reject({ error });\n      });\n  });\n\nexport const addLab = (lab?: Models.Labs) =>\n  new Promise<any>((resolve, reject) => {\n    const client = Clients.createLimsPlusClient();\n    client\n      .post(`${RELATIVE_PATH}/addLab`, lab)\n      .then((res) => {\n        resolve(res.data);\n      })\n      .catch((error) => {\n        reject({ error });\n      });\n  });\n\nexport const deleteLab = (id: string) =>\n  new Promise<Models.Labs[]>((resolve, reject) => {\n    const client = Clients.createLimsPlusClient();\n    client\n      .delete(`${RELATIVE_PATH}/deleteLab/${id}`)\n      .then((res) => {\n        resolve(res.data);\n      })\n      .catch((error) => {\n        reject({ error });\n      });\n  });\n","import * as Clients from \"@lp/library/clients\";\r\nimport * as Models from \"../models\";\r\n\r\nconst RELATIVE_PATH = \"/deginisation\";\r\n\r\nexport const listDeginisation = () =>\r\n  new Promise<Models.IDeginisation[]>((resolve, reject) => {\r\n    const client = Clients.createLimsPlusClient();\r\n    client\r\n      .get(`${RELATIVE_PATH}/listDeginisation`)\r\n      .then((res) => {\r\n        resolve(res.data.data);\r\n      })\r\n      .catch((error) => {\r\n        reject({ error });\r\n      });\r\n  });\r\n\r\nexport const addDeginisation = (deginisation?: Models.IDeginisation) =>\r\n  new Promise<any>((resolve, reject) => {\r\n    const client = Clients.createLimsPlusClient();\r\n    client\r\n      .post(`${RELATIVE_PATH}/addDeginisation`, deginisation)\r\n      .then((res) => {\r\n        resolve(res.data);\r\n      })\r\n      .catch((error) => {\r\n        reject({ error });\r\n      });\r\n  });\r\n\r\nexport const deleteDeginisation = (id: string) =>\r\n  new Promise<Models.IDeginisation[]>((resolve, reject) => {\r\n    const client = Clients.createLimsPlusClient();\r\n    client\r\n      .delete(`${RELATIVE_PATH}/deleteDeginisation/${id}`)\r\n      .then((res) => {\r\n        resolve(res.data);\r\n      })\r\n      .catch((error) => {\r\n        reject({ error });\r\n      });\r\n  });\r\n","import * as Clients from \"@lp/library/clients\";\r\nimport * as Models from \"../models\";\r\n\r\nconst RELATIVE_PATH = \"/department\";\r\n\r\nexport const listDepartment = () =>\r\n  new Promise<Models.IDepartment[]>((resolve, reject) => {\r\n    const client = Clients.createLimsPlusClient();\r\n    client\r\n      .get(`${RELATIVE_PATH}/listDepartment`)\r\n      .then((res) => {\r\n        resolve(res.data.data);\r\n      })\r\n      .catch((error) => {\r\n        reject({ error });\r\n      });\r\n  });\r\nexport const adddepartment = (department?: Models.IDepartment) =>\r\n  new Promise<any>((resolve, reject) => {\r\n    const client = Clients.createLimsPlusClient();\r\n    client\r\n      .post(`${RELATIVE_PATH}/addDepartment`, department)\r\n      .then((res) => {\r\n        resolve(res.data);\r\n      })\r\n      .catch((error) => {\r\n        reject({ error });\r\n      });\r\n  });\r\n\r\nexport const deletedepartment = (id: string) =>\r\n  new Promise<Models.IDepartment[]>((resolve, reject) => {\r\n    const client = Clients.createLimsPlusClient();\r\n    client\r\n      .delete(`${RELATIVE_PATH}/deleteDepartment/${id}`)\r\n      .then((res) => {\r\n        resolve(res.data);\r\n      })\r\n      .catch((error) => {\r\n        reject({ error });\r\n      });\r\n  });\r\n","import * as Clients from \"@lp/library/clients\";\r\nimport * as Models from \"../models\";\r\n\r\nconst RELATIVE_PATH = \"/role\";\r\n\r\nexport const listRole = () =>\r\n  new Promise<Models.IRole[]>((resolve, reject) => {\r\n    const client = Clients.createLimsPlusClient();\r\n    client\r\n      .get(`${RELATIVE_PATH}/listRole`)\r\n      .then((res) => {\r\n        resolve(res.data.data);\r\n      })\r\n      .catch((error) => {\r\n        reject({ error });\r\n      });\r\n  });\r\nexport const addrole = (lab?: Models.IRole) =>\r\n  new Promise<any>((resolve, reject) => {\r\n    const client = Clients.createLimsPlusClient();\r\n    client\r\n      .post(`${RELATIVE_PATH}/addRole`, lab)\r\n      .then((res) => {\r\n        resolve(res.data);\r\n      })\r\n      .catch((error) => {\r\n        reject({ error });\r\n      });\r\n  });\r\n\r\nexport const deleterole = (id: string) =>\r\n  new Promise<Models.IRole[]>((resolve, reject) => {\r\n    const client = Clients.createLimsPlusClient();\r\n    client\r\n      .delete(`${RELATIVE_PATH}/deleteRole/${id}`)\r\n      .then((res) => {\r\n        resolve(res.data);\r\n      })\r\n      .catch((error) => {\r\n        reject({ error });\r\n      });\r\n  });\r\n","import * as Clients from \"@lp/library/clients\";\r\nimport * as Models from \"../models\";\r\n\r\nconst RELATIVE_PATH = \"/banner\";\r\n\r\nexport const addBanner = (banner: any) =>\r\n  new Promise<any>((resolve, reject) => {\r\n    const form = new FormData();\r\n    form.append(\"title\", banner.title);\r\n    form.append(\"file\", banner.image);\r\n    form.append(\"folder\", \"banner\");\r\n    form.append(\"name\", banner.image.name);\r\n    form.append(\r\n      \"image\",\r\n      `https://limsplus.blob.core.windows.net/banner/${banner.image.name}`\r\n    );\r\n    const client = Clients.createLimsPlusClient();\r\n    client\r\n      .post(`${RELATIVE_PATH}/addBanner`, form, {\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      })\r\n      .then((res) => {\r\n        resolve(res as Models.IBanner);\r\n      })\r\n      .catch((error) => {\r\n        reject({ error });\r\n      });\r\n  });\r\n\r\nexport const listBanner = () =>\r\n  new Promise<Models.IBanner[]>((resolve, reject) => {\r\n    const client = Clients.createLimsPlusClient();\r\n    client\r\n      .get(`${RELATIVE_PATH}/listBanner`)\r\n      .then((res) => {\r\n        resolve(res.data.data);\r\n      })\r\n      .catch((error) => {\r\n        reject({ error });\r\n      });\r\n  });\r\nexport const deleteBanner = (id: string) =>\r\n  new Promise<Models.IBanner[]>((resolve, reject) => {\r\n    const client = Clients.createLimsPlusClient();\r\n    client\r\n      .delete(`${RELATIVE_PATH}/deleteBanner/${id}`)\r\n      .then((res) => {\r\n        resolve(res.data);\r\n      })\r\n      .catch((error) => {\r\n        reject({ error });\r\n      });\r\n  });\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport * as LibraryComponents from \"@lp/library/components\";\r\nimport {\r\n  Badge,\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  Col,\r\n  Collapse,\r\n  Container,\r\n  Media,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  Navbar,\r\n  NavbarBrand,\r\n  Row,\r\n} from \"reactstrap\";\r\nimport * as Assets from \"@lp/library/assets\";\r\nimport * as Bootstrap from \"react-bootstrap\";\r\nimport Contexts from \"@lp/library/stores\";\r\nimport * as Models from \"@lp/models\";\r\nimport * as Utils from \"@lp/library/utils\";\r\nimport * as ModelsUser from \"@lp/features/users/models\";\r\nimport * as Features from \"@lp/features\";\r\nimport * as Clients from \"@lp/library/clients\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Login = observer(() => {\r\n  const history = useHistory();\r\n  const rootStore = React.useContext(Contexts.rootStore);\r\n  const [errors, setErrors] = useState<ModelsUser.Login>();\r\n\r\n  useEffect(() => {\r\n    Clients.storageClient.getItem(\"isLogin\").then((isLogin) => {\r\n      console.log({ isLogin });\r\n      if (isLogin) {\r\n        history.push(\"/dashboard\");\r\n      } else {\r\n        history.push(\"/\");\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Container fluid className=\"bg-gray-600\">\r\n        <Row className=\"h-screen items-center\">\r\n          <Col md=\"7\">\r\n            <div className=\"flex flex-col justify-center items-center\">\r\n              <img src={Assets.logo} className=\"w-20 h-15\" alt=\"logo\" />\r\n              <div className=\"mt-2 mb-2\">\r\n                <Bootstrap.Carousel>\r\n                  {rootStore.bannerStore.listBanner.map((item, index) => (\r\n                    <Bootstrap.Carousel.Item interval={5000}>\r\n                      <img\r\n                        src={item.image}\r\n                        className=\"flex flex-col-reverse\"\r\n                        alt=\"First slide\"\r\n                      />\r\n                    </Bootstrap.Carousel.Item>\r\n                  ))}\r\n                </Bootstrap.Carousel>\r\n              </div>\r\n              <h2 className=\"text-2xl text-white font-bold\">Lims Plus</h2>\r\n            </div>\r\n          </Col>\r\n          <Col md=\"5\">\r\n            <div className=\"bg-white p-6 flex flex-col rounded-md\">\r\n              <LibraryComponents.List\r\n                direction=\"col\"\r\n                space={4}\r\n                justify=\"stretch\"\r\n                fill\r\n              >\r\n                <LibraryComponents.Form.InputWrapper label=\"Lab\" id=\"lab\">\r\n                  <select\r\n                    name=\"lab\"\r\n                    className=\"leading-4 p-2 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-base border border-gray-300 rounded-md\"\r\n                    onChange={(e) => {\r\n                      const lab = e.target.value;\r\n                      setErrors({\r\n                        ...errors,\r\n                        lab: Utils.validate.single(\r\n                          lab,\r\n                          Utils.constraintsLogin.lab\r\n                        ),\r\n                      });\r\n                      rootStore.userStore.updateInputUser({\r\n                        ...rootStore.userStore.inputLogin,\r\n                        lab,\r\n                      });\r\n                    }}\r\n                  >\r\n                    <option selected>Select</option>\r\n                    {rootStore.labStore.listLabs.map(\r\n                      (item: any, index: number) => (\r\n                        <option key={item.name} value={item.name}>\r\n                          {item.name}\r\n                        </option>\r\n                      )\r\n                    )}\r\n                  </select>\r\n                </LibraryComponents.Form.InputWrapper>\r\n                {errors?.lab && (\r\n                  <span className=\"text-red-600 font-medium relative\">\r\n                    {errors.lab}\r\n                  </span>\r\n                )}\r\n                <LibraryComponents.Form.Input\r\n                  label=\"User Id\"\r\n                  id=\"userId\"\r\n                  placeholder=\"User Id\"\r\n                  value={rootStore.userStore.inputLogin.userId}\r\n                  onChange={(userId) => {\r\n                    setErrors({\r\n                      ...errors,\r\n                      userId: Utils.validate.single(\r\n                        userId,\r\n                        Utils.constraintsLogin.userId\r\n                      ),\r\n                    });\r\n                    rootStore.userStore.updateInputUser({\r\n                      ...rootStore.userStore.inputLogin,\r\n                      userId,\r\n                    });\r\n                  }}\r\n                />\r\n                {errors?.userId && (\r\n                  <span className=\"text-red-600 font-medium relative\">\r\n                    {errors.userId}\r\n                  </span>\r\n                )}\r\n                <LibraryComponents.Form.Input\r\n                  type=\"password\"\r\n                  label=\"Password\"\r\n                  id=\"password\"\r\n                  placeholder=\"Password\"\r\n                  value={rootStore.userStore.inputLogin.password}\r\n                  onChange={(password) => {\r\n                    setErrors({\r\n                      ...errors,\r\n                      password: Utils.validate.single(\r\n                        password,\r\n                        Utils.constraintsLogin.password\r\n                      ),\r\n                    });\r\n                    rootStore.userStore.updateInputUser({\r\n                      ...rootStore.userStore.inputLogin,\r\n                      password,\r\n                    });\r\n                  }}\r\n                />\r\n                {errors?.password && (\r\n                  <span className=\"text-red-600 font-medium relative\">\r\n                    {errors.password}\r\n                  </span>\r\n                )}\r\n              </LibraryComponents.List>\r\n              <br />\r\n              <LibraryComponents.List direction=\"row\" space={3} align=\"center\">\r\n                <LibraryComponents.Button\r\n                  size=\"medium\"\r\n                  type=\"solid\"\r\n                  icon={LibraryComponents.Icons.Check}\r\n                  onClick={() => {\r\n                    if (\r\n                      Utils.validate(\r\n                        rootStore.userStore.inputLogin,\r\n                        Utils.constraintsLogin\r\n                      ) === undefined\r\n                    ) {\r\n                      rootStore.setProcessLoading(true);\r\n                      Features.Users.Pipes.onLogin(\r\n                        rootStore.userStore.inputLogin\r\n                      )\r\n                        .then((res) => {\r\n                          rootStore.setProcessLoading(false);\r\n                          if (res.length <= 0) {\r\n                            LibraryComponents.ToastsStore.error(\r\n                              \"User not found. Please enter correct information!\"\r\n                            );\r\n                          } else {\r\n                            LibraryComponents.ToastsStore.success(\r\n                              `Welcome ${res[0].userId}`\r\n                            );\r\n                            Clients.storageClient.setItem(\"isLogin\", res[0]);\r\n                            history.push(\"/dashboard\");\r\n                          }\r\n                        })\r\n                        .catch(() => {\r\n                          LibraryComponents.ToastsStore.error(\r\n                            \"User not found. Please enter correct information!\"\r\n                          );\r\n                        });\r\n                    } else {\r\n                      LibraryComponents.ToastsStore.warning(\r\n                        \"Please enter all information!\"\r\n                      );\r\n                    }\r\n                  }}\r\n                >\r\n                  Login\r\n                </LibraryComponents.Button>\r\n                <LibraryComponents.Button\r\n                  size=\"medium\"\r\n                  type=\"outline\"\r\n                  icon={LibraryComponents.Icons.Remove}\r\n                  onClick={() => {\r\n                    rootStore.userStore.clearLogin();\r\n                  }}\r\n                >\r\n                  Clear\r\n                </LibraryComponents.Button>\r\n              </LibraryComponents.List>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default Login;\r\n","export function flatten<T>(array: T[][]) {\r\n  return ([] as T[]).concat(...array);\r\n}\r\n\r\nexport function unique<T>(array: T[]) {\r\n  return Array.from<T>(new Set(array));\r\n}\r\n","import validate from \"validate.js\";\nimport moment from \"moment\";\nexport { validate };\nvalidate.extend(validate.validators.datetime, {\n  // The value is guaranteed not to be null or undefined but otherwise it\n  // could be anything.\n  parse: function (value: any, options: any) {\n    return +moment.utc(value);\n  },\n  // Input is a unix timestamp\n  format: function (value: any, options: any) {\n    var format = options.dateOnly ? \"YYYY-MM-DD\" : \"YYYY-MM-DD hh:mm:ss\";\n    return moment.utc(value).format(format);\n  },\n});\n\nexport const constraintsLogin = {\n  lab: {\n    presence: true,\n    length: {\n      minimum: 4,\n      message: \"Lab must be least 4 characters \",\n    },\n  },\n  userId: {\n    presence: true,\n    length: {\n      minimum: 4,\n      message: \"UserId must be least 4 characters\",\n    },\n  },\n  password: {\n    presence: true,\n    format: {\n      pattern: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,20}$/,\n      message:\n        \"Password should be included Lower case, Upper case, Numbers, special, 6 to 20 characters\",\n    },\n  },\n};\n\nexport const constraintsChangePassword = {\n  oldPassword: {\n    presence: true,\n    format: {\n      pattern: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,20}$/,\n      message:\n        \"Password should be included Lower case, Upper case, Numbers, special, 6 to 20 characters\",\n    },\n  },\n  newPassword: {\n    presence: true,\n    format: {\n      pattern: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,20}$/,\n      message:\n        \"Password should be included Lower case, Upper case, Numbers, special, 6 to 20 characters\",\n    },\n  },\n  confirmPassword: {\n    presence: true,\n    format: {\n      pattern: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,20}$/,\n      message:\n        \"Password should be included Lower case, Upper case, Numbers, special, 6 to 20 characters\",\n    },\n  },\n};\n\nexport const constraintsUser = {\n  lab: {\n    presence: true,\n    length: {\n      minimum: 4,\n      message: \"Lab must be least 4 characters \",\n    },\n  },\n  userId: {\n    presence: true,\n    length: {\n      minimum: 6,\n      message: \"UserId must be least 6 characters\",\n    },\n  },\n  password: {\n    presence: true,\n    format: {\n      pattern: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,20}$/,\n      message:\n        \"Password should be included Lower case, Upper case, Numbers, special, 6 to 20 characters\",\n    },\n  },\n  deginisation: {\n    presence: true,\n  },\n  fullName: {\n    presence: true,\n  },\n  department: {\n    presence: true,\n  },\n  exipreDate: {\n    presence: true,\n    datetime: {\n      dateOnly: false,\n      earliest: moment.utc().subtract(1, \"days\"),\n      message: \"^You need to be at least 1 month earliest\",\n    },\n  },\n  exipreDays: {\n    presence: true,\n  },\n  role: {\n    presence: true,\n  },\n  status: {\n    presence: true,\n  },\n};\n","export const checkNotUndefined = (object: any) => {\n  console.log({ object });\n  for (var key in object) {\n    if (object[key] !== undefined) return true;\n  }\n  return false;\n};\n","import { version, ignore } from \"mobx-sync\";\r\nimport { action, observable } from \"mobx\";\r\nimport * as Models from \"../models\";\r\nimport moment from \"moment\";\r\nimport * as Services from \"../services\";\r\n\r\n@version(0.1)\r\nclass UsersStore {\r\n  @observable inputLogin: Models.Login;\r\n  @ignore @observable user: Models.Users;\r\n  @observable userList?: Models.Users[];\r\n  @ignore @observable changePassword?: Models.ChangePassword;\r\n\r\n  @observable checkExitsUserId: boolean = false;\r\n\r\n  constructor() {\r\n    this.user = this.initUser();\r\n    this.inputLogin = this.initLogin();\r\n  }\r\n  private initLogin() {\r\n    return {\r\n      lab: \"\",\r\n      userId: \"\",\r\n      password: \"\",\r\n    };\r\n  }\r\n\r\n  private initUser() {\r\n    let date: Date = new Date();\r\n    date = new Date(moment(date).add(30, \"days\").format(\"YYYY-MM-DD HH:mm:ss\"));\r\n    return {\r\n      userId: \"\",\r\n      lab: \"\",\r\n      password: \"\",\r\n      deginisation: \"\",\r\n      status: \"Active\",\r\n      fullName: \"\",\r\n      department: \"\",\r\n      exipreDate: new Date(date),\r\n      exipreDays: 30,\r\n      role: \"\",\r\n    };\r\n  }\r\n\r\n  @action updateInputUser(user: Models.Login) {\r\n    this.inputLogin = user;\r\n  }\r\n\r\n  @action clearLogin() {\r\n    this.inputLogin = this.initLogin();\r\n  }\r\n\r\n  @action loadUser() {\r\n    Services.userList().then((user) => {\r\n      console.log({ user });\r\n      this.userList = user;\r\n    });\r\n  }\r\n\r\n  @action updateUser(user: Models.Users) {\r\n    this.user = user;\r\n  }\r\n\r\n  @action updateChangePassword(password: Models.ChangePassword) {\r\n    this.changePassword = password;\r\n  }\r\n\r\n  @action clear() {\r\n    this.user = this.initUser();\r\n  }\r\n\r\n  @action setExitsUserId(status: boolean) {\r\n    this.checkExitsUserId = status;\r\n  }\r\n}\r\n\r\nexport default UsersStore;\r\n","import { version, ignore } from \"mobx-sync\";\r\nimport { action, observable } from \"mobx\";\r\nimport * as Models from \"../models\";\r\nimport * as LibraryUtils from \"@lp/library/utils\";\r\nimport moment from \"moment\";\r\nimport * as Services from \"../services\";\r\n\r\n@version(0.1)\r\nclass LabStore {\r\n  @observable listLabs: Models.Labs[] = [];\r\n  @ignore @observable labs?: Models.Labs;\r\n\r\n  private initLab() {\r\n    return {\r\n      code: \"\",\r\n      name: \"\",\r\n    };\r\n  }\r\n\r\n  fetchListLab() {\r\n    Services.listLabs().then((res) => {\r\n      console.log({ lab: res });\r\n      this.listLabs = res;\r\n    });\r\n  }\r\n\r\n  @action updateLabs = (labs: Models.Labs) => {\r\n    this.labs = labs;\r\n  };\r\n\r\n  @action clear() {\r\n    this.labs = this.initLab();\r\n  }\r\n}\r\n\r\nexport default LabStore;\r\n","import { version, ignore } from \"mobx-sync\";\r\nimport { action, observable } from \"mobx\";\r\nimport * as Models from \"../models\";\r\nimport * as Services from \"../services\";\r\n\r\n@version(0.1)\r\nclass DeginisationStore {\r\n  @observable listDeginisation: Models.IDeginisation[] = [];\r\n  @ignore @observable deginisation?: Models.IDeginisation;\r\n\r\n  private init() {\r\n    return {\r\n      code: \"\",\r\n      description: \"\",\r\n    };\r\n  }\r\n\r\n  fetchListDeginisation() {\r\n    Services.listDeginisation().then((res) => {\r\n      console.log({ deginisation: res });\r\n      this.listDeginisation = res;\r\n    });\r\n  }\r\n\r\n  @action updateDescription = (deginisation: Models.IDeginisation) => {\r\n    this.deginisation = deginisation;\r\n  };\r\n\r\n  @action clear() {\r\n    this.deginisation = this.init();\r\n  }\r\n}\r\n\r\nexport default DeginisationStore;\r\n"],"sourceRoot":""}