{"version":3,"file":"static/js/7931.61c751e0.chunk.js","mappings":"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","sources":["features/validation/panel-approval/components/molecules/result/result-list.components.tsx","features/validation/panel-approval/components/molecules/result/table-bootstrap.components.tsx","features/validation/panel-approval/components/molecules/result/ref-ranges.component.tsx","features/validation/panel-approval/components/molecules/pending-panel-approval/table-bootstrap.components.tsx","features/validation/panel-approval/components/molecules/pending-panel-approval/pending-panel-approval-list.components.tsx","features/validation/panel-approval/components/molecules/patient-demographics/table-bootstrap.components.tsx","features/validation/panel-approval/components/molecules/patient-demographics/patient-demographics-list.components.tsx","features/validation/panel-approval/screens/panel-approval.screen.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {\n  Form,\n  Tooltip,\n  Icons,\n  NumberFilter,\n  sortCaret,\n  customFilter,\n} from '@/library/components';\nimport dayjs from 'dayjs';\n\nimport { TableBootstrap } from './table-bootstrap.components';\nimport { RefRanges } from './ref-ranges.component';\nimport { InputResult } from '../../../../../result-entry/general-result-entry/components/molecules/output/input-result.components';\n\nimport {\n  getResultStatus,\n  getTestStatus,\n  getAbnFlag,\n  getCretical,\n} from '../../../../../result-entry/general-result-entry/utils';\n\ninterface ResultListProps {\n  data: any;\n  totalSize: number;\n  isView?: boolean;\n  isDelete?: boolean;\n  isUpdate?: boolean;\n  isExport?: boolean;\n  isApproval?: boolean;\n  selectedId?: string;\n  selectedItems?: any;\n  filterRecord?: string;\n  onSelectedRow?: (selectedItem: any, type: string) => void;\n  onUpdateFields?: (fields: any, id: string) => void;\n  onUpdateResult?: (fields: any, id: string) => void;\n  onExpand?: (items: any) => void;\n  onRecheck?: (id: string, patientResultId: string) => void;\n  onRetest?: (id: string, patientResultId: string) => void;\n  onPageSizeChange?: (page: number, totalSize: number) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n  onClickRow?: (item: any, index: number) => void;\n  onReport?: (item: any) => void;\n  onFilterRecord?: (item: any) => void;\n}\n\nlet labId;\n\nexport const ResultList = (props: ResultListProps) => {\n  const [selectId, setSelectId] = useState('');\n  const [localData, setLocalData] = useState(props.data);\n  const [selectedRowId, setSelectedRowId] = useState('');\n  const [widthRefBox, setWidthRefBox] = useState('20px');\n  const [widthConculsionBox, setWidthConculsionBox] = useState('20px');\n  const [conclusionId, setWidthConculsionId] = useState('');\n\n  useEffect(() => {\n    const filterDataByHoldRecord = (data, holdRecord) => {\n      if (holdRecord === 'Pending') {\n        return data.filter(item => item.approvalStatus === 'Pending');\n      } else if (holdRecord === 'Done') {\n        return data.filter(item => item.approvalStatus === 'Done');\n      } else {\n        return data;\n      }\n    };\n    setSelectId(props.selectedId || '');\n    setLocalData(\n      props.selectedId\n        ? props.data\n            ?.filter(item => item._id === props.selectedId)\n            ?.map(item => ({ ...item, selectedId: props.selectedId }))\n        : filterDataByHoldRecord(props.data, props.filterRecord),\n    );\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.selectedId, props.data, props.filterRecord]);\n\n  useEffect(() => {\n    setLocalData(JSON.parse(JSON.stringify(localData)));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedRowId]);\n\n  return (\n    <>\n      <div className={`${props.isView ? 'shown' : 'hidden'}`}>\n        <TableBootstrap\n          id='_id'\n          data={localData}\n          totalSize={props.totalSize}\n          columns={[\n            {\n              dataField: '_id',\n              text: 'Id',\n              hidden: true,\n              csvExport: false,\n            },\n            {\n              dataField: 'labId',\n              text: 'Lab Id',\n              sort: true,\n              editable: false,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              // headerClasses: 'textHeader3',\n              filter: customFilter({\n                getFilter: filter => {\n                  labId = filter;\n                },\n              }),\n              filterRenderer: (onFilter, column) => (\n                <NumberFilter onFilter={onFilter} column={column} />\n              ),\n            },\n            {\n              dataField: 'test',\n              text: 'Test',\n              sort: true,\n              editable: false,\n              headerClasses: 'textHeader3',\n            },\n            {\n              dataField: 'analyte',\n              text: 'Analyte',\n              sort: true,\n              editable: false,\n              headerClasses: 'textHeader1',\n            },\n            {\n              dataField: 'result',\n              text: 'Result',\n              sort: true,\n              headerClasses: 'textHeader1',\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  <InputResult\n                    row={row}\n                    onSelect={async result => {\n                      const rows = { ...row, ...result };\n                      props.onUpdateResult &&\n                        props.onUpdateResult(\n                          {\n                            ...rows,\n                            resultStatus: getResultStatus(\n                              rows.resultType,\n                              rows,\n                            ),\n                            testStatus: getTestStatus(rows.resultType, rows),\n                            abnFlag: getAbnFlag(rows.resultType, rows),\n                            critical: getCretical(rows.resultType, rows),\n                            ...result,\n                          },\n                          rows.patientResultId,\n                        );\n                    }}\n                  />\n                </>\n              ),\n            },\n            {\n              dataField: 'units',\n              text: 'Units',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'refRangesList',\n              text: 'Ref Ranges',\n              sort: true,\n              editable: false,\n              style: { width: widthRefBox },\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <div className='flex flex-row gap-2'>\n                      <span>\n                        {(row.loNor === 'NaN' && row.hiNor === 'NaN') ||\n                        (row.loNor === ' ' && row.hiNor === ' ')\n                          ? '-'\n                          : row.loNor === 'NaN' && row.hiNor === ' '\n                          ? '<'\n                          : row.loNor === ' ' && row.hiNor === 'NaN'\n                          ? '>'\n                          : row.loNor + '-' + row.hiNor}\n                      </span>\n                      <div>\n                        {row.refRangesList?.length > 0 && (\n                          <Tooltip\n                            tooltipText={\n                              row._id != selectedRowId ? 'Expand' : 'Collapse'\n                            }\n                          >\n                            <Icons.IconContext\n                              color='#000000'\n                              size='20'\n                              onClick={() => {\n                                if (row._id === selectedRowId) {\n                                  setSelectedRowId('');\n                                  setWidthRefBox('30px');\n                                } else {\n                                  setSelectedRowId(row._id);\n                                  setWidthRefBox('550px');\n                                }\n                              }}\n                            >\n                              {Icons.getIconTag(\n                                row._id != selectedRowId\n                                  ? Icons.IconBi.BiExpand\n                                  : Icons.IconBi.BiCollapse,\n                              )}\n                            </Icons.IconContext>\n                          </Tooltip>\n                        )}\n                      </div>\n                    </div>\n                    {selectedRowId == row._id ? (\n                      <div style={{ width: widthRefBox }}>\n                        <RefRanges\n                          id='_id'\n                          data={row?.refRangesList || []}\n                          totalSize={row?.refRangesList?.length || 0}\n                          columns={[\n                            {\n                              dataField: 'result',\n                              text: 'Result',\n                              editable: false,\n                              formatter: () => (\n                                <>\n                                  <span>{row.result}</span>\n                                </>\n                              ),\n                            },\n                            {\n                              dataField: 'rangeType',\n                              text: 'Range Type',\n                            },\n                            {\n                              dataField: 'low',\n                              text: 'Low',\n                            },\n                            {\n                              dataField: 'high',\n                              text: 'High',\n                            },\n                            {\n                              dataField: 'rangeSetOn',\n                              text: 'Range Set On',\n                            },\n                            {\n                              dataField: 'rangeId',\n                              text: 'Range Id',\n                            },\n                            {\n                              dataField: 'version',\n                              text: 'Range Version',\n                            },\n                          ]}\n                          onSelectedRow={rows => {}}\n                          onUpdateItem={(\n                            value: any,\n                            dataField: string,\n                            id: string,\n                          ) => {}}\n                        />\n                      </div>\n                    ) : null}\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'conclusion',\n              text: 'Conclusion',\n              editable: false,\n              style: { width: widthConculsionBox },\n              formatter: (cell, row) => {\n                return (\n                  <div className='flex flex-col'>\n                    <Tooltip\n                      tooltipText={\n                        row._id != conclusionId ? 'Expand' : 'Collapse'\n                      }\n                    >\n                      <Icons.IconContext\n                        color='#000000'\n                        size='20'\n                        onClick={() => {\n                          if (row._id === conclusionId) {\n                            setWidthConculsionId('');\n                            setWidthConculsionBox('30px');\n                          } else {\n                            setWidthConculsionId(row._id);\n                            setWidthConculsionBox('200px');\n                          }\n                        }}\n                      >\n                        {Icons.getIconTag(\n                          row._id != conclusionId\n                            ? Icons.IconBi.BiExpand\n                            : Icons.IconBi.BiCollapse,\n                        )}\n                      </Icons.IconContext>\n                    </Tooltip>\n\n                    {row._id === conclusionId && (\n                      <div style={{ width: widthConculsionBox }}>\n                        <Form.MultilineInput\n                          rows={3}\n                          placeholder='Conclusion'\n                          className='text-black'\n                          onBlur={conclusion => {\n                            props.onUpdateFields &&\n                              props.onUpdateFields(\n                                { conclusion, updateField: 'conclusion' },\n                                row._id,\n                              );\n                            setWidthConculsionId('');\n                            setWidthConculsionBox('30px');\n                          }}\n                          defaultValue={row?.conclusion}\n                        />\n                      </div>\n                    )}\n                  </div>\n                );\n              },\n            },\n\n            {\n              dataField: 'abnFlag',\n              text: 'Abn Flag',\n              sort: true,\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <Form.Toggle disabled={true} value={row.abnFlag} />\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'critical',\n              text: 'Critical',\n              sort: true,\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <Form.Toggle disabled={true} value={row.critical} />\n                  </>\n                );\n              },\n            },\n\n            {\n              dataField: 'remarks',\n              text: 'Remarks',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'deltaFlag',\n              text: 'Delta Flag',\n              sort: true,\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <Form.Toggle disabled={true} value={row.deltaFlag} />\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'deltaValue',\n              text: 'Delta Value',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'Result Status',\n              text: 'Result Status',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'testStatus',\n              text: 'Test Status',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'approvalDate',\n              text: 'Approval Date',\n              sort: true,\n              editable: false,\n              headerClasses: 'textHeader',\n              formatter: (cell, row) => {\n                return row.approvalDate\n                  ? dayjs(row.approvalDate).format('DD-MM-YYYY HH:mm:ss')\n                  : '';\n              },\n            },\n            {\n              dataField: 'autoRelease',\n              text: 'Auto Release',\n              sort: true,\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <Form.Toggle disabled={true} value={row.autoRelease} />\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'final',\n              text: 'Final',\n              sort: true,\n              editable: false,\n              // headerClasses: 'textHeaderl',\n            },\n            {\n              dataField: 'enteredBy',\n              text: 'Entered By',\n              sort: true,\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n            },\n            {\n              text: 'Company Code',\n              dataField: 'companyCode',\n              sort: true,\n              editable: false,\n            },\n            {\n              text: 'Environment',\n              dataField: 'environment',\n              editable: false,\n              sort: true,\n            },\n            {\n              dataField: 'approvalStatus',\n              text: 'Action',\n              sort: true,\n              editable: false,\n              formatter: (cellContent, row) => (\n                <div className='flex flex-row gap-1' key={row?._id}>\n                  {props.isApproval && (\n                    <>\n                      <Tooltip tooltipText='Approved'>\n                        <Icons.IconContext\n                          color='#fff'\n                          size='20'\n                          onClick={() => {\n                            props.onUpdateFields &&\n                              props.onUpdateFields(\n                                { approvalStatus: 'Approved' },\n                                row._id,\n                              );\n                            props.onExpand && props.onExpand('');\n                          }}\n                        >\n                          {Icons.getIconTag(Icons.Iconai.AiFillCheckCircle)}\n                        </Icons.IconContext>\n                      </Tooltip>\n                      <Tooltip tooltipText='Rejected'>\n                        <Icons.IconContext\n                          color='#fff'\n                          size='20'\n                          onClick={() => {\n                            props.onUpdateFields &&\n                              props.onUpdateFields(\n                                { approvalStatus: 'Rejected' },\n                                row._id,\n                              );\n                          }}\n                        >\n                          {Icons.getIconTag(Icons.Iconai.AiFillCloseCircle)}\n                        </Icons.IconContext>\n                      </Tooltip>\n                      <Tooltip tooltipText='Recheck'>\n                        <Icons.IconContext\n                          color='#fff'\n                          size='20'\n                          onClick={() => {\n                            props.onRecheck &&\n                              props.onRecheck(row?._id, row?.patientResultId);\n                          }}\n                        >\n                          <Icons.RIcon\n                            nameIcon='GoIssueReopened'\n                            propsIcon={{ color: '#ffffff' }}\n                          />\n                        </Icons.IconContext>\n                      </Tooltip>\n                      <Tooltip tooltipText='Retest'>\n                        <Icons.IconContext\n                          color='#fff'\n                          size='20'\n                          onClick={() => {\n                            props.onRetest &&\n                              props.onRetest(row?._id, row?.patientResultId);\n                          }}\n                        >\n                          <Icons.RIcon\n                            nameIcon='VscIssueReopened'\n                            propsIcon={{ color: '#ffffff' }}\n                          />\n                        </Icons.IconContext>\n                      </Tooltip>\n                    </>\n                  )}\n                  {selectId == row._id ? (\n                    <Tooltip tooltipText='Expand'>\n                      <Icons.IconContext\n                        color='#fff'\n                        size='20'\n                        onClick={() => {\n                          props.onExpand && props.onExpand('');\n                        }}\n                      >\n                        {Icons.getIconTag(Icons.Iconai.AiFillMinusCircle)}\n                      </Icons.IconContext>\n                    </Tooltip>\n                  ) : (\n                    <Tooltip tooltipText='Expand'>\n                      <Icons.IconContext\n                        color='#fff'\n                        size='20'\n                        onClick={() => {\n                          props.onExpand && props.onExpand(row);\n                        }}\n                      >\n                        {Icons.getIconTag(Icons.Iconai.AiFillPlusCircle)}\n                      </Icons.IconContext>\n                    </Tooltip>\n                  )}\n                </div>\n              ),\n              headerClasses: 'sticky right-0  bg-gray-500 text-white z-50',\n              classes: (cell, row, rowIndex, colIndex) => {\n                return 'sticky right-0 bg-gray-500';\n              },\n              style: (cell, row, rowIndex, colIndex) => {\n                return {\n                  zIndex: props.data?.length - rowIndex,\n                };\n              },\n            },\n          ]}\n          isDelete={props.isDelete}\n          isEditModify={props.isUpdate}\n          isExport={props.isExport}\n          isSelectRow={true}\n          fileName='Report Panel Approval'\n          onSelectedRow={(rows, type) => {\n            props.onSelectedRow && props.onSelectedRow(rows, type);\n          }}\n          onFilter={(type, filter, page, size) => {\n            props.onFilter && props.onFilter(type, filter, page, size);\n          }}\n          onPageSizeChange={(page, size) => {\n            props.onPageSizeChange && props.onPageSizeChange(page, size);\n          }}\n          clearAllFilter={() => {\n            labId('');\n          }}\n          onFilterRecord={item => {\n            props.onFilterRecord && props.onFilterRecord(item);\n          }}\n        />\n      </div>\n    </>\n  );\n};\n","/* eslint-disable */\nimport React, { useState } from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport _ from 'lodash';\nimport ToolkitProvider, {\n  Search,\n  CSVExport,\n} from 'react-bootstrap-table2-toolkit/dist/react-bootstrap-table2-toolkit';\nimport cellEditFactory from 'react-bootstrap-table2-editor';\nimport paginationFactory, {\n  PaginationProvider,\n  PaginationListStandalone,\n  SizePerPageDropdownStandalone,\n  PaginationTotalStandalone,\n} from 'react-bootstrap-table2-paginator';\nimport filterFactory from 'react-bootstrap-table2-filter';\nimport dayjs from 'dayjs';\nimport '@/library/components/organisms/style.css';\nimport { debounce } from '@/core-utils';\n\nimport { Buttons, Icons, Tooltip } from '@/library/components';\n\nconst { SearchBar, ClearSearchButton } = Search;\nconst { ExportCSVButton } = CSVExport;\n\ninterface TableBootstrapProps {\n  id: string;\n  data: any;\n  totalSize?: number;\n  searchPlaceholder?: string;\n  page?: number;\n  sizePerPage?: number;\n  columns: any;\n  fileName: string;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  isExport?: boolean;\n  isSelectRow?: boolean;\n  selectedItem?: any;\n  onDelete?: (selectedItem: any) => void;\n  onSelectedRow?: (selectedItem: any, type: string) => void;\n  onUpdateItem?: (value: any, dataField: string, id: string) => void;\n  onPageSizeChange?: (page: number, limit: number) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n  clearAllFilter?: () => void;\n  onClickRow?: (item: any, index: number) => void;\n  onFilterRecord?: (item: any) => void;\n}\nexport const TableBootstrap = ({\n  id,\n  data,\n  totalSize = 10,\n  searchPlaceholder = 'Search...',\n  page = 0,\n  sizePerPage = 10,\n  columns,\n  fileName,\n  isDelete = true,\n  isEditModify,\n  isExport = true,\n  isSelectRow,\n  selectedItem,\n  onSelectedRow,\n  onUpdateItem,\n  onPageSizeChange,\n  onFilter,\n  clearAllFilter,\n  onClickRow,\n  onFilterRecord,\n}: TableBootstrapProps) => {\n  const [selectedRow, setSelectedRow] = useState<any[]>();\n  const [isFilterOpen, setIsFilterOpen] = useState<boolean>(false);\n\n  const customTotal = (from, to, size) => {\n    return (\n      <>\n        <div className='clearfix' />\n        <span>\n          Showing {from} to {to} of {size} Results\n        </span>\n      </>\n    );\n  };\n\n  const statusData = [\n    { code: 'Done', value: 'Done', color: 'green' },\n    { code: 'Pending', value: 'Pending', color: 'blue' },\n    { code: 'Recheck', value: 'Recheck', color: 'yellow' },\n    { code: 'Retest', value: 'Retest', color: 'orange' },\n    { code: 'Hold', value: 'Hold', color: 'indigo' },\n    { code: '', value: 'All', color: 'red' },\n    { code: 'Recall', value: 'Recall', color: 'gray' },\n  ];\n\n  const sizePerPageRenderer = ({\n    options,\n    currSizePerPage,\n    onSizePerPageChange,\n  }) => (\n    <div className='btn-group items-center' role='group'>\n      {isSelectRow && (\n        <div className='flex flex-row gap-1 border-solid border-2 p-1'>\n          <Tooltip tooltipText='Approved'>\n            <Icons.IconContext\n              color='#fff'\n              size='30'\n              onClick={() => {\n                onSelectedRow && onSelectedRow(selectedRow, 'Approved');\n              }}\n            >\n              {Icons.getIconTag(Icons.Iconai.AiFillCheckCircle)}\n            </Icons.IconContext>\n          </Tooltip>\n          <Tooltip tooltipText='Rejected'>\n            <Icons.IconContext\n              color='#fff'\n              size='30'\n              onClick={() => {\n                onSelectedRow && onSelectedRow(selectedRow, 'Rejected');\n              }}\n            >\n              {Icons.getIconTag(Icons.Iconai.AiFillCloseCircle)}\n            </Icons.IconContext>\n          </Tooltip>\n        </div>\n      )}\n      <input\n        type='number'\n        min='0'\n        placeholder='No'\n        onChange={(e: any) => {\n          if (e.target.value) {\n            onSizePerPageChange(e.target.value);\n          }\n        }}\n        className='mr-2 ml-2 leading-4 p-2 w-14 focus:outline-none focus:ring block  shadow-sm sm:text-base border border-gray-300 rounded-md'\n      />\n      {options.map(option => (\n        <button\n          key={option.text}\n          type='button'\n          onClick={() => onSizePerPageChange(option.page)}\n          className={`btn  ${\n            currSizePerPage === `${option.page}` ? 'bg-primary' : 'bg-grey'\n          }`}\n        >\n          {option.text}\n        </button>\n      ))}\n    </div>\n  );\n\n  const options = {\n    cutome: true,\n    totalSize: totalSize,\n    paginationSize: 5,\n    pageStartIndex: 0,\n    firstPageText: '<<',\n    prePageText: '<',\n    nextPageText: '>',\n    lastPageText: '>>',\n    disablePageTitle: true,\n    paginationTotalRenderer: customTotal,\n    hideSizePerPage: true,\n    showTotal: false,\n    alwaysShowAllBtns: true,\n    sizePerPageList: [\n      {\n        text: '10',\n        value: 10,\n      },\n      {\n        text: '20',\n        value: 20,\n      },\n      {\n        text: '30',\n        value: 30,\n      },\n      {\n        text: '40',\n        value: 40,\n      },\n      {\n        text: '50',\n        value: 50,\n      },\n    ],\n    hidePageListOnlyOnePage: true,\n    sizePerPageRenderer: sizePerPageRenderer,\n  };\n\n  let searchProps: any = {\n    placeholder: searchPlaceholder,\n  };\n\n  const handleOnSelect = (rows: any, isSelect) => {\n    if (isSelect) {\n      if (selectedRow) {\n        let itemSelected: any[] = selectedRow;\n        itemSelected.push(rows);\n        setSelectedRow(itemSelected);\n      } else {\n        setSelectedRow([rows]);\n      }\n    }\n  };\n\n  const handleOnSelectAll = (isSelect, rows) => {\n    if (isSelect) {\n      setSelectedRow(rows);\n    }\n  };\n\n  const handleTableChange = (\n    type,\n    {\n      data,\n      cellEdit,\n      page,\n      sizePerPage,\n      filters,\n      sortField,\n      sortOrder,\n      searchText,\n    },\n  ) => {\n    if (type === 'cellEdit' && isEditModify) {\n      onUpdateItem &&\n        onUpdateItem(cellEdit.newValue, cellEdit.dataField, cellEdit.rowId);\n    }\n    if (type === 'pagination' && _.isEmpty(filters)) {\n      // if (sizePerPage > totalSize) return alert(\"You have not more records.\")\n      // if (page * sizePerPage > totalSize) return alert(\"You have not more records.\")\n      onPageSizeChange && onPageSizeChange(page, sizePerPage);\n    }\n    if (type === 'filter' || (type === 'pagination' && !_.isEmpty(filters))) {\n      if (type === 'pagination') {\n        if (sizePerPage > totalSize) return alert('You have not more records.');\n        if (page * sizePerPage > totalSize)\n          return alert('You have not more records.');\n      }\n      let filter: any = {};\n      for (const [key, value] of Object.entries(filters)) {\n        const values: any = value;\n        const object = { [key]: values.filterVal };\n        filter = Object.assign(filter, object);\n      }\n      if (onFilter)\n        debounce(() => {\n          onFilter(\n            type,\n            filter,\n            type === 'filter' && page === 1 ? 0 : page,\n            sizePerPage,\n          );\n        });\n    }\n    if (type === 'search') {\n      debounce(() => {\n        onFilter && onFilter(type, { srText: searchText }, page, sizePerPage);\n      });\n    }\n    if (type === 'sort') {\n      let result;\n      if (sortOrder === 'asc') {\n        result = data.sort((a, b) => {\n          if (a[sortField] > b[sortField]) {\n            return 1;\n          } else if (b[sortField] > a[sortField]) {\n            return -1;\n          }\n          return 0;\n        });\n      } else {\n        result = data.sort((a, b) => {\n          if (a[sortField] > b[sortField]) {\n            return -1;\n          } else if (b[sortField] > a[sortField]) {\n            return 1;\n          }\n          return 0;\n        });\n      }\n    }\n  };\n\n  const CustomToggleList = ({ columns, onColumnToggle, toggles }) => (\n    <div className='btn-group btn-group-toggle' data-toggle='buttons'>\n      {columns\n        .map(column => ({\n          ...column,\n          toggle: toggles[column.dataField],\n        }))\n        .map((column, index) => {\n          if (index > 0) {\n            return (\n              <button\n                type='button'\n                key={column.dataField}\n                className={` btn btn-primary  btn-sm whitespace-nowrap ${\n                  column.toggle ? 'active' : ''\n                }`}\n                data-toggle='button'\n                aria-pressed={column.toggle ? 'true' : 'false'}\n                onClick={() => onColumnToggle(column.dataField)}\n              >\n                {column.text}\n              </button>\n            );\n          }\n        })}\n    </div>\n  );\n\n  const rowEvents = {\n    onClick: (e, row, rowIndex) => {\n      onClickRow && onClickRow(row, rowIndex);\n    },\n  };\n\n  const rowStyle = (row, rowIndex) => {\n    switch (row?.colorScheme?.envRangeColor) {\n      case 'BOTH':\n        return {\n          backgroundColor: row?.colorScheme?.cellColor,\n          color: row?.colorScheme?.fontColor,\n        };\n        break;\n      case 'BACKGROUND':\n        return {\n          backgroundColor: row?.colorScheme?.cellColor,\n        };\n        break;\n      case 'FONT':\n        return {\n          color: row?.colorScheme?.fontColor,\n        };\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <PaginationProvider\n      pagination={paginationFactory(\n        totalSize !== 0 ? options : { page, sizePerPage, totalSize },\n      )}\n      keyField={id}\n      columns={columns}\n      data={data}\n    >\n      {({ paginationProps, paginationTableProps }) => (\n        <ToolkitProvider\n          keyField={id}\n          bootstrap4\n          data={data}\n          columns={columns}\n          search\n          exportCSV={{\n            fileName: `${fileName}_${dayjs(new Date()).format(\n              'YYYY-MM-DD HH:mm',\n            )}.csv`,\n            noAutoBOM: false,\n            blobType: 'text/csv;charset=ansi',\n            exportAll: false,\n            onlyExportFiltered: true,\n          }}\n          columnToggle\n        >\n          {props => (\n            <div>\n              <div className='flex items-center gap-2 flex-wrap'>\n                <SearchBar\n                  {...searchProps}\n                  {...props.searchProps}\n                  onChange={value => {\n                    console.log({ value });\n                  }}\n                />\n                <ClearSearchButton\n                  className={`inline-flex ml-4 bg-gray-500 items-center small outline shadow-sm  font-medium  disabled:opacity-50 disabled:cursor-not-allowed text-center h-9 text-white`}\n                  {...props.searchProps}\n                />\n                <button\n                  className={`ml-2 px-2 focus:outline-none bg-gray-500 items-center  outline shadow-sm  font-medium  text-center rounded-md h-9 text-white`}\n                  onClick={clearAllFilter}\n                >\n                  Clear all filters\n                </button>\n                {isExport && (\n                  <ExportCSVButton\n                    className={`inline-flex m-2.5 bg-gray-500 items-center  small outline shadow-sm  font-medium  disabled:opacity-50 disabled:cursor-not-allowed text-center h-9 text-white`}\n                    {...props.csvProps}\n                  >\n                    Export CSV!!\n                  </ExportCSVButton>\n                )}\n\n                {isFilterOpen ? (\n                  <Buttons.Button\n                    size='medium'\n                    type='outline'\n                    onClick={() => {\n                      setIsFilterOpen(!isFilterOpen);\n                    }}\n                  >\n                    <Icons.IconFa.FaChevronUp />\n                  </Buttons.Button>\n                ) : (\n                  <Buttons.Button\n                    size='medium'\n                    type='outline'\n                    onClick={() => {\n                      setIsFilterOpen(!isFilterOpen);\n                    }}\n                  >\n                    <Icons.IconFa.FaChevronDown />\n                  </Buttons.Button>\n                )}\n                <div className='flex gap-4'>\n                  {statusData.map(status => (\n                    <button\n                      key={status.code}\n                      className={`px-4 py-2 bg-${status.color}-600 text-white rounded`}\n                      onClick={() => onFilterRecord?.(status.value)}\n                    >\n                      {status.value}\n                    </button>\n                  ))}\n                </div>\n              </div>\n              {isFilterOpen && (\n                <div className={'mb-2 overflow-auto h-10'}>\n                  <CustomToggleList\n                    contextual='primary'\n                    className='list-custom-class'\n                    btnClassName='list-btn-custom-class'\n                    {...props.columnToggleProps}\n                  />\n                </div>\n              )}\n              <div className='scrollTable mb-2'>\n                <BootstrapTable\n                  remote\n                  {...props.baseProps}\n                  noDataIndication='Table is Empty'\n                  hover\n                  {...paginationTableProps}\n                  filter={filterFactory()}\n                  headerClasses='bg-gray-500 text-white whitespace-nowrap'\n                  selectRow={\n                    isSelectRow\n                      ? {\n                          mode: 'checkbox',\n                          onSelect: handleOnSelect,\n                          onSelectAll: handleOnSelectAll,\n                        }\n                      : undefined\n                  }\n                  cellEdit={\n                    isEditModify\n                      ? cellEditFactory({\n                          mode: 'dbclick',\n                          blurToSave: true,\n                        })\n                      : undefined\n                  }\n                  rowEvents={rowEvents}\n                  rowStyle={rowStyle}\n                  onTableChange={handleTableChange}\n                />\n              </div>\n              <div className='flex  items-center   p-2 justify-start gap-2 bg-[#6A727F] rounded-md   text-white w-full'>\n                <div className='flex items-center gap-2 '>\n                  <SizePerPageDropdownStandalone\n                    {...Object.assign(\n                      {},\n                      { ...paginationProps, hideSizePerPage: false },\n                    )}\n                  />\n                  <PaginationListStandalone {...paginationProps} />\n                </div>\n                <div className='flex items-center gap-2'>\n                  <PaginationTotalStandalone {...paginationProps} />\n                </div>\n              </div>\n            </div>\n          )}\n        </ToolkitProvider>\n      )}\n    </PaginationProvider>\n  );\n};\n","import React from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport _ from 'lodash';\nimport ToolkitProvider from 'react-bootstrap-table2-toolkit/dist/react-bootstrap-table2-toolkit';\nimport paginationFactory, {\n  PaginationProvider,\n} from 'react-bootstrap-table2-paginator';\nimport filterFactory from 'react-bootstrap-table2-filter';\nimport '@/library/components/organisms/style.css';\nimport {debounce} from '@/core-utils';\n\ninterface RefRangesProps {\n  id: string;\n  data: any;\n  totalSize?: number;\n  searchPlaceholder?: string;\n  page?: number;\n  sizePerPage?: number;\n  columns: any;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (value: any, dataField: string, id: string) => void;\n  onPageSizeChange?: (page: number, limit: number) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n  clearAllFilter?: () => void;\n}\n\nexport const RefRanges = ({\n  id,\n  data = [],\n  totalSize = 10,\n  searchPlaceholder = 'Search...',\n  page = 0,\n  sizePerPage = 10,\n  columns,\n  onSelectedRow,\n  onUpdateItem,\n  onPageSizeChange,\n  onFilter,\n  clearAllFilter,\n}: RefRangesProps) => {\n  const customTotal = (from, to, size) => {\n    return (\n      <>\n        <div className='clearfix' />\n        <span>\n          Showing {from} to {to} of {size} Results\n        </span>\n      </>\n    );\n  };\n\n  const sizePerPageRenderer = ({\n    options,\n    currSizePerPage,\n    onSizePerPageChange,\n  }) => (\n    <div className='btn-group items-center' role='group'>\n      <input\n        type='number'\n        min='0'\n        placeholder='No'\n        onChange={e => {\n          if (e.target.value) {\n            onSizePerPageChange(e.target.value);\n          }\n        }}\n        className='mr-2 ml-2 leading-4 p-2 w-14 focus:outline-none focus:ring block  shadow-sm sm:text-base border border-gray-300 rounded-md'\n      />\n      {options.map(option => (\n        <button\n          key={option.text}\n          type='button'\n          onClick={() => onSizePerPageChange(option.page)}\n          className={`btn ${\n            currSizePerPage === `${option.page}`\n              ? 'btn-primary'\n              : 'btn-secondary'\n          }`}\n        >\n          {option.text}\n        </button>\n      ))}\n    </div>\n  );\n\n  const options = {\n    cutome: true,\n    totalSize: totalSize,\n    paginationSize: 5,\n    pageStartIndex: 0,\n    firstPageText: '<<',\n    prePageText: '<',\n    nextPageText: '>',\n    lastPageText: '>>',\n    disablePageTitle: true,\n    paginationTotalRenderer: customTotal,\n    hideSizePerPage: true,\n    showTotal: false,\n    alwaysShowAllBtns: true,\n    sizePerPageList: [\n      {\n        text: '10',\n        value: 10,\n      },\n      {\n        text: '20',\n        value: 20,\n      },\n      {\n        text: '30',\n        value: 30,\n      },\n      {\n        text: '40',\n        value: 40,\n      },\n      {\n        text: '50',\n        value: 50,\n      },\n    ],\n    hidePageListOnlyOnePage: true,\n    sizePerPageRenderer: sizePerPageRenderer,\n  };\n\n  const handleTableChange = (\n    type,\n    {\n      data,\n      cellEdit,\n      page,\n      sizePerPage,\n      filters,\n      sortField,\n      sortOrder,\n      searchText,\n    },\n  ) => {\n    if (type === 'cellEdit') {\n      onUpdateItem &&\n        onUpdateItem(cellEdit.newValue, cellEdit.dataField, cellEdit.rowId);\n    }\n    if (type === 'pagination' && _.isEmpty(filters)) {\n      // if (sizePerPage > totalSize) return alert(\"You have not more records.\")\n      // if (page * sizePerPage > totalSize) return alert(\"You have not more records.\")\n      onPageSizeChange && onPageSizeChange(page, sizePerPage);\n    }\n    if (type === 'filter' || (type === 'pagination' && !_.isEmpty(filters))) {\n      if (type === 'pagination') {\n        if (sizePerPage > totalSize) return alert('You have not more records.');\n        if (page * sizePerPage > totalSize)\n          return alert('You have not more records.');\n      }\n      let filter: any = {};\n      for (const [key, value] of Object.entries(filters)) {\n        const values: any = value;\n        const object = {[key]: values.filterVal};\n        filter = Object.assign(filter, object);\n      }\n      if (onFilter) {\n        debounce(() => {\n          onFilter(\n            type,\n            filter,\n            type === 'filter' && page === 1 ? 0 : page,\n            sizePerPage,\n          );\n        });\n      }\n    }\n    if (type === 'search') {\n      debounce(() => {\n        onFilter && onFilter(type, {srText: searchText}, page, sizePerPage);\n      });\n    }\n    if (type === 'sort') {\n      let result;\n      if (sortOrder === 'asc') {\n        result = data.sort((a, b) => {\n          if (a[sortField] > b[sortField]) {\n            return 1;\n          } else if (b[sortField] > a[sortField]) {\n            return -1;\n          }\n          return 0;\n        });\n      } else {\n        result = data.sort((a, b) => {\n          if (a[sortField] > b[sortField]) {\n            return -1;\n          } else if (b[sortField] > a[sortField]) {\n            return 1;\n          }\n          return 0;\n        });\n      }\n    }\n  };\n\n  const rowStyle = (row, rowIndex) => {\n    switch (row?.colorScheme?.envRangeColor) {\n      case 'BOTH':\n        return {\n          backgroundColor: row?.colorScheme?.cellColor,\n          color: row?.colorScheme?.fontColor,\n        };\n        break;\n      case 'BACKGROUND':\n        return {\n          backgroundColor: row?.colorScheme?.cellColor,\n        };\n        break;\n      case 'FONT':\n        return {\n          color: row?.colorScheme?.fontColor,\n        };\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <PaginationProvider\n      pagination={paginationFactory(\n        totalSize !== 0 ? options : {page, sizePerPage, totalSize},\n      )}\n      keyField={id}\n      columns={columns}\n      data={data}\n    >\n      {({paginationProps, paginationTableProps}) => (\n        <ToolkitProvider\n          keyField={id}\n          bootstrap4\n          data={data}\n          columns={columns}\n          search\n          columnToggle\n        >\n          {props => (\n            <div style={{maxWidth: 200}}>\n              <BootstrapTable\n                remote\n                {...props.baseProps}\n                noDataIndication='Table is Empty'\n                hover\n                {...paginationTableProps}\n                filter={filterFactory()}\n                headerClasses='bg-gray-500 text-white whitespace-nowrap'\n                onTableChange={handleTableChange}\n                rowStyle={rowStyle}\n              />\n            </div>\n          )}\n        </ToolkitProvider>\n      )}\n    </PaginationProvider>\n  );\n};\n","/* eslint-disable */\nimport React, { useState } from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport _ from 'lodash';\nimport ToolkitProvider, {\n  Search,\n  CSVExport,\n} from 'react-bootstrap-table2-toolkit/dist/react-bootstrap-table2-toolkit';\nimport cellEditFactory from 'react-bootstrap-table2-editor';\nimport paginationFactory, {\n  PaginationProvider,\n  PaginationListStandalone,\n  SizePerPageDropdownStandalone,\n  PaginationTotalStandalone,\n} from 'react-bootstrap-table2-paginator';\nimport filterFactory from 'react-bootstrap-table2-filter';\nimport dayjs from 'dayjs';\nimport '@/library/components/organisms/style.css';\n\nimport { Buttons, Icons } from '@/library/components';\n\nconst { SearchBar, ClearSearchButton } = Search;\nconst { ExportCSVButton } = CSVExport;\n\ninterface TableBootstrapProps {\n  id: string;\n  data: any;\n  totalSize?: number;\n  searchPlaceholder?: string;\n  page?: number;\n  sizePerPage?: number;\n  columns: any;\n  fileName: string;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  isSelectRow?: boolean;\n  selectedItem?: any;\n  onDelete?: (selectedItem: any) => void;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (value: any, dataField: string, id: string) => void;\n  onPageSizeChange?: (page: number, limit: number) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n  clearAllFilter?: () => void;\n  onClickRow?: (item: any, index: number) => void;\n}\nexport const TableBootstrap = ({\n  id,\n  data,\n  totalSize = 10,\n  searchPlaceholder = 'Search...',\n  page = 0,\n  sizePerPage = 10,\n  columns,\n  fileName,\n  isEditModify,\n  isSelectRow,\n  selectedItem,\n  onSelectedRow,\n  onUpdateItem,\n  onPageSizeChange,\n  onFilter,\n  clearAllFilter,\n  onClickRow,\n}: TableBootstrapProps) => {\n  const [selectedRow, setSelectedRow] = useState<any[]>();\n  const [isFilterOpen, setIsFilterOpen] = useState<boolean>(false);\n\n  const customTotal = (from, to, size) => {\n    return (\n      <>\n        <div className='clearfix' />\n        <span>\n          Showing {from} to {to} of {size} Results\n        </span>\n      </>\n    );\n  };\n\n  const sizePerPageRenderer = ({\n    options,\n    currSizePerPage,\n    onSizePerPageChange,\n  }) => (\n    <div className='btn-group items-center' role='group'>\n      <input\n        type='number'\n        min='0'\n        placeholder='No'\n        onChange={(e: any) => {\n          if (e.target.value) {\n            onSizePerPageChange(e.target.value);\n          }\n        }}\n        className='mr-2 ml-2 leading-4 p-2 w-14 focus:outline-none focus:ring block  shadow-sm sm:text-base border border-gray-300 rounded-md'\n      />\n      {options.map(option => (\n        <button\n          key={option.text}\n          type='button'\n          onClick={() => onSizePerPageChange(option.page)}\n          className={`btn  ${\n            currSizePerPage === `${option.page}` ? 'bg-primary' : 'bg-grey'\n          }`}\n        >\n          {option.text}\n        </button>\n      ))}\n    </div>\n  );\n  const options = {\n    cutome: true,\n    totalSize: totalSize,\n    paginationSize: 5,\n    pageStartIndex: 0,\n    firstPageText: '<<',\n    prePageText: '<',\n    nextPageText: '>',\n    lastPageText: '>>',\n    disablePageTitle: true,\n    paginationTotalRenderer: customTotal,\n    hideSizePerPage: true,\n    showTotal: false,\n    alwaysShowAllBtns: true,\n    sizePerPageList: [\n      {\n        text: '10',\n        value: 10,\n      },\n      {\n        text: '20',\n        value: 20,\n      },\n      {\n        text: '30',\n        value: 30,\n      },\n      {\n        text: '40',\n        value: 40,\n      },\n      {\n        text: '50',\n        value: 50,\n      },\n    ],\n    hidePageListOnlyOnePage: true,\n    sizePerPageRenderer: sizePerPageRenderer,\n  };\n  let searchProps: any = {\n    placeholder: searchPlaceholder,\n  };\n  const handleOnSelect = (rows: any, isSelect) => {\n    if (isSelect) {\n      if (selectedRow) {\n        let itemSelected: any[] = selectedRow;\n        itemSelected.push(rows);\n        setSelectedRow(itemSelected);\n      } else {\n        setSelectedRow([rows]);\n      }\n    }\n  };\n\n  const handleOnSelectAll = (isSelect, rows) => {\n    if (isSelect) {\n      setSelectedRow(rows);\n    }\n  };\n\n  const handleTableChange = (\n    type,\n    {\n      data,\n      cellEdit,\n      page,\n      sizePerPage,\n      filters,\n      sortField,\n      sortOrder,\n      searchText,\n    },\n  ) => {\n    // console.log({type});\n    if (type === 'cellEdit' && isEditModify) {\n      onUpdateItem &&\n        onUpdateItem(cellEdit.newValue, cellEdit.dataField, cellEdit.rowId);\n    }\n    if (type === 'pagination' && _.isEmpty(filters)) {\n      // if (sizePerPage > totalSize) return alert(\"You have not more records.\")\n      // if (page * sizePerPage > totalSize) return alert(\"You have not more records.\")\n      onPageSizeChange && onPageSizeChange(page, sizePerPage);\n    }\n    if (type === 'filter' || (type === 'pagination' && !_.isEmpty(filters))) {\n      if (type === 'pagination') {\n        if (sizePerPage > totalSize) return alert('You have not more records.');\n        if (page * sizePerPage > totalSize)\n          return alert('You have not more records.');\n      }\n      let filter: any = {};\n      for (const [key, value] of Object.entries(filters)) {\n        const values: any = value;\n        const object = { [key]: values.filterVal };\n        filter = Object.assign(filter, object);\n      }\n      onFilter &&\n        onFilter(\n          type,\n          filter,\n          type === 'filter' && page === 1 ? 0 : page,\n          sizePerPage,\n        );\n    }\n    if (type === 'search') {\n      setTimeout(() => {\n        onFilter && onFilter(type, { srText: searchText }, page, sizePerPage);\n      }, 2000);\n    }\n    if (type === 'sort') {\n      let result;\n      if (sortOrder === 'asc') {\n        result = data.sort((a, b) => {\n          if (a[sortField] > b[sortField]) {\n            return 1;\n          } else if (b[sortField] > a[sortField]) {\n            return -1;\n          }\n          return 0;\n        });\n      } else {\n        result = data.sort((a, b) => {\n          if (a[sortField] > b[sortField]) {\n            return -1;\n          } else if (b[sortField] > a[sortField]) {\n            return 1;\n          }\n          return 0;\n        });\n      }\n    }\n  };\n\n  const CustomToggleList = ({ columns, onColumnToggle, toggles }) => (\n    <div className='btn-group btn-group-toggle' data-toggle='buttons'>\n      {columns\n        .map(column => ({\n          ...column,\n          toggle: toggles[column.dataField],\n        }))\n        .map((column, index) => {\n          if (index > 0) {\n            return (\n              <button\n                type='button'\n                key={column.dataField}\n                className={` btn btn-primary  btn-sm whitespace-nowrap ${\n                  column.toggle ? 'active' : ''\n                }`}\n                data-toggle='button'\n                aria-pressed={column.toggle ? 'true' : 'false'}\n                onClick={() => onColumnToggle(column.dataField)}\n              >\n                {column.text}\n              </button>\n            );\n          }\n        })}\n    </div>\n  );\n\n  const rowEvents = {\n    onClick: (e, row, rowIndex) => {\n      onClickRow && onClickRow(row, rowIndex);\n    },\n  };\n\n  const rowStyle = (row, rowIndex) => {\n    if (row._id == selectedItem?._id) {\n      return { backgroundColor: '#a9a9a9' };\n    }\n  };\n\n  return (\n    <PaginationProvider\n      pagination={paginationFactory(\n        totalSize !== 0 ? options : { page, sizePerPage, totalSize },\n      )}\n      keyField={id}\n      columns={columns}\n      data={data}\n    >\n      {({ paginationProps, paginationTableProps }) => (\n        <ToolkitProvider\n          keyField={id}\n          bootstrap4\n          data={data}\n          columns={columns}\n          search\n          exportCSV={{\n            fileName: `${fileName}_${dayjs(new Date()).format(\n              'YYYY-MM-DD HH:mm',\n            )}.csv`,\n            noAutoBOM: false,\n            blobType: 'text/csv;charset=ansi',\n            exportAll: false,\n            onlyExportFiltered: true,\n          }}\n          columnToggle\n        >\n          {props => (\n            <div>\n              <div className='scrollTable'>\n                <BootstrapTable\n                  remote\n                  {...props.baseProps}\n                  noDataIndication='Table is Empty'\n                  hover\n                  {...paginationTableProps}\n                  filter={filterFactory()}\n                  headerClasses='bg-gray-500 text-white whitespace-nowrap'\n                  onTableChange={handleTableChange}\n                  rowEvents={rowEvents}\n                  rowStyle={rowStyle}\n                />\n              </div>\n            </div>\n          )}\n        </ToolkitProvider>\n      )}\n    </PaginationProvider>\n  );\n};\n","import React, { useState } from 'react';\nimport { observer } from 'mobx-react';\n\nimport { Confirm } from '@/library/models';\nimport dayjs from 'dayjs';\n\nimport { TableBootstrap } from './table-bootstrap.components';\n\ninterface PendingPanelApprovalListProps {\n  data: any;\n  totalSize: number;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  onUpdate?: (selectedItem: Confirm) => void;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (value: any, dataField: string, id: string) => void;\n  onPageSizeChange?: (page: number, totalSize: number) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n  onClickRow?: (item: any, index: number) => void;\n  onReport?: (item: any) => void;\n}\n\nexport const PendingPanelApprovalList = observer(\n  (props: PendingPanelApprovalListProps) => {\n    const [selectedItem, setSelectedItem] = useState<any>({});\n    return (\n      <>\n        <div style={{ position: 'relative' }}>\n          <TableBootstrap\n            id='_id'\n            data={props.data}\n            totalSize={props.totalSize}\n            selectedItem={selectedItem}\n            columns={[\n              {\n                dataField: '_id',\n                text: 'Id',\n                hidden: true,\n                csvExport: false,\n              },\n              {\n                dataField: 'labId',\n                text: 'Lab Id',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'sampleId',\n                text: 'Sample Id',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'panel',\n                text: 'Panel',\n                sort: true,\n                editable: false,\n                headerClasses: 'textHeaderl',\n              },\n              {\n                dataField: 'dueDate',\n                text: 'Due Date',\n                sort: true,\n                editable: false,\n                formatter: (cell, row) => {\n                  return row?.dueDate\n                    ? dayjs(row.dueDate).format('DD-MM-YYYY HH:mm:ss')\n                    : '';\n                },\n              },\n\n              {\n                dataField: 'status',\n                text: 'Status',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'sampleType',\n                text: 'Sample Type',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'containerId',\n                text: 'Container Id',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'comments',\n                text: 'Comments',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'pLab',\n                text: 'PLab',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'department',\n                text: 'Department',\n                sort: true,\n                editable: false,\n              },\n              {\n                text: 'Company Code',\n                dataField: 'companyCode',\n                sort: true,\n                editable: false,\n              },\n              {\n                text: 'Environment',\n                dataField: 'environment',\n                editable: false,\n                sort: true,\n              },\n            ]}\n            isEditModify={props.isEditModify}\n            isSelectRow={true}\n            fileName='Pending Panel Approval'\n            onSelectedRow={rows => {\n              props.onSelectedRow &&\n                props.onSelectedRow(rows.map((item: any) => item._id));\n            }}\n            onUpdateItem={(value: any, dataField: string, id: string) => {\n              props.onUpdateItem && props.onUpdateItem(value, dataField, id);\n            }}\n            onPageSizeChange={(page, size) => {\n              props.onPageSizeChange && props.onPageSizeChange(page, size);\n            }}\n            onFilter={(type, filter, page, size) => {\n              props.onFilter && props.onFilter(type, filter, page, size);\n            }}\n            clearAllFilter={() => {}}\n            onClickRow={(item, index) => {\n              setSelectedItem(item);\n              props.onClickRow && props.onClickRow(item, index);\n            }}\n          />\n        </div>\n      </>\n    );\n  },\n);\n","/* eslint-disable */\nimport React, { useState } from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport _ from 'lodash';\nimport ToolkitProvider, {\n  Search,\n  CSVExport,\n} from 'react-bootstrap-table2-toolkit/dist/react-bootstrap-table2-toolkit';\nimport cellEditFactory from 'react-bootstrap-table2-editor';\nimport paginationFactory, {\n  PaginationProvider,\n  PaginationListStandalone,\n  SizePerPageDropdownStandalone,\n  PaginationTotalStandalone,\n} from 'react-bootstrap-table2-paginator';\nimport filterFactory from 'react-bootstrap-table2-filter';\nimport dayjs from 'dayjs';\nimport '@/library/components/organisms/style.css';\n\nimport { Buttons, Icons } from '@/library/components';\n\nconst { SearchBar, ClearSearchButton } = Search;\nconst { ExportCSVButton } = CSVExport;\n\ninterface TableBootstrapProps {\n  id: string;\n  data: any;\n  totalSize?: number;\n  searchPlaceholder?: string;\n  page?: number;\n  sizePerPage?: number;\n  columns: any;\n  fileName: string;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  isSelectRow?: boolean;\n  selectedItem?: any;\n  onDelete?: (selectedItem: any) => void;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (value: any, dataField: string, id: string) => void;\n  onPageSizeChange?: (page: number, limit: number) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n  clearAllFilter?: () => void;\n  onClickRow?: (item: any, index: number) => void;\n}\nexport const TableBootstrap = ({\n  id,\n  data,\n  totalSize = 10,\n  searchPlaceholder = 'Search...',\n  page = 0,\n  sizePerPage = 10,\n  columns,\n  fileName,\n  isEditModify,\n  isSelectRow,\n  selectedItem,\n  onSelectedRow,\n  onUpdateItem,\n  onPageSizeChange,\n  onFilter,\n  clearAllFilter,\n  onClickRow,\n}: TableBootstrapProps) => {\n  const [selectedRow, setSelectedRow] = useState<any[]>();\n  const [isFilterOpen, setIsFilterOpen] = useState<boolean>(false);\n\n  const customTotal = (from, to, size) => {\n    return (\n      <>\n        <div className='clearfix' />\n        <span>\n          Showing {from} to {to} of {size} Results\n        </span>\n      </>\n    );\n  };\n\n  const sizePerPageRenderer = ({\n    options,\n    currSizePerPage,\n    onSizePerPageChange,\n  }) => (\n    <div className='btn-group items-center' role='group'>\n      <input\n        type='number'\n        min='0'\n        placeholder='No'\n        onChange={(e: any) => {\n          if (e.target.value) {\n            onSizePerPageChange(e.target.value);\n          }\n        }}\n        className='mr-2 ml-2 leading-4 p-2 w-14 focus:outline-none focus:ring block  shadow-sm sm:text-base border border-gray-300 rounded-md'\n      />\n      {options.map(option => (\n        <button\n          key={option.text}\n          type='button'\n          onClick={() => onSizePerPageChange(option.page)}\n          className={`btn  ${\n            currSizePerPage === `${option.page}` ? 'bg-primary' : 'bg-grey'\n          }`}\n        >\n          {option.text}\n        </button>\n      ))}\n    </div>\n  );\n  const options = {\n    cutome: true,\n    totalSize: totalSize,\n    paginationSize: 5,\n    pageStartIndex: 0,\n    firstPageText: '<<',\n    prePageText: '<',\n    nextPageText: '>',\n    lastPageText: '>>',\n    disablePageTitle: true,\n    paginationTotalRenderer: customTotal,\n    hideSizePerPage: true,\n    showTotal: false,\n    alwaysShowAllBtns: true,\n    sizePerPageList: [\n      {\n        text: '10',\n        value: 10,\n      },\n      {\n        text: '20',\n        value: 20,\n      },\n      {\n        text: '30',\n        value: 30,\n      },\n      {\n        text: '40',\n        value: 40,\n      },\n      {\n        text: '50',\n        value: 50,\n      },\n    ],\n    hidePageListOnlyOnePage: true,\n    sizePerPageRenderer: sizePerPageRenderer,\n  };\n  let searchProps: any = {\n    placeholder: searchPlaceholder,\n  };\n  const handleOnSelect = (rows: any, isSelect) => {\n    if (isSelect) {\n      if (selectedRow) {\n        let itemSelected: any[] = selectedRow;\n        itemSelected.push(rows);\n        setSelectedRow(itemSelected);\n      } else {\n        setSelectedRow([rows]);\n      }\n    }\n  };\n\n  const handleOnSelectAll = (isSelect, rows) => {\n    if (isSelect) {\n      setSelectedRow(rows);\n    }\n  };\n\n  const handleTableChange = (\n    type,\n    {\n      data,\n      cellEdit,\n      page,\n      sizePerPage,\n      filters,\n      sortField,\n      sortOrder,\n      searchText,\n    },\n  ) => {\n    // console.log({type});\n    if (type === 'cellEdit' && isEditModify) {\n      onUpdateItem &&\n        onUpdateItem(cellEdit.newValue, cellEdit.dataField, cellEdit.rowId);\n    }\n    if (type === 'pagination' && _.isEmpty(filters)) {\n      // if (sizePerPage > totalSize) return alert(\"You have not more records.\")\n      // if (page * sizePerPage > totalSize) return alert(\"You have not more records.\")\n      onPageSizeChange && onPageSizeChange(page, sizePerPage);\n    }\n    if (type === 'filter' || (type === 'pagination' && !_.isEmpty(filters))) {\n      if (type === 'pagination') {\n        if (sizePerPage > totalSize) return alert('You have not more records.');\n        if (page * sizePerPage > totalSize)\n          return alert('You have not more records.');\n      }\n      let filter: any = {};\n      for (const [key, value] of Object.entries(filters)) {\n        const values: any = value;\n        const object = { [key]: values.filterVal };\n        filter = Object.assign(filter, object);\n      }\n      onFilter &&\n        onFilter(\n          type,\n          filter,\n          type === 'filter' && page === 1 ? 0 : page,\n          sizePerPage,\n        );\n    }\n    if (type === 'search') {\n      setTimeout(() => {\n        onFilter && onFilter(type, { srText: searchText }, page, sizePerPage);\n      }, 2000);\n    }\n    if (type === 'sort') {\n      let result;\n      if (sortOrder === 'asc') {\n        result = data.sort((a, b) => {\n          if (a[sortField] > b[sortField]) {\n            return 1;\n          } else if (b[sortField] > a[sortField]) {\n            return -1;\n          }\n          return 0;\n        });\n      } else {\n        result = data.sort((a, b) => {\n          if (a[sortField] > b[sortField]) {\n            return -1;\n          } else if (b[sortField] > a[sortField]) {\n            return 1;\n          }\n          return 0;\n        });\n      }\n    }\n  };\n\n  const CustomToggleList = ({ columns, onColumnToggle, toggles }) => (\n    <div className='btn-group btn-group-toggle' data-toggle='buttons'>\n      {columns\n        .map(column => ({\n          ...column,\n          toggle: toggles[column.dataField],\n        }))\n        .map((column, index) => {\n          if (index > 0) {\n            return (\n              <button\n                type='button'\n                key={column.dataField}\n                className={` btn btn-primary  btn-sm whitespace-nowrap ${\n                  column.toggle ? 'active' : ''\n                }`}\n                data-toggle='button'\n                aria-pressed={column.toggle ? 'true' : 'false'}\n                onClick={() => onColumnToggle(column.dataField)}\n              >\n                {column.text}\n              </button>\n            );\n          }\n        })}\n    </div>\n  );\n\n  const rowEvents = {\n    onClick: (e, row, rowIndex) => {\n      onClickRow && onClickRow(row, rowIndex);\n    },\n  };\n\n  const rowStyle = (row, rowIndex) => {\n    if (row._id == selectedItem?._id) {\n      return { backgroundColor: '#a9a9a9' };\n    }\n  };\n\n  return (\n    <PaginationProvider\n      pagination={paginationFactory(\n        totalSize !== 0 ? options : { page, sizePerPage, totalSize },\n      )}\n      keyField={id}\n      columns={columns}\n      data={data}\n    >\n      {({ paginationProps, paginationTableProps }) => (\n        <ToolkitProvider\n          keyField={id}\n          bootstrap4\n          data={data}\n          columns={columns}\n          search\n          exportCSV={{\n            fileName: `${fileName}_${dayjs(new Date()).format(\n              'YYYY-MM-DD HH:mm',\n            )}.csv`,\n            noAutoBOM: false,\n            blobType: 'text/csv;charset=ansi',\n            exportAll: false,\n            onlyExportFiltered: true,\n          }}\n          columnToggle\n        >\n          {props => (\n            <div>\n              <div className='scrollTable'>\n                <BootstrapTable\n                  remote\n                  {...props.baseProps}\n                  noDataIndication='Table is Empty'\n                  hover\n                  {...paginationTableProps}\n                  filter={filterFactory()}\n                  headerClasses='bg-gray-500 text-white whitespace-nowrap'\n                  onTableChange={handleTableChange}\n                  rowEvents={rowEvents}\n                  rowStyle={rowStyle}\n                />\n              </div>\n            </div>\n          )}\n        </ToolkitProvider>\n      )}\n    </PaginationProvider>\n  );\n};\n","import React, { useState } from 'react';\nimport { observer } from 'mobx-react';\nimport { Form } from '@/library/components';\nimport { Confirm } from '@/library/models';\nimport dayjs from 'dayjs';\n\nimport { TableBootstrap } from './table-bootstrap.components';\n\ninterface PatientDemographicsListProps {\n  data: any;\n  totalSize: number;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  onUpdate?: (selectedItem: Confirm) => void;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (value: any, dataField: string, id: string) => void;\n  onPageSizeChange?: (page: number, totalSize: number) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n  onClickRow?: (item: any, index: number) => void;\n  onReport?: (item: any) => void;\n}\n\nexport const PatientDemographicsList = observer(\n  (props: PatientDemographicsListProps) => {\n    const [selectedItem, setSelectedItem] = useState<any>({});\n    return (\n      <>\n        <div style={{ position: 'relative' }}>\n          <TableBootstrap\n            id='_id'\n            data={props.data}\n            totalSize={props.totalSize}\n            selectedItem={selectedItem}\n            columns={[\n              {\n                dataField: '_id',\n                text: 'Id',\n                hidden: true,\n                csvExport: false,\n              },\n              {\n                dataField: 'pId',\n                text: 'Pid',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'name',\n                text: 'Name',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'age',\n                text: 'Age',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'sex',\n                text: 'Sex',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'dob',\n                text: 'DOB',\n                sort: true,\n                editable: false,\n                formatter: (cell, row) => {\n                  return row?.dob\n                    ? dayjs(row.dob).format('DD-MM-YYYY HH:mm:ss')\n                    : '';\n                },\n              },\n              {\n                dataField: 'patientMobileNo',\n                text: 'patientMobileNo',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'doctorId',\n                text: 'Doctor Id',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'doctorMobileNo',\n                text: 'Doctor Mobile No',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'registrationLocation',\n                text: 'Registration Location',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'contactNo',\n                text: 'Contact Number',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'history',\n                text: 'History',\n                sort: true,\n                csvFormatter: (col, row) =>\n                  `${row.history ? (row.history ? 'Yes' : 'No') : 'No'}`,\n                editable: false,\n                formatter: (cell, row) => {\n                  return (\n                    <>\n                      {' '}\n                      <Form.Toggle disabled={true} value={row.history} />\n                    </>\n                  );\n                },\n              },\n              {\n                text: 'Company Code',\n                dataField: 'companyCode',\n                sort: true,\n                editable: false,\n              },\n              {\n                text: 'Environment',\n                dataField: 'environment',\n                editable: false,\n                sort: true,\n              },\n            ]}\n            isEditModify={props.isEditModify}\n            isSelectRow={true}\n            fileName='Pending Panel Approval'\n            onSelectedRow={rows => {\n              props.onSelectedRow &&\n                props.onSelectedRow(rows.map((item: any) => item._id));\n            }}\n            onUpdateItem={(value: any, dataField: string, id: string) => {\n              props.onUpdateItem && props.onUpdateItem(value, dataField, id);\n            }}\n            onPageSizeChange={(page, size) => {\n              props.onPageSizeChange && props.onPageSizeChange(page, size);\n            }}\n            onFilter={(type, filter, page, size) => {\n              props.onFilter && props.onFilter(type, filter, page, size);\n            }}\n            clearAllFilter={() => {}}\n            onClickRow={(item, index) => {\n              setSelectedItem(item);\n              props.onClickRow && props.onClickRow(item, index);\n            }}\n          />\n        </div>\n      </>\n    );\n  },\n);\n","import React, { useMemo, useState } from 'react';\nimport { observer } from 'mobx-react';\nimport {\n  Header,\n  PageHeading,\n  PageHeadingLabDetails,\n  Toast,\n  MainPageHeading,\n} from '@/library/components';\nimport { useForm } from 'react-hook-form';\nimport { RouterFlow } from '@/flows';\nimport {\n  PendingPanelApprovalList,\n  ResultList,\n  PatientDemographicsList,\n} from '../components';\nimport '@/library/assets/css/accordion.css';\nimport { useStores } from '@/stores';\nimport 'react-accessible-accordion/dist/fancy-example.css';\n\nconst PanelApproval = observer(() => {\n  const {\n    loading,\n    panelApprovalStore,\n    transactionDetailsStore,\n    routerStore,\n    loginStore,\n    patientResultStore,\n    receiptStore,\n  } = useStores();\n\n  const {\n    control,\n    handleSubmit,\n    formState: { errors },\n    setValue,\n  } = useForm();\n  const [receiptPath, setReceiptPath] = useState<string>();\n  const [expandItem, setExpandItem] = useState<any>([]);\n  const [tableReaload, setTableReload] = useState<boolean>(false);\n  const [selectId, setSelectId] = useState('');\n  const [filterRecord, setFilterRecord] = useState<string>('');\n\n  const updateRecords = payload => {\n    const { type, data } = payload;\n    switch (type) {\n      case 'update': {\n        panelApprovalStore.panelApprovalService\n          .update({\n            input: {\n              ...data.fields,\n              _id: data.id,\n            },\n          })\n          .then((res: any) => {\n            if (res.updatePanelApproval.success) {\n              Toast.success({\n                message: `😊 ${res.updatePanelApproval.message}`,\n              });\n              panelApprovalStore.panelApprovalService.listPanelApproval();\n            }\n          });\n        break;\n      }\n      case 'updateMany': {\n        panelApprovalStore.panelApprovalService\n          .update({\n            input: {\n              updateMany: {\n                fields: data.rows,\n                type: data.type,\n              },\n            },\n          })\n          .then((res: any) => {\n            if (res.updatePanelApproval.success) {\n              Toast.success({\n                message: `😊 ${res.updatePanelApproval.message}`,\n              });\n              panelApprovalStore.panelApprovalService.listPanelApproval();\n            }\n          });\n        break;\n      }\n    }\n  };\n\n  const updateResultRecords = (id, payload) => {\n    patientResultStore.patientResultService\n      .updateSingleFiled({\n        input: {\n          result: payload?.result,\n          resultType: payload?.resultType,\n          file: payload?.file,\n          labId: payload?.labId,\n          analyteCode: payload?.analyteCode,\n          analyteName: payload?.analyteName,\n          testStatus: payload?.testStatus,\n          rangeType: payload?.rangeType,\n          critical: payload?.critical,\n          abnFlag: payload?.abnFlag,\n          refRangesList: payload?.refRangesList,\n          testCode: payload?.testCode,\n          testName: payload?.testName,\n          panelCode: payload?.panelCode,\n          resultDate: payload?.resultDate,\n          reportPriority: payload?.reportPriority,\n          deliveryMode: payload?.deliveryMode,\n          units: payload?.units,\n          conclusion: payload?.conclusion,\n          loNor: payload?.loNor,\n          hiNor: payload?.hiNor,\n          resultStatus: payload?.resultStatus,\n          panelStatus: payload?.panelStatus,\n          enteredBy: loginStore.login?.userId,\n          _id: id,\n          __v: undefined,\n          flagUpdate: undefined,\n        },\n      })\n      .then(res => {\n        if (res.updatePatientResult.success) {\n          Toast.success({\n            message: `😊 ${res.updatePatientResult.message}`,\n            timer: 2000,\n          });\n          panelApprovalStore.panelApprovalService.listPanelApproval();\n        }\n      });\n    setTableReload(!tableReaload);\n  };\n\n  const resultTable = useMemo(\n    () => (\n      <ResultList\n        data={panelApprovalStore.panelApprovalList || []}\n        totalSize={panelApprovalStore.panelApprovalListCount}\n        selectedId={selectId}\n        filterRecord={filterRecord}\n        isView={RouterFlow.checkPermission(routerStore.userPermission, 'View')}\n        isDelete={RouterFlow.checkPermission(\n          routerStore.userPermission,\n          'Delete',\n        )}\n        isUpdate={RouterFlow.checkPermission(\n          routerStore.userPermission,\n          'Update',\n        )}\n        isExport={RouterFlow.checkPermission(\n          routerStore.userPermission,\n          'Export',\n        )}\n        isApproval={RouterFlow.checkPermission(\n          routerStore.userPermission,\n          'Approval',\n        )}\n        onSelectedRow={(rows, type) => {\n          updateRecords({\n            show: true,\n            type: 'updateMany',\n            data: { rows, type },\n            title: 'Are you sure?',\n            body: 'Update items!',\n          });\n        }}\n        onUpdateFields={(fields: any, id: string) => {\n          updateRecords({\n            show: true,\n            type: 'update',\n            data: { fields, id },\n            title: 'Are you sure?',\n            body: 'Update items!',\n          });\n        }}\n        onUpdateResult={(fields: any, id: string) => {\n          updateResultRecords(id, fields);\n        }}\n        onExpand={items => {\n          setSelectId(items._id);\n          if (typeof items == 'object') {\n            setExpandItem([items]);\n          } else {\n            setExpandItem([]);\n          }\n        }}\n        onPageSizeChange={(page, limit) => {\n          panelApprovalStore.panelApprovalService.listPanelApproval(\n            page,\n            limit,\n          );\n        }}\n        onFilter={(type, filter, page, limit) => {\n          panelApprovalStore.panelApprovalService.filter({\n            input: { type, filter, page, limit },\n          });\n        }}\n        onRecheck={async (id: string, patientResultId: string) => {\n          await patientResultStore.patientResultService\n            .updateStatus({\n              input: { filter: { id, patientResultId, mode: 'reCheck' } },\n            })\n            .then(res => {\n              Toast.success({\n                message: `😊 ${res.updateStatusPatientResult.message}`,\n              });\n              panelApprovalStore.panelApprovalService?.listPanelApproval();\n            });\n        }}\n        onRetest={async (id: string, patientResultId: string) => {\n          await patientResultStore.patientResultService\n            .updateStatus({\n              input: { filter: { id, patientResultId, mode: 'reTest' } },\n            })\n            .then(res => {\n              Toast.success({\n                message: `😊 ${res.updateStatusPatientResult.message}`,\n              });\n              panelApprovalStore.panelApprovalService?.listPanelApproval();\n            });\n        }}\n        onFilterRecord={setFilterRecord}\n      />\n    ),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      panelApprovalStore.panelApprovalList,\n      tableReaload,\n      selectId,\n      filterRecord,\n    ],\n  );\n\n  return (\n    <>\n      <MainPageHeading\n        title={routerStore.selectedComponents?.title || ''}\n        store={loginStore}\n      />\n      <div className='p-3 rounded-lg shadow-xl overflow-auto'>\n        <span className='font-bold text-lg underline'>Result</span>\n        {resultTable}\n        <span className='text-red'>\n          Note: Report Priority= Daily single-single update.\n        </span>\n      </div>\n\n      {expandItem?.length > 0 && (\n        <>\n          <div className='p-1 rounded-lg shadow-xl overflow-auto mt-4'>\n            <span className='font-bold text-lg underline'>\n              Pending Panel Approval\n            </span>\n            <PendingPanelApprovalList\n              data={expandItem || []}\n              totalSize={expandItem.length}\n            />\n            <span className='font-bold text-lg underline'>\n              Patient Demographics\n            </span>\n            <PatientDemographicsList\n              data={expandItem || []}\n              totalSize={expandItem.length}\n            />\n          </div>\n        </>\n      )}\n    </>\n  );\n});\n\nexport default PanelApproval;\n"],"names":["labId","SearchBar","Search","ClearSearchButton","ExportCSVButton","CSVExport","TableBootstrap","_ref","id","data","_ref$totalSize","totalSize","_ref$searchPlaceholde","searchPlaceholder","_ref$page","page","_ref$sizePerPage","sizePerPage","columns","fileName","isEditModify","isDelete","_ref$isExport","isExport","isSelectRow","onSelectedRow","selectedItem","onUpdateItem","onPageSizeChange","onFilter","clearAllFilter","onClickRow","onFilterRecord","_useState","useState","_useState2","_slicedToArray","selectedRow","setSelectedRow","_useState3","_useState4","isFilterOpen","setIsFilterOpen","statusData","code","value","color","options","cutome","paginationSize","pageStartIndex","firstPageText","prePageText","nextPageText","lastPageText","disablePageTitle","paginationTotalRenderer","from","to","size","_jsxs","_Fragment","children","_jsx","className","hideSizePerPage","showTotal","alwaysShowAllBtns","sizePerPageList","text","hidePageListOnlyOnePage","sizePerPageRenderer","_ref2","currSizePerPage","onSizePerPageChange","role","Tooltip","tooltipText","Icons","onClick","type","min","placeholder","onChange","e","target","map","option","concat","searchProps","handleOnSelect","rows","isSelect","itemSelected","push","handleOnSelectAll","handleTableChange","_ref3","cellEdit","filters","sortField","sortOrder","searchText","newValue","dataField","rowId","_","alert","filter","_i","_Object$entries","Object","entries","length","_Object$entries$_i","key","values","object","_defineProperty","filterVal","assign","debounce","srText","sort","a","b","CustomToggleList","_ref4","onColumnToggle","toggles","column","_objectSpread","toggle","index","rowEvents","row","rowIndex","rowStyle","_row$colorScheme","_row$colorScheme2","_row$colorScheme3","_row$colorScheme4","_row$colorScheme5","colorScheme","envRangeColor","backgroundColor","cellColor","fontColor","PaginationProvider","pagination","paginationFactory","keyField","_ref5","paginationProps","paginationTableProps","ToolkitProvider","bootstrap4","search","exportCSV","dayjs","Date","format","noAutoBOM","blobType","exportAll","onlyExportFiltered","columnToggle","props","console","log","csvProps","Buttons","status","contextual","btnClassName","columnToggleProps","BootstrapTable","remote","baseProps","noDataIndication","hover","filterFactory","headerClasses","selectRow","mode","onSelect","onSelectAll","undefined","cellEditFactory","blurToSave","onTableChange","SizePerPageDropdownStandalone","PaginationListStandalone","PaginationTotalStandalone","RefRanges","_ref$data","style","maxWidth","ResultList","selectId","setSelectId","localData","setLocalData","_useState5","_useState6","selectedRowId","setSelectedRowId","_useState7","_useState8","widthRefBox","setWidthRefBox","_useState9","_useState10","widthConculsionBox","setWidthConculsionBox","_useState11","_useState12","conclusionId","setWidthConculsionId","useEffect","_props$data","_props$data$filter","holdRecord","selectedId","item","_id","filterRecord","approvalStatus","JSON","parse","stringify","isView","hidden","csvExport","editable","headerStyle","fontSize","sortCaret","order","customFilter","getFilter","filterRenderer","NumberFilter","editorRenderer","editorProps","columnIndex","InputResult","_asyncToGenerator","_regeneratorRuntime","mark","_callee","result","wrap","_context","prev","next","onUpdateResult","resultStatus","getResultStatus","resultType","testStatus","getTestStatus","abnFlag","getAbnFlag","critical","getCretical","patientResultId","stop","_x","apply","arguments","width","formatter","cell","_row$refRangesList","_row$refRangesList2","loNor","hiNor","refRangesList","Form","onBlur","conclusion","onUpdateFields","updateField","defaultValue","disabled","deltaFlag","approvalDate","autoRelease","csvFormatter","col","cellContent","isApproval","onExpand","onRecheck","nameIcon","propsIcon","onRetest","classes","colIndex","_props$data2","zIndex","isUpdate","setTimeout","PendingPanelApprovalList","observer","setSelectedItem","position","dueDate","PatientDemographicsList","dob","history","PanelApproval","_routerStore$selected","_useStores","useStores","panelApprovalStore","loading","routerStore","transactionDetailsStore","loginStore","patientResultStore","_useForm","receiptStore","useForm","control","handleSubmit","formState","errors","setValue","expandItem","setExpandItem","tableReaload","setTableReload","setFilterRecord","updateRecords","payload","panelApprovalService","update","input","fields","then","res","updatePanelApproval","success","Toast","message","listPanelApproval","updateMany","resultTable","useMemo","panelApprovalList","panelApprovalListCount","RouterFlow","userPermission","show","title","body","_loginStore$login","patientResultService","updateSingleFiled","file","analyteCode","analyteName","rangeType","testCode","testName","panelCode","resultDate","reportPriority","deliveryMode","units","panelStatus","enteredBy","login","userId","__v","flagUpdate","updatePatientResult","timer","updateResultRecords","items","limit","updateStatus","_panelApprovalStore$p","updateStatusPatientResult","_x2","_callee2","_context2","_panelApprovalStore$p2","_x3","_x4","MainPageHeading","selectedComponents","store"],"sourceRoot":""}