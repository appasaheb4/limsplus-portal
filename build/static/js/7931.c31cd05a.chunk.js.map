{"version":3,"file":"static/js/7931.c31cd05a.chunk.js","mappings":"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","sources":["features/validation/panel-approval/components/molecules/result/result-list.components.tsx","features/validation/panel-approval/components/molecules/result/table-bootstrap.components.tsx","features/validation/panel-approval/components/molecules/result/ref-ranges.component.tsx","features/validation/panel-approval/components/molecules/pending-panel-approval/table-bootstrap.components.tsx","features/validation/panel-approval/components/molecules/pending-panel-approval/pending-panel-approval-list.components.tsx","features/validation/panel-approval/components/molecules/patient-demographics/table-bootstrap.components.tsx","features/validation/panel-approval/components/molecules/patient-demographics/patient-demographics-list.components.tsx","features/validation/panel-approval/screens/panel-approval.screen.tsx"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {\n  Form,\n  Tooltip,\n  Icons,\n  NumberFilter,\n  sortCaret,\n  customFilter,\n} from '@/library/components';\nimport dayjs from 'dayjs';\n\nimport {TableBootstrap} from './table-bootstrap.components';\nimport {RefRanges} from './ref-ranges.component';\nimport {InputResult} from '../../../../../result-entry/general-result-entry/components/molecules/output/input-result.components';\n\nimport {\n  getResultStatus,\n  getTestStatus,\n  getAbnFlag,\n  getCretical,\n} from '../../../../../result-entry/general-result-entry/utils';\n\ninterface ResultListProps {\n  data: any;\n  totalSize: number;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  selectedId?: string;\n  selectedItems?: any;\n  onSelectedRow?: (selectedItem: any, type: string) => void;\n  onUpdateFields?: (fields: any, id: string) => void;\n  onUpdateResult?: (fields: any, id: string) => void;\n  onExpand?: (items: any) => void;\n  onRecheck?: (id: string, patientResultId: string) => void;\n  onRetest?: (id: string, patientResultId: string) => void;\n  onPageSizeChange?: (page: number, totalSize: number) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n  onClickRow?: (item: any, index: number) => void;\n  onReport?: (item: any) => void;\n}\n\nlet labId;\n\nexport const ResultList = (props: ResultListProps) => {\n  const [selectId, setSelectId] = useState('');\n  const [localData, setLocalData] = useState(props.data);\n  const [selectedRowId, setSelectedRowId] = useState('');\n\n  useEffect(() => {\n    setSelectId(props.selectedId || '');\n    setLocalData(\n      props.selectedId\n        ? props.data.map(item => {\n            return {...item, selectedId: props.selectedId};\n          })\n        : props.data,\n    );\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.selectedId, props.data]);\n\n  useEffect(() => {\n    setLocalData(JSON.parse(JSON.stringify(localData)));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedRowId]);\n\n  return (\n    <>\n      <div style={{position: 'relative'}}>\n        <TableBootstrap\n          id='_id'\n          data={localData}\n          totalSize={props.totalSize}\n          columns={[\n            {\n              dataField: '_id',\n              text: 'Id',\n              hidden: true,\n              csvExport: false,\n            },\n            {\n              dataField: 'labId',\n              text: 'Lab Id',\n              sort: true,\n              editable: false,\n              headerStyle: {\n                fontSize: 0,\n              },\n              sortCaret: (order, column) => sortCaret(order, column),\n              headerClasses: 'textHeader3',\n              filter: customFilter({\n                getFilter: filter => {\n                  labId = filter;\n                },\n              }),\n              filterRenderer: (onFilter, column) => (\n                <NumberFilter onFilter={onFilter} column={column} />\n              ),\n            },\n            {\n              dataField: 'test',\n              text: 'Test',\n              sort: true,\n              editable: false,\n              headerClasses: 'textHeader',\n            },\n            {\n              dataField: 'analyte',\n              text: 'Analyte',\n              sort: true,\n              editable: false,\n              headerClasses: 'textHeaderl',\n            },\n            {\n              dataField: 'result',\n              text: 'Result',\n              sort: true,\n              headerClasses: 'textHeaderl',\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  <InputResult\n                    row={row}\n                    onSelect={async result => {\n                      const rows = {...row, ...result};\n                      props.onUpdateResult &&\n                        props.onUpdateResult(\n                          {\n                            ...rows,\n                            resultStatus: getResultStatus(\n                              rows.resultType,\n                              rows,\n                            ),\n                            testStatus: getTestStatus(rows.resultType, rows),\n                            abnFlag: getAbnFlag(rows.resultType, rows),\n                            critical: getCretical(rows.resultType, rows),\n                            ...result,\n                          },\n                          rows.patientResultId,\n                        );\n                    }}\n                  />\n                </>\n              ),\n            },\n            {\n              dataField: 'final',\n              text: 'Final',\n              sort: true,\n              editable: false,\n              headerClasses: 'textHeaderl',\n            },\n            {\n              dataField: 'abnFlag',\n              text: 'Abn Flag',\n              sort: true,\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <Form.Toggle disabled={true} value={row.abnFlag} />\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'critical',\n              text: 'Critical',\n              sort: true,\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <Form.Toggle disabled={true} value={row.critical} />\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'units',\n              text: 'Units',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'refRangesList',\n              text: 'Ref Ranges',\n              sort: true,\n              editable: false,\n              headerClasses: 'textHeader16',\n              formatter: (cell, row) => {\n                return (\n                  <div className='flex flex-col'>\n                    {row.refRangesList?.length > 0 && (\n                      <Tooltip\n                        tooltipText={\n                          row._id != selectedRowId ? 'Expand' : 'Collapse'\n                        }\n                      >\n                        <Icons.IconContext\n                          color='#000000'\n                          size='20'\n                          onClick={() => {\n                            row._id == selectedRowId\n                              ? setSelectedRowId('')\n                              : setSelectedRowId(row._id);\n                          }}\n                        >\n                          {Icons.getIconTag(\n                            row._id != selectedRowId\n                              ? Icons.IconBi.BiExpand\n                              : Icons.IconBi.BiCollapse,\n                          )}\n                        </Icons.IconContext>\n                      </Tooltip>\n                    )}\n                    {selectedRowId == row._id ? (\n                      <RefRanges\n                        id='_id'\n                        data={row?.refRangesList || []}\n                        totalSize={row?.refRangesList?.length || 0}\n                        columns={[\n                          {\n                            dataField: 'result',\n                            text: 'Result',\n                            editable: false,\n                            formatter: () => (\n                              <>\n                                <span>{row.result}</span>\n                              </>\n                            ),\n                          },\n                          {\n                            dataField: 'rangeType',\n                            text: 'Range Type',\n                          },\n                          {\n                            dataField: 'low',\n                            text: 'Low',\n                          },\n                          {\n                            dataField: 'high',\n                            text: 'High',\n                          },\n                          {\n                            dataField: 'rangeSetOn',\n                            text: 'Range Set On',\n                          },\n                          {\n                            dataField: 'rangeId',\n                            text: 'Range Id',\n                          },\n                          {\n                            dataField: 'version',\n                            text: 'Range Version',\n                          },\n                        ]}\n                        onSelectedRow={rows => {}}\n                        onUpdateItem={(\n                          value: any,\n                          dataField: string,\n                          id: string,\n                        ) => {}}\n                      />\n                    ) : null}\n                  </div>\n                );\n              },\n            },\n            {\n              dataField: 'conclusion',\n              text: 'Conclusion',\n              headerClasses: 'textHeader',\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  <Form.MultilineInput\n                    rows={3}\n                    placeholder='Conclusion'\n                    onBlur={conclusion => {\n                      props.onUpdateFields &&\n                        props.onUpdateFields({conclusion}, row._id);\n                    }}\n                    defaultValue={row?.conclusion}\n                  />\n                </>\n              ),\n            },\n            {\n              dataField: 'remarks',\n              text: 'Remarks',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'deltaFlag',\n              text: 'Delta Flag',\n              sort: true,\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <Form.Toggle disabled={true} value={row.deltaFlag} />\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'deltaValue',\n              text: 'Delta Value',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'resultStatus',\n              text: 'resultStatus',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'testStatus',\n              text: 'Test Status',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'approvalDate',\n              text: 'Approval Date',\n              sort: true,\n              editable: false,\n              formatter: (cell, row) => {\n                return row.approvalDate\n                  ? dayjs(row.approvalDate).format('YYYY-MM-DD')\n                  : '';\n              },\n            },\n            {\n              dataField: 'autoRelease',\n              text: 'Auto Release',\n              sort: true,\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <Form.Toggle disabled={true} value={row.autoRelease} />\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'enteredBy',\n              text: 'Entered By',\n              sort: true,\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n            },\n            {\n              dataField: 'approvalStatus',\n              text: 'Operation',\n              sort: true,\n              editable: true,\n              formatter: (cellContent, row) => (\n                <div className='flex flex-row gap-1' key={row?._id}>\n                  <Tooltip tooltipText='Approved'>\n                    <Icons.IconContext\n                      color='#fff'\n                      size='20'\n                      onClick={() => {\n                        props.onUpdateFields &&\n                          props.onUpdateFields(\n                            {approvalStatus: 'Approved'},\n                            row._id,\n                          );\n                      }}\n                    >\n                      {Icons.getIconTag(Icons.Iconai.AiFillCheckCircle)}\n                    </Icons.IconContext>\n                  </Tooltip>\n                  <Tooltip tooltipText='Rejected'>\n                    <Icons.IconContext\n                      color='#fff'\n                      size='20'\n                      onClick={() => {\n                        props.onUpdateFields &&\n                          props.onUpdateFields(\n                            {approvalStatus: 'Rejected'},\n                            row._id,\n                          );\n                      }}\n                    >\n                      {Icons.getIconTag(Icons.Iconai.AiFillCloseCircle)}\n                    </Icons.IconContext>\n                  </Tooltip>\n                  {selectId == row._id ? (\n                    <Tooltip tooltipText='Expand'>\n                      <Icons.IconContext\n                        color='#fff'\n                        size='20'\n                        onClick={() => {\n                          props.onExpand && props.onExpand('');\n                        }}\n                      >\n                        {Icons.getIconTag(Icons.Iconai.AiFillMinusCircle)}\n                      </Icons.IconContext>\n                    </Tooltip>\n                  ) : (\n                    <Tooltip tooltipText='Expand'>\n                      <Icons.IconContext\n                        color='#fff'\n                        size='20'\n                        onClick={() => {\n                          props.onExpand && props.onExpand(row);\n                        }}\n                      >\n                        {Icons.getIconTag(Icons.Iconai.AiFillPlusCircle)}\n                      </Icons.IconContext>\n                    </Tooltip>\n                  )}\n                  <Tooltip tooltipText='Recheck'>\n                    <Icons.IconContext\n                      color='#fff'\n                      size='20'\n                      onClick={() => {\n                        props.onRecheck &&\n                          props.onRecheck(row?._id, row?.patientResultId);\n                      }}\n                    >\n                      <Icons.RIcon\n                        nameIcon='GoIssueReopened'\n                        propsIcon={{color: '#ffffff'}}\n                      />\n                    </Icons.IconContext>\n                  </Tooltip>\n                  <Tooltip tooltipText='Retest'>\n                    <Icons.IconContext\n                      color='#fff'\n                      size='20'\n                      onClick={() => {\n                        props.onRetest &&\n                          props.onRetest(row?._id, row?.patientResultId);\n                      }}\n                    >\n                      <Icons.RIcon\n                        nameIcon='VscIssueReopened'\n                        propsIcon={{color: '#ffffff'}}\n                      />\n                    </Icons.IconContext>\n                  </Tooltip>\n                </div>\n              ),\n              headerClasses: 'sticky right-0  bg-gray-500 text-white z-50',\n              classes: (cell, row, rowIndex, colIndex) => {\n                return 'sticky right-0 bg-gray-500';\n              },\n              style: (cell, row, rowIndex, colIndex) => {\n                return {\n                  zIndex: props.data?.length - rowIndex,\n                };\n              },\n            },\n          ]}\n          isEditModify={props.isEditModify}\n          isSelectRow={true}\n          fileName='Report Panel Approval'\n          onSelectedRow={(rows, type) => {\n            props.onSelectedRow && props.onSelectedRow(rows, type);\n          }}\n          onFilter={(type, filter, page, size) => {\n            props.onFilter && props.onFilter(type, filter, page, size);\n          }}\n          onPageSizeChange={(page, size) => {\n            props.onPageSizeChange && props.onPageSizeChange(page, size);\n          }}\n          clearAllFilter={() => {\n            labId('');\n          }}\n        />\n      </div>\n    </>\n  );\n};\n","/* eslint-disable */\nimport React, {useState} from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport _ from 'lodash';\nimport ToolkitProvider, {\n  Search,\n  CSVExport,\n} from 'react-bootstrap-table2-toolkit/dist/react-bootstrap-table2-toolkit';\nimport cellEditFactory from 'react-bootstrap-table2-editor';\nimport paginationFactory, {\n  PaginationProvider,\n  PaginationListStandalone,\n  SizePerPageDropdownStandalone,\n  PaginationTotalStandalone,\n} from 'react-bootstrap-table2-paginator';\nimport filterFactory from 'react-bootstrap-table2-filter';\nimport dayjs from 'dayjs';\nimport '@/library/components/organisms/style.css';\nimport {debounce} from '@/core-utils';\n\nimport {Buttons, Icons, Tooltip} from '@/library/components';\n\nconst {SearchBar, ClearSearchButton} = Search;\nconst {ExportCSVButton} = CSVExport;\n\ninterface TableBootstrapProps {\n  id: string;\n  data: any;\n  totalSize?: number;\n  searchPlaceholder?: string;\n  page?: number;\n  sizePerPage?: number;\n  columns: any;\n  fileName: string;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  isSelectRow?: boolean;\n  selectedItem?: any;\n  onDelete?: (selectedItem: any) => void;\n  onSelectedRow?: (selectedItem: any, type: string) => void;\n  onUpdateItem?: (value: any, dataField: string, id: string) => void;\n  onPageSizeChange?: (page: number, limit: number) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n  clearAllFilter?: () => void;\n  onClickRow?: (item: any, index: number) => void;\n}\nexport const TableBootstrap = ({\n  id,\n  data,\n  totalSize = 10,\n  searchPlaceholder = 'Search...',\n  page = 0,\n  sizePerPage = 10,\n  columns,\n  fileName,\n  isEditModify,\n  isSelectRow,\n  selectedItem,\n  onSelectedRow,\n  onUpdateItem,\n  onPageSizeChange,\n  onFilter,\n  clearAllFilter,\n  onClickRow,\n}: TableBootstrapProps) => {\n  const [selectedRow, setSelectedRow] = useState<any[]>();\n  const [isFilterOpen, setIsFilterOpen] = useState<boolean>(false);\n\n  const customTotal = (from, to, size) => {\n    return (\n      <>\n        <div className='clearfix' />\n        <span>\n          Showing {from} to {to} of {size} Results\n        </span>\n      </>\n    );\n  };\n\n  const sizePerPageRenderer = ({\n    options,\n    currSizePerPage,\n    onSizePerPageChange,\n  }) => (\n    <div className='btn-group items-center' role='group'>\n      {isSelectRow && (\n        <div className='flex flex-row gap-1 border-solid border-2 p-1'>\n          <Tooltip tooltipText='Approved'>\n            <Icons.IconContext\n              color='#6A727F'\n              size='30'\n              onClick={() => {\n                onSelectedRow && onSelectedRow(selectedRow, 'Approved');\n              }}\n            >\n              {Icons.getIconTag(Icons.Iconai.AiFillCheckCircle)}\n            </Icons.IconContext>\n          </Tooltip>\n          <Tooltip tooltipText='Rejected'>\n            <Icons.IconContext\n              color='#6A727F'\n              size='30'\n              onClick={() => {\n                onSelectedRow && onSelectedRow(selectedRow, 'Rejected');\n              }}\n            >\n              {Icons.getIconTag(Icons.Iconai.AiFillCloseCircle)}\n            </Icons.IconContext>\n          </Tooltip>\n        </div>\n      )}\n      <input\n        type='number'\n        min='0'\n        placeholder='No'\n        onChange={(e: any) => {\n          if (e.target.value) {\n            onSizePerPageChange(e.target.value);\n          }\n        }}\n        className='mr-2 ml-2 leading-4 p-2 w-14 focus:outline-none focus:ring block  shadow-sm sm:text-base border border-gray-300 rounded-md'\n      />\n      {options.map(option => (\n        <button\n          key={option.text}\n          type='button'\n          onClick={() => onSizePerPageChange(option.page)}\n          className={`btn  ${\n            currSizePerPage === `${option.page}` ? 'bg-primary' : 'bg-grey'\n          }`}\n        >\n          {option.text}\n        </button>\n      ))}\n    </div>\n  );\n\n  const options = {\n    cutome: true,\n    totalSize: totalSize,\n    paginationSize: 5,\n    pageStartIndex: 0,\n    firstPageText: '<<',\n    prePageText: '<',\n    nextPageText: '>',\n    lastPageText: '>>',\n    disablePageTitle: true,\n    paginationTotalRenderer: customTotal,\n    hideSizePerPage: true,\n    showTotal: false,\n    alwaysShowAllBtns: true,\n    sizePerPageList: [\n      {\n        text: '10',\n        value: 10,\n      },\n      {\n        text: '20',\n        value: 20,\n      },\n      {\n        text: '30',\n        value: 30,\n      },\n      {\n        text: '40',\n        value: 40,\n      },\n      {\n        text: '50',\n        value: 50,\n      },\n    ],\n    hidePageListOnlyOnePage: true,\n    sizePerPageRenderer: sizePerPageRenderer,\n  };\n\n  let searchProps: any = {\n    placeholder: searchPlaceholder,\n  };\n\n  const handleOnSelect = (rows: any, isSelect) => {\n    if (isSelect) {\n      if (selectedRow) {\n        let itemSelected: any[] = selectedRow;\n        itemSelected.push(rows);\n        setSelectedRow(itemSelected);\n      } else {\n        setSelectedRow([rows]);\n      }\n    }\n  };\n\n  const handleOnSelectAll = (isSelect, rows) => {\n    if (isSelect) {\n      setSelectedRow(rows);\n    }\n  };\n\n  const handleTableChange = (\n    type,\n    {\n      data,\n      cellEdit,\n      page,\n      sizePerPage,\n      filters,\n      sortField,\n      sortOrder,\n      searchText,\n    },\n  ) => {\n    if (type === 'cellEdit' && isEditModify) {\n      onUpdateItem &&\n        onUpdateItem(cellEdit.newValue, cellEdit.dataField, cellEdit.rowId);\n    }\n    if (type === 'pagination' && _.isEmpty(filters)) {\n      // if (sizePerPage > totalSize) return alert(\"You have not more records.\")\n      // if (page * sizePerPage > totalSize) return alert(\"You have not more records.\")\n      onPageSizeChange && onPageSizeChange(page, sizePerPage);\n    }\n    if (type === 'filter' || (type === 'pagination' && !_.isEmpty(filters))) {\n      if (type === 'pagination') {\n        if (sizePerPage > totalSize) return alert('You have not more records.');\n        if (page * sizePerPage > totalSize)\n          return alert('You have not more records.');\n      }\n      let filter: any = {};\n      for (const [key, value] of Object.entries(filters)) {\n        const values: any = value;\n        const object = {[key]: values.filterVal};\n        filter = Object.assign(filter, object);\n      }\n      if (onFilter)\n        debounce(() => {\n          onFilter(\n            type,\n            filter,\n            type === 'filter' && page === 1 ? 0 : page,\n            sizePerPage,\n          );\n        });\n    }\n    if (type === 'search') {\n      debounce(() => {\n        onFilter && onFilter(type, {srText: searchText}, page, sizePerPage);\n      });\n    }\n    if (type === 'sort') {\n      let result;\n      if (sortOrder === 'asc') {\n        result = data.sort((a, b) => {\n          if (a[sortField] > b[sortField]) {\n            return 1;\n          } else if (b[sortField] > a[sortField]) {\n            return -1;\n          }\n          return 0;\n        });\n      } else {\n        result = data.sort((a, b) => {\n          if (a[sortField] > b[sortField]) {\n            return -1;\n          } else if (b[sortField] > a[sortField]) {\n            return 1;\n          }\n          return 0;\n        });\n      }\n    }\n  };\n\n  const CustomToggleList = ({columns, onColumnToggle, toggles}) => (\n    <div className='btn-group btn-group-toggle' data-toggle='buttons'>\n      {columns\n        .map(column => ({\n          ...column,\n          toggle: toggles[column.dataField],\n        }))\n        .map((column, index) => {\n          if (index > 0) {\n            return (\n              <button\n                type='button'\n                key={column.dataField}\n                className={` btn btn-primary  btn-sm whitespace-nowrap ${\n                  column.toggle ? 'active' : ''\n                }`}\n                data-toggle='button'\n                aria-pressed={column.toggle ? 'true' : 'false'}\n                onClick={() => onColumnToggle(column.dataField)}\n              >\n                {column.text}\n              </button>\n            );\n          }\n        })}\n    </div>\n  );\n\n  const rowEvents = {\n    onClick: (e, row, rowIndex) => {\n      onClickRow && onClickRow(row, rowIndex);\n    },\n  };\n\n  const rowStyle = (row, rowIndex) => {\n    switch (row?.colorScheme?.envRangeColor) {\n      case 'BOTH':\n        return {\n          backgroundColor: row?.colorScheme?.cellColor,\n          color: row?.colorScheme?.fontColor,\n        };\n        break;\n      case 'BACKGROUND':\n        return {\n          backgroundColor: row?.colorScheme?.cellColor,\n        };\n        break;\n      case 'FONT':\n        return {\n          color: row?.colorScheme?.fontColor,\n        };\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <PaginationProvider\n      pagination={paginationFactory(\n        totalSize !== 0 ? options : {page, sizePerPage, totalSize},\n      )}\n      keyField={id}\n      columns={columns}\n      data={data}\n    >\n      {({paginationProps, paginationTableProps}) => (\n        <ToolkitProvider\n          keyField={id}\n          bootstrap4\n          data={data}\n          columns={columns}\n          search\n          exportCSV={{\n            fileName: `${fileName}_${dayjs(new Date()).format(\n              'YYYY-MM-DD HH:mm',\n            )}.csv`,\n            noAutoBOM: false,\n            blobType: 'text/csv;charset=ansi',\n            exportAll: false,\n            onlyExportFiltered: true,\n          }}\n          columnToggle\n        >\n          {props => (\n            <div>\n              <div className='flex items-center flex-wrap'>\n                <SearchBar\n                  {...searchProps}\n                  {...props.searchProps}\n                  onChange={value => {\n                    console.log({value});\n                  }}\n                />\n                <ClearSearchButton\n                  className={`inline-flex ml-4 bg-gray-500 items-center small outline shadow-sm  font-medium  disabled:opacity-50 disabled:cursor-not-allowed text-center h-9 text-white`}\n                  {...props.searchProps}\n                />\n                <button\n                  className={`ml-2 px-2 focus:outline-none bg-gray-500 items-center  outline shadow-sm  font-medium  text-center rounded-md h-9 text-white`}\n                  onClick={clearAllFilter}\n                >\n                  Clear all filters\n                </button>\n                <ExportCSVButton\n                  className={`inline-flex m-2.5 bg-gray-500 items-center  small outline shadow-sm  font-medium  disabled:opacity-50 disabled:cursor-not-allowed text-center h-9 text-white`}\n                  {...props.csvProps}\n                >\n                  Export CSV!!\n                </ExportCSVButton>\n                {isFilterOpen ? (\n                  <Buttons.Button\n                    size='medium'\n                    type='outline'\n                    onClick={() => {\n                      setIsFilterOpen(!isFilterOpen);\n                    }}\n                  >\n                    <Icons.IconFa.FaChevronUp />\n                  </Buttons.Button>\n                ) : (\n                  <Buttons.Button\n                    size='medium'\n                    type='outline'\n                    onClick={() => {\n                      setIsFilterOpen(!isFilterOpen);\n                    }}\n                  >\n                    <Icons.IconFa.FaChevronDown />\n                  </Buttons.Button>\n                )}\n              </div>\n              {isFilterOpen && (\n                <div className={'mb-2 overflow-auto h-10'}>\n                  <CustomToggleList\n                    contextual='primary'\n                    className='list-custom-class'\n                    btnClassName='list-btn-custom-class'\n                    {...props.columnToggleProps}\n                  />\n                </div>\n              )}\n              <div className='scrollTable'>\n                <BootstrapTable\n                  remote\n                  {...props.baseProps}\n                  noDataIndication='Table is Empty'\n                  hover\n                  {...paginationTableProps}\n                  filter={filterFactory()}\n                  headerClasses='bg-gray-500 text-white whitespace-nowrap'\n                  selectRow={\n                    isSelectRow\n                      ? {\n                          mode: 'checkbox',\n                          onSelect: handleOnSelect,\n                          onSelectAll: handleOnSelectAll,\n                        }\n                      : undefined\n                  }\n                  cellEdit={\n                    isEditModify\n                      ? cellEditFactory({\n                          mode: 'dbclick',\n                          blurToSave: true,\n                        })\n                      : undefined\n                  }\n                  rowEvents={rowEvents}\n                  rowStyle={rowStyle}\n                  onTableChange={handleTableChange}\n                />\n              </div>\n              <div className='flex items-center gap-2 mt-2'>\n                <SizePerPageDropdownStandalone\n                  {...Object.assign(\n                    {},\n                    {...paginationProps, hideSizePerPage: false},\n                  )}\n                />\n                <PaginationListStandalone {...paginationProps} />\n              </div>\n              <div className='flex items-center gap-2 mt-2'>\n                <PaginationTotalStandalone {...paginationProps} />\n              </div>\n            </div>\n          )}\n        </ToolkitProvider>\n      )}\n    </PaginationProvider>\n  );\n};\n","import React from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport _ from 'lodash';\nimport ToolkitProvider from 'react-bootstrap-table2-toolkit/dist/react-bootstrap-table2-toolkit';\nimport paginationFactory, {\n  PaginationProvider,\n} from 'react-bootstrap-table2-paginator';\nimport filterFactory from 'react-bootstrap-table2-filter';\nimport '@/library/components/organisms/style.css';\nimport {debounce} from '@/core-utils';\n\ninterface RefRangesProps {\n  id: string;\n  data: any;\n  totalSize?: number;\n  searchPlaceholder?: string;\n  page?: number;\n  sizePerPage?: number;\n  columns: any;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (value: any, dataField: string, id: string) => void;\n  onPageSizeChange?: (page: number, limit: number) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n  clearAllFilter?: () => void;\n}\n\nexport const RefRanges = ({\n  id,\n  data = [],\n  totalSize = 10,\n  searchPlaceholder = 'Search...',\n  page = 0,\n  sizePerPage = 10,\n  columns,\n  onSelectedRow,\n  onUpdateItem,\n  onPageSizeChange,\n  onFilter,\n  clearAllFilter,\n}: RefRangesProps) => {\n  const customTotal = (from, to, size) => {\n    return (\n      <>\n        <div className='clearfix' />\n        <span>\n          Showing {from} to {to} of {size} Results\n        </span>\n      </>\n    );\n  };\n\n  const sizePerPageRenderer = ({\n    options,\n    currSizePerPage,\n    onSizePerPageChange,\n  }) => (\n    <div className='btn-group items-center' role='group'>\n      <input\n        type='number'\n        min='0'\n        placeholder='No'\n        onChange={e => {\n          if (e.target.value) {\n            onSizePerPageChange(e.target.value);\n          }\n        }}\n        className='mr-2 ml-2 leading-4 p-2 w-14 focus:outline-none focus:ring block  shadow-sm sm:text-base border border-gray-300 rounded-md'\n      />\n      {options.map(option => (\n        <button\n          key={option.text}\n          type='button'\n          onClick={() => onSizePerPageChange(option.page)}\n          className={`btn ${\n            currSizePerPage === `${option.page}`\n              ? 'btn-primary'\n              : 'btn-secondary'\n          }`}\n        >\n          {option.text}\n        </button>\n      ))}\n    </div>\n  );\n\n  const options = {\n    cutome: true,\n    totalSize: totalSize,\n    paginationSize: 5,\n    pageStartIndex: 0,\n    firstPageText: '<<',\n    prePageText: '<',\n    nextPageText: '>',\n    lastPageText: '>>',\n    disablePageTitle: true,\n    paginationTotalRenderer: customTotal,\n    hideSizePerPage: true,\n    showTotal: false,\n    alwaysShowAllBtns: true,\n    sizePerPageList: [\n      {\n        text: '10',\n        value: 10,\n      },\n      {\n        text: '20',\n        value: 20,\n      },\n      {\n        text: '30',\n        value: 30,\n      },\n      {\n        text: '40',\n        value: 40,\n      },\n      {\n        text: '50',\n        value: 50,\n      },\n    ],\n    hidePageListOnlyOnePage: true,\n    sizePerPageRenderer: sizePerPageRenderer,\n  };\n\n  const handleTableChange = (\n    type,\n    {\n      data,\n      cellEdit,\n      page,\n      sizePerPage,\n      filters,\n      sortField,\n      sortOrder,\n      searchText,\n    },\n  ) => {\n    if (type === 'cellEdit') {\n      onUpdateItem &&\n        onUpdateItem(cellEdit.newValue, cellEdit.dataField, cellEdit.rowId);\n    }\n    if (type === 'pagination' && _.isEmpty(filters)) {\n      // if (sizePerPage > totalSize) return alert(\"You have not more records.\")\n      // if (page * sizePerPage > totalSize) return alert(\"You have not more records.\")\n      onPageSizeChange && onPageSizeChange(page, sizePerPage);\n    }\n    if (type === 'filter' || (type === 'pagination' && !_.isEmpty(filters))) {\n      if (type === 'pagination') {\n        if (sizePerPage > totalSize) return alert('You have not more records.');\n        if (page * sizePerPage > totalSize)\n          return alert('You have not more records.');\n      }\n      let filter: any = {};\n      for (const [key, value] of Object.entries(filters)) {\n        const values: any = value;\n        const object = {[key]: values.filterVal};\n        filter = Object.assign(filter, object);\n      }\n      if (onFilter) {\n        debounce(() => {\n          onFilter(\n            type,\n            filter,\n            type === 'filter' && page === 1 ? 0 : page,\n            sizePerPage,\n          );\n        });\n      }\n    }\n    if (type === 'search') {\n      debounce(() => {\n        onFilter && onFilter(type, {srText: searchText}, page, sizePerPage);\n      });\n    }\n    if (type === 'sort') {\n      let result;\n      if (sortOrder === 'asc') {\n        result = data.sort((a, b) => {\n          if (a[sortField] > b[sortField]) {\n            return 1;\n          } else if (b[sortField] > a[sortField]) {\n            return -1;\n          }\n          return 0;\n        });\n      } else {\n        result = data.sort((a, b) => {\n          if (a[sortField] > b[sortField]) {\n            return -1;\n          } else if (b[sortField] > a[sortField]) {\n            return 1;\n          }\n          return 0;\n        });\n      }\n    }\n  };\n\n  const rowStyle = (row, rowIndex) => {\n    switch (row?.colorScheme?.envRangeColor) {\n      case 'BOTH':\n        return {\n          backgroundColor: row?.colorScheme?.cellColor,\n          color: row?.colorScheme?.fontColor,\n        };\n        break;\n      case 'BACKGROUND':\n        return {\n          backgroundColor: row?.colorScheme?.cellColor,\n        };\n        break;\n      case 'FONT':\n        return {\n          color: row?.colorScheme?.fontColor,\n        };\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <PaginationProvider\n      pagination={paginationFactory(\n        totalSize !== 0 ? options : {page, sizePerPage, totalSize},\n      )}\n      keyField={id}\n      columns={columns}\n      data={data}\n    >\n      {({paginationProps, paginationTableProps}) => (\n        <ToolkitProvider\n          keyField={id}\n          bootstrap4\n          data={data}\n          columns={columns}\n          search\n          columnToggle\n        >\n          {props => (\n            <div style={{maxWidth: 200}}>\n              <BootstrapTable\n                remote\n                {...props.baseProps}\n                noDataIndication='Table is Empty'\n                hover\n                {...paginationTableProps}\n                filter={filterFactory()}\n                headerClasses='bg-gray-500 text-white whitespace-nowrap'\n                onTableChange={handleTableChange}\n                rowStyle={rowStyle}\n              />\n            </div>\n          )}\n        </ToolkitProvider>\n      )}\n    </PaginationProvider>\n  );\n};\n","/* eslint-disable */\nimport React, {useState} from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport _ from 'lodash';\nimport ToolkitProvider, {\n  Search,\n  CSVExport,\n} from 'react-bootstrap-table2-toolkit/dist/react-bootstrap-table2-toolkit';\nimport cellEditFactory from 'react-bootstrap-table2-editor';\nimport paginationFactory, {\n  PaginationProvider,\n  PaginationListStandalone,\n  SizePerPageDropdownStandalone,\n  PaginationTotalStandalone,\n} from 'react-bootstrap-table2-paginator';\nimport filterFactory from 'react-bootstrap-table2-filter';\nimport dayjs from 'dayjs';\nimport '@/library/components/organisms/style.css';\n\nimport {Buttons, Icons} from '@/library/components';\n\nconst {SearchBar, ClearSearchButton} = Search;\nconst {ExportCSVButton} = CSVExport;\n\ninterface TableBootstrapProps {\n  id: string;\n  data: any;\n  totalSize?: number;\n  searchPlaceholder?: string;\n  page?: number;\n  sizePerPage?: number;\n  columns: any;\n  fileName: string;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  isSelectRow?: boolean;\n  selectedItem?: any;\n  onDelete?: (selectedItem: any) => void;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (value: any, dataField: string, id: string) => void;\n  onPageSizeChange?: (page: number, limit: number) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n  clearAllFilter?: () => void;\n  onClickRow?: (item: any, index: number) => void;\n}\nexport const TableBootstrap = ({\n  id,\n  data,\n  totalSize = 10,\n  searchPlaceholder = 'Search...',\n  page = 0,\n  sizePerPage = 10,\n  columns,\n  fileName,\n  isEditModify,\n  isSelectRow,\n  selectedItem,\n  onSelectedRow,\n  onUpdateItem,\n  onPageSizeChange,\n  onFilter,\n  clearAllFilter,\n  onClickRow,\n}: TableBootstrapProps) => {\n  const [selectedRow, setSelectedRow] = useState<any[]>();\n  const [isFilterOpen, setIsFilterOpen] = useState<boolean>(false);\n\n  const customTotal = (from, to, size) => {\n    return (\n      <>\n        <div className='clearfix' />\n        <span>\n          Showing {from} to {to} of {size} Results\n        </span>\n      </>\n    );\n  };\n\n  const sizePerPageRenderer = ({\n    options,\n    currSizePerPage,\n    onSizePerPageChange,\n  }) => (\n    <div className='btn-group items-center' role='group'>\n      <input\n        type='number'\n        min='0'\n        placeholder='No'\n        onChange={(e: any) => {\n          if (e.target.value) {\n            onSizePerPageChange(e.target.value);\n          }\n        }}\n        className='mr-2 ml-2 leading-4 p-2 w-14 focus:outline-none focus:ring block  shadow-sm sm:text-base border border-gray-300 rounded-md'\n      />\n      {options.map(option => (\n        <button\n          key={option.text}\n          type='button'\n          onClick={() => onSizePerPageChange(option.page)}\n          className={`btn  ${\n            currSizePerPage === `${option.page}` ? 'bg-primary' : 'bg-grey'\n          }`}\n        >\n          {option.text}\n        </button>\n      ))}\n    </div>\n  );\n  const options = {\n    cutome: true,\n    totalSize: totalSize,\n    paginationSize: 5,\n    pageStartIndex: 0,\n    firstPageText: '<<',\n    prePageText: '<',\n    nextPageText: '>',\n    lastPageText: '>>',\n    disablePageTitle: true,\n    paginationTotalRenderer: customTotal,\n    hideSizePerPage: true,\n    showTotal: false,\n    alwaysShowAllBtns: true,\n    sizePerPageList: [\n      {\n        text: '10',\n        value: 10,\n      },\n      {\n        text: '20',\n        value: 20,\n      },\n      {\n        text: '30',\n        value: 30,\n      },\n      {\n        text: '40',\n        value: 40,\n      },\n      {\n        text: '50',\n        value: 50,\n      },\n    ],\n    hidePageListOnlyOnePage: true,\n    sizePerPageRenderer: sizePerPageRenderer,\n  };\n  let searchProps: any = {\n    placeholder: searchPlaceholder,\n  };\n  const handleOnSelect = (rows: any, isSelect) => {\n    if (isSelect) {\n      if (selectedRow) {\n        let itemSelected: any[] = selectedRow;\n        itemSelected.push(rows);\n        setSelectedRow(itemSelected);\n      } else {\n        setSelectedRow([rows]);\n      }\n    }\n  };\n\n  const handleOnSelectAll = (isSelect, rows) => {\n    if (isSelect) {\n      setSelectedRow(rows);\n    }\n  };\n\n  const handleTableChange = (\n    type,\n    {\n      data,\n      cellEdit,\n      page,\n      sizePerPage,\n      filters,\n      sortField,\n      sortOrder,\n      searchText,\n    },\n  ) => {\n    // console.log({type});\n    if (type === 'cellEdit' && isEditModify) {\n      onUpdateItem &&\n        onUpdateItem(cellEdit.newValue, cellEdit.dataField, cellEdit.rowId);\n    }\n    if (type === 'pagination' && _.isEmpty(filters)) {\n      // if (sizePerPage > totalSize) return alert(\"You have not more records.\")\n      // if (page * sizePerPage > totalSize) return alert(\"You have not more records.\")\n      onPageSizeChange && onPageSizeChange(page, sizePerPage);\n    }\n    if (type === 'filter' || (type === 'pagination' && !_.isEmpty(filters))) {\n      if (type === 'pagination') {\n        if (sizePerPage > totalSize) return alert('You have not more records.');\n        if (page * sizePerPage > totalSize)\n          return alert('You have not more records.');\n      }\n      let filter: any = {};\n      for (const [key, value] of Object.entries(filters)) {\n        const values: any = value;\n        const object = {[key]: values.filterVal};\n        filter = Object.assign(filter, object);\n      }\n      onFilter &&\n        onFilter(\n          type,\n          filter,\n          type === 'filter' && page === 1 ? 0 : page,\n          sizePerPage,\n        );\n    }\n    if (type === 'search') {\n      setTimeout(() => {\n        onFilter && onFilter(type, {srText: searchText}, page, sizePerPage);\n      }, 2000);\n    }\n    if (type === 'sort') {\n      let result;\n      if (sortOrder === 'asc') {\n        result = data.sort((a, b) => {\n          if (a[sortField] > b[sortField]) {\n            return 1;\n          } else if (b[sortField] > a[sortField]) {\n            return -1;\n          }\n          return 0;\n        });\n      } else {\n        result = data.sort((a, b) => {\n          if (a[sortField] > b[sortField]) {\n            return -1;\n          } else if (b[sortField] > a[sortField]) {\n            return 1;\n          }\n          return 0;\n        });\n      }\n    }\n  };\n\n  const CustomToggleList = ({columns, onColumnToggle, toggles}) => (\n    <div className='btn-group btn-group-toggle' data-toggle='buttons'>\n      {columns\n        .map(column => ({\n          ...column,\n          toggle: toggles[column.dataField],\n        }))\n        .map((column, index) => {\n          if (index > 0) {\n            return (\n              <button\n                type='button'\n                key={column.dataField}\n                className={` btn btn-primary  btn-sm whitespace-nowrap ${\n                  column.toggle ? 'active' : ''\n                }`}\n                data-toggle='button'\n                aria-pressed={column.toggle ? 'true' : 'false'}\n                onClick={() => onColumnToggle(column.dataField)}\n              >\n                {column.text}\n              </button>\n            );\n          }\n        })}\n    </div>\n  );\n\n  const rowEvents = {\n    onClick: (e, row, rowIndex) => {\n      onClickRow && onClickRow(row, rowIndex);\n    },\n  };\n\n  const rowStyle = (row, rowIndex) => {\n    if (row._id == selectedItem?._id) {\n      return {backgroundColor: '#a9a9a9'};\n    }\n  };\n\n  return (\n    <PaginationProvider\n      pagination={paginationFactory(\n        totalSize !== 0 ? options : {page, sizePerPage, totalSize},\n      )}\n      keyField={id}\n      columns={columns}\n      data={data}\n    >\n      {({paginationProps, paginationTableProps}) => (\n        <ToolkitProvider\n          keyField={id}\n          bootstrap4\n          data={data}\n          columns={columns}\n          search\n          exportCSV={{\n            fileName: `${fileName}_${dayjs(new Date()).format(\n              'YYYY-MM-DD HH:mm',\n            )}.csv`,\n            noAutoBOM: false,\n            blobType: 'text/csv;charset=ansi',\n            exportAll: false,\n            onlyExportFiltered: true,\n          }}\n          columnToggle\n        >\n          {props => (\n            <div>\n              <div className='flex items-center flex-wrap'>\n                <SearchBar\n                  {...searchProps}\n                  {...props.searchProps}\n                  onChange={value => {\n                    console.log({value});\n                  }}\n                />\n                <ClearSearchButton\n                  className={`inline-flex ml-4 bg-gray-500 items-center small outline shadow-sm  font-medium  disabled:opacity-50 disabled:cursor-not-allowed text-center h-9 text-white`}\n                  {...props.searchProps}\n                />\n                <button\n                  className={`ml-2 px-2 focus:outline-none bg-gray-500 items-center  outline shadow-sm  font-medium  text-center rounded-md h-9 text-white`}\n                  onClick={clearAllFilter}\n                >\n                  Clear all filters\n                </button>\n                <ExportCSVButton\n                  className={`inline-flex m-2.5 bg-gray-500 items-center  small outline shadow-sm  font-medium  disabled:opacity-50 disabled:cursor-not-allowed text-center h-9 text-white`}\n                  {...props.csvProps}\n                >\n                  Export CSV!!\n                </ExportCSVButton>\n                {isFilterOpen ? (\n                  <Buttons.Button\n                    size='medium'\n                    type='outline'\n                    onClick={() => {\n                      setIsFilterOpen(!isFilterOpen);\n                    }}\n                  >\n                    <Icons.IconFa.FaChevronUp />\n                  </Buttons.Button>\n                ) : (\n                  <Buttons.Button\n                    size='medium'\n                    type='outline'\n                    onClick={() => {\n                      setIsFilterOpen(!isFilterOpen);\n                    }}\n                  >\n                    <Icons.IconFa.FaChevronDown />\n                  </Buttons.Button>\n                )}\n              </div>\n              {isFilterOpen && (\n                <div className={'mb-2 overflow-auto h-10'}>\n                  <CustomToggleList\n                    contextual='primary'\n                    className='list-custom-class'\n                    btnClassName='list-btn-custom-class'\n                    {...props.columnToggleProps}\n                  />\n                </div>\n              )}\n              <div className='scrollTable'>\n                <BootstrapTable\n                  remote\n                  {...props.baseProps}\n                  noDataIndication='Table is Empty'\n                  hover\n                  {...paginationTableProps}\n                  filter={filterFactory()}\n                  headerClasses='bg-gray-500 text-white whitespace-nowrap'\n                  onTableChange={handleTableChange}\n                  rowEvents={rowEvents}\n                  rowStyle={rowStyle}\n                />\n              </div>\n            </div>\n          )}\n        </ToolkitProvider>\n      )}\n    </PaginationProvider>\n  );\n};\n","import React, {useState} from 'react';\nimport {observer} from 'mobx-react';\n\n\nimport {Confirm} from '@/library/models';\nimport dayjs from 'dayjs';\n\nimport {TableBootstrap} from './table-bootstrap.components';\n\ninterface PendingPanelApprovalListProps {\n  data: any;\n  totalSize: number;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  onUpdate?: (selectedItem: Confirm) => void;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (value: any, dataField: string, id: string) => void;\n  onPageSizeChange?: (page: number, totalSize: number) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n  onClickRow?: (item: any, index: number) => void;\n  onReport?: (item: any) => void;\n}\n\nexport const PendingPanelApprovalList = observer(\n  (props: PendingPanelApprovalListProps) => {\n    const [selectedItem, setSelectedItem] = useState<any>({});\n    return (\n      <>\n        <div style={{position: 'relative'}}>\n          <TableBootstrap\n            id='_id'\n            data={props.data}\n            totalSize={props.totalSize}\n            selectedItem={selectedItem}\n            columns={[\n              {\n                dataField: '_id',\n                text: 'Id',\n                hidden: true,\n                csvExport: false,\n              },\n              {\n                dataField: 'labId',\n                text: 'Lab Id',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'sampleId',\n                text: 'Sample Id',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'sampleType',\n                text: 'Sample Type',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'containerId',\n                text: 'Container Id',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'panel',\n                text: 'Panel',\n                sort: true,\n                editable: false,\n                headerClasses: 'textHeaderl',\n              },\n              {\n                dataField: 'dueDate',\n                text: 'Due Date',\n                sort: true,\n                editable: false,\n                formatter: (cell, row) => {\n                  return row?.dueDate\n                    ? dayjs(row.dueDate).format('YYYY-MM-DD')\n                    : '';\n                },\n              },\n              {\n                dataField: 'status',\n                text: 'Status',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'comments',\n                text: 'Comments',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'pLab',\n                text: 'PLab',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'department',\n                text: 'Department',\n                sort: true,\n                editable: false,\n              },\n            ]}\n            isEditModify={props.isEditModify}\n            isSelectRow={true}\n            fileName='Pending Panel Approval'\n            onSelectedRow={rows => {\n              props.onSelectedRow &&\n                props.onSelectedRow(rows.map((item: any) => item._id));\n            }}\n            onUpdateItem={(value: any, dataField: string, id: string) => {\n              props.onUpdateItem && props.onUpdateItem(value, dataField, id);\n            }}\n            onPageSizeChange={(page, size) => {\n              props.onPageSizeChange && props.onPageSizeChange(page, size);\n            }}\n            onFilter={(type, filter, page, size) => {\n              props.onFilter && props.onFilter(type, filter, page, size);\n            }}\n            clearAllFilter={() => {}}\n            onClickRow={(item, index) => {\n              setSelectedItem(item);\n              props.onClickRow && props.onClickRow(item, index);\n            }}\n          />\n        </div>\n      </>\n    );\n  },\n);\n","/* eslint-disable */\nimport React, {useState} from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport _ from 'lodash';\nimport ToolkitProvider, {\n  Search,\n  CSVExport,\n} from 'react-bootstrap-table2-toolkit/dist/react-bootstrap-table2-toolkit';\nimport cellEditFactory from 'react-bootstrap-table2-editor';\nimport paginationFactory, {\n  PaginationProvider,\n  PaginationListStandalone,\n  SizePerPageDropdownStandalone,\n  PaginationTotalStandalone,\n} from 'react-bootstrap-table2-paginator';\nimport filterFactory from 'react-bootstrap-table2-filter';\nimport dayjs from 'dayjs';\nimport '@/library/components/organisms/style.css';\n\nimport {Buttons, Icons} from '@/library/components';\n\nconst {SearchBar, ClearSearchButton} = Search;\nconst {ExportCSVButton} = CSVExport;\n\ninterface TableBootstrapProps {\n  id: string;\n  data: any;\n  totalSize?: number;\n  searchPlaceholder?: string;\n  page?: number;\n  sizePerPage?: number;\n  columns: any;\n  fileName: string;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  isSelectRow?: boolean;\n  selectedItem?: any;\n  onDelete?: (selectedItem: any) => void;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (value: any, dataField: string, id: string) => void;\n  onPageSizeChange?: (page: number, limit: number) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n  clearAllFilter?: () => void;\n  onClickRow?: (item: any, index: number) => void;\n}\nexport const TableBootstrap = ({\n  id,\n  data,\n  totalSize = 10,\n  searchPlaceholder = 'Search...',\n  page = 0,\n  sizePerPage = 10,\n  columns,\n  fileName,\n  isEditModify,\n  isSelectRow,\n  selectedItem,\n  onSelectedRow,\n  onUpdateItem,\n  onPageSizeChange,\n  onFilter,\n  clearAllFilter,\n  onClickRow,\n}: TableBootstrapProps) => {\n  const [selectedRow, setSelectedRow] = useState<any[]>();\n  const [isFilterOpen, setIsFilterOpen] = useState<boolean>(false);\n\n  const customTotal = (from, to, size) => {\n    return (\n      <>\n        <div className='clearfix' />\n        <span>\n          Showing {from} to {to} of {size} Results\n        </span>\n      </>\n    );\n  };\n\n  const sizePerPageRenderer = ({\n    options,\n    currSizePerPage,\n    onSizePerPageChange,\n  }) => (\n    <div className='btn-group items-center' role='group'>\n      <input\n        type='number'\n        min='0'\n        placeholder='No'\n        onChange={(e: any) => {\n          if (e.target.value) {\n            onSizePerPageChange(e.target.value);\n          }\n        }}\n        className='mr-2 ml-2 leading-4 p-2 w-14 focus:outline-none focus:ring block  shadow-sm sm:text-base border border-gray-300 rounded-md'\n      />\n      {options.map(option => (\n        <button\n          key={option.text}\n          type='button'\n          onClick={() => onSizePerPageChange(option.page)}\n          className={`btn  ${\n            currSizePerPage === `${option.page}` ? 'bg-primary' : 'bg-grey'\n          }`}\n        >\n          {option.text}\n        </button>\n      ))}\n    </div>\n  );\n  const options = {\n    cutome: true,\n    totalSize: totalSize,\n    paginationSize: 5,\n    pageStartIndex: 0,\n    firstPageText: '<<',\n    prePageText: '<',\n    nextPageText: '>',\n    lastPageText: '>>',\n    disablePageTitle: true,\n    paginationTotalRenderer: customTotal,\n    hideSizePerPage: true,\n    showTotal: false,\n    alwaysShowAllBtns: true,\n    sizePerPageList: [\n      {\n        text: '10',\n        value: 10,\n      },\n      {\n        text: '20',\n        value: 20,\n      },\n      {\n        text: '30',\n        value: 30,\n      },\n      {\n        text: '40',\n        value: 40,\n      },\n      {\n        text: '50',\n        value: 50,\n      },\n    ],\n    hidePageListOnlyOnePage: true,\n    sizePerPageRenderer: sizePerPageRenderer,\n  };\n  let searchProps: any = {\n    placeholder: searchPlaceholder,\n  };\n  const handleOnSelect = (rows: any, isSelect) => {\n    if (isSelect) {\n      if (selectedRow) {\n        let itemSelected: any[] = selectedRow;\n        itemSelected.push(rows);\n        setSelectedRow(itemSelected);\n      } else {\n        setSelectedRow([rows]);\n      }\n    }\n  };\n\n  const handleOnSelectAll = (isSelect, rows) => {\n    if (isSelect) {\n      setSelectedRow(rows);\n    }\n  };\n\n  const handleTableChange = (\n    type,\n    {\n      data,\n      cellEdit,\n      page,\n      sizePerPage,\n      filters,\n      sortField,\n      sortOrder,\n      searchText,\n    },\n  ) => {\n    // console.log({type});\n    if (type === 'cellEdit' && isEditModify) {\n      onUpdateItem &&\n        onUpdateItem(cellEdit.newValue, cellEdit.dataField, cellEdit.rowId);\n    }\n    if (type === 'pagination' && _.isEmpty(filters)) {\n      // if (sizePerPage > totalSize) return alert(\"You have not more records.\")\n      // if (page * sizePerPage > totalSize) return alert(\"You have not more records.\")\n      onPageSizeChange && onPageSizeChange(page, sizePerPage);\n    }\n    if (type === 'filter' || (type === 'pagination' && !_.isEmpty(filters))) {\n      if (type === 'pagination') {\n        if (sizePerPage > totalSize) return alert('You have not more records.');\n        if (page * sizePerPage > totalSize)\n          return alert('You have not more records.');\n      }\n      let filter: any = {};\n      for (const [key, value] of Object.entries(filters)) {\n        const values: any = value;\n        const object = {[key]: values.filterVal};\n        filter = Object.assign(filter, object);\n      }\n      onFilter &&\n        onFilter(\n          type,\n          filter,\n          type === 'filter' && page === 1 ? 0 : page,\n          sizePerPage,\n        );\n    }\n    if (type === 'search') {\n      setTimeout(() => {\n        onFilter && onFilter(type, {srText: searchText}, page, sizePerPage);\n      }, 2000);\n    }\n    if (type === 'sort') {\n      let result;\n      if (sortOrder === 'asc') {\n        result = data.sort((a, b) => {\n          if (a[sortField] > b[sortField]) {\n            return 1;\n          } else if (b[sortField] > a[sortField]) {\n            return -1;\n          }\n          return 0;\n        });\n      } else {\n        result = data.sort((a, b) => {\n          if (a[sortField] > b[sortField]) {\n            return -1;\n          } else if (b[sortField] > a[sortField]) {\n            return 1;\n          }\n          return 0;\n        });\n      }\n    }\n  };\n\n  const CustomToggleList = ({columns, onColumnToggle, toggles}) => (\n    <div className='btn-group btn-group-toggle' data-toggle='buttons'>\n      {columns\n        .map(column => ({\n          ...column,\n          toggle: toggles[column.dataField],\n        }))\n        .map((column, index) => {\n          if (index > 0) {\n            return (\n              <button\n                type='button'\n                key={column.dataField}\n                className={` btn btn-primary  btn-sm whitespace-nowrap ${\n                  column.toggle ? 'active' : ''\n                }`}\n                data-toggle='button'\n                aria-pressed={column.toggle ? 'true' : 'false'}\n                onClick={() => onColumnToggle(column.dataField)}\n              >\n                {column.text}\n              </button>\n            );\n          }\n        })}\n    </div>\n  );\n\n  const rowEvents = {\n    onClick: (e, row, rowIndex) => {\n      onClickRow && onClickRow(row, rowIndex);\n    },\n  };\n\n  const rowStyle = (row, rowIndex) => {\n    if (row._id == selectedItem?._id) {\n      return {backgroundColor: '#a9a9a9'};\n    }\n  };\n\n  return (\n    <PaginationProvider\n      pagination={paginationFactory(\n        totalSize !== 0 ? options : {page, sizePerPage, totalSize},\n      )}\n      keyField={id}\n      columns={columns}\n      data={data}\n    >\n      {({paginationProps, paginationTableProps}) => (\n        <ToolkitProvider\n          keyField={id}\n          bootstrap4\n          data={data}\n          columns={columns}\n          search\n          exportCSV={{\n            fileName: `${fileName}_${dayjs(new Date()).format(\n              'YYYY-MM-DD HH:mm',\n            )}.csv`,\n            noAutoBOM: false,\n            blobType: 'text/csv;charset=ansi',\n            exportAll: false,\n            onlyExportFiltered: true,\n          }}\n          columnToggle\n        >\n          {props => (\n            <div>\n              <div className='flex items-center flex-wrap'>\n                <SearchBar\n                  {...searchProps}\n                  {...props.searchProps}\n                  onChange={value => {\n                    console.log({value});\n                  }}\n                />\n                <ClearSearchButton\n                  className={`inline-flex ml-4 bg-gray-500 items-center small outline shadow-sm  font-medium  disabled:opacity-50 disabled:cursor-not-allowed text-center h-9 text-white`}\n                  {...props.searchProps}\n                />\n                <button\n                  className={`ml-2 px-2 focus:outline-none bg-gray-500 items-center  outline shadow-sm  font-medium  text-center rounded-md h-9 text-white`}\n                  onClick={clearAllFilter}\n                >\n                  Clear all filters\n                </button>\n                <ExportCSVButton\n                  className={`inline-flex m-2.5 bg-gray-500 items-center  small outline shadow-sm  font-medium  disabled:opacity-50 disabled:cursor-not-allowed text-center h-9 text-white`}\n                  {...props.csvProps}\n                >\n                  Export CSV!!\n                </ExportCSVButton>\n                {isFilterOpen ? (\n                  <Buttons.Button\n                    size='medium'\n                    type='outline'\n                    onClick={() => {\n                      setIsFilterOpen(!isFilterOpen);\n                    }}\n                  >\n                    <Icons.IconFa.FaChevronUp />\n                  </Buttons.Button>\n                ) : (\n                  <Buttons.Button\n                    size='medium'\n                    type='outline'\n                    onClick={() => {\n                      setIsFilterOpen(!isFilterOpen);\n                    }}\n                  >\n                    <Icons.IconFa.FaChevronDown />\n                  </Buttons.Button>\n                )}\n              </div>\n              {isFilterOpen && (\n                <div className={'mb-2 overflow-auto h-10'}>\n                  <CustomToggleList\n                    contextual='primary'\n                    className='list-custom-class'\n                    btnClassName='list-btn-custom-class'\n                    {...props.columnToggleProps}\n                  />\n                </div>\n              )}\n              <div className='scrollTable'>\n                <BootstrapTable\n                  remote\n                  {...props.baseProps}\n                  noDataIndication='Table is Empty'\n                  hover\n                  {...paginationTableProps}\n                  filter={filterFactory()}\n                  headerClasses='bg-gray-500 text-white whitespace-nowrap'\n                  onTableChange={handleTableChange}\n                  rowEvents={rowEvents}\n                  rowStyle={rowStyle}\n                />\n              </div>\n            </div>\n          )}\n        </ToolkitProvider>\n      )}\n    </PaginationProvider>\n  );\n};\n","import React, {useState} from 'react';\nimport {observer} from 'mobx-react';\nimport {\n  Form,\n} from '@/library/components';\nimport {Confirm} from '@/library/models';\nimport dayjs from 'dayjs';\n\nimport {TableBootstrap} from './table-bootstrap.components';\n\ninterface PatientDemographicsListProps {\n  data: any;\n  totalSize: number;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  onUpdate?: (selectedItem: Confirm) => void;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (value: any, dataField: string, id: string) => void;\n  onPageSizeChange?: (page: number, totalSize: number) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n  onClickRow?: (item: any, index: number) => void;\n  onReport?: (item: any) => void;\n}\n\nexport const PatientDemographicsList = observer(\n  (props: PatientDemographicsListProps) => {\n    const [selectedItem, setSelectedItem] = useState<any>({});\n    return (\n      <>\n        <div style={{position: 'relative'}}>\n          <TableBootstrap\n            id='_id'\n            data={props.data}\n            totalSize={props.totalSize}\n            selectedItem={selectedItem}\n            columns={[\n              {\n                dataField: '_id',\n                text: 'Id',\n                hidden: true,\n                csvExport: false,\n              },\n              {\n                dataField: 'pId',\n                text: 'Pid',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'name',\n                text: 'Name',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'age',\n                text: 'Age',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'sex',\n                text: 'Sex',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'dob',\n                text: 'DOB',\n                sort: true,\n                editable: false,\n                formatter: (cell, row) => {\n                  return row?.dob ? dayjs(row.dob).format('YYYY-MM-DD') : '';\n                },\n              },\n              {\n                dataField: 'patientMobileNo',\n                text: 'patientMobileNo',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'doctorId',\n                text: 'Doctor Id',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'doctorMobileNo',\n                text: 'Doctor Mobile No',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'registrationLocation',\n                text: 'Registration Location',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'contactNo',\n                text: 'Contact Number',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'history',\n                text: 'History',\n                sort: true,\n                csvFormatter: (col, row) =>\n                  `${row.history ? (row.history ? 'Yes' : 'No') : 'No'}`,\n                editable: false,\n                formatter: (cell, row) => {\n                  return (\n                    <>\n                      {' '}\n                      <Form.Toggle disabled={true} value={row.history} />\n                    </>\n                  );\n                },\n              },\n            ]}\n            isEditModify={props.isEditModify}\n            isSelectRow={true}\n            fileName='Pending Panel Approval'\n            onSelectedRow={rows => {\n              props.onSelectedRow &&\n                props.onSelectedRow(rows.map((item: any) => item._id));\n            }}\n            onUpdateItem={(value: any, dataField: string, id: string) => {\n              props.onUpdateItem && props.onUpdateItem(value, dataField, id);\n            }}\n            onPageSizeChange={(page, size) => {\n              props.onPageSizeChange && props.onPageSizeChange(page, size);\n            }}\n            onFilter={(type, filter, page, size) => {\n              props.onFilter && props.onFilter(type, filter, page, size);\n            }}\n            clearAllFilter={() => {}}\n            onClickRow={(item, index) => {\n              setSelectedItem(item);\n              props.onClickRow && props.onClickRow(item, index);\n            }}\n          />\n        </div>\n      </>\n    );\n  },\n);\n","import React, {useMemo, useState} from 'react';\nimport {observer} from 'mobx-react';\nimport {\n  Header,\n  PageHeading,\n  PageHeadingLabDetails,\n  Toast,\n} from '@/library/components';\nimport {useForm} from 'react-hook-form';\nimport {RouterFlow} from '@/flows';\nimport {\n  PendingPanelApprovalList,\n  ResultList,\n  PatientDemographicsList,\n} from '../components';\nimport '@/library/assets/css/accordion.css';\nimport {useStores} from '@/stores';\nimport 'react-accessible-accordion/dist/fancy-example.css';\n\nconst PanelApproval = observer(() => {\n  const {\n    loading,\n    panelApprovalStore,\n    transactionDetailsStore,\n    routerStore,\n    loginStore,\n    patientResultStore,\n    receiptStore,\n  } = useStores();\n\n  const {\n    control,\n    handleSubmit,\n    formState: {errors},\n    setValue,\n  } = useForm();\n  const [receiptPath, setReceiptPath] = useState<string>();\n  const [expandItem, setExpandItem] = useState<any>([]);\n  const [tableReaload, setTableReload] = useState<boolean>(false);\n\n  const updateRecords = payload => {\n    const {type, data} = payload;\n    switch (type) {\n      case 'update': {\n        panelApprovalStore.panelApprovalService\n          .update({\n            input: {\n              ...data.fields,\n              _id: data.id,\n            },\n          })\n          .then((res: any) => {\n            if (res.updatePanelApproval.success) {\n              Toast.success({\n                message: `😊 ${res.updatePanelApproval.message}`,\n              });\n              panelApprovalStore.panelApprovalService.listPanelApproval();\n            }\n          });\n        break;\n      }\n      case 'updateMany': {\n        panelApprovalStore.panelApprovalService\n          .update({\n            input: {\n              updateMany: {\n                fields: data.rows,\n                type: data.type,\n              },\n            },\n          })\n          .then((res: any) => {\n            if (res.updatePanelApproval.success) {\n              Toast.success({\n                message: `😊 ${res.updatePanelApproval.message}`,\n              });\n              panelApprovalStore.panelApprovalService.listPanelApproval();\n            }\n          });\n        break;\n      }\n    }\n  };\n\n  const updateResultRecords = (id, payload) => {\n    patientResultStore.patientResultService\n      .updateSingleFiled({\n        input: {\n          result: payload?.result,\n          resultType: payload?.resultType,\n          file: payload?.file,\n          labId: payload?.labId,\n          analyteCode: payload?.analyteCode,\n          analyteName: payload?.analyteName,\n          testStatus: payload?.testStatus,\n          rangeType: payload?.rangeType,\n          critical: payload?.critical,\n          abnFlag: payload?.abnFlag,\n          refRangesList: payload?.refRangesList,\n          testCode: payload?.testCode,\n          testName: payload?.testName,\n          panelCode: payload?.panelCode,\n          resultDate: payload?.resultDate,\n          reportPriority: payload?.reportPriority,\n          deliveryMode: payload?.deliveryMode,\n          units: payload?.units,\n          conclusion: payload?.conclusion,\n          loNor: payload?.loNor,\n          hiNor: payload?.hiNor,\n          resultStatus: payload?.resultStatus,\n          panelStatus: payload?.panelStatus,\n          enteredBy: loginStore.login?.userId,\n          _id: id,\n          __v: undefined,\n          flagUpdate: undefined,\n        },\n      })\n      .then(res => {\n        if (res.updatePatientResult.success) {\n          Toast.success({\n            message: `😊 ${res.updatePatientResult.message}`,\n            timer: 2000,\n          });\n          panelApprovalStore.panelApprovalService.listPanelApproval();\n        }\n      });\n    setTableReload(!tableReaload);\n  };\n\n  const resultTable = useMemo(\n    () => (\n      <ResultList\n        data={panelApprovalStore.panelApprovalList || []}\n        totalSize={panelApprovalStore.panelApprovalListCount}\n        selectedId={\n          expandItem?.map(item => {\n            return item._id;\n          })[0]\n        }\n        isDelete={RouterFlow.checkPermission(\n          routerStore.userPermission,\n          'Delete',\n        )}\n        isEditModify={RouterFlow.checkPermission(\n          routerStore.userPermission,\n          'Edit/Modify',\n        )}\n        onSelectedRow={(rows, type) => {\n          updateRecords({\n            show: true,\n            type: 'updateMany',\n            data: {rows, type},\n            title: 'Are you sure?',\n            body: 'Update items!',\n          });\n        }}\n        onUpdateFields={(fields: any, id: string) => {\n          updateRecords({\n            show: true,\n            type: 'update',\n            data: {fields, id},\n            title: 'Are you sure?',\n            body: 'Update items!',\n          });\n        }}\n        onUpdateResult={(fields: any, id: string) => {\n          updateResultRecords(id, fields);\n        }}\n        onExpand={items => {\n          if (typeof items == 'object') setExpandItem([items]);\n          else setExpandItem([]);\n        }}\n        onPageSizeChange={(page, limit) => {\n          panelApprovalStore.panelApprovalService.listPanelApproval(\n            page,\n            limit,\n          );\n        }}\n        onFilter={(type, filter, page, limit) => {\n          panelApprovalStore.panelApprovalService.filter({\n            input: {type, filter, page, limit},\n          });\n        }}\n        onRecheck={async (id: string, patientResultId: string) => {\n          await patientResultStore.patientResultService\n            .updateStatus({\n              input: {filter: {id, patientResultId, mode: 'reCheck'}},\n            })\n            .then(res => {\n              Toast.success({\n                message: `😊 ${res.updateStatusPatientResult.message}`,\n              });\n              panelApprovalStore.panelApprovalService?.listPanelApproval();\n            });\n        }}\n        onRetest={async (id: string, patientResultId: string) => {\n          await patientResultStore.patientResultService\n            .updateStatus({\n              input: {filter: {id, patientResultId, mode: 'reTest'}},\n            })\n            .then(res => {\n              Toast.success({\n                message: `😊 ${res.updateStatusPatientResult.message}`,\n              });\n              panelApprovalStore.panelApprovalService?.listPanelApproval();\n            });\n        }}\n      />\n    ),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [panelApprovalStore.panelApprovalList, tableReaload],\n  );\n\n  return (\n    <>\n      <Header>\n        <PageHeading title={routerStore.selectedComponents?.title || ''} />\n        <PageHeadingLabDetails store={loginStore} />\n      </Header>\n      <div className='p-3 rounded-lg shadow-xl overflow-auto'>\n        <span className='font-bold text-lg underline'>Result</span>\n        {resultTable}\n        <span className='text-red'>\n          Note: Report Priority= Daily single-single update.\n        </span>\n      </div>\n\n      {expandItem?.length > 0 && (\n        <>\n          <div className='p-1 rounded-lg shadow-xl overflow-auto mt-4'>\n            <span className='font-bold text-lg underline'>\n              Pending Panel Approval\n            </span>\n            <PendingPanelApprovalList\n              data={expandItem || []}\n              totalSize={expandItem.length}\n            />\n            <span className='font-bold text-lg underline'>\n              Patient Demographics\n            </span>\n            <PatientDemographicsList\n              data={expandItem || []}\n              totalSize={expandItem.length}\n            />\n          </div>\n        </>\n      )}\n    </>\n  );\n});\n\nexport default PanelApproval;\n"],"names":["labId","SearchBar","Search","ClearSearchButton","ExportCSVButton","CSVExport","TableBootstrap","_ref","id","data","_ref$totalSize","totalSize","_ref$searchPlaceholde","searchPlaceholder","_ref$page","page","_ref$sizePerPage","sizePerPage","columns","fileName","isEditModify","isSelectRow","onSelectedRow","selectedItem","onUpdateItem","onPageSizeChange","onFilter","clearAllFilter","onClickRow","_useState","useState","_useState2","_slicedToArray","selectedRow","setSelectedRow","_useState3","_useState4","isFilterOpen","setIsFilterOpen","options","cutome","paginationSize","pageStartIndex","firstPageText","prePageText","nextPageText","lastPageText","disablePageTitle","paginationTotalRenderer","from","to","size","_jsxs","_Fragment","children","_jsx","className","hideSizePerPage","showTotal","alwaysShowAllBtns","sizePerPageList","text","value","hidePageListOnlyOnePage","sizePerPageRenderer","_ref2","currSizePerPage","onSizePerPageChange","role","Tooltip","tooltipText","Icons","color","onClick","type","min","placeholder","onChange","e","target","map","option","concat","searchProps","handleOnSelect","rows","isSelect","itemSelected","push","handleOnSelectAll","handleTableChange","_ref3","cellEdit","filters","sortField","sortOrder","searchText","newValue","dataField","rowId","_","alert","filter","_i","_Object$entries","Object","entries","length","_Object$entries$_i","key","values","object","_defineProperty","filterVal","assign","debounce","srText","sort","a","b","CustomToggleList","_ref4","onColumnToggle","toggles","column","_objectSpread","toggle","index","rowEvents","row","rowIndex","rowStyle","_row$colorScheme","_row$colorScheme2","_row$colorScheme3","_row$colorScheme4","_row$colorScheme5","colorScheme","envRangeColor","backgroundColor","cellColor","fontColor","PaginationProvider","pagination","paginationFactory","keyField","_ref5","paginationProps","paginationTableProps","ToolkitProvider","bootstrap4","search","exportCSV","dayjs","Date","format","noAutoBOM","blobType","exportAll","onlyExportFiltered","columnToggle","props","console","log","csvProps","Buttons","contextual","btnClassName","columnToggleProps","BootstrapTable","remote","baseProps","noDataIndication","hover","filterFactory","headerClasses","selectRow","mode","onSelect","onSelectAll","undefined","cellEditFactory","blurToSave","onTableChange","SizePerPageDropdownStandalone","PaginationListStandalone","PaginationTotalStandalone","RefRanges","_ref$data","style","maxWidth","ResultList","selectId","setSelectId","localData","setLocalData","_useState5","_useState6","selectedRowId","setSelectedRowId","useEffect","selectedId","item","JSON","parse","stringify","position","hidden","csvExport","editable","headerStyle","fontSize","sortCaret","order","customFilter","getFilter","filterRenderer","NumberFilter","editorRenderer","editorProps","columnIndex","InputResult","_asyncToGenerator","_regeneratorRuntime","mark","_callee","result","wrap","_context","prev","next","onUpdateResult","resultStatus","getResultStatus","resultType","testStatus","getTestStatus","abnFlag","getAbnFlag","critical","getCretical","patientResultId","stop","_x","apply","arguments","formatter","cell","Form","disabled","_row$refRangesList","_row$refRangesList2","refRangesList","_id","onBlur","conclusion","onUpdateFields","defaultValue","deltaFlag","approvalDate","autoRelease","csvFormatter","col","cellContent","approvalStatus","onExpand","onRecheck","nameIcon","propsIcon","onRetest","classes","colIndex","_props$data","zIndex","setTimeout","PendingPanelApprovalList","observer","setSelectedItem","dueDate","PatientDemographicsList","dob","history","PanelApproval","_routerStore$selected","_useStores","useStores","panelApprovalStore","loading","routerStore","transactionDetailsStore","loginStore","patientResultStore","_useForm","receiptStore","useForm","control","handleSubmit","formState","errors","setValue","expandItem","setExpandItem","tableReaload","setTableReload","updateRecords","payload","panelApprovalService","update","input","fields","then","res","updatePanelApproval","success","Toast","message","listPanelApproval","updateMany","resultTable","useMemo","panelApprovalList","panelApprovalListCount","isDelete","RouterFlow","userPermission","show","title","body","_loginStore$login","patientResultService","updateSingleFiled","file","analyteCode","analyteName","rangeType","testCode","testName","panelCode","resultDate","reportPriority","deliveryMode","units","loNor","hiNor","panelStatus","enteredBy","login","userId","__v","flagUpdate","updatePatientResult","timer","updateResultRecords","items","limit","updateStatus","_panelApprovalStore$p","updateStatusPatientResult","_x2","_callee2","_context2","_panelApprovalStore$p2","_x3","_x4","Header","PageHeading","selectedComponents","PageHeadingLabDetails","store"],"sourceRoot":""}