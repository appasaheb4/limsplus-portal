{"version":3,"file":"static/js/1046.838eb54a.chunk.js","mappings":"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","sources":["features/report-builder/report-settings/components/molecules/page-layout/page-layout-list.components.tsx","features/report-builder/report-settings/components/molecules/page-branding/input/auto-complet-layout-code.component.tsx","features/report-builder/report-settings/components/molecules/page-branding/header.component.tsx","features/report-builder/report-settings/components/molecules/page-branding/sub-header.component.tsx","features/report-builder/report-settings/components/molecules/page-branding/footer.component.tsx","features/report-builder/report-settings/components/molecules/page-branding/page-number.component.tsx","features/report-builder/report-settings/components/molecules/page-branding/page-branding-list.components.tsx","features/report-builder/report-settings/components/molecules/report-body/general.component.tsx","features/report-builder/report-settings/components/molecules/report-body/panel.component.tsx","features/report-builder/report-settings/components/molecules/report-body/test.component.tsx","features/report-builder/report-settings/components/molecules/report-body/analyte.component.tsx","features/report-builder/report-settings/components/molecules/report-body/report-body-list.components.tsx","features/report-builder/report-settings/components/molecules/report-body/input/auto-complet-page-branding-code.component.tsx","features/report-builder/report-settings/components/molecules/template-patient-result/report-body.components.tsx","features/report-builder/report-settings/components/molecules/template-patient-result/end-of-page.components.tsx","features/report-builder/report-settings/components/molecules/template-patient-result/end-of-report.components.tsx","features/report-builder/report-settings/components/molecules/template-patient-result/template-patient-result-list.components.tsx","features/report-builder/report-settings/components/molecules/css-multiline-input/css-multiline-input.tsx","features/report-builder/report-settings/components/molecules/css-multiline-input/css-properties.ts","features/report-builder/report-settings/screens/page-branding.screen.tsx","features/report-builder/report-settings/screens/page-layout.screen.tsx","features/report-builder/report-settings/screens/template-patient-result.screen.tsx","features/report-builder/report-settings/screens/report-body.screen.tsx","features/report-builder/report-settings/screens/report-settings.screen.tsx","features/report-builder/report-template/components/molecules/pdf/page-branding/temp0001/temp0001-footer.component.tsx","features/report-builder/report-template/components/molecules/pdf/page-branding/temp0001/temp0001-header.component.tsx","features/report-builder/report-template/components/molecules/pdf/page-branding/temp0001/temp0001-sub-header.component.tsx","features/report-builder/report-template/components/molecules/pdf/page-branding/temp0001/temp0001.component.tsx","features/report-builder/report-template/components/molecules/pdf/page-layout/temp0001/temp0001.component.tsx"],"sourcesContent":["import React from 'react';\nimport { observer } from 'mobx-react';\nimport {\n  Form,\n  TableBootstrap,\n  Tooltip,\n  Icons,\n  Buttons,\n  Svg,\n} from '@/library/components';\nimport { Confirm } from '@/library/models';\n\ninterface PageLayoutProps {\n  data: any;\n  totalSize: number;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  onDelete?: (selectedItem: Confirm) => void;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (fields: any, id: string) => void;\n  onPageSizeChange?: (page: number, totalSize: number) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n  onPdfPreview?: (selectedItem: any) => void;\n  setIsInputView: any;\n  isInputView: boolean;\n}\n\nlet sectionSetting;\nlet version;\nlet environment;\nlet companyCode;\n\nexport const PageLayoutList = observer((props: PageLayoutProps) => {\n  return (\n    <>\n      <div style={{ position: 'relative' }}>\n        <TableBootstrap\n          id='_id'\n          data={props.data}\n          totalSize={props.totalSize}\n          isHideForm={props.isInputView}\n          setHideForm={props.setIsInputView}\n          columns={[\n            {\n              dataField: '_id',\n              text: 'Id',\n              hidden: true,\n              csvExport: false,\n            },\n            {\n              dataField: 'tempCode',\n              text: 'Layout Code',\n              headerClasses: 'textHeader',\n              sort: true,\n              editable: false,\n              editorStyle: { textTransform: 'uppercase' },\n              style: {\n                textTransform: 'uppercase',\n              },\n            },\n            {\n              dataField: 'tempName',\n              text: 'Layout Name',\n              headerClasses: 'textHeader',\n              sort: true,\n              editable: false,\n              editorStyle: { textTransform: 'uppercase' },\n              style: {\n                textTransform: 'uppercase',\n              },\n            },\n            {\n              dataField: 'isToolbar',\n              text: 'Show tool bar',\n              sort: true,\n              csvFormatter: (col, row) =>\n                `${row.isToolbar ? (row.isToolbar ? 'Yes' : 'No') : 'No'}`,\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <Form.Toggle\n                      value={row.isToolbar}\n                      onChange={isToolbar => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem({ isToolbar }, row._id);\n                      }}\n                    />\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'isBackgroundImage',\n              text: 'Background Image Visible',\n              sort: true,\n              csvFormatter: (col, row) =>\n                `${\n                  row.isBackgroundImage\n                    ? row.isBackgroundImage\n                      ? 'Yes'\n                      : 'No'\n                    : 'No'\n                }`,\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <Form.Toggle\n                      value={row.isBackgroundImage}\n                      onChange={isBackgroundImage => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem({ isBackgroundImage }, row._id);\n                      }}\n                    />\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'backgroundImage',\n              text: 'Background Image',\n              sort: true,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    {row?.backgroundImage && (\n                      <img\n                        src={row?.backgroundImage}\n                        alt='logo'\n                        className='object-fill h-35 w-40 rounded-md'\n                      />\n                    )}\n                  </>\n                );\n              },\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <div className='flex flex-col justify-center items-center gap-2'>\n                  <Form.InputFile\n                    placeholder='File'\n                    onChange={async e => {\n                      const backgroundImage = e.target.files[0];\n                      props.onUpdateItem &&\n                        props.onUpdateItem(\n                          {\n                            backgroundImage,\n                          },\n                          row._id,\n                        );\n                    }}\n                  />\n                  <Buttons.Button\n                    size='small'\n                    type='outline'\n                    icon={Svg.Remove}\n                    onClick={() => {\n                      props.onUpdateItem &&\n                        props.onUpdateItem(\n                          {\n                            backgroundImage: null,\n                          },\n                          row._id,\n                        );\n                    }}\n                  >\n                    Remove Image\n                  </Buttons.Button>\n                </div>\n              ),\n            },\n            {\n              dataField: 'pageSize',\n              text: 'Page Size',\n              sort: true,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <select\n                      value={row?.pageSize}\n                      className={`leading-4 p-2 focus:outline-none focus:ring block w-full shadow-sm sm:text-base border-2 border-gray-300\n                       rounded-md`}\n                      onChange={e => {\n                        const pageSize = e.target.value;\n                        props.onUpdateItem &&\n                          props.onUpdateItem({ pageSize }, row._id);\n                      }}\n                    >\n                      <option selected>Select</option>\n                      {[\n                        '4A0',\n                        '2A0',\n                        'A0',\n                        'A1',\n                        'A2',\n                        'A3',\n                        'A4',\n                        'A5',\n                        'A6',\n                        'A7',\n                        'A8',\n                        'A9',\n                        'A10',\n                        'B0',\n                        'B1',\n                        'B2',\n                        'B3',\n                        'B4',\n                        'B5',\n                        'B6',\n                        'B7',\n                        'B8',\n                        'B9',\n                        'B10',\n                        'C0',\n                        'C1',\n                        'C2',\n                        'C3',\n                        'C4',\n                        'C5',\n                        'C6',\n                        'C7',\n                        'C8',\n                        'C9',\n                        'C10',\n                        'RA0',\n                        'RA1',\n                        'RA2',\n                        'RA3',\n                        'RA4',\n                        'SRA0',\n                        'SRA1',\n                        'SRA2',\n                        'SRA3',\n                        'SRA4',\n                        'EXECUTIVE',\n                        'FOLIO',\n                        'LEGAL',\n                        'LETTER',\n                        'TABLOID',\n                        'ID1',\n                      ].map((item: any, index: number) => (\n                        <option key={index} value={item}>\n                          {item}\n                        </option>\n                      ))}\n                    </select>\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'mainBoxCSS',\n              text: 'Main Box Css',\n              headerClasses: 'textHeader4',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  <Form.MultilineInput\n                    label=''\n                    style={{ color: '#ffffff', backgroundColor: '#000000' }}\n                    placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n                    onBlur={mainBoxCSS => {\n                      props.onUpdateItem &&\n                        props.onUpdateItem({ mainBoxCSS }, row._id);\n                    }}\n                    defaultValue={row?.mainBoxCSS}\n                  />\n                </>\n              ),\n            },\n            {\n              text: 'Company Code',\n              dataField: 'companyCode',\n              sort: true,\n              editable: false,\n              csvFormatter: col => (col ? col : ''),\n              headerClasses: 'textHeader2',\n            },\n            {\n              text: 'Environment',\n              dataField: 'environment',\n              editable: false,\n              headerClasses: 'textHeader2',\n            },\n            {\n              dataField: 'operation',\n              text: 'Action',\n              editable: false,\n              csvExport: false,\n              // hidden: !props.isDelete,\n              formatter: (cellContent, row) => (\n                <>\n                  <div className='flex flex-row'>\n                    <Tooltip tooltipText='Preview' position='bottom'>\n                      <Icons.IconContext\n                        color='#fff'\n                        size='20'\n                        onClick={() =>\n                          props.onPdfPreview && props.onPdfPreview(row)\n                        }\n                      >\n                        {Icons.getIconTag(Icons.IconIm.ImFilePdf)}\n                      </Icons.IconContext>\n                    </Tooltip>\n                    <Tooltip tooltipText='Delete' position='bottom'>\n                      <Icons.IconContext\n                        color='#fff'\n                        size='20'\n                        onClick={() =>\n                          props.onDelete &&\n                          props.onDelete({\n                            type: 'delete',\n                            show: true,\n                            id: [row._id],\n                            title: 'Are you sure?',\n                            body: 'Do you want to delete this record?',\n                          })\n                        }\n                      >\n                        {Icons.getIconTag(Icons.IconBs.BsFillTrashFill)}\n                      </Icons.IconContext>\n                    </Tooltip>\n                  </div>\n                </>\n              ),\n              headerClasses: 'sticky right-0  bg-gray-500 text-white z-50',\n              classes: (cell, row, rowIndex, colIndex) => {\n                return 'sticky right-0 bg-gray-500';\n              },\n              style: (cell, row, rowIndex, colIndex) => {\n                return {\n                  zIndex: props.data?.length - rowIndex,\n                };\n              },\n            },\n          ]}\n          isEditModify={props.isEditModify}\n          isSelectRow={true}\n          fileName='Template_Settings'\n          onSelectedRow={rows => {\n            props.onSelectedRow &&\n              props.onSelectedRow(rows.map((item: any) => item._id));\n          }}\n          onPageSizeChange={(page, size) => {\n            props.onPageSizeChange && props.onPageSizeChange(page, size);\n          }}\n          onFilter={(type, filter, page, size) => {\n            props.onFilter && props.onFilter(type, filter, page, size);\n          }}\n          clearAllFilter={() => {\n            sectionSetting('');\n            version('');\n            environment('');\n          }}\n          dynamicStylingFields={['tempName', 'tempCode']}\n          hideExcelSheet={['_id', 'operation', 'backgroundImage']}\n        />\n      </div>\n    </>\n  );\n});\n","import React from 'react';\nimport {observer} from 'mobx-react';\nimport {AutoCompleteFilterSingleSelectMultiFieldsDisplay} from '@/library/components';\nimport {useStores} from '@/stores';\n\ninterface AutoCompleteLayoutCodeProps {\n  hasError?: boolean;\n  displayValue?: string;\n  onSelect: (item) => void;\n}\n\nexport const AutoCompleteLayoutCode = observer(\n  ({hasError = false, onSelect, displayValue}: AutoCompleteLayoutCodeProps) => {\n    const {loading, routerStore, reportSettingStore} = useStores();\n    return (\n      <>\n        <AutoCompleteFilterSingleSelectMultiFieldsDisplay\n          loader={loading}\n          placeholder='Layout Code'\n          hasError={hasError}\n          displayValue={displayValue}\n          data={{\n            list: reportSettingStore.pageLayoutList,\n            displayKey: ['tempCode', 'tempName'],\n          }}\n          onFilter={(value: string) => {\n            // reportSettingStore.updateReportSectionList(\n            //   reportSettingStore.reportSectionListCopy.filter(item =>\n            //     item.section\n            //       .toString()\n            //       .toLowerCase()\n            //       .includes(value.toLowerCase()),\n            //   ),\n            // );\n          }}\n          onSelect={item => {\n            onSelect(item);\n          }}\n        />\n      </>\n    );\n  },\n);\n","import React, { useEffect } from 'react';\nimport { observer } from 'mobx-react';\nimport { Form, Grid } from '@/library/components';\nimport { useForm, Controller } from 'react-hook-form';\nimport { useStores } from '@/stores';\nimport { resizeFile } from '@/library/utils';\nimport { CSSMultiline } from '../..';\n\ninterface HeaderComponentProps {\n  isClearReset: boolean;\n}\n\nexport const PageBrandingHeader = observer((props: HeaderComponentProps) => {\n  const { reportSettingStore } = useStores();\n  const {\n    control,\n    handleSubmit,\n    formState: { errors },\n    setValue,\n    setError,\n    clearErrors,\n    reset,\n  } = useForm();\n\n  useEffect(() => {\n    if (props.isClearReset) {\n      reset();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.isClearReset]);\n  return (\n    <>\n      <Grid cols={1}>\n        <Controller\n          control={control}\n          render={({ field: { onChange, value } }) => (\n            <Form.Input\n              label='Title'\n              placeholder='Tile'\n              hasError={!!errors.title}\n              value={value}\n              onChange={title => {\n                onChange(title);\n                reportSettingStore.updatePageBranding({\n                  ...reportSettingStore.pageBranding,\n                  header: {\n                    ...reportSettingStore.pageBranding?.header,\n                    title,\n                  },\n                });\n              }}\n            />\n          )}\n          name='title'\n          rules={{ required: false }}\n          defaultValue=''\n        />\n        <Controller\n          control={control}\n          render={({ field: { onChange, value } }) => (\n            <CSSMultiline\n              defaultValue={value}\n              onChange={titleCSS => {\n                onChange(titleCSS);\n                reportSettingStore.updatePageBranding({\n                  ...reportSettingStore.pageBranding,\n                  header: {\n                    ...reportSettingStore.pageBranding.header,\n                    titleCSS,\n                  },\n                });\n              }}\n            />\n          )}\n          name='titleCSS'\n          rules={{ required: false }}\n          defaultValue={reportSettingStore.pageBranding.header.titleCSS}\n        />\n        <Controller\n          control={control}\n          render={({ field: { onChange, value } }) => (\n            <Form.InputFile\n              label='Logo'\n              placeholder={'Select Logo'}\n              hasError={!!errors.headerLogo}\n              value={value ? value.fileName : ''}\n              onChange={async e => {\n                const logo = e.target.files[0];\n                onChange(logo);\n                reportSettingStore.updatePageBranding({\n                  ...reportSettingStore.pageBranding,\n                  header: {\n                    ...reportSettingStore.pageBranding?.header,\n                    logo,\n                  },\n                });\n              }}\n            />\n          )}\n          name='headerLogo'\n          rules={{ required: false }}\n          defaultValue=''\n        />\n        <Controller\n          control={control}\n          render={({ field: { onChange, value } }) => (\n            <CSSMultiline\n              defaultValue={value}\n              onChange={logoCSS => {\n                onChange(logoCSS);\n                reportSettingStore.updatePageBranding({\n                  ...reportSettingStore.pageBranding,\n                  header: {\n                    ...reportSettingStore.pageBranding.header,\n                    logoCSS,\n                  },\n                });\n              }}\n            />\n          )}\n          name='logoCSS'\n          rules={{ required: false }}\n          defaultValue=''\n        />\n        <Controller\n          control={control}\n          render={({ field: { onChange, value } }) => (\n            <Form.InputFile\n              label='Background Image'\n              placeholder='Background Image'\n              hasError={!!errors.backgroundImage}\n              value={value ? value.fileName : ''}\n              onChange={async e => {\n                const backgroundImage = e.target.files[0];\n                onChange(backgroundImage);\n                reportSettingStore.updatePageBranding({\n                  ...reportSettingStore.pageBranding,\n                  header: {\n                    ...reportSettingStore.pageBranding.header,\n                    backgroundImage,\n                    backgroundImageBase64: (await resizeFile(\n                      backgroundImage,\n                    )) as string,\n                  },\n                });\n              }}\n            />\n          )}\n          name='backgroundImage'\n          rules={{ required: false }}\n          defaultValue=''\n        />\n        <Controller\n          control={control}\n          render={({ field: { onChange, value } }) => (\n            <CSSMultiline\n              defaultValue={value}\n              onChange={mainBoxCSS => {\n                onChange(mainBoxCSS);\n                reportSettingStore.updatePageBranding({\n                  ...reportSettingStore.pageBranding,\n                  header: {\n                    ...reportSettingStore.pageBranding.header,\n                    mainBoxCSS,\n                  },\n                });\n              }}\n            />\n          )}\n          name='mainBoxCSS'\n          rules={{ required: false }}\n          defaultValue=''\n        />\n      </Grid>\n    </>\n  );\n});\n","import React, { useEffect } from 'react';\nimport { observer } from 'mobx-react';\nimport { Form } from '@/library/components';\nimport { useForm, Controller } from 'react-hook-form';\nimport { useStores } from '@/stores';\nimport { CSSMultiline } from '../..';\n\ninterface PageBrandingSubHeaderComponentProps {\n  isClearReset: boolean;\n}\nexport const PageBrandingSubHeader = observer(\n  (props: PageBrandingSubHeaderComponentProps) => {\n    const { loading, routerStore, reportSettingStore } = useStores();\n    const {\n      control,\n      handleSubmit,\n      formState: { errors },\n      setValue,\n      setError,\n      clearErrors,\n      reset,\n    } = useForm();\n\n    useEffect(() => {\n      if (props.isClearReset) {\n        reset();\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.isClearReset]);\n    return (\n      <>\n        <Controller\n          control={control}\n          render={({ field: { onChange, value } }) => (\n            <Form.Input\n              label='Title'\n              placeholder='Title'\n              hasError={!!errors.title}\n              value={value}\n              onChange={title => {\n                onChange(title);\n                reportSettingStore.updatePageBranding({\n                  ...reportSettingStore.pageBranding,\n                  subHeader: {\n                    ...reportSettingStore.pageBranding?.subHeader,\n                    title,\n                  },\n                });\n              }}\n            />\n          )}\n          name='title'\n          rules={{ required: false }}\n          defaultValue=''\n        />\n\n        <Controller\n          control={control}\n          render={({ field: { onChange, value } }) => (\n            <CSSMultiline\n              defaultValue={value}\n              onChange={titleCSS => {\n                onChange(titleCSS);\n                reportSettingStore.updatePageBranding({\n                  ...reportSettingStore.pageBranding,\n                  subHeader: {\n                    ...reportSettingStore.pageBranding.subHeader,\n                    titleCSS,\n                  },\n                });\n              }}\n            />\n          )}\n          name='titleCSS'\n          rules={{ required: false }}\n          defaultValue=''\n        />\n\n        <Controller\n          control={control}\n          render={({ field: { onChange, value } }) => (\n            <Form.Input\n              label='Sub Title'\n              placeholder='Sub Title'\n              hasError={!!errors.subTitle}\n              value={value}\n              onChange={subTitle => {\n                onChange(subTitle);\n                reportSettingStore.updatePageBranding({\n                  ...reportSettingStore.pageBranding,\n                  subHeader: {\n                    ...reportSettingStore.pageBranding?.subHeader,\n                    subTitle,\n                  },\n                });\n              }}\n            />\n          )}\n          name='subTitle'\n          rules={{ required: false }}\n          defaultValue=''\n        />\n\n        <Controller\n          control={control}\n          render={({ field: { onChange, value } }) => (\n            <CSSMultiline\n              defaultValue={value}\n              onChange={subTitleCSS => {\n                onChange(subTitleCSS);\n                reportSettingStore.updatePageBranding({\n                  ...reportSettingStore.pageBranding,\n                  subHeader: {\n                    ...reportSettingStore.pageBranding.subHeader,\n                    subTitleCSS,\n                  },\n                });\n              }}\n            />\n          )}\n          name='subTitleCSS'\n          rules={{ required: false }}\n          defaultValue=''\n        />\n\n        <Controller\n          control={control}\n          render={({ field: { onChange, value } }) => (\n            <CSSMultiline\n              defaultValue={value}\n              onChange={mainBoxCSS => {\n                onChange(mainBoxCSS);\n                reportSettingStore.updatePageBranding({\n                  ...reportSettingStore.pageBranding,\n                  subHeader: {\n                    ...reportSettingStore.pageBranding.subHeader,\n                    mainBoxCSS,\n                  },\n                });\n              }}\n            />\n          )}\n          name='subHeaderMainBoxCss'\n          rules={{ required: false }}\n          defaultValue=''\n        />\n      </>\n    );\n  },\n);\n","import React, { useEffect } from 'react';\nimport { observer } from 'mobx-react';\nimport { Form } from '@/library/components';\nimport { useForm, Controller } from 'react-hook-form';\nimport { useStores } from '@/stores';\nimport { resizeFile } from '@/library/utils';\nimport { CSSMultiline } from '../..';\ninterface PageBrandingFooterComponentProps {\n  isClearReset: boolean;\n}\nexport const PageBrandingFooter = observer(\n  (props: PageBrandingFooterComponentProps) => {\n    const { reportSettingStore } = useStores();\n    const {\n      control,\n      handleSubmit,\n      formState: { errors },\n      setValue,\n      setError,\n      clearErrors,\n      reset,\n    } = useForm();\n\n    useEffect(() => {\n      if (props.isClearReset) {\n        reset();\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.isClearReset]);\n\n    return (\n      <>\n        <Controller\n          control={control}\n          render={({ field: { onChange, value } }) => (\n            <Form.Input\n              label='Title'\n              placeholder='Title'\n              hasError={!!errors.footerTitle}\n              value={value}\n              onChange={title => {\n                onChange(title);\n                reportSettingStore.updatePageBranding({\n                  ...reportSettingStore.pageBranding,\n                  footer: {\n                    ...reportSettingStore.pageBranding?.footer,\n                    title,\n                  },\n                });\n              }}\n            />\n          )}\n          name='footerTitle'\n          rules={{ required: false }}\n          defaultValue=''\n        />\n\n        <Controller\n          control={control}\n          render={({ field: { onChange, value } }) => (\n            <CSSMultiline\n              defaultValue={value}\n              onChange={titleCSS => {\n                onChange(titleCSS);\n                reportSettingStore.updatePageBranding({\n                  ...reportSettingStore.pageBranding,\n                  footer: {\n                    ...reportSettingStore.pageBranding.footer,\n                    titleCSS,\n                  },\n                });\n              }}\n            />\n          )}\n          name='footerTitleCSS'\n          rules={{ required: false }}\n          defaultValue=''\n        />\n        <Controller\n          control={control}\n          render={({ field: { onChange, value } }) => (\n            <Form.Input\n              label='Sub Title'\n              placeholder='Sub Title'\n              hasError={!!errors.subTitle}\n              value={value}\n              onChange={subTitle => {\n                onChange(subTitle);\n                reportSettingStore.updatePageBranding({\n                  ...reportSettingStore.pageBranding,\n                  footer: {\n                    ...reportSettingStore.pageBranding?.footer,\n                    subTitle,\n                  },\n                });\n              }}\n            />\n          )}\n          name='subTitle'\n          rules={{ required: false }}\n          defaultValue=''\n        />\n\n        <Controller\n          control={control}\n          render={({ field: { onChange, value } }) => (\n            <CSSMultiline\n              defaultValue={value}\n              onChange={subTitleCSS => {\n                onChange(subTitleCSS);\n                reportSettingStore.updatePageBranding({\n                  ...reportSettingStore.pageBranding,\n                  footer: {\n                    ...reportSettingStore.pageBranding.footer,\n                    subTitleCSS,\n                  },\n                });\n              }}\n            />\n          )}\n          name='subTitleCSS'\n          rules={{ required: false }}\n          defaultValue=''\n        />\n\n        <Controller\n          control={control}\n          render={({ field: { onChange, value } }) => (\n            <Form.InputFile\n              label='Background Image'\n              placeholder='Background Image'\n              hasError={!!errors.backgroundImage}\n              value={value ? value.fileName : ''}\n              onChange={async e => {\n                const backgroundImage = e.target.files[0];\n                onChange(backgroundImage);\n                reportSettingStore.updatePageBranding({\n                  ...reportSettingStore.pageBranding,\n                  footer: {\n                    ...reportSettingStore.pageBranding.footer,\n                    backgroundImage,\n                    backgroundImageBase64: (await resizeFile(\n                      backgroundImage,\n                    )) as string,\n                  },\n                });\n              }}\n            />\n          )}\n          name='backgroundImage'\n          rules={{ required: false }}\n          defaultValue=''\n        />\n        <Controller\n          control={control}\n          render={({ field: { onChange, value } }) => (\n            <CSSMultiline\n              defaultValue={value}\n              onChange={mainBoxCSS => {\n                onChange(mainBoxCSS);\n                reportSettingStore.updatePageBranding({\n                  ...reportSettingStore.pageBranding,\n                  footer: {\n                    ...reportSettingStore.pageBranding?.footer,\n                    mainBoxCSS,\n                  },\n                });\n              }}\n            />\n          )}\n          name='footerMainBoxCss'\n          rules={{ required: false }}\n          defaultValue=''\n        />\n      </>\n    );\n  },\n);\n","import React, { useEffect } from 'react';\nimport { observer } from 'mobx-react';\nimport { Form } from '@/library/components';\nimport { useForm, Controller } from 'react-hook-form';\nimport { useStores } from '@/stores';\nimport { CSSMultiline } from '../..';\n\ninterface PageNumberComponentProps {\n  isClearReset: boolean;\n}\n\nexport const PageNumber = observer((props: PageNumberComponentProps) => {\n  const { reportSettingStore } = useStores();\n  const {\n    control,\n    handleSubmit,\n    formState: { errors },\n    setValue,\n    setError,\n    clearErrors,\n    reset,\n  } = useForm();\n\n  useEffect(() => {\n    if (props.isClearReset) {\n      reset();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.isClearReset]);\n  return (\n    <>\n      <Controller\n        control={control}\n        render={({ field: { onChange, value } }) => (\n          <CSSMultiline\n            defaultValue={value}\n            onChange={pageNumberCSS => {\n              onChange(pageNumberCSS);\n              reportSettingStore.updatePageBranding({\n                ...reportSettingStore.pageBranding,\n                pageNumber: {\n                  ...reportSettingStore.pageBranding.pageNumber,\n                  pageNumberCSS,\n                },\n              });\n            }}\n          />\n        )}\n        name='pageNumberCSS'\n        rules={{ required: false }}\n        defaultValue=''\n      />\n    </>\n  );\n});\n","import React from 'react';\nimport { observer } from 'mobx-react';\nimport {\n  Form,\n  TableBootstrap,\n  Tooltip,\n  Icons,\n  Buttons,\n  Svg,\n} from '@/library/components';\nimport { AutoCompleteLayoutCode } from '../../';\nimport { Confirm } from '@/library/models';\n\ninterface PageBrandingProps {\n  data: any;\n  totalSize: number;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  onDelete?: (selectedItem: Confirm) => void;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (fields: any, id: string) => void;\n  onPageSizeChange?: (page: number, totalSize: number) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n  onPdfPreview?: (selectedItem: any) => void;\n  setIsInputView: any;\n  isInputView: boolean;\n}\n\nlet sectionSetting;\nlet version;\nlet environment;\nlet companyCode;\n\nexport const PageBrandingList = observer((props: PageBrandingProps) => {\n  return (\n    <>\n      <div style={{ position: 'relative' }}>\n        <TableBootstrap\n          id='_id'\n          data={props.data}\n          totalSize={props.totalSize}\n          isHideForm={props.isInputView}\n          setHideForm={props.setIsInputView}\n          columns={[\n            {\n              dataField: '_id',\n              text: 'Id',\n              hidden: true,\n              csvExport: false,\n            },\n            {\n              dataField: 'layoutCode',\n              text: 'Layout Code',\n              headerClasses: 'textHeader',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  <AutoCompleteLayoutCode\n                    hasError={false}\n                    onSelect={item => {\n                      props.onUpdateItem &&\n                        props.onUpdateItem(\n                          { layoutCode: item.tempCode },\n                          row._id,\n                        );\n                    }}\n                  />\n                </>\n              ),\n            },\n            {\n              dataField: 'tempCode',\n              text: 'Branding Code',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'brandingTitle',\n              text: 'Branding Title',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'isHeader',\n              text: 'Header Visible',\n              csvFormatter: (col, row) =>\n                `${row.isHeader ? (row.isHeader ? 'Yes' : 'No') : 'No'}`,\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <Form.Toggle\n                      value={row.isHeader}\n                      onChange={isHeader => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem({ isHeader }, row._id);\n                      }}\n                    />\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'header.title',\n              text: 'Header Title',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  {row?.header?.title && (\n                    <Form.MultilineInput\n                      label=''\n                      className='w-40'\n                      onBlur={title => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            { header: { ...row?.header, title } },\n                            row._id,\n                          );\n                      }}\n                      defaultValue={row.header?.title}\n                    />\n                  )}\n                </>\n              ),\n            },\n            {\n              dataField: 'header.titleCSS',\n              text: 'Header Title CSS',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  {row?.header?.titleCSS && (\n                    <Form.MultilineInput\n                      label=''\n                      style={{ color: '#ffffff', backgroundColor: '#000000' }}\n                      onBlur={titleCSS => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            { header: { ...row?.header, titleCSS } },\n                            row._id,\n                          );\n                      }}\n                      defaultValue={row?.header.titleCSS}\n                    />\n                  )}\n                </>\n              ),\n            },\n            {\n              dataField: 'header.logo',\n              text: 'Header Logo',\n              sort: true,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <img\n                      src={row.header?.logo}\n                      alt='logo'\n                      className='object-fill h-35 w-40 rounded-md'\n                    />\n                  </>\n                );\n              },\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <div className='flex flex-col items-center gap gap-2'>\n                  <Form.InputFile\n                    label='File'\n                    placeholder='File'\n                    onChange={async e => {\n                      const logo = e.target.files[0];\n                      props.onUpdateItem &&\n                        props.onUpdateItem(\n                          {\n                            header: {\n                              ...row.header,\n                              logo,\n                            },\n                          },\n                          row._id,\n                        );\n                    }}\n                  />\n                  <Buttons.Button\n                    size='small'\n                    type='outline'\n                    icon={Svg.Remove}\n                    onClick={() => {\n                      props.onUpdateItem &&\n                        props.onUpdateItem(\n                          {\n                            header: {\n                              ...row.header,\n                              logo: null,\n                            },\n                          },\n                          row._id,\n                        );\n                    }}\n                  >\n                    Remove Image\n                  </Buttons.Button>\n                </div>\n              ),\n            },\n            {\n              dataField: 'header.logoCSS',\n              text: 'Header Logo CSS',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  {row?.header?.logoCSS && (\n                    <Form.MultilineInput\n                      label=''\n                      style={{ color: '#ffffff', backgroundColor: '#000000' }}\n                      onBlur={logoCSS => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            { header: { ...row?.header, logoCSS } },\n                            row._id,\n                          );\n                      }}\n                      defaultValue={row.header?.logoCSS}\n                    />\n                  )}\n                </>\n              ),\n            },\n            {\n              dataField: 'header.backgroundImage',\n              text: 'Header Background Image',\n              sort: true,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <img\n                      src={row.header?.backgroundImage}\n                      alt='backgroundImage'\n                      className='object-fill h-35 w-40 rounded-md'\n                    />\n                  </>\n                );\n              },\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <div className='flex flex-col items-center gap gap-2'>\n                  <Form.InputFile\n                    label='File'\n                    placeholder='File'\n                    onChange={async e => {\n                      const backgroundImage = e.target.files[0];\n                      props.onUpdateItem &&\n                        props.onUpdateItem(\n                          {\n                            header: {\n                              ...row.header,\n                              backgroundImage,\n                            },\n                          },\n                          row._id,\n                        );\n                    }}\n                  />\n                  <Buttons.Button\n                    size='small'\n                    type='outline'\n                    icon={Svg.Remove}\n                    onClick={() => {\n                      props.onUpdateItem &&\n                        props.onUpdateItem(\n                          {\n                            header: {\n                              ...row.header,\n                              backgroundImage: null,\n                            },\n                          },\n                          row._id,\n                        );\n                    }}\n                  >\n                    Remove Image\n                  </Buttons.Button>\n                </div>\n              ),\n            },\n            {\n              dataField: 'header.mainBoxCSS',\n              text: 'Header Main Box CSS',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  {row?.header?.mainBoxCSS && (\n                    <Form.MultilineInput\n                      label=''\n                      style={{ color: '#ffffff', backgroundColor: '#000000' }}\n                      onBlur={mainBoxCSS => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            { header: { ...row?.header, mainBoxCSS } },\n                            row._id,\n                          );\n                      }}\n                      defaultValue={row.header?.mainBoxCSS}\n                    />\n                  )}\n                </>\n              ),\n            },\n            {\n              dataField: 'isSubHeader',\n              text: 'Sub Header Visible',\n              csvFormatter: (col, row) =>\n                `${row.isSubHeader ? (row.isSubHeader ? 'Yes' : 'No') : 'No'}`,\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <Form.Toggle\n                      value={row.isSubHeader}\n                      onChange={isSubHeader => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem({ isSubHeader }, row._id);\n                      }}\n                    />\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'subHeader.title',\n              text: 'Sub Header Title',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  {row?.subHeader?.title && (\n                    <Form.MultilineInput\n                      label=''\n                      className='w-40'\n                      onBlur={title => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            { subHeader: { ...row?.subHeader, title } },\n                            row._id,\n                          );\n                      }}\n                      defaultValue={row?.subHeader?.title}\n                    />\n                  )}\n                </>\n              ),\n            },\n            {\n              dataField: 'subHeader.titleCSS',\n              text: 'Sub Header Title CSS',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  {row?.subHeader?.titleCSS && (\n                    <Form.MultilineInput\n                      label=''\n                      style={{ color: '#ffffff', backgroundColor: '#000000' }}\n                      onBlur={titleCSS => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            { subHeader: { ...row?.subHeader, titleCSS } },\n                            row._id,\n                          );\n                      }}\n                      defaultValue={row?.subHeader?.titleCSS}\n                    />\n                  )}\n                </>\n              ),\n            },\n            {\n              dataField: 'subHeader.subTitle',\n              text: 'Sub Header Sub Title',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  {row.subHeader?.subTitle && (\n                    <Form.MultilineInput\n                      label=''\n                      className='w-40'\n                      onBlur={subTitle => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            { subHeader: { ...row?.subHeader, subTitle } },\n                            row._id,\n                          );\n                      }}\n                      defaultValue={row.subHeader?.subTitle}\n                    />\n                  )}\n                </>\n              ),\n            },\n            {\n              dataField: 'subHeader.subTitleCSS',\n              text: 'Sub Header Sub Title CSS',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  {row.subHeader?.subTitleCSS && (\n                    <Form.MultilineInput\n                      label=''\n                      style={{ color: '#ffffff', backgroundColor: '#000000' }}\n                      onBlur={subTitleCSS => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            { subHeader: { ...row?.subHeader, subTitleCSS } },\n                            row._id,\n                          );\n                      }}\n                      defaultValue={row?.subHeader?.subTitleCSS}\n                    />\n                  )}\n                </>\n              ),\n            },\n            {\n              dataField: 'subHeader.mainBoxCSS',\n              text: 'Sub Header Main Box CSS',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  {row.subHeader?.mainBoxCSS && (\n                    <Form.MultilineInput\n                      label=''\n                      style={{ color: '#ffffff', backgroundColor: '#000000' }}\n                      onBlur={mainBoxCSS => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            { subHeader: { ...row?.subHeader, mainBoxCSS } },\n                            row._id,\n                          );\n                      }}\n                      defaultValue={row?.subHeader?.mainBoxCSS}\n                    />\n                  )}\n                </>\n              ),\n            },\n            {\n              dataField: 'isFooter',\n              text: 'Footer Visible',\n              csvFormatter: (col, row) =>\n                `${row.isFooter ? (row.isFooter ? 'Yes' : 'No') : 'No'}`,\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <Form.Toggle\n                      value={row.isFooter}\n                      onChange={isFooter => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem({ isFooter }, row._id);\n                      }}\n                    />\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'footer.title',\n              text: 'Footer Title',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  {row.footer?.title && (\n                    <Form.MultilineInput\n                      label=''\n                      className='w-40'\n                      onBlur={title => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            { footer: { ...row?.footer, title } },\n                            row._id,\n                          );\n                      }}\n                      defaultValue={row.footer?.title}\n                    />\n                  )}\n                </>\n              ),\n            },\n            {\n              dataField: 'footer.titleCSS',\n              text: 'Footer Title CSS',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  {row.footer?.titleCSS && (\n                    <Form.MultilineInput\n                      label=''\n                      style={{ color: '#ffffff', backgroundColor: '#000000' }}\n                      onBlur={titleCSS => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            { footer: { ...row?.footer, titleCSS } },\n                            row._id,\n                          );\n                      }}\n                      defaultValue={row.footer?.titleCSS}\n                    />\n                  )}\n                </>\n              ),\n            },\n            {\n              dataField: 'footer.subTitle',\n              text: 'Footer Sub Title',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  {row.footer?.subTitle && (\n                    <Form.MultilineInput\n                      label=''\n                      className='w-40'\n                      onBlur={subTitle => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            { footer: { ...row?.footer, subTitle } },\n                            row._id,\n                          );\n                      }}\n                      defaultValue={row.footer?.subTitle}\n                    />\n                  )}\n                </>\n              ),\n            },\n            {\n              dataField: 'footer.subTitleCSS',\n              text: 'Footer Sub Title CSS',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  {row.footer?.subTitleCSS && (\n                    <Form.MultilineInput\n                      label=''\n                      style={{ color: '#ffffff', backgroundColor: '#000000' }}\n                      onBlur={subTitleCSS => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            { footer: { ...row?.footer, subTitleCSS } },\n                            row._id,\n                          );\n                      }}\n                      defaultValue={row.footer?.subTitleCSS}\n                    />\n                  )}\n                </>\n              ),\n            },\n            {\n              dataField: 'footer.backgroundImage',\n              text: 'Footer Background Image',\n              sort: true,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <img\n                      src={row.footer?.backgroundImage}\n                      alt='backgroundImage'\n                      className='object-fill h-35 w-40 rounded-md'\n                    />\n                  </>\n                );\n              },\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <div className='flex flex-col items-center gap gap-2'>\n                  <Form.InputFile\n                    label='File'\n                    placeholder='File'\n                    onChange={async e => {\n                      const backgroundImage = e.target.files[0];\n                      props.onUpdateItem &&\n                        props.onUpdateItem(\n                          {\n                            footer: {\n                              ...row.footer,\n                              backgroundImage,\n                            },\n                          },\n                          row._id,\n                        );\n                    }}\n                  />\n                  <Buttons.Button\n                    size='small'\n                    type='outline'\n                    icon={Svg.Remove}\n                    onClick={() => {\n                      props.onUpdateItem &&\n                        props.onUpdateItem(\n                          {\n                            footer: {\n                              ...row.footer,\n                              backgroundImage: null,\n                            },\n                          },\n                          row._id,\n                        );\n                    }}\n                  >\n                    Remove Image\n                  </Buttons.Button>\n                </div>\n              ),\n            },\n            {\n              dataField: 'footer.mainBoxCSS',\n              text: 'Footer Main Box CSS',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  {row.footer?.mainBoxCSS && (\n                    <Form.MultilineInput\n                      label=''\n                      style={{ color: '#ffffff', backgroundColor: '#000000' }}\n                      onBlur={mainBoxCSS => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            { footer: { ...row?.footer, mainBoxCSS } },\n                            row._id,\n                          );\n                      }}\n                      defaultValue={row.footer?.mainBoxCSS}\n                    />\n                  )}\n                </>\n              ),\n            },\n            {\n              dataField: 'isPdfPageNumber',\n              text: 'Page Number Visible',\n              csvFormatter: (col, row) =>\n                `${\n                  row.isPdfPageNumber\n                    ? row.isPdfPageNumber\n                      ? 'Yes'\n                      : 'No'\n                    : 'No'\n                }`,\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <Form.Toggle\n                      value={row.isPdfPageNumber}\n                      onChange={isPdfPageNumber => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem({ isPdfPageNumber }, row._id);\n                      }}\n                    />\n                  </>\n                );\n              },\n            },\n\n            {\n              dataField: 'pageNumber.pageNumberCSS',\n              text: 'Page Number CSS',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  {row.pageNumber?.pageNumberCSS && (\n                    <Form.MultilineInput\n                      label=''\n                      style={{ color: '#ffffff', backgroundColor: '#000000' }}\n                      onBlur={pageNumberCSS => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            {\n                              pageNumber: { ...row?.pageNumber, pageNumberCSS },\n                            },\n                            row._id,\n                          );\n                      }}\n                      defaultValue={row.pageNumber?.pageNumberCSS}\n                    />\n                  )}\n                </>\n              ),\n            },\n            {\n              text: 'Company Code',\n              dataField: 'companyCode',\n              editable: false,\n              sort: true,\n              csvFormatter: col => (col ? col : ''),\n            },\n            {\n              text: 'Environment',\n              dataField: 'environment',\n              editable: false,\n              sort: true,\n              csvFormatter: col => (col ? col : ''),\n            },\n            {\n              dataField: 'operation',\n              text: 'Action',\n              editable: false,\n              csvExport: false,\n              // hidden: !props.isDelete,\n              formatter: (cellContent, row) => (\n                <>\n                  <div className='flex flex-row'>\n                    <Tooltip tooltipText='Preview'>\n                      <Icons.IconContext\n                        color='#fff'\n                        size='20'\n                        onClick={() =>\n                          props.onPdfPreview && props.onPdfPreview(row)\n                        }\n                      >\n                        {Icons.getIconTag(Icons.IconIm.ImFilePdf)}\n                      </Icons.IconContext>\n                    </Tooltip>\n                    <Tooltip tooltipText='Delete'>\n                      <Icons.IconContext\n                        color='#fff'\n                        size='20'\n                        onClick={() =>\n                          props.onDelete &&\n                          props.onDelete({\n                            type: 'delete',\n                            show: true,\n                            id: [row._id],\n                            title: 'Are you sure?',\n                            body: 'Do you want to delete this record?',\n                          })\n                        }\n                      >\n                        {Icons.getIconTag(Icons.IconBs.BsFillTrashFill)}\n                      </Icons.IconContext>\n                    </Tooltip>\n                  </div>\n                </>\n              ),\n              headerClasses: 'sticky right-0  bg-gray-500 text-white z-50',\n              classes: (cell, row, rowIndex, colIndex) => {\n                return 'sticky right-0 bg-gray-500';\n              },\n              style: (cell, row, rowIndex, colIndex) => {\n                return {\n                  zIndex: props.data?.length - rowIndex,\n                };\n              },\n            },\n          ]}\n          isEditModify={props.isEditModify}\n          isSelectRow={true}\n          fileName='Page Branding'\n          onSelectedRow={rows => {\n            props.onSelectedRow &&\n              props.onSelectedRow(rows.map((item: any) => item._id));\n          }}\n          // onUpdateItem={(value: any, dataField: string, id: string) => {\n          //   props.onUpdateItem &&\n          //     props.onUpdateItem({'header.title': value}, id);\n          // }}\n          onPageSizeChange={(page, size) => {\n            props.onPageSizeChange && props.onPageSizeChange(page, size);\n          }}\n          onFilter={(type, filter, page, size) => {\n            props.onFilter && props.onFilter(type, filter, page, size);\n          }}\n          clearAllFilter={() => {\n            sectionSetting('');\n            version('');\n            environment('');\n            companyCode('');\n          }}\n          dynamicStylingFields={['layoutCode', 'tempCode', 'brandingTitle']}\n          hideExcelSheet={[\n            '_id',\n            'operation',\n            'header.logo',\n            'header.backgroundImage',\n            'footer.backgroundImage',\n          ]}\n        />\n      </div>\n    </>\n  );\n});\n","import React from 'react';\nimport { observer } from 'mobx-react';\nimport { List, Form } from '@/library/components';\nimport { useStores } from '@/stores';\nimport { CSSMultiline } from '../..';\n\ninterface GeneralProps {\n  label?: string;\n}\n\nexport const General = observer(({ label }: GeneralProps) => {\n  const { reportSettingStore } = useStores();\n  return (\n    <List direction='col' space={1} justify='stretch' fill>\n      <div className='flex flex-row flex-auto object-fill gap-2'>\n        <CSSMultiline\n          label='Print Department Name CSS'\n          placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n          defaultValue={\n            reportSettingStore.reportBody?.general?.printDepartmentNameCSS\n          }\n          onChange={printDepartmentNameCSS => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              general: {\n                ...reportSettingStore.reportBody?.general,\n                printDepartmentNameCSS,\n              },\n            });\n          }}\n        />\n        <Form.Toggle\n          isToggleLabel={false}\n          label='Print Department Name'\n          className='w-2/6'\n          value={reportSettingStore.reportBody?.general?.isPrintDepartmentName}\n          onChange={isPrintDepartmentName => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              general: {\n                ...reportSettingStore.reportBody?.general,\n                isPrintDepartmentName,\n              },\n            });\n          }}\n        />\n      </div>\n      <div className='flex flex-row flex-auto object-fill gap-2'>\n        <CSSMultiline\n          label='Package Name Print CSS'\n          placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n          defaultValue={\n            reportSettingStore.reportBody?.general?.packageNamePrintCSS\n          }\n          onChange={packageNamePrintCSS => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              general: {\n                ...reportSettingStore.reportBody?.general,\n                packageNamePrintCSS,\n              },\n            });\n          }}\n        />\n\n        <Form.Toggle\n          isToggleLabel={false}\n          label='Package Name Print'\n          className='w-2/6'\n          value={reportSettingStore.reportBody?.general?.isPackageNamePrint}\n          onChange={isPackageNamePrint => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              general: {\n                ...reportSettingStore.reportBody?.general,\n                isPackageNamePrint,\n              },\n            });\n          }}\n        />\n      </div>\n      <div className='flex flex-row flex-auto object-fill gap-2'>\n        <CSSMultiline\n          label='Report Grouping CSS'\n          placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n          defaultValue={\n            reportSettingStore.reportBody?.general?.reportGroupingCSS\n          }\n          onChange={reportGroupingCSS => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              general: {\n                ...reportSettingStore.reportBody?.general,\n                reportGroupingCSS,\n              },\n            });\n          }}\n        />\n        <Form.Toggle\n          isToggleLabel={false}\n          label='Report Grouping'\n          className='w-5/6'\n          value={reportSettingStore.reportBody?.general?.isReportGrouping}\n          onChange={isReportGrouping => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              general: {\n                ...reportSettingStore.reportBody?.general,\n                isReportGrouping,\n              },\n            });\n          }}\n        />\n      </div>\n      <div className='flex flex-row flex-auto object-fill gap-2'>\n        <CSSMultiline\n          label='Report Order CSS'\n          placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n          defaultValue={reportSettingStore.reportBody?.general?.reportOrderCSS}\n          onChange={reportOrderCSS => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              general: {\n                ...reportSettingStore.reportBody?.general,\n                reportOrderCSS,\n              },\n            });\n          }}\n        />\n        <Form.Toggle\n          isToggleLabel={false}\n          label='Report Order'\n          className='w-2/6'\n          value={reportSettingStore.reportBody?.general?.isReportOrder}\n          onChange={isReportOrder => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              general: {\n                ...reportSettingStore.reportBody?.general,\n                isReportOrder,\n              },\n            });\n          }}\n        />\n      </div>\n      <div className='flex flex-row flex-auto object-fill gap-2'>\n        <CSSMultiline\n          label='Method Flag CSS'\n          placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n          defaultValue={reportSettingStore.reportBody?.general?.methodFlagCSS}\n          onChange={methodFlagCSS => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              general: {\n                ...reportSettingStore.reportBody?.general,\n                methodFlagCSS,\n              },\n            });\n          }}\n        />\n        <Form.Toggle\n          isToggleLabel={false}\n          label='Method Flag'\n          className='w-full'\n          value={reportSettingStore.reportBody?.general?.isMethodFlag}\n          onChange={isMethodFlag => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              general: {\n                ...reportSettingStore.reportBody?.general,\n                isMethodFlag,\n              },\n            });\n          }}\n        />\n      </div>\n    </List>\n  );\n});\n","import React from 'react';\nimport { observer } from 'mobx-react';\nimport { List, Form } from '@/library/components';\nimport { useStores } from '@/stores';\nimport { CSSMultiline } from '../..';\n\ninterface PanelProps {\n  label?: string;\n}\n\nexport const Panel = observer(({ label }: PanelProps) => {\n  const { reportSettingStore } = useStores();\n  return (\n    <List direction='col' space={1} justify='stretch' fill>\n      <div className='flex flex-row flex-auto object-fill gap-2'>\n        <CSSMultiline\n          label='Print Panel Name CSS'\n          placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n          defaultValue={reportSettingStore.reportBody?.panel?.printPanelNameCSS}\n          onChange={printPanelNameCSS => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              panel: {\n                ...reportSettingStore.reportBody?.panel,\n                printPanelNameCSS,\n              },\n            });\n          }}\n        />\n        <Form.Toggle\n          isToggleLabel={false}\n          label='Print Panel Name'\n          className='w-2/6'\n          value={reportSettingStore.reportBody?.panel?.isPrintPanelName}\n          onChange={isPrintPanelName => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              panel: {\n                ...reportSettingStore.reportBody?.panel,\n                isPrintPanelName,\n              },\n            });\n          }}\n        />\n      </div>\n\n      <div className='flex flex-row flex-auto object-fill gap-2'>\n        <CSSMultiline\n          label='Method Name CSS'\n          placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n          defaultValue={reportSettingStore.reportBody?.panel?.methodNameCSS}\n          onChange={methodNameCSS => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              panel: {\n                ...reportSettingStore.reportBody?.panel,\n                methodNameCSS,\n              },\n            });\n          }}\n        />\n        <Form.Toggle\n          isToggleLabel={false}\n          label='Method Name'\n          className='w-2/6'\n          value={reportSettingStore.reportBody?.panel?.isMethodName}\n          onChange={isMethodName => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              panel: {\n                ...reportSettingStore.reportBody?.panel,\n                isMethodName,\n              },\n            });\n          }}\n        />\n      </div>\n\n      <div className='flex flex-row flex-auto object-fill gap-2'>\n        <CSSMultiline\n          label='Panel Interpretation CSS'\n          placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n          defaultValue={\n            reportSettingStore.reportBody?.panel?.panelInterpretationCSS\n          }\n          onChange={panelInterpretationCSS => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              panel: {\n                ...reportSettingStore.reportBody?.panel,\n                panelInterpretationCSS,\n              },\n            });\n          }}\n        />\n        <Form.Toggle\n          isToggleLabel={false}\n          label='Panel Interpretation'\n          className='w-2/6'\n          value={reportSettingStore.reportBody?.panel?.isPanelInterpretation}\n          onChange={isPanelInterpretation => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              panel: {\n                ...reportSettingStore.reportBody?.panel,\n                isPanelInterpretation,\n              },\n            });\n          }}\n        />\n      </div>\n    </List>\n  );\n});\n","import React from 'react';\nimport { observer } from 'mobx-react';\nimport { List, Form } from '@/library/components';\nimport { useStores } from '@/stores';\nimport { CSSMultiline } from '../..';\n\ninterface TestProps {\n  label?: string;\n}\n\nexport const Test = observer(({ label }: TestProps) => {\n  const { reportSettingStore } = useStores();\n  return (\n    <List direction='col' space={1} justify='stretch' fill>\n      <div className='flex flex-row flex-auto object-fill gap-2'>\n        <CSSMultiline\n          label='Print Test Name CSS'\n          placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n          defaultValue={reportSettingStore.reportBody?.test?.printTestNameCSS}\n          onChange={printTestNameCSS => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              test: {\n                ...reportSettingStore.reportBody?.test,\n                printTestNameCSS,\n              },\n            });\n          }}\n        />\n        <Form.Toggle\n          isToggleLabel={false}\n          label='Print Test Name'\n          className='w-2/6'\n          value={reportSettingStore.reportBody?.test?.isPrintTestName}\n          onChange={isPrintTestName => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              test: {\n                ...reportSettingStore.reportBody?.test,\n                isPrintTestName,\n              },\n            });\n          }}\n        />\n      </div>\n\n      <div className='flex flex-row flex-auto object-fill gap-2'>\n        <CSSMultiline\n          label='Method Name CSS'\n          style={{ color: '#ffffff', backgroundColor: '#000000' }}\n          placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n          defaultValue={reportSettingStore.reportBody?.test?.methodNameCSS}\n          onChange={methodNameCSS => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              test: {\n                ...reportSettingStore.reportBody?.test,\n                methodNameCSS,\n              },\n            });\n          }}\n        />\n        <Form.Toggle\n          isToggleLabel={false}\n          label='Method Name'\n          className='w-2/6'\n          value={reportSettingStore.reportBody?.test?.isMethodName}\n          onChange={isMethodName => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              test: {\n                ...reportSettingStore.reportBody?.test,\n                isMethodName,\n              },\n            });\n          }}\n        />\n      </div>\n\n      <div className='flex flex-row flex-auto object-fill gap-2'>\n        <CSSMultiline\n          label='Test Interpretation CSS'\n          style={{ color: '#ffffff', backgroundColor: '#000000' }}\n          placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n          defaultValue={\n            reportSettingStore.reportBody?.test?.testInterpretationCSS\n          }\n          onChange={testInterpretationCSS => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              test: {\n                ...reportSettingStore.reportBody?.test,\n                testInterpretationCSS,\n              },\n            });\n          }}\n        />\n        <Form.Toggle\n          isToggleLabel={false}\n          label='Test Interpretation'\n          className='w-2/6'\n          value={reportSettingStore.reportBody?.test?.isTestInterpretation}\n          onChange={isTestInterpretation => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              test: {\n                ...reportSettingStore.reportBody?.test,\n                isTestInterpretation,\n              },\n            });\n          }}\n        />\n      </div>\n    </List>\n  );\n});\n","import React from 'react';\nimport { observer } from 'mobx-react';\nimport { List, Form } from '@/library/components';\nimport { useStores } from '@/stores';\nimport { CSSMultiline } from '../..';\n\ninterface AnalyteProps {\n  label?: string;\n}\n\nexport const Analyte = observer(({ label }: AnalyteProps) => {\n  const { reportSettingStore } = useStores();\n  return (\n    <List direction='col' space={1} justify='stretch' fill>\n      <div className='flex flex-row flex-auto object-fill gap-2'>\n        <CSSMultiline\n          label='Print Analyte Name CSS'\n          style={{ color: '#ffffff', backgroundColor: '#000000' }}\n          placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n          defaultValue={\n            reportSettingStore.reportBody?.analyte?.printAnalyteNameCSS\n          }\n          onChange={printAnalyteNameCSS => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                printAnalyteNameCSS,\n              },\n            });\n          }}\n        />\n        <Form.Toggle\n          isToggleLabel={false}\n          label='Print Analyte Name'\n          className='w-2/6'\n          value={reportSettingStore.reportBody?.analyte?.isPrintAnalyteName}\n          onChange={isPrintAnalyteName => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                isPrintAnalyteName,\n              },\n            });\n          }}\n        />\n      </div>\n\n      <div className='flex flex-row flex-auto object-fill gap-2'>\n        <CSSMultiline\n          label='Method Name CSS'\n          style={{ color: '#ffffff', backgroundColor: '#000000' }}\n          placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n          defaultValue={reportSettingStore.reportBody?.analyte?.methodNameCSS}\n          onChange={methodNameCSS => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                methodNameCSS,\n              },\n            });\n          }}\n        />\n        <Form.Toggle\n          isToggleLabel={false}\n          label='Method Name'\n          className='w-2/6'\n          value={reportSettingStore.reportBody?.analyte?.isMethodName}\n          onChange={isMethodName => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                isMethodName,\n              },\n            });\n          }}\n        />\n      </div>\n\n      <div className='flex flex-row flex-auto object-fill gap-2'>\n        <CSSMultiline\n          label='Header Item CSS'\n          style={{ color: '#ffffff', backgroundColor: '#000000' }}\n          placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n          defaultValue={reportSettingStore.reportBody?.analyte?.headerItemCSS}\n          onChange={headerItemCSS => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                headerItemCSS,\n              },\n            });\n          }}\n        />\n        <Form.Toggle\n          isToggleLabel={false}\n          label='Header Item'\n          className='w-2/6'\n          value={reportSettingStore.reportBody?.analyte?.isHeaderItem}\n          onChange={isHeaderItem => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                isHeaderItem,\n              },\n            });\n          }}\n        />\n      </div>\n\n      <div className='flex flex-row flex-auto object-fill gap-2'>\n        <CSSMultiline\n          label='ABN Flag CSS'\n          style={{ color: '#ffffff', backgroundColor: '#000000' }}\n          placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n          defaultValue={reportSettingStore.reportBody?.analyte?.abnFlagCSS}\n          onChange={abnFlagCSS => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                abnFlagCSS,\n              },\n            });\n          }}\n        />\n        <Form.Toggle\n          isToggleLabel={false}\n          label='ABN Flag'\n          className='w-2/6'\n          value={reportSettingStore.reportBody?.analyte?.isAbnFlag}\n          onChange={isAbnFlag => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                isAbnFlag,\n              },\n            });\n          }}\n        />\n      </div>\n\n      <div className='flex flex-row flex-auto object-fill gap-2'>\n        <CSSMultiline\n          label='Critical CSS'\n          style={{ color: '#ffffff', backgroundColor: '#000000' }}\n          placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n          defaultValue={reportSettingStore.reportBody?.analyte?.criticalCSS}\n          onChange={criticalCSS => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                criticalCSS,\n              },\n            });\n          }}\n        />\n        <Form.Toggle\n          isToggleLabel={false}\n          label='Critical'\n          className='w-2/6'\n          value={reportSettingStore.reportBody?.analyte?.isCritical}\n          onChange={isCritical => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                isCritical,\n              },\n            });\n          }}\n        />\n      </div>\n\n      <div className='flex flex-row flex-auto object-fill gap-2'>\n        <CSSMultiline\n          label='Lo Nor CSS'\n          style={{ color: '#ffffff', backgroundColor: '#000000' }}\n          placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n          defaultValue={reportSettingStore.reportBody?.analyte?.loNorCSS}\n          onChange={loNorCSS => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                loNorCSS,\n              },\n            });\n          }}\n        />\n        <Form.Toggle\n          isToggleLabel={false}\n          label='Lo Nor'\n          className='w-2/6'\n          value={reportSettingStore.reportBody?.analyte?.isLoNor}\n          onChange={isLoNor => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                isLoNor,\n              },\n            });\n          }}\n        />\n      </div>\n\n      <div className='flex flex-row flex-auto object-fill gap-2'>\n        <CSSMultiline\n          label='Hi Nor CSS'\n          style={{ color: '#ffffff', backgroundColor: '#000000' }}\n          placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n          defaultValue={reportSettingStore.reportBody?.analyte?.hiNorCSS}\n          onChange={hiNorCSS => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                hiNorCSS,\n              },\n            });\n          }}\n        />\n        <Form.Toggle\n          isToggleLabel={false}\n          label='Hi Nor'\n          className='w-2/6'\n          value={reportSettingStore.reportBody?.analyte?.isHiNor}\n          onChange={isHiNor => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                isHiNor,\n              },\n            });\n          }}\n        />\n      </div>\n\n      <div className='flex flex-row flex-auto object-fill gap-2'>\n        <CSSMultiline\n          label='Result Status CSS'\n          style={{ color: '#ffffff', backgroundColor: '#000000' }}\n          placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n          defaultValue={reportSettingStore.reportBody?.analyte?.resultStatusCSS}\n          onChange={resultStatusCSS => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                resultStatusCSS,\n              },\n            });\n          }}\n        />\n        <Form.Toggle\n          isToggleLabel={false}\n          label='Result Status'\n          className='w-2/6'\n          value={reportSettingStore.reportBody?.analyte?.isResultStatus}\n          onChange={isResultStatus => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                isResultStatus,\n              },\n            });\n          }}\n        />\n      </div>\n\n      <div className='flex flex-row flex-auto object-fill gap-2'>\n        <CSSMultiline\n          label='Method CSS'\n          style={{ color: '#ffffff', backgroundColor: '#000000' }}\n          placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n          defaultValue={reportSettingStore.reportBody?.analyte?.methodCSS}\n          onChange={methodCSS => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                methodCSS,\n              },\n            });\n          }}\n        />\n        <Form.Toggle\n          isToggleLabel={false}\n          label='Method'\n          className='w-2/6'\n          value={reportSettingStore.reportBody?.analyte?.isMethod}\n          onChange={isMethod => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                isMethod,\n              },\n            });\n          }}\n        />\n      </div>\n\n      <div className='flex flex-row flex-auto object-fill gap-2'>\n        <CSSMultiline\n          label='Reportable CSS'\n          style={{ color: '#ffffff', backgroundColor: '#000000' }}\n          placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n          defaultValue={reportSettingStore.reportBody?.analyte?.reportableCSS}\n          onChange={reportableCSS => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                reportableCSS,\n              },\n            });\n          }}\n        />\n        <Form.Toggle\n          isToggleLabel={false}\n          label='Reportable'\n          className='w-2/6'\n          value={reportSettingStore.reportBody?.analyte?.isReportable}\n          onChange={isReportable => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                isReportable,\n              },\n            });\n          }}\n        />\n      </div>\n\n      <div className='flex flex-row flex-auto object-fill gap-2'>\n        <CSSMultiline\n          label='Interpretation CSS'\n          style={{ color: '#ffffff', backgroundColor: '#000000' }}\n          placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n          defaultValue={\n            reportSettingStore.reportBody?.analyte?.interpretationCSS\n          }\n          onChange={interpretationCSS => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                interpretationCSS,\n              },\n            });\n          }}\n        />\n        <Form.Toggle\n          isToggleLabel={false}\n          label='Interpretation'\n          className='w-2/6'\n          value={reportSettingStore.reportBody?.analyte?.isInterpretation}\n          onChange={isInterpretation => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                isInterpretation,\n              },\n            });\n          }}\n        />\n      </div>\n\n      <div className='flex flex-row flex-auto object-fill gap-2'>\n        <CSSMultiline\n          label='Conclusion CSS'\n          style={{ color: '#ffffff', backgroundColor: '#000000' }}\n          placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n          defaultValue={reportSettingStore.reportBody?.analyte?.conclusionCSS}\n          onChange={conclusionCSS => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                conclusionCSS,\n              },\n            });\n          }}\n        />\n        <Form.Toggle\n          isToggleLabel={false}\n          label='Conclusion'\n          className='w-2/6'\n          value={reportSettingStore.reportBody?.analyte?.isConclusion}\n          onChange={isConclusion => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                isConclusion,\n              },\n            });\n          }}\n        />\n      </div>\n\n      <div className='flex flex-row flex-auto object-fill gap-2'>\n        <CSSMultiline\n          label='Print Analyte Interpretation CSS'\n          style={{ color: '#ffffff', backgroundColor: '#000000' }}\n          placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n          defaultValue={\n            reportSettingStore.reportBody?.analyte\n              ?.printAnalyteInterpretationCSS\n          }\n          onChange={printAnalyteInterpretationCSS => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                printAnalyteInterpretationCSS,\n              },\n            });\n          }}\n        />\n        <Form.Toggle\n          isToggleLabel={false}\n          label='Print Analyte Interpretation'\n          className='w-2/6'\n          value={\n            reportSettingStore.reportBody?.analyte?.isPrintAnalyteInterpretation\n          }\n          onChange={isPrintAnalyteInterpretation => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                isPrintAnalyteInterpretation,\n              },\n            });\n          }}\n        />\n      </div>\n    </List>\n  );\n});\n","import React from 'react';\nimport { observer } from 'mobx-react';\nimport { TableBootstrap, Tooltip, Icons } from '@/library/components';\nimport { Confirm } from '@/library/models';\nimport { AutoCompletePageBrandingCode } from '../..';\n\ninterface ReportBodyListProps {\n  data: any;\n  totalSize: number;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  onDelete?: (selectedItem: Confirm) => void;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (fields: any, id: string) => void;\n  onPageSizeChange?: (page: number, totalSize: number) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n  onPdfPreview?: (selectedItem: any) => void;\n  setIsInputView: any;\n  isInputView: boolean;\n}\n\nlet sectionSetting;\nlet version;\nlet environment;\nlet companyCode;\n\nexport const ReportBodyList = observer((props: ReportBodyListProps) => {\n  return (\n    <>\n      <div style={{ position: 'relative' }}>\n        <TableBootstrap\n          id='_id'\n          data={props.data}\n          totalSize={props.totalSize}\n          isHideForm={props.isInputView}\n          setHideForm={props.setIsInputView}\n          columns={[\n            {\n              dataField: '_id',\n              text: 'Id',\n              hidden: true,\n              csvExport: false,\n            },\n            {\n              dataField: 'pageBrandingCode',\n              text: 'Page Branding',\n              headerClasses: 'textHeader',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  <AutoCompletePageBrandingCode\n                    hasError={false}\n                    onSelect={item => {\n                      props.onUpdateItem &&\n                        props.onUpdateItem(\n                          { pageBrandingCode: item.tempCode },\n                          row._id,\n                        );\n                    }}\n                  />\n                </>\n              ),\n            },\n            {\n              dataField: 'reportCode',\n              text: 'Report Code',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'reportName',\n              text: 'Report Name',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'general',\n              text: 'General',\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <span>\n                      {row?.general ? JSON.stringify(row?.general) : ''}\n                    </span>\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'panel',\n              text: 'Panel',\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <span>{row?.panel ? JSON.stringify(row?.panel) : ''}</span>\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'test',\n              text: 'Test',\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <span>{row?.test ? JSON.stringify(row?.test) : ''}</span>\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'analyte',\n              text: 'Analyte',\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <span>\n                      {row?.analyte ? JSON.stringify(row?.analyte) : ''}\n                    </span>\n                  </>\n                );\n              },\n            },\n            {\n              text: 'Company Code',\n              dataField: 'companyCode',\n              sort: true,\n              editable: false,\n              csvFormatter: col => (col ? col : ''),\n              headerClasses: 'textHeader2',\n            },\n            {\n              text: 'Environment',\n              dataField: 'environment',\n              editable: false,\n              sort: true,\n              csvFormatter: col => (col ? col : ''),\n            },\n            {\n              dataField: 'operation',\n              text: 'Action',\n              editable: false,\n              csvExport: false,\n              // hidden: !props.isDelete,\n              formatter: (cellContent, row) => (\n                <>\n                  <div className='flex flex-row'>\n                    <Tooltip tooltipText='Preview'>\n                      <Icons.IconContext\n                        color='#fff'\n                        size='20'\n                        onClick={() =>\n                          props.onPdfPreview && props.onPdfPreview(row)\n                        }\n                      >\n                        {Icons.getIconTag(Icons.IconIm.ImFilePdf)}\n                      </Icons.IconContext>\n                    </Tooltip>\n                    <Tooltip tooltipText='Delete'>\n                      <Icons.IconContext\n                        color='#fff'\n                        size='20'\n                        onClick={() =>\n                          props.onDelete &&\n                          props.onDelete({\n                            type: 'delete',\n                            show: true,\n                            id: [row._id],\n                            title: 'Are you sure?',\n                            body: 'Do you want to delete this record?',\n                          })\n                        }\n                      >\n                        {Icons.getIconTag(Icons.IconBs.BsFillTrashFill)}\n                      </Icons.IconContext>\n                    </Tooltip>\n                  </div>\n                </>\n              ),\n              headerClasses: 'sticky right-0  bg-gray-500 text-white z-50',\n              classes: (cell, row, rowIndex, colIndex) => {\n                return 'sticky right-0 bg-gray-500';\n              },\n              style: (cell, row, rowIndex, colIndex) => {\n                return {\n                  zIndex: props.data?.length - rowIndex,\n                };\n              },\n            },\n          ]}\n          isEditModify={props.isEditModify}\n          isSelectRow={true}\n          fileName='Page Branding'\n          onSelectedRow={rows => {\n            props.onSelectedRow &&\n              props.onSelectedRow(rows.map((item: any) => item._id));\n          }}\n          // onUpdateItem={(value: any, dataField: string, id: string) => {\n          //   props.onUpdateItem &&\n          //     props.onUpdateItem({'header.title': value}, id);\n          // }}\n          onPageSizeChange={(page, size) => {\n            props.onPageSizeChange && props.onPageSizeChange(page, size);\n          }}\n          onFilter={(type, filter, page, size) => {\n            props.onFilter && props.onFilter(type, filter, page, size);\n          }}\n          clearAllFilter={() => {\n            sectionSetting('');\n            version('');\n            environment('');\n            companyCode('');\n          }}\n          dynamicStylingFields={[\n            'pageBrandingCode',\n            'reportCode',\n            'reportName',\n          ]}\n          hideExcelSheet={['_id', 'operation']}\n        />\n      </div>\n    </>\n  );\n});\n","import React from 'react';\nimport {observer} from 'mobx-react';\nimport {AutoCompleteFilterSingleSelectMultiFieldsDisplay} from '@/library/components';\nimport {useStores} from '@/stores';\n\ninterface AutoCompletePageBrandingCodeProps {\n  hasError?: boolean;\n  onSelect: (item) => void;\n}\n\nexport const AutoCompletePageBrandingCode = observer(\n  ({hasError = false, onSelect}: AutoCompletePageBrandingCodeProps) => {\n    const {loading, routerStore, reportSettingStore} = useStores();\n    return (\n      <>\n        <AutoCompleteFilterSingleSelectMultiFieldsDisplay\n          loader={loading}\n          placeholder='Page Branding Code'\n          data={{\n            list: reportSettingStore.pageBrandingList,\n            displayKey: ['tempCode', 'brandingTitle'],\n          }}\n          hasError={hasError}\n          onFilter={(value: string) => {\n            // reportSettingStore.updateReportSectionList(\n            //   reportSettingStore.reportSectionListCopy.filter(item =>\n            //     item.section\n            //       .toString()\n            //       .toLowerCase()\n            //       .includes(value.toLowerCase()),\n            //   ),\n            // );\n          }}\n          onSelect={item => {\n            onSelect(item);\n          }}\n        />\n      </>\n    );\n  },\n);\n","import React from 'react';\nimport {AutoCompleteFilterSingleSelectMultiFieldsDisplay} from '@/library/components';\nimport {observer} from 'mobx-react';\nimport {useStores} from '@/stores';\n\ninterface ReportBodyComponentsProps {\n  displayValue?: string;\n  onSelect: (item) => void;\n}\n\nexport const ReportBodyComponents = observer(\n  ({onSelect, displayValue}: ReportBodyComponentsProps) => {\n    const {loading, reportSettingStore} = useStores();\n    return (\n      <div>\n        <AutoCompleteFilterSingleSelectMultiFieldsDisplay\n          displayValue={displayValue}\n          loader={loading}\n          placeholder='Report Body'\n          data={{\n            list: reportSettingStore.reportBodyList,\n            displayKey: ['reportCode', 'reportName'],\n          }}\n          onFilter={(value: string) => {\n            // reportSettingStore.pageBrandingService.filterByFields({\n            //   input: {\n            //     filter: {\n            //       fields: ['reportCode', 'reportName'],\n            //       srText: value,\n            //     },\n            //     page: 0,\n            //     limit: 10,\n            //   },\n            // });\n          }}\n          onSelect={item => {\n            onSelect && onSelect(item);\n          }}\n        />\n      </div>\n    );\n  },\n);\n","import React from 'react';\nimport _ from 'lodash';\nimport {observer} from 'mobx-react';\nimport {AutoCompleteFilterMutiSelectMultiFieldsDisplay} from '@/library/components';\nimport {useStores} from '@/stores';\n\ninterface EndOfPageComponentsProps {\n  onSelect: (item: any) => void;\n}\n\nexport const EndOfPageComponents = observer(\n  ({onSelect}: EndOfPageComponentsProps) => {\n    const {loading, routerStore, reportSettingStore, libraryStore} =\n      useStores();\n    return (\n      <div>\n        <AutoCompleteFilterMutiSelectMultiFieldsDisplay\n          loader={loading}\n          placeholder='Search by code or details'\n          data={{\n            list: libraryStore.listLibrary,\n            selected:\n              reportSettingStore.selectedItemTemplatePatientResult?.endOfPage,\n            displayKey: ['code', 'details'],\n          }}\n          onUpdate={item => {\n            const endOfPage =\n              reportSettingStore.selectedItemTemplatePatientResult?.endOfPage;\n            onSelect &&\n              onSelect(\n                _.map(endOfPage, o => _.pick(o, ['_id', 'code', 'details'])),\n              );\n            libraryStore.updateLibraryList(libraryStore.listLibraryCopy);\n          }}\n          onFilter={(value: string) => {\n            libraryStore.libraryService.filterByFields({\n              input: {\n                filter: {\n                  fields: ['code', 'details'],\n                  srText: value,\n                },\n                page: 0,\n                limit: 10,\n              },\n            });\n          }}\n          onSelect={item => {\n            let endOfPage =\n              reportSettingStore.selectedItemTemplatePatientResult?.endOfPage;\n            if (!item.selected) {\n              if (endOfPage && endOfPage.length > 0) {\n                endOfPage.push(item);\n              } else endOfPage = [item];\n            } else {\n              endOfPage = endOfPage.filter(items => {\n                return items._id !== item._id;\n              });\n            }\n            reportSettingStore.updateSelectedItemTemplatePatientResult({\n              ...reportSettingStore.selectedItemTemplatePatientResult,\n              endOfPage,\n            });\n          }}\n        />\n      </div>\n    );\n  },\n);\n","import React from 'react';\nimport _ from 'lodash';\nimport {observer} from 'mobx-react';\nimport {AutoCompleteFilterMutiSelectMultiFieldsDisplay} from '@/library/components';\nimport {useStores} from '@/stores';\n\ninterface EndOfReportComponentsProps {\n  onSelect: (item) => void;\n}\n\nexport const EndOfReportComponents = observer(\n  ({onSelect}: EndOfReportComponentsProps) => {\n    const {loading, reportSettingStore, libraryStore} = useStores();\n    return (\n      <div>\n        <AutoCompleteFilterMutiSelectMultiFieldsDisplay\n          loader={loading}\n          placeholder='Search by code or details'\n          data={{\n            list: libraryStore.listLibrary,\n            selected:\n              reportSettingStore.selectedItemTemplatePatientResult?.endOfReport,\n            displayKey: ['code', 'details'],\n          }}\n          onUpdate={item => {\n            const endOfReport =\n              reportSettingStore.selectedItemTemplatePatientResult?.endOfReport;\n            onSelect &&\n              onSelect(\n                _.map(endOfReport, o => _.pick(o, ['_id', 'code', 'details'])),\n              );\n            libraryStore.updateLibraryList(libraryStore.listLibraryCopy);\n          }}\n          onFilter={(value: string) => {\n            libraryStore.libraryService.filterByFields({\n              input: {\n                filter: {\n                  fields: ['code', 'details'],\n                  srText: value,\n                },\n                page: 0,\n                limit: 10,\n              },\n            });\n          }}\n          onSelect={item => {\n            let endOfReport =\n              reportSettingStore.selectedItemTemplatePatientResult?.endOfReport;\n            if (!item.selected) {\n              if (endOfReport && endOfReport.length > 0) {\n                endOfReport.push(item);\n              } else endOfReport = [item];\n            } else {\n              endOfReport = endOfReport.filter(items => {\n                return items._id !== item._id;\n              });\n            }\n            reportSettingStore.updateSelectedItemTemplatePatientResult({\n              ...reportSettingStore.selectedItemTemplatePatientResult,\n              endOfReport,\n            });\n          }}\n        />\n      </div>\n    );\n  },\n);\n","import React from 'react';\nimport { observer } from 'mobx-react';\nimport {\n  Type,\n  TableBootstrap,\n  Tooltip,\n  Icons,\n  Form,\n} from '@/library/components';\nimport { ReportBodyComponents } from './report-body.components';\nimport { EndOfPageComponents } from './end-of-page.components';\nimport { EndOfReportComponents } from './end-of-report.components';\nimport { Confirm } from '@/library/models';\n\ninterface TemplatePatientResultProps {\n  data: any;\n  totalSize: number;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  onDelete?: (selectedItem: Confirm) => void;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (fields: any, id: string) => void;\n  onPageSizeChange?: (page: number, totalSize: number) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n  onPdfPreview?: (selectedItem: any) => void;\n  setIsInputView: any;\n  isInputView: boolean;\n}\n\nlet sectionSetting;\nlet version;\nlet environment;\nlet companyCode;\n\nexport const TemplatePatientResultList = observer(\n  (props: TemplatePatientResultProps) => {\n    return (\n      <>\n        <div style={{ position: 'relative' }}>\n          <TableBootstrap\n            id='_id'\n            data={props.data}\n            totalSize={props.totalSize}\n            isHideForm={props.isInputView}\n            setHideForm={props.setIsInputView}\n            columns={[\n              {\n                dataField: '_id',\n                text: 'Id',\n                hidden: true,\n                csvExport: false,\n              },\n              {\n                dataField: 'reportTemplateType',\n                text: 'Report Template Type',\n                headerClasses: 'textHeader',\n                sort: true,\n                editorRenderer: (\n                  editorProps,\n                  value,\n                  row,\n                  column,\n                  rowIndex,\n                  columnIndex,\n                ) => (\n                  <>\n                    <select\n                      className={\n                        'leading-4 p-2 focus:outline-none focus:ring block w-full shadow-sm sm:text-base border-2  border-gray-300 rounded-md'\n                      }\n                      onChange={e => {\n                        const reportTemplateType = e.target.value;\n                        props.onUpdateItem &&\n                          props.onUpdateItem({ reportTemplateType }, row._id);\n                      }}\n                    >\n                      <option selected>Select</option>\n                      {['Lab Wise', 'Client Wise', 'Doctor Wise'].map(\n                        (item: any, index: number) => (\n                          <option key={index} value={item}>\n                            {item}\n                          </option>\n                        ),\n                      )}\n                    </select>\n                  </>\n                ),\n              },\n              {\n                dataField: 'reportBody',\n                text: 'Report Body',\n                headerClasses: 'textHeader',\n                sort: true,\n                formatter: (cell, row) => {\n                  return (\n                    <>\n                      {row?.reportBody?.reportCode +\n                        '-' +\n                        row?.reportBody?.reportName}\n                    </>\n                  );\n                },\n                editorRenderer: (\n                  editorProps,\n                  value,\n                  row,\n                  column,\n                  rowIndex,\n                  columnIndex,\n                ) => (\n                  <>\n                    <ReportBodyComponents\n                      onSelect={item => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            {\n                              reportBody: {\n                                _id: item?._id,\n                                reportCode: item?.reportCode,\n                                reportName: item?.reportName,\n                              },\n                            },\n                            row._id,\n                          );\n                      }}\n                    />\n                  </>\n                ),\n              },\n              {\n                dataField: 'templateCode',\n                text: 'Template code',\n                headerClasses: 'textHeader',\n                sort: true,\n              },\n              {\n                dataField: 'templateTitle',\n                text: 'Template title',\n                headerClasses: 'textHeader',\n                sort: true,\n                editor: {\n                  type: Type.TEXTAREA,\n                },\n              },\n              {\n                dataField: 'reportOrder',\n                text: 'Report Order',\n                headerClasses: 'textHeader',\n                sort: true,\n                editorRenderer: (\n                  editorProps,\n                  value,\n                  row,\n                  column,\n                  rowIndex,\n                  columnIndex,\n                ) => (\n                  <>\n                    <Form.Input\n                      type='number'\n                      onBlur={reportOrder => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            {\n                              reportOrder: Number.parseInt(reportOrder),\n                            },\n                            row._id,\n                          );\n                      }}\n                    />\n                  </>\n                ),\n              },\n              {\n                dataField: 'endOfPage',\n                text: 'End Of Page',\n                headerClasses: 'textHeader',\n                sort: true,\n                formatter: (cell, row) => {\n                  return (\n                    <>\n                      {row?.endOfPage?.map(item => (\n                        <p>{` ${item?.details}`}</p>\n                      ))}\n                    </>\n                  );\n                },\n                editorRenderer: (\n                  editorProps,\n                  value,\n                  row,\n                  column,\n                  rowIndex,\n                  columnIndex,\n                ) => (\n                  <>\n                    <EndOfPageComponents\n                      onSelect={item => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            {\n                              endOfPage: item,\n                            },\n                            row._id,\n                          );\n                      }}\n                    />\n                  </>\n                ),\n              },\n              {\n                dataField: 'endOfReport',\n                text: 'End Of Report',\n                headerClasses: 'textHeader',\n                sort: true,\n                formatter: (cell, row) => {\n                  return (\n                    <>\n                      {row?.endOfReport?.map(item => (\n                        <p>{` ${item?.details}`}</p>\n                      ))}\n                    </>\n                  );\n                },\n                editorRenderer: (\n                  editorProps,\n                  value,\n                  row,\n                  column,\n                  rowIndex,\n                  columnIndex,\n                ) => (\n                  <>\n                    <EndOfReportComponents\n                      onSelect={item => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            {\n                              endOfReport: item,\n                            },\n                            row._id,\n                          );\n                      }}\n                    />\n                  </>\n                ),\n              },\n              {\n                text: 'Company Code',\n                dataField: 'companyCode',\n                sort: true,\n                editable: false,\n                csvFormatter: col => (col ? col : ''),\n              },\n              {\n                text: 'Environment',\n                dataField: 'environment',\n                editable: false,\n                sort: true,\n                csvFormatter: col => (col ? col : ''),\n              },\n              {\n                dataField: 'operation',\n                text: 'Action',\n                editable: false,\n                csvExport: false,\n                // hidden: !props.isDelete,\n                formatter: (cellContent, row) => (\n                  <>\n                    <div className='flex flex-row'>\n                      <Tooltip tooltipText='Delete' position='bottom'>\n                        <Icons.IconContext\n                          color='#fff'\n                          size='20'\n                          onClick={() =>\n                            props.onDelete &&\n                            props.onDelete({\n                              type: 'delete',\n                              show: true,\n                              id: [row._id],\n                              title: 'Are you sure?',\n                              body: 'Do you want to delete this record?',\n                            })\n                          }\n                        >\n                          {Icons.getIconTag(Icons.IconBs.BsFillTrashFill)}\n                        </Icons.IconContext>\n                      </Tooltip>\n                    </div>\n                  </>\n                ),\n                headerClasses: 'sticky right-0  bg-gray-500 text-white z-50',\n                classes: (cell, row, rowIndex, colIndex) => {\n                  return 'sticky right-0 bg-gray-500';\n                },\n                style: (cell, row, rowIndex, colIndex) => {\n                  return {\n                    zIndex: props.data?.length - rowIndex,\n                  };\n                },\n              },\n            ]}\n            isEditModify={props.isEditModify}\n            isSelectRow={true}\n            fileName='Template Patient Result'\n            onSelectedRow={rows => {\n              props.onSelectedRow &&\n                props.onSelectedRow(rows.map((item: any) => item._id));\n            }}\n            onPageSizeChange={(page, size) => {\n              props.onPageSizeChange && props.onPageSizeChange(page, size);\n            }}\n            onFilter={(type, filter, page, size) => {\n              props.onFilter && props.onFilter(type, filter, page, size);\n            }}\n            onUpdateItem={(value: any, dataField: string, id: string) => {\n              props.onUpdateItem &&\n                props.onUpdateItem({ [dataField]: value }, id);\n            }}\n            clearAllFilter={() => {\n              sectionSetting('');\n              version('');\n              environment('');\n            }}\n          />\n        </div>\n      </>\n    );\n  },\n);\n","import React, { useEffect, useState, useRef } from 'react';\nimport _ from 'lodash';\nimport { Form } from '@/library/components';\nimport { properties as propertiesObj } from './css-properties';\ninterface CSSMultilineProps {\n  label?: string;\n  defaultValue?: string;\n  placeholder?: string;\n  className?: string;\n  style?: any;\n  onChange(item): void;\n}\nconst mapToArray = (arr: any) => {\n  const res: any = [];\n  arr.forEach(function (obj, index) {\n    const key = Object.keys(obj)[0];\n    const value = key;\n    res.push([value, obj[key]]);\n  });\n  return res;\n};\nconst data = mapToArray(propertiesObj);\nexport const CSSMultiline = ({\n  label = 'Main Box CSS',\n  defaultValue = '',\n  className = '',\n  style = {},\n  placeholder = \"Like fontSize: 12,backgroundColor:'#000000',\",\n  onChange,\n}: CSSMultilineProps) => {\n  const value = useRef('');\n  const [properties, setProperties] = useState<Array<any>>([]);\n  const [isListOpen, setIsListOpen] = useState<boolean>(false);\n  useEffect(() => {\n    value.current = defaultValue;\n    setProperties(data);\n  }, [defaultValue]);\n  const useOutsideAlerter = ref => {\n    useEffect(() => {\n      function handleClickOutside(event) {\n        if (ref.current && !ref.current.contains(event.target)) {\n          setIsListOpen(false);\n          onChange(value.current);\n        }\n      }\n      document.addEventListener('mousedown', handleClickOutside);\n      return () => {\n        document.removeEventListener('mousedown', handleClickOutside);\n      };\n    }, [ref]);\n  };\n\n  const wrapperRef = useRef(null);\n  useOutsideAlerter(wrapperRef);\n\n  const list: Array<any> = [];\n  const filter = (css: string) => {\n    let matchString: any = css?.split(',');\n    matchString = matchString[matchString?.length - 1];\n    matchString = matchString?.split(':')[0];\n    matchString = matchString?.split(\"'\")[0];\n    if (css?.length == 0) return setProperties(data);\n    else {\n      data?.map(item => {\n        const innerItem: Array<any> = [];\n        const isItems = item[0]?.startsWith(matchString);\n        if (isItems) innerItem.push(item[0]);\n        if (innerItem?.length > 0) list.push([item[0], item[1]]);\n      });\n      setProperties(list);\n    }\n  };\n\n  const onKeyUp = e => {\n    setIsListOpen(true);\n  };\n\n  return (\n    <div className='flex flex-col w-full' ref={wrapperRef}>\n      <Form.MultilineInput\n        label={label}\n        style={{ color: '#ffffff', backgroundColor: '#000000', ...style }}\n        placeholder={placeholder}\n        value={value.current}\n        className={className}\n        onKeyUp={onKeyUp}\n        onChange={css => {\n          value.current = css;\n          filter(css);\n        }}\n      />\n      {isListOpen && (\n        <div style={{ marginTop: -10 }}>\n          <ul className='flex flex-col max-h-40 bg-black  m-2 text-white  overflow-y-scroll  '>\n            {properties?.map((item, index) => (\n              <li key={index} className='flex flex-col gap-4 p-2'>\n                <span className='underline'>{item[0]}</span>\n                {item[1]?.map(prop => (\n                  <li\n                    className='flex -mt-2 px-2 h-8 bg-slate-800  rounded-md items-center cursor-pointer'\n                    onClick={() => {\n                      let existsString: any = value.current?.split(',');\n                      if (value.current.includes(',')) {\n                        existsString = existsString.map(item => {\n                          if (item?.includes(':')) return item;\n                        });\n                        if (prop != 'number')\n                          existsString.push(`${item[0]}:'${prop}',`);\n                        else existsString.push(`${item[0]}:1,`);\n                        value.current = existsString\n                          .join(',')\n                          .replaceAll(',,', ',');\n                      } else {\n                        if (prop != 'number')\n                          value.current = `${item[0]}:'${prop}',`;\n                        else {\n                          value.current = `${item[0]}:1,`;\n                        }\n                      }\n                      filter(existsString.join(''));\n                    }}\n                  >\n                    {' '}\n                    {prop}{' '}\n                  </li>\n                ))}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable no-sparse-arrays */\nexport const properties = [\n  {\n    alignContent: [\n      'flex-start',\n      'flex-end',\n      'center',\n      'stretch',\n      'space-between',\n      'space-around',\n    ],\n  },\n  { alignItems: ['flex-start', 'flex-end', 'center', 'stretch', 'baseline'] },\n  {\n    alignSelf: [\n      'auto',\n      'flex-start',\n      'flex-end',\n      'center',\n      'baseline',\n      'stretch',\n    ],\n  },\n  { flex: ['number', 'string'] },\n  { flexDirection: ['row', 'row-reverse', 'column', 'column-reverse'] },\n  { flexWrap: ['nowrap', 'wrap', 'wrap-reverse'] },\n  { flexFlow: ['number'] },\n  { flexGrow: ['number'] },\n  { flexShrink: ['number'] },\n  { flexBasis: ['number', 'string'] },\n  {\n    justifyContent: [\n      ,\n      'flex-start',\n      'flex-end',\n      'center',\n      'space-around',\n      'space-between',\n      'space-evenly',\n    ],\n  },\n  { gap: ['number', 'string'] },\n  { rowGap: ['number'] },\n  { columnGap: ['number'] },\n\n  // Layout\n\n  { aspectRatio: ['number', 'string'] },\n  { bottom: ['number', 'string'] },\n  { display: ['flex', 'none'] },\n  { left: ['number', 'string'] },\n  { position: ['absolute', 'relative'] },\n  { right: ['number', 'string'] },\n  { top: ['number', 'string'] },\n  { overflow: ['hidden'] },\n  { zIndex: ['number', 'string'] },\n\n  // Dimension\n\n  { height: ['number', 'string'] },\n  { maxHeight: ['number', 'string'] },\n  { maxWidth: ['number', 'string'] },\n  { minHeight: ['number', 'string'] },\n  { minWidth: ['number', 'string'] },\n  { width: ['number', 'string'] },\n\n  // Color\n\n  { backgroundColor: ['string'] },\n  { color: ['string'] },\n  { opacity: ['number'] },\n\n  // Text\n\n  { fontSize: ['number', 'string'] },\n  { fontFamily: ['string'] },\n  { fontStyle: ['string', 'normal'] },\n  {\n    fontWeight: [\n      ,\n      'number',\n      'thin',\n      'hairline',\n      'ultralight',\n      'extralight',\n      'light',\n      'normal',\n      'medium',\n      'semibold',\n      'demibold',\n      'bold',\n      'ultrabold',\n      'extrabold',\n      'heavy',\n      'black',\n    ],\n  },\n  { letterSpacing: ['number', 'string'] },\n  { lineHeight: ['number', 'string'] },\n  { maxLines: ['number'] }, // ']\n  { textAlign: ['left', 'right', 'center', 'justify'] }, // ']\n  {\n    textDecoration: [\n      ,\n      'line-through',\n      'underline',\n      'none',\n      'line-through underline',\n      'underline line-through',\n    ],\n  },\n  { textDecorationColor: ['string'] },\n  { textDecorationStyle: ['dashed', 'dotted', 'solid', 'string'] }, // ']\n  { textIndent: ['any'] }, // ']\n  { textOverflow: ['ellipsis'] },\n  { textTransform: ['capitalize', 'lowercase', 'uppercase'] },\n  { verticalAlign: ['sub', 'super'] },\n\n  // Sizing/positioning\n\n  { objectFit: ['string'] },\n  { objectPosition: ['number', 'string'] },\n  { objectPositionX: ['number', 'string'] },\n  { objectPositionY: ['number', 'string'] },\n\n  // Margin/padding\n\n  { margin: ['number', 'string'] },\n  { marginHorizontal: ['number', 'string'] },\n  { marginVertical: ['number', 'string'] },\n  { marginTop: ['number', 'string'] },\n  { marginRight: ['number', 'string'] },\n  { marginBottom: ['number', 'string'] },\n  { marginLeft: ['number', 'string'] },\n  { padding: ['number', 'string'] },\n  { paddingHorizontal: ['number', 'string'] },\n  { paddingVertical: ['number', 'string'] },\n  { paddingTop: ['number', 'string'] },\n  { paddingRight: ['number', 'string'] },\n  { paddingBottom: ['number', 'string'] },\n  { paddingLeft: ['number', 'string'] },\n\n  // Transformations\n\n  { transform: ['string'] },\n  { transformOrigin: ['number', 'string'] },\n  { transformOriginX: ['number', 'string'] },\n  { transformOriginY: ['number', 'string'] },\n\n  // Borders\n\n  { border: ['number', 'string'] },\n  { borderWidth: ['number', 'string'] },\n  { borderColor: ['string'] },\n  { borderStyle: ['dashed', 'dotted', 'solid'] },\n  { borderTop: ['number', 'string'] },\n  { borderTopColor: ['string'] },\n  { borderTopStyle: ['dashed', 'dotted', 'solid'] }, // ']\n  { borderTopWidth: ['number', 'string'] },\n  { borderRight: ['number', 'string'] },\n  { borderRightColor: ['string'] },\n  { borderRightStyle: ['dashed', 'dotted', 'solid'] }, // ']\n  { borderRightWidth: ['number', 'string'] },\n  { borderBottom: ['number', 'string'] },\n  { borderBottomColor: ['string'] },\n  { borderBottomStyle: ['dashed', 'dotted', 'solid'] }, // ']\n  { borderBottomWidth: ['number', 'string'] },\n  { borderLeft: ['number', 'string'] },\n  { borderLeftColor: ['string'] },\n  { borderLeftStyle: ['dashed', 'dotted', 'solid'] }, // ']\n  { borderLeftWidth: ['number', 'string'] },\n  { borderTopLeftRadius: ['number', 'string'] },\n  { borderTopRightRadius: ['number', 'string'] },\n  { borderBottomRightRadius: ['number', 'string'] },\n  { borderBottomLeftRadius: ['number', 'string'] },\n  { borderRadius: ['number', 'string'] },\n];\n","import React, { useEffect, useState } from 'react';\nimport { observer } from 'mobx-react';\nimport {\n  Toast,\n  Buttons,\n  Grid,\n  List,\n  Form,\n  Svg,\n  ModalConfirm,\n  ModalView,\n  ModalViewProps,\n} from '@/library/components';\nimport { PDFViewer, Document } from '@react-pdf/renderer';\nimport {\n  PageBrandingList,\n  PageBrandingHeader,\n  PageBrandingSubHeader,\n  PageBrandingFooter,\n  PageNumber,\n  AutoCompleteLayoutCode,\n} from '../components';\nimport { useForm, Controller } from 'react-hook-form';\nimport { RouterFlow } from '@/flows';\nimport { useStores } from '@/stores';\nimport { PageBranding as PageBrandingModel } from '../models';\n\nimport { Accordion, AccordionItem } from 'react-sanfona';\nimport '@/library/assets/css/accordion.css';\n\nimport 'react-accessible-accordion/dist/fancy-example.css';\nimport '@/library/assets/css/accordion.css';\n\nimport { PdfPBTemp0001 } from '@features/report-builder/report-template/components/molecules/pdf/page-branding/temp0001/temp0001.component';\nimport { resetReportBody } from '../startup';\nconst width = '100%';\nconst height = window.innerHeight / 1.3;\n\nexport const PageBranding = observer(() => {\n  const { loading, routerStore, reportSettingStore } = useStores();\n  const {\n    control,\n    handleSubmit,\n    formState: { errors },\n    setValue,\n    setError,\n    clearErrors,\n    reset,\n  } = useForm();\n\n  const [modalConfirm, setModalConfirm] = useState<any>();\n  const [modalView, setModalView] = useState<ModalViewProps>();\n  const [isInputView, setIsInputView] = useState<boolean>(true);\n  const [isExistsTempCode, setIsExistsTempCode] = useState<boolean>(false);\n  const [isClearReset, setClearReset] = useState<boolean>(false);\n\n  useEffect(() => {\n    // Default value initialization\n    setValue('headerVisible', reportSettingStore.pageBranding?.isHeader);\n    setValue('subHeaderVisible', reportSettingStore.pageBranding?.isSubHeader);\n    setValue('footerVisible', reportSettingStore.pageBranding?.isFooter);\n    setValue('pageNumber', reportSettingStore.pageBranding?.isPdfPageNumber);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [reportSettingStore.pageBranding]);\n\n  const onSave = () => {\n    if (isExistsTempCode)\n      return Toast.error({\n        message: '😔 Already exists branding code. Please select diff.',\n      });\n    reportSettingStore.pageBrandingService\n      .addPageBranding({\n        input: {\n          ...reportSettingStore.pageBranding,\n          header: {\n            ...reportSettingStore.pageBranding?.header,\n            backgroundImageBase64: undefined,\n          },\n          footer: {\n            ...reportSettingStore.pageBranding?.footer,\n            backgroundImageBase64: undefined,\n          },\n        },\n      })\n      .then(res => {\n        if (res.createPageBranding.success) {\n          Toast.success({\n            message: `😊 ${res.createPageBranding.message}`,\n          });\n          setClearReset(true);\n          setIsInputView(false);\n          reset();\n          resetReportBody();\n          reportSettingStore.updatePageBranding({\n            ...reportSettingStore.pageBranding,\n            layoutCode: '',\n          });\n        }\n      });\n  };\n\n  const getTemplate = (tempCode: string, data: any) => {\n    if (tempCode)\n      return (\n        <PDFViewer\n          style={{ width: '100%', height: '100%' }}\n          showToolbar={reportSettingStore.pageLayout?.isToolbar}\n        >\n          <Document title='Page Branding'>\n            <PdfPBTemp0001\n              data={data}\n              templateSettings={data?.templateSettings}\n            />\n          </Document>\n        </PDFViewer>\n      );\n    else {\n      return (\n        <div className='justify-center items-center'>\n          <h4 className='text-center text-red'>\n            Template not found. Please select correct temp code. 🚨\n          </h4>\n        </div>\n      );\n    }\n  };\n\n  const getAccordionItem = (pageBranding: PageBrandingModel) => {\n    const accordionItem: Array<any> = [];\n    if (pageBranding.isHeader) accordionItem.push({ title: 'Header' });\n    if (pageBranding.isSubHeader) accordionItem.push({ title: 'Sub Header' });\n    if (pageBranding.isFooter) accordionItem.push({ title: 'Footer' });\n    if (pageBranding.isPdfPageNumber)\n      accordionItem.push({ title: 'Page Number' });\n    return accordionItem;\n  };\n\n  return (\n    <>\n      <div\n        className='flex justify-end'\n        style={{ position: 'absolute', right: '42px', top: '10px', zIndex: 1 }}\n      >\n        {RouterFlow.checkPermission(routerStore.userPermission, 'Add') && (\n          <Buttons.ButtonCircleAddRemoveBottom\n            show={isInputView}\n            onClick={() => setIsInputView(!isInputView)}\n          />\n        )}\n      </div>\n\n      <div className='mx-auto flex-wrap'>\n        <div\n          className={\n            'rounded-lg shadow-xl p-2 ' + (isInputView ? 'hidden' : 'shown')\n          }\n        >\n          <Grid cols={2}>\n            <List direction='col' space={4} justify='stretch' fill>\n              <Controller\n                control={control}\n                render={({ field: { onChange, value } }) => (\n                  <AutoCompleteLayoutCode\n                    displayValue={value ?? ''}\n                    hasError={!!errors.layoutCode}\n                    onSelect={item => {\n                      onChange(item.tempCode);\n                      reportSettingStore.updatePageBranding({\n                        ...reportSettingStore.pageBranding,\n                        layoutCode: item.tempCode,\n                      });\n                    }}\n                  />\n                )}\n                name='layoutCode'\n                rules={{ required: true }}\n                defaultValue={''}\n              />\n              <Controller\n                control={control}\n                render={({ field: { onChange, value } }) => (\n                  <Form.Input\n                    label='Branding Code'\n                    placeholder='Branding Code'\n                    hasError={!!errors.brandingCode}\n                    value={value?.toUpperCase()}\n                    onChange={tempCode => {\n                      onChange(tempCode);\n                      reportSettingStore.updatePageBranding({\n                        ...reportSettingStore.pageBranding,\n                        tempCode: tempCode?.toUpperCase(),\n                      });\n                    }}\n                    onBlur={tempCode => {\n                      reportSettingStore.pageBrandingService\n                        .findByFields({\n                          input: {\n                            filter: {\n                              tempCode,\n                            },\n                          },\n                        })\n                        .then(res => {\n                          if (res.findByFieldsPageBranding.success) {\n                            setError('tempCode', { type: 'onBlur' });\n                            Toast.error({\n                              message:\n                                '😔 Already exists temp code. Please select diff.',\n                            });\n                            return setIsExistsTempCode(true);\n                          } else {\n                            clearErrors('tempCode');\n                            return setIsExistsTempCode(false);\n                          }\n                        });\n                    }}\n                  />\n                )}\n                name='brandingCode'\n                rules={{ required: true }}\n                defaultValue=''\n              />\n              <Controller\n                control={control}\n                render={({ field: { onChange, value } }) => (\n                  <Form.Input\n                    label='Branding Title'\n                    placeholder='Branding Title'\n                    hasError={!!errors.brandingTitle}\n                    value={value?.toUpperCase()}\n                    onChange={brandingTitle => {\n                      onChange(brandingTitle);\n                      reportSettingStore.updatePageBranding({\n                        ...reportSettingStore.pageBranding,\n                        brandingTitle: brandingTitle?.toUpperCase(),\n                      });\n                    }}\n                  />\n                )}\n                name='brandingTitle'\n                rules={{ required: true }}\n                defaultValue=''\n              />\n\n              <Grid cols={4}>\n                <Controller\n                  control={control}\n                  render={({ field: { onChange, value } }) => (\n                    <Form.Toggle\n                      label='Header Visible'\n                      hasError={!!errors.headerVisible}\n                      value={value}\n                      onChange={isHeader => {\n                        onChange(isHeader);\n                        reportSettingStore.updatePageBranding({\n                          ...reportSettingStore.pageBranding,\n                          isHeader,\n                        });\n                      }}\n                    />\n                  )}\n                  name='headerVisible'\n                  rules={{ required: false }}\n                  defaultValue=''\n                />\n                <Controller\n                  control={control}\n                  render={({ field: { onChange, value } }) => (\n                    <Form.Toggle\n                      label='Sub Header Visible'\n                      hasError={!!errors.subHeaderVisible}\n                      value={value}\n                      onChange={isSubHeader => {\n                        onChange(isSubHeader);\n                        reportSettingStore.updatePageBranding({\n                          ...reportSettingStore.pageBranding,\n                          isSubHeader,\n                        });\n                      }}\n                    />\n                  )}\n                  name='subHeaderVisible'\n                  rules={{ required: false }}\n                  defaultValue=''\n                />\n                <Controller\n                  control={control}\n                  render={({ field: { onChange, value } }) => (\n                    <Form.Toggle\n                      label='Footer Visible'\n                      hasError={!!errors.footerVisible}\n                      value={value}\n                      onChange={isFooter => {\n                        onChange(isFooter);\n                        reportSettingStore.updatePageBranding({\n                          ...reportSettingStore.pageBranding,\n                          isFooter,\n                        });\n                      }}\n                    />\n                  )}\n                  name='footerVisible'\n                  rules={{ required: false }}\n                  defaultValue=''\n                />\n                <Controller\n                  control={control}\n                  render={({ field: { onChange, value } }) => (\n                    <Form.Toggle\n                      label='Page Number'\n                      hasError={!!errors.pageNumber}\n                      value={value}\n                      onChange={isPdfPageNumber => {\n                        onChange(isPdfPageNumber);\n                        reportSettingStore.updatePageBranding({\n                          ...reportSettingStore.pageBranding,\n                          isPdfPageNumber,\n                        });\n                      }}\n                    />\n                  )}\n                  name='pageNumber'\n                  rules={{ required: false }}\n                  defaultValue=''\n                />\n              </Grid>\n              <Accordion>\n                {getAccordionItem(reportSettingStore?.pageBranding).map(\n                  item => {\n                    return (\n                      <AccordionItem\n                        title={`${item.title}`}\n                        expanded={item.title === 'Header'}\n                      >\n                        {item.title === 'Header' && (\n                          <PageBrandingHeader isClearReset={isClearReset} />\n                        )}\n                        {item.title === 'Sub Header' && (\n                          <PageBrandingSubHeader isClearReset={isClearReset} />\n                        )}\n                        {item.title === 'Footer' && (\n                          <PageBrandingFooter isClearReset={isClearReset} />\n                        )}\n                        {item.title === 'Page Number' && (\n                          <PageNumber isClearReset={isClearReset} />\n                        )}\n                      </AccordionItem>\n                    );\n                  },\n                )}\n              </Accordion>\n            </List>\n            <List direction='col' space={4} justify='stretch' fill>\n              {getTemplate(\n                reportSettingStore.pageBranding?.layoutCode,\n                reportSettingStore.pageBranding,\n              )}\n            </List>\n          </Grid>\n          <br />\n          <List direction='row' space={3} align='center'>\n            <Buttons.Button\n              size='medium'\n              type='solid'\n              icon={Svg.Save}\n              onClick={handleSubmit(onSave)}\n            >\n              Save\n            </Buttons.Button>\n            <Buttons.Button\n              size='medium'\n              type='outline'\n              icon={Svg.Remove}\n              onClick={() => {\n                window.location.reload();\n              }}\n            >\n              Clear\n            </Buttons.Button>\n          </List>\n        </div>\n        <div\n          className='rounded-lg shadow-xl overflow-auto p-2'\n          style={{ overflowX: 'scroll' }}\n        >\n          <PageBrandingList\n            data={reportSettingStore.pageBrandingList}\n            totalSize={reportSettingStore.pageBrandingListCount}\n            isDelete={RouterFlow.checkPermission(\n              routerStore.userPermission,\n              'Delete',\n            )}\n            isEditModify={RouterFlow.checkPermission(\n              routerStore.userPermission,\n              'Update',\n            )}\n            onDelete={selectedItem => setModalConfirm(selectedItem)}\n            onSelectedRow={rows => {\n              setModalConfirm({\n                show: true,\n                type: 'delete',\n                id: rows,\n                title: 'Are you sure?',\n                body: 'Do you want to delete selected record?',\n              });\n            }}\n            onUpdateItem={(fields: any, id: string) => {\n              setModalConfirm({\n                show: true,\n                type: 'update',\n                data: { fields, id },\n                title: 'Are you sure?',\n                body: 'Do you want to update this record?',\n              });\n            }}\n            onPageSizeChange={(page, limit) => {\n              // bannerStore.fetchListBanner(page, limit);\n            }}\n            onFilter={(type, filter, page, limit) => {\n              // bannerStore.BannerService.filter({\n              //   input: {type, filter, page, limit},\n              // });\n            }}\n            onPdfPreview={item => {\n              reportSettingStore.pageLayoutService\n                .findByFields({\n                  input: {\n                    filter: {\n                      tempCode: item?.tempCode,\n                    },\n                  },\n                })\n                .then(res => {\n                  if (res.findByFieldsTemplateSetting.success) {\n                    setModalView({\n                      visible: true,\n                      children: (\n                        <>\n                          {getTemplate(item.tempCode, {\n                            ...item,\n                            templateSettings:\n                              res.findByFieldsTemplateSetting.data[0],\n                          })}\n                        </>\n                      ),\n                    });\n                  }\n                });\n            }}\n            setIsInputView={setIsInputView}\n            isInputView={isInputView}\n          />\n        </div>\n      </div>\n      <ModalConfirm\n        {...modalConfirm}\n        click={(type?: string) => {\n          switch (type) {\n            case 'delete': {\n              reportSettingStore.pageBrandingService\n                .removePageBranding({\n                  input: { id: modalConfirm.id },\n                })\n                .then((res: any) => {\n                  if (res.removePageBranding.success) {\n                    Toast.success({\n                      message: `😊 ${res.removePageBranding.message}`,\n                    });\n                    setModalConfirm({ show: false });\n                    reportSettingStore.pageBrandingService.listPageBranding();\n                  }\n                });\n              break;\n            }\n            case 'update': {\n              reportSettingStore.pageBrandingService\n                .update({\n                  input: {\n                    ...modalConfirm.data.fields,\n                    _id: modalConfirm.data.id,\n                  },\n                })\n                .then((res: any) => {\n                  setModalConfirm({ show: false });\n                  if (res.updatePageBranding.success) {\n                    Toast.success({\n                      message: `😊 ${res.updatePageBranding.message}`,\n                    });\n                    setTimeout(() => {\n                      window.location.reload();\n                    }, 2000);\n                  }\n                });\n              break;\n            }\n          }\n        }}\n        onClose={() => setModalConfirm({ show: false })}\n      />\n      <ModalView\n        {...modalView}\n        onClose={() => setModalView({ visible: false })}\n      />\n    </>\n  );\n});\n","import React, { useState } from 'react';\nimport { observer } from 'mobx-react';\nimport { PDFViewer, Document } from '@react-pdf/renderer';\nimport {\n  Toast,\n  Buttons,\n  Grid,\n  List,\n  Form,\n  Svg,\n  ModalConfirm,\n  PdfMedium,\n  ModalView,\n  ModalViewProps,\n} from '@/library/components';\nimport { PageLayoutList, CSSMultiline } from '../components';\nimport { useForm, Controller } from 'react-hook-form';\nimport { RouterFlow } from '@/flows';\nimport { useStores } from '@/stores';\n\nimport 'react-accessible-accordion/dist/fancy-example.css';\nimport '@/library/assets/css/accordion.css';\n\nimport { PdfTSTemp0001 } from '@/features/report-builder/report-template/components/molecules/pdf/page-layout/temp0001/temp0001.component';\nimport { resetReportBody } from '../startup';\n\nexport const PageLayout = observer(() => {\n  const { loading, routerStore, reportSettingStore } = useStores();\n  const {\n    control,\n    handleSubmit,\n    formState: { errors },\n    setValue,\n    setError,\n    clearErrors,\n    reset,\n  } = useForm();\n\n  const [modalConfirm, setModalConfirm] = useState<any>();\n  const [modalView, setModalView] = useState<ModalViewProps>();\n  const [isInputView, setIsInputView] = useState<boolean>(false);\n  const [isExistsTempCode, setIsExistsTempCode] = useState<boolean>(false);\n\n  const width = '100%';\n  const height = window.innerHeight / 1.3;\n  const onSave = () => {\n    if (isExistsTempCode)\n      return Toast.error({\n        message: '😔 Already exists temp code. Please enter diff.',\n      });\n    reportSettingStore.pageLayoutService\n      .addTemplateSetting({\n        input: { ...reportSettingStore.pageLayout },\n      })\n      .then(res => {\n        if (res.createTemplateSetting.success) {\n          Toast.success({\n            message: `😊 ${res.createTemplateSetting.message}`,\n          });\n          setIsInputView(true);\n          reset();\n          resetReportBody();\n          reportSettingStore.updatePageLayout({\n            ...reportSettingStore.pageLayout,\n            isToolbar: false,\n            isBackgroundImage: false,\n            backgroundImage: '',\n            mainBoxCSS: \"backgroundColor: '#ffffff',paddingBottom: '120pt',\",\n            pageSize: '',\n          });\n        }\n      });\n  };\n\n  return (\n    <>\n      <div\n        className='flex justify-end'\n        style={{ position: 'absolute', right: '42px', top: '10px', zIndex: 1 }}\n      >\n        {RouterFlow.checkPermission(routerStore.userPermission, 'Add') && (\n          <Buttons.ButtonCircleAddRemoveBottom\n            show={isInputView}\n            onClick={() => setIsInputView(!isInputView)}\n          />\n        )}\n      </div>\n      <div className='mx-auto flex-wrap'>\n        <div\n          className={\n            'p-2 rounded-lg shadow-xl ' + (isInputView ? 'hidden' : 'shown')\n          }\n        >\n          <Grid cols={2}>\n            <List direction='col' space={4} justify='stretch' fill>\n              <Grid cols={2}>\n                <List direction='col' space={4} justify='stretch' fill>\n                  <Controller\n                    control={control}\n                    render={({ field: { onChange, value } }) => (\n                      <Form.Input\n                        label='Layout Code'\n                        placeholder='Layout code'\n                        hasError={!!errors.tempCode}\n                        value={value}\n                        onChange={tempCodeValue => {\n                          const tempCode = tempCodeValue.toUpperCase();\n                          onChange(tempCode);\n                          reportSettingStore.updatePageLayout({\n                            ...reportSettingStore.pageLayout,\n                            tempCode,\n                          });\n                        }}\n                        onBlur={tempCode => {\n                          reportSettingStore.pageLayoutService\n                            .findByFields({\n                              input: {\n                                filter: {\n                                  tempCode,\n                                  tempName:\n                                    reportSettingStore.pageLayout?.tempName ||\n                                    '',\n                                },\n                              },\n                            })\n                            .then(res => {\n                              if (res.findByFieldsTemplateSetting.success) {\n                                setError('tempCode', { type: 'onBlur' });\n                                setError('tempName', { type: 'onBlur' });\n                                Toast.error({\n                                  message:\n                                    '😔 Already exists temp code. Please enter diff.',\n                                });\n                                return setIsExistsTempCode(true);\n                              } else {\n                                clearErrors('tempCode');\n                                clearErrors('tempName');\n                                return setIsExistsTempCode(false);\n                              }\n                            });\n                        }}\n                      />\n                    )}\n                    name='tempCode'\n                    rules={{ required: true }}\n                    defaultValue=''\n                  />\n                  <Controller\n                    control={control}\n                    render={({ field: { onChange, value } }) => (\n                      <Form.Input\n                        label='Layout Name'\n                        placeholder='Layout Name'\n                        hasError={!!errors.tempName}\n                        value={value}\n                        onChange={tempNameValue => {\n                          const tempName = tempNameValue.toUpperCase();\n                          onChange(tempName);\n                          reportSettingStore.updatePageLayout({\n                            ...reportSettingStore.pageLayout,\n                            tempName,\n                          });\n                        }}\n                        onBlur={tempName => {\n                          reportSettingStore.pageLayoutService\n                            .findByFields({\n                              input: {\n                                filter: {\n                                  tempName,\n                                  tempCode:\n                                    reportSettingStore.pageLayout?.tempCode ||\n                                    '',\n                                },\n                              },\n                            })\n                            .then(res => {\n                              if (res.findByFieldsTemplateSetting.success) {\n                                setError('tempCode', { type: 'onBlur' });\n                                setError('tempName', { type: 'onBlur' });\n                                Toast.warning({\n                                  message:\n                                    '😔 Already exists temp code. Please enter diff.',\n                                });\n                                return setIsExistsTempCode(true);\n                              } else {\n                                clearErrors('tempCode');\n                                clearErrors('tempName');\n                                return setIsExistsTempCode(false);\n                              }\n                            });\n                        }}\n                      />\n                    )}\n                    name='tempName'\n                    rules={{ required: true }}\n                    defaultValue=''\n                  />\n                  <Grid cols={2}>\n                    <Controller\n                      control={control}\n                      render={({ field: { onChange, value } }) => (\n                        <Form.Toggle\n                          label='Show tool bar'\n                          hasError={!!errors.isToolBar}\n                          value={value}\n                          onChange={isToolbar => {\n                            onChange(isToolbar);\n                            reportSettingStore.updatePageLayout({\n                              ...reportSettingStore.pageLayout,\n                              isToolbar,\n                            });\n                          }}\n                        />\n                      )}\n                      name='isToolBar'\n                      rules={{ required: false }}\n                      defaultValue=''\n                    />\n                    <Controller\n                      control={control}\n                      render={({ field: { onChange, value } }) => (\n                        <Form.Toggle\n                          label='Background Image Visible'\n                          hasError={!!errors.isBackgroundImage}\n                          value={value}\n                          onChange={isBackgroundImage => {\n                            onChange(isBackgroundImage);\n                            reportSettingStore.updatePageLayout({\n                              ...reportSettingStore.pageLayout,\n                              isBackgroundImage,\n                            });\n                          }}\n                        />\n                      )}\n                      name='isBackgroundImage'\n                      rules={{ required: false }}\n                      defaultValue=''\n                    />\n                  </Grid>\n                  <Controller\n                    control={control}\n                    render={({ field: { onChange, value } }) => (\n                      <Form.InputFile\n                        label='Background Image'\n                        placeholder='Background Image'\n                        hasError={!!errors.backgroundImage}\n                        value={value ? value.fileName : ''}\n                        onChange={async e => {\n                          const backgroundImage = e.target.files[0];\n                          onChange(backgroundImage);\n                          reportSettingStore.updatePageLayout({\n                            ...reportSettingStore.pageLayout,\n                            backgroundImage,\n                          });\n                        }}\n                      />\n                    )}\n                    name='backgroundImage'\n                    rules={{ required: false }}\n                    defaultValue=''\n                  />\n                </List>\n                <List direction='col' space={4} justify='stretch' fill>\n                  <Controller\n                    control={control}\n                    render={({ field: { onChange, value } }) => (\n                      <Form.InputWrapper\n                        label='Page Size'\n                        hasError={!!errors.pageSize}\n                      >\n                        <select\n                          value={value}\n                          className={`leading-4 p-2 focus:outline-none focus:ring block w-full shadow-sm sm:text-base border-2 ${\n                            errors.pageSize ? 'border-red  ' : 'border-gray-300'\n                          } rounded-md`}\n                          onChange={e => {\n                            const pageSize = e.target.value;\n                            onChange(pageSize);\n                            reportSettingStore.updatePageLayout({\n                              ...reportSettingStore.pageLayout,\n                              pageSize,\n                            });\n                          }}\n                        >\n                          <option selected>Select</option>\n                          {[\n                            '4A0',\n                            '2A0',\n                            'A0',\n                            'A1',\n                            'A2',\n                            'A3',\n                            'A4',\n                            'A5',\n                            'A6',\n                            'A7',\n                            'A8',\n                            'A9',\n                            'A10',\n                            'B0',\n                            'B1',\n                            'B2',\n                            'B3',\n                            'B4',\n                            'B5',\n                            'B6',\n                            'B7',\n                            'B8',\n                            'B9',\n                            'B10',\n                            'C0',\n                            'C1',\n                            'C2',\n                            'C3',\n                            'C4',\n                            'C5',\n                            'C6',\n                            'C7',\n                            'C8',\n                            'C9',\n                            'C10',\n                            'RA0',\n                            'RA1',\n                            'RA2',\n                            'RA3',\n                            'RA4',\n                            'SRA0',\n                            'SRA1',\n                            'SRA2',\n                            'SRA3',\n                            'SRA4',\n                            'EXECUTIVE',\n                            'FOLIO',\n                            'LEGAL',\n                            'LETTER',\n                            'TABLOID',\n                            'ID1',\n                          ].map((item: any, index: number) => (\n                            <option key={index} value={item}>\n                              {item}\n                            </option>\n                          ))}\n                        </select>\n                      </Form.InputWrapper>\n                    )}\n                    name='pageSize'\n                    rules={{ required: false }}\n                    defaultValue=''\n                  />\n                  <Controller\n                    control={control}\n                    render={({ field: { onChange, value } }) => (\n                      <>\n                        <CSSMultiline\n                          defaultValue={value}\n                          onChange={mainBoxCSS => {\n                            onChange(mainBoxCSS);\n                            reportSettingStore.updatePageLayout({\n                              ...reportSettingStore.pageLayout,\n                              mainBoxCSS,\n                            });\n                          }}\n                        />\n                      </>\n                    )}\n                    name='mainBoxCSS'\n                    rules={{ required: false }}\n                    defaultValue={reportSettingStore.pageLayout.mainBoxCSS}\n                  />\n\n                  <a\n                    href='https://react-pdf.org/styling'\n                    target='_blank'\n                    className='text-red underline'\n                    rel='noreferrer'\n                  >\n                    Note: Check more properties\n                  </a>\n                  <p>\n                    {\n                      \"Note: if footer present then min paddingBottom:'120pt' required.\"\n                    }\n                  </p>\n                </List>\n              </Grid>\n            </List>\n            <List direction='col' space={2} justify='stretch' fill>\n              <PDFViewer\n                style={{ width, height }}\n                showToolbar={reportSettingStore.pageLayout?.isToolbar}\n              >\n                <Document title='Template Setting'>\n                  <PdfTSTemp0001\n                    documentTitle='Template Setting'\n                    isBackgroundImage={\n                      reportSettingStore.pageLayout?.isBackgroundImage\n                    }\n                    backgroundImage={\n                      reportSettingStore.pageLayout?.backgroundImage\n                    }\n                    mainBoxCSS={reportSettingStore.pageLayout?.mainBoxCSS}\n                    pageSize={reportSettingStore.pageLayout?.pageSize}\n                    children={<PdfMedium>Template Setting</PdfMedium>}\n                  />\n                </Document>\n              </PDFViewer>\n            </List>\n          </Grid>\n          <br />\n          <List direction='row' space={3} align='center'>\n            <Buttons.Button\n              size='medium'\n              type='solid'\n              icon={Svg.Save}\n              onClick={handleSubmit(onSave)}\n            >\n              Save\n            </Buttons.Button>\n            <Buttons.Button\n              size='medium'\n              type='outline'\n              icon={Svg.Remove}\n              onClick={() => {\n                window.location.reload();\n              }}\n            >\n              Clear\n            </Buttons.Button>\n          </List>\n        </div>\n        <div className='p-2 rounded-lg shadow-xl overflow-auto'>\n          <PageLayoutList\n            data={reportSettingStore.pageLayoutList || []}\n            totalSize={reportSettingStore.pageLayoutListCount}\n            isDelete={RouterFlow.checkPermission(\n              routerStore.userPermission,\n              'Delete',\n            )}\n            isEditModify={RouterFlow.checkPermission(\n              routerStore.userPermission,\n              'Update',\n            )}\n            onDelete={selectedItem => setModalConfirm(selectedItem)}\n            onSelectedRow={rows => {\n              setModalConfirm({\n                show: true,\n                type: 'delete',\n                id: rows,\n                title: 'Are you sure?',\n                body: 'Do you want to delete selected record?',\n              });\n            }}\n            onUpdateItem={(fields: any, id: string) => {\n              setModalConfirm({\n                show: true,\n                type: 'update',\n                data: { fields, id },\n                title: 'Are you sure?',\n                body: 'Do you want to update this record?',\n              });\n            }}\n            onPageSizeChange={(page, limit) => {\n              // bannerStore.fetchListBanner(page, limit);\n            }}\n            onFilter={(type, filter, page, limit) => {\n              // bannerStore.BannerService.filter({\n              //   input: {type, filter, page, limit},\n              // });\n            }}\n            onPdfPreview={item => {\n              setModalView({\n                visible: true,\n                children: (\n                  <PDFViewer\n                    style={{ width, height }}\n                    showToolbar={item.isToolbar}\n                  >\n                    <Document title='Page Layout'>\n                      <PdfTSTemp0001\n                        documentTitle='Page Layout'\n                        height={window.innerHeight / 1.3}\n                        isToolbar={item.isToolbar}\n                        isBackgroundImage={item?.isBackgroundImage}\n                        backgroundImage={item?.backgroundImage}\n                        mainBoxCSS={item.mainBoxCSS}\n                        pageSize={item.pageSize}\n                        children={<PdfMedium>Page Layout</PdfMedium>}\n                      />\n                    </Document>\n                  </PDFViewer>\n                ),\n              });\n            }}\n            setIsInputView={setIsInputView}\n            isInputView={isInputView}\n          />\n        </div>\n      </div>\n      <ModalConfirm\n        {...modalConfirm}\n        click={(type?: string) => {\n          switch (type) {\n            case 'delete': {\n              reportSettingStore.pageLayoutService\n                .removeTemplateSetting({\n                  input: { id: modalConfirm.id },\n                })\n                .then((res: any) => {\n                  setModalConfirm({ show: false });\n                  if (res.removeTemplateSetting.success) {\n                    Toast.success({\n                      message: `😊 ${res.removeTemplateSetting.message}`,\n                    });\n                    reportSettingStore.pageLayoutService.listTemplateSetting();\n                  }\n                });\n              break;\n            }\n            case 'update': {\n              reportSettingStore.pageLayoutService\n                .update({\n                  input: {\n                    ...modalConfirm.data.fields,\n                    _id: modalConfirm.data.id,\n                  },\n                })\n                .then((res: any) => {\n                  setModalConfirm({ show: false });\n                  if (res.updateTemplateSetting.success) {\n                    Toast.success({\n                      message: `😊 ${res.updateTemplateSetting.message}`,\n                    });\n                    setTimeout(() => {\n                      window.location.reload();\n                    }, 2000);\n                  }\n                });\n\n              break;\n            }\n          }\n        }}\n        onClose={() => setModalConfirm({ show: false })}\n      />\n      <ModalView\n        {...modalView}\n        onClose={() => setModalView({ visible: false })}\n      />\n    </>\n  );\n});\n","import React, { useState } from 'react';\nimport { observer } from 'mobx-react';\nimport {\n  Toast,\n  Buttons,\n  Grid,\n  List,\n  Form,\n  Svg,\n  ModalConfirm,\n  ModalView,\n  ModalViewProps,\n} from '@/library/components';\nimport {\n  TemplatePatientResultList,\n  ReportBodyComponents,\n  EndOfPageComponents,\n  EndOfReportComponents,\n} from '../components';\nimport { useForm, Controller } from 'react-hook-form';\nimport { RouterFlow } from '@/flows';\nimport { useStores } from '@/stores';\n\nimport '@/library/assets/css/accordion.css';\n\nimport 'react-accessible-accordion/dist/fancy-example.css';\nimport '@/library/assets/css/accordion.css';\nimport { resetReportBody } from '../startup';\nimport { SelectedItemsTemplatePatientResult } from '../models/template-patient-result.model';\n\nexport const TemplatePatientResult = observer(() => {\n  const { loading, routerStore, reportSettingStore, libraryStore } =\n    useStores();\n  const {\n    control,\n    handleSubmit,\n    formState: { errors },\n    setValue,\n    setError,\n    clearErrors,\n    reset,\n  } = useForm();\n\n  const [modalConfirm, setModalConfirm] = useState<any>();\n  const [modalView, setModalView] = useState<ModalViewProps>();\n  const [isInputView, setIsInputView] = useState<boolean>(true);\n  const [isExistsRecord, setIsExistsRecord] = useState<boolean>(false);\n\n  const onSave = () => {\n    if (isExistsRecord)\n      return Toast.error({\n        message: '😔 Already exists records.',\n      });\n    reportSettingStore.templatePatientResultService\n      .addTemplatePatientResult({\n        input: { ...reportSettingStore.templatePatientResult },\n      })\n      .then(res => {\n        if (res.createTemplatePatientResult.success) {\n          Toast.success({\n            message: `😊 ${res.createTemplatePatientResult.message}`,\n          });\n          setIsInputView(!isInputView);\n          reset();\n          resetReportBody();\n          reportSettingStore.updateSelectedItemTemplatePatientResult(\n            new SelectedItemsTemplatePatientResult({}),\n          );\n        }\n      });\n  };\n\n  const getTemplate = (tempCode: string, data: any) => {\n    switch (tempCode) {\n      case 'TEMP0001':\n        return <h1>hi</h1>;\n      default:\n        return (\n          <div className='justify-center items-center'>\n            <h4 className='text-center text-red'>\n              Template not found. Please select correct temp code. 🚨\n            </h4>\n          </div>\n        );\n        break;\n    }\n  };\n\n  return (\n    <>\n      <div className='flex justify-end'>\n        {RouterFlow.checkPermission(routerStore.userPermission, 'Add') && (\n          <Buttons.ButtonCircleAddRemoveBottom\n            show={isInputView}\n            onClick={() => setIsInputView(!isInputView)}\n          />\n        )}\n      </div>\n      <div\n        className={\n          'p-2 rounded-lg shadow-xl ' + (isInputView ? 'hidden' : 'shown')\n        }\n      >\n        <Grid cols={2}>\n          <Grid cols={2}>\n            <List direction='col' space={4} justify='stretch' fill>\n              <Controller\n                control={control}\n                render={({ field: { onChange, value } }) => (\n                  <Form.InputWrapper\n                    label='Report Template Type'\n                    hasError={!!errors.reportTemplateType}\n                  >\n                    <select\n                      value={value}\n                      className={`leading-4 p-2 focus:outline-none focus:ring block w-full shadow-sm sm:text-base border-2 ${\n                        errors.reportTemplateType\n                          ? 'border-red  '\n                          : 'border-gray-300'\n                      } rounded-md`}\n                      onChange={e => {\n                        const reportTemplateType = e.target.value;\n                        onChange(reportTemplateType);\n                        reportSettingStore.updateTemplatePatientResult({\n                          ...reportSettingStore.templatePatientResult,\n                          reportTemplateType,\n                        });\n                        reportSettingStore.templatePatientResultService\n                          .findByFields({\n                            input: {\n                              filter: {\n                                reportTemplateType,\n                                templateCode:\n                                  reportSettingStore.templatePatientResult\n                                    ?.templateCode || '',\n                                templateTitle:\n                                  reportSettingStore.templatePatientResult\n                                    ?.templateTitle || '',\n                              },\n                            },\n                          })\n                          .then(res => {\n                            if (res.findByFieldsTemplatePatientResult.success) {\n                              setError('reportTemplateType', {\n                                type: 'onBlur',\n                              });\n                              setError('templateCode', { type: 'onBlur' });\n                              setError('templateTitle', { type: 'onBlur' });\n                              Toast.error({\n                                message: '😔 Already exists record.',\n                              });\n                              return setIsExistsRecord(true);\n                            } else {\n                              clearErrors('reportTemplateType');\n                              clearErrors('templateCode');\n                              clearErrors('templateTitle');\n                              return setIsExistsRecord(false);\n                            }\n                          });\n                      }}\n                    >\n                      <option selected>Select</option>\n                      {['Lab Wise', 'Client Wise', 'Doctor Wise'].map(\n                        (item: any, index: number) => (\n                          <option key={index} value={item}>\n                            {item}\n                          </option>\n                        ),\n                      )}\n                    </select>\n                  </Form.InputWrapper>\n                )}\n                name='reportTemplateType'\n                rules={{ required: true }}\n                defaultValue=''\n              />\n              <Controller\n                control={control}\n                render={({ field: { onChange, value } }) => (\n                  <Form.InputWrapper\n                    label='Report Body'\n                    hasError={!!errors.reportBody}\n                  >\n                    <ReportBodyComponents\n                      displayValue={value}\n                      onSelect={item => {\n                        onChange(item?.reportName);\n                        reportSettingStore.updateTemplatePatientResult({\n                          ...reportSettingStore.templatePatientResult,\n                          reportBody: {\n                            _id: item?._id,\n                            reportCode: item?.reportCode,\n                            reportName: item?.reportName,\n                          },\n                        });\n                      }}\n                    />\n                  </Form.InputWrapper>\n                )}\n                name='reportBody'\n                rules={{ required: false }}\n                defaultValue={''}\n              />\n              <Controller\n                control={control}\n                render={({ field: { onChange, value } }) => (\n                  <Form.Input\n                    label='Template Code'\n                    placeholder='Template Code'\n                    hasError={!!errors.templateCode}\n                    value={value?.toUpperCase()}\n                    onChange={templateCode => {\n                      onChange(templateCode);\n                      reportSettingStore.updateTemplatePatientResult({\n                        ...reportSettingStore.templatePatientResult,\n                        templateCode: templateCode?.toUpperCase(),\n                      });\n                    }}\n                    onBlur={templateCode => {\n                      reportSettingStore.templatePatientResultService\n                        .findByFields({\n                          input: {\n                            filter: {\n                              reportTemplateType:\n                                reportSettingStore.templatePatientResult\n                                  ?.reportTemplateType || '',\n                              templateCode,\n                              templateTitle:\n                                reportSettingStore.templatePatientResult\n                                  ?.templateTitle || '',\n                            },\n                          },\n                        })\n                        .then(res => {\n                          if (res.findByFieldsTemplatePatientResult.success) {\n                            setError('reportTemplateType', { type: 'onBlur' });\n                            setError('templateCode', { type: 'onBlur' });\n                            setError('templateTitle', { type: 'onBlur' });\n                            Toast.error({\n                              message: '😔 Already exists record.',\n                            });\n                            return setIsExistsRecord(true);\n                          } else {\n                            clearErrors('reportTemplateType');\n                            clearErrors('templateCode');\n                            clearErrors('templateTitle');\n                            return setIsExistsRecord(false);\n                          }\n                        });\n                    }}\n                  />\n                )}\n                name='templateCode'\n                rules={{ required: true }}\n                defaultValue=''\n              />\n              <Controller\n                control={control}\n                render={({ field: { onChange, value } }) => (\n                  <Form.Input\n                    label='Template Title'\n                    placeholder='Template Title'\n                    hasError={!!errors.templateTitle}\n                    value={value?.toUpperCase()}\n                    onChange={templateTitle => {\n                      onChange(templateTitle);\n                      reportSettingStore.updateTemplatePatientResult({\n                        ...reportSettingStore.templatePatientResult,\n                        templateTitle: templateTitle?.toUpperCase(),\n                      });\n                    }}\n                    onBlur={templateTitle => {\n                      reportSettingStore.templatePatientResultService\n                        .findByFields({\n                          input: {\n                            filter: {\n                              reportTemplateType:\n                                reportSettingStore.templatePatientResult\n                                  ?.reportTemplateType || '',\n                              templateCode:\n                                reportSettingStore.templatePatientResult\n                                  ?.templateCode || '',\n                              templateTitle,\n                            },\n                          },\n                        })\n                        .then(res => {\n                          if (res.findByFieldsTemplatePatientResult.success) {\n                            setError('reportTemplateType', { type: 'onBlur' });\n                            setError('templateCode', { type: 'onBlur' });\n                            setError('templateTitle', { type: 'onBlur' });\n                            Toast.error({\n                              message: '😔 Already exists record.',\n                            });\n                            return setIsExistsRecord(true);\n                          } else {\n                            clearErrors('reportTemplateType');\n                            clearErrors('templateCode');\n                            clearErrors('templateTitle');\n                            return setIsExistsRecord(false);\n                          }\n                        });\n                    }}\n                  />\n                )}\n                name='templateTitle'\n                rules={{ required: true }}\n                defaultValue=''\n              />\n              <Controller\n                control={control}\n                render={({ field: { onChange, value } }) => (\n                  <Form.Input\n                    label='Report Order'\n                    type='number'\n                    placeholder={\n                      errors.reportOrder\n                        ? 'Please Enter ReportOrder'\n                        : 'Report Order'\n                    }\n                    hasError={!!errors.reportOrder}\n                    value={value}\n                    onChange={reportOrder => {\n                      onChange(reportOrder);\n                      reportSettingStore.updateTemplatePatientResult({\n                        ...reportSettingStore.templatePatientResult,\n                        reportOrder: Number.parseInt(reportOrder),\n                      });\n                    }}\n                  />\n                )}\n                name='reportOrder'\n                rules={{ required: false }}\n                defaultValue=''\n              />\n            </List>\n\n            <List direction='col' space={4} justify='stretch' fill>\n              <Controller\n                control={control}\n                render={({ field: { onChange, value } }) => (\n                  <Form.InputWrapper\n                    label='End Of Page'\n                    hasError={!!errors.endOfPage}\n                  >\n                    <EndOfPageComponents\n                      onSelect={item => {\n                        reportSettingStore.updateTemplatePatientResult({\n                          ...reportSettingStore.templatePatientResult,\n                          endOfPage: item,\n                        });\n                      }}\n                    />\n                  </Form.InputWrapper>\n                )}\n                name='endOfPage'\n                rules={{ required: false }}\n                defaultValue={\n                  libraryStore.listLibrary ||\n                  reportSettingStore.selectedItemTemplatePatientResult\n                    ?.endOfPage\n                }\n              />\n              <Controller\n                control={control}\n                render={({ field: { onChange, value } }) => (\n                  <Form.InputWrapper\n                    label='End Of Report'\n                    hasError={!!errors.endOfReport}\n                  >\n                    <EndOfReportComponents\n                      onSelect={item => {\n                        reportSettingStore.updateTemplatePatientResult({\n                          ...reportSettingStore.templatePatientResult,\n                          endOfReport: item,\n                        });\n                      }}\n                    />\n                  </Form.InputWrapper>\n                )}\n                name='endOfReport'\n                rules={{ required: false }}\n                defaultValue={\n                  libraryStore.listLibrary ||\n                  reportSettingStore.selectedItemTemplatePatientResult\n                    ?.endOfReport\n                }\n              />\n            </List>\n          </Grid>\n        </Grid>\n        <br />\n        <List direction='row' space={3} align='center'>\n          <Buttons.Button\n            size='medium'\n            type='solid'\n            icon={Svg.Save}\n            onClick={handleSubmit(onSave)}\n          >\n            Save\n          </Buttons.Button>\n          <Buttons.Button\n            size='medium'\n            type='outline'\n            icon={Svg.Remove}\n            onClick={() => {\n              window.location.reload();\n            }}\n          >\n            Clear\n          </Buttons.Button>\n        </List>\n      </div>\n      <div className='p-2 rounded-lg shadow-xl overflow-auto'>\n        <TemplatePatientResultList\n          data={reportSettingStore.templatePatientResultList}\n          totalSize={reportSettingStore.templatePatientResultListCount}\n          isDelete={RouterFlow.checkPermission(\n            routerStore.userPermission,\n            'Delete',\n          )}\n          isEditModify={RouterFlow.checkPermission(\n            routerStore.userPermission,\n            'Update',\n          )}\n          onDelete={selectedItem => setModalConfirm(selectedItem)}\n          onSelectedRow={rows => {\n            setModalConfirm({\n              show: true,\n              type: 'delete',\n              id: rows,\n              title: 'Are you sure?',\n              body: 'Do you want to delete selected record?',\n            });\n          }}\n          onUpdateItem={(fields: any, id: string) => {\n            setModalConfirm({\n              show: true,\n              type: 'update',\n              data: { fields, id },\n              title: 'Are you sure?',\n              body: 'Do you want to update this record?',\n            });\n          }}\n          onPageSizeChange={(page, limit) => {\n            reportSettingStore.templatePatientResultService.listTemplatePatientResult(\n              page,\n              limit,\n            );\n          }}\n          onFilter={(type, filter, page, limit) => {\n            // bannerStore.BannerService.filter({\n            //   input: {type, filter, page, limit},\n            // });\n          }}\n          onPdfPreview={item => {\n            setModalView({\n              visible: true,\n              children: <>{getTemplate(item.tempCode, item)}</>,\n            });\n          }}\n          setIsInputView={setIsInputView}\n          isInputView={isInputView}\n        />\n      </div>\n      <ModalConfirm\n        {...modalConfirm}\n        click={(type?: string) => {\n          switch (type) {\n            case 'delete': {\n              reportSettingStore.templatePatientResultService\n                .removeTemplatePatientResult({\n                  input: { id: modalConfirm.id },\n                })\n                .then((res: any) => {\n                  if (res.removeTemplatePatientResult.success) {\n                    Toast.success({\n                      message: `😊 ${res.removeTemplatePatientResult.message}`,\n                    });\n                    setModalConfirm({ show: false });\n                    reportSettingStore.templatePatientResultService.listTemplatePatientResult();\n                  }\n                });\n              break;\n            }\n            case 'update': {\n              reportSettingStore.templatePatientResultService\n                .update({\n                  input: {\n                    ...modalConfirm.data.fields,\n                    _id: modalConfirm.data.id,\n                  },\n                })\n                .then((res: any) => {\n                  setModalConfirm({ show: false });\n                  if (res.updateTemplatePatientResult.success) {\n                    Toast.success({\n                      message: `😊 ${res.updateTemplatePatientResult.message}`,\n                    });\n                    reportSettingStore.templatePatientResultService.listTemplatePatientResult();\n                  }\n                });\n              break;\n            }\n          }\n        }}\n        onClose={() => setModalConfirm({ show: false })}\n      />\n      <ModalView\n        {...modalView}\n        onClose={() => setModalView({ visible: false })}\n      />\n    </>\n  );\n});\n","import React, { useState } from 'react';\nimport { observer } from 'mobx-react';\nimport _ from 'lodash';\nimport {\n  Toast,\n  Buttons,\n  Grid,\n  List,\n  Form,\n  Svg,\n  ModalConfirm,\n  ModalView,\n  ModalViewProps,\n} from '@/library/components';\nimport { Collapsible } from '@/core-components';\nimport { PDFViewer, Document } from '@react-pdf/renderer';\nimport {\n  ReportBodyList,\n  General,\n  Panel,\n  Test,\n  Analyte,\n  AutoCompletePageBrandingCode,\n} from '../components';\nimport { useForm, Controller } from 'react-hook-form';\nimport { RouterFlow } from '@/flows';\nimport { useStores } from '@/stores';\n\nimport { PdfPBTemp0001 } from '@features/report-builder/report-template/components/molecules/pdf/page-branding/temp0001/temp0001.component';\n\nconst width = '100%';\nconst height = window.innerHeight / 1.3;\n\nexport const ReportBody = observer(() => {\n  const { loading, routerStore, reportSettingStore } = useStores();\n  const {\n    control,\n    handleSubmit,\n    formState: { errors },\n    setValue,\n    setError,\n    clearErrors,\n    reset,\n  } = useForm();\n\n  const [modalConfirm, setModalConfirm] = useState<any>();\n  const [modalView, setModalView] = useState<ModalViewProps>();\n  const [isInputView, setIsInputView] = useState<boolean>(true);\n  const [isExistsTempCode, setIsExistsTempCode] = useState<boolean>(false);\n\n  const onSave = () => {\n    if (isExistsTempCode)\n      return Toast.error({\n        message: '😔 Already exists report code. Please select diff.',\n      });\n    // if (\n    //   !reportSettingStore.reportBody?.general &&\n    //   !reportSettingStore.reportBody?.panel &&\n    //   !reportSettingStore.reportBody?.test &&\n    //   !reportSettingStore.reportBody?.analyte\n    // )\n    //   return Toast.error({\n    //     message: '😔 Please enter anyone correct style',\n    //   });\n    if (\n      _.every(\n        Object.keys(reportSettingStore.reportBody?.general || {})?.map(\n          key => reportSettingStore.reportBody?.general[key],\n        ),\n        item => item?.length == 0,\n      ) &&\n      _.every(\n        Object.keys(reportSettingStore.reportBody?.panel || {})?.map(\n          key => reportSettingStore.reportBody?.panel[key],\n        ),\n        item => item?.length == 0,\n      ) &&\n      _.every(\n        Object.keys(reportSettingStore.reportBody?.test || {})?.map(\n          key => reportSettingStore.reportBody?.test[key],\n        ),\n        item => item?.length == 0,\n      ) &&\n      _.every(\n        Object.keys(reportSettingStore.reportBody?.analyte || {})?.map(\n          key => reportSettingStore.reportBody?.analyte[key],\n        ),\n        item => item?.length == 0,\n      )\n    )\n      return Toast.error({\n        message: '😔 Please enter anyone correct style',\n      });\n    reportSettingStore.reportBodyService\n      .addReportBody({\n        input: {\n          ...reportSettingStore.reportBody,\n          general: _(reportSettingStore.reportBody?.general)\n            .omitBy(_.isUndefined)\n            .omitBy(_.isEmpty)\n            .omitBy(_.isNull)\n            .value(),\n          panel: _(reportSettingStore.reportBody?.panel)\n            .omitBy(_.isUndefined)\n            .omitBy(_.isEmpty)\n            .omitBy(_.isNull)\n            .value(),\n          test: _(reportSettingStore.reportBody?.test)\n            .omitBy(_.isUndefined)\n            .omitBy(_.isEmpty)\n            .omitBy(_.isNull)\n            .value(),\n          analyte: _(reportSettingStore.reportBody?.analyte)\n            .omitBy(_.isUndefined)\n            .omitBy(_.isEmpty)\n            .omitBy(_.isNull)\n            .value(),\n        },\n      })\n      .then(res => {\n        if (res.createReportBody.success) {\n          Toast.success({\n            message: `😊 ${res.createReportBody.message}`,\n          });\n          reportSettingStore.reportBodyService.listReportBody();\n        }\n        setIsInputView(false);\n        reset();\n        // setTimeout(() => {\n        //   window.location.reload();\n        // }, 1000);\n      });\n  };\n\n  const getTemplate = (tempCode: string, data: any) => {\n    if (tempCode)\n      return (\n        <PDFViewer\n          style={{ width, height }}\n          showToolbar={reportSettingStore.pageLayout?.isToolbar}\n        >\n          <Document title='Page Branding'>\n            <PdfPBTemp0001\n              data={data}\n              templateSettings={data?.templateSettings}\n            />\n          </Document>\n        </PDFViewer>\n      );\n    else {\n      return (\n        <div className='justify-center items-center'>\n          <h4 className='text-center text-red'>\n            Template not found. Please select correct temp code. 🚨\n          </h4>\n        </div>\n      );\n    }\n  };\n\n  return (\n    <>\n      <div\n        className='flex justify-end'\n        style={{ position: 'absolute', right: '42px', top: '10px', zIndex: 1 }}\n      >\n        {RouterFlow.checkPermission(routerStore.userPermission, 'Add') && (\n          <Buttons.ButtonCircleAddRemoveBottom\n            show={isInputView}\n            onClick={() => setIsInputView(!isInputView)}\n          />\n        )}\n      </div>\n\n      <div\n        className={\n          'rounded-lg shadow-xl p-2 ' + (isInputView ? 'hidden' : 'shown')\n        }\n      >\n        <Grid cols={2}>\n          <List direction='col' space={4} justify='stretch' fill>\n            <Controller\n              control={control}\n              render={({ field: { onChange, value } }) => (\n                <AutoCompletePageBrandingCode\n                  hasError={!!errors.pageBrandingCode}\n                  onSelect={item => {\n                    onChange(item.tempCode);\n                    reportSettingStore.updateReportBody({\n                      ...reportSettingStore.reportBody,\n                      pageBrandingCode: item.tempCode,\n                    });\n                  }}\n                />\n              )}\n              name='pageBrandingCode'\n              rules={{ required: true }}\n              defaultValue={reportSettingStore.pageBrandingList}\n            />\n            <Controller\n              control={control}\n              render={({ field: { onChange, value } }) => (\n                <Form.Input\n                  label='Report Code'\n                  placeholder='Report Code'\n                  hasError={!!errors.reportCode}\n                  value={value?.toUpperCase()}\n                  onChange={reportCode => {\n                    onChange(reportCode);\n                    reportSettingStore.updateReportBody({\n                      ...reportSettingStore.reportBody,\n                      reportCode: reportCode?.toUpperCase(),\n                    });\n                  }}\n                  onBlur={reportCode => {\n                    reportSettingStore.reportBodyService\n                      .findByFields({\n                        input: {\n                          filter: {\n                            reportCode,\n                          },\n                        },\n                      })\n                      .then(res => {\n                        if (res.findByFieldsReportBody.success) {\n                          Toast.error({\n                            message:\n                              '😔 Already exists report code. Please select diff.',\n                          });\n                          return setIsExistsTempCode(true);\n                        } else {\n                          onChange(reportCode);\n                          return setIsExistsTempCode(false);\n                        }\n                      });\n                  }}\n                />\n              )}\n              name='reportCode'\n              rules={{ required: true }}\n              defaultValue=''\n            />\n            <Controller\n              control={control}\n              render={({ field: { onChange, value } }) => (\n                <Form.Input\n                  label='Report Name'\n                  placeholder='Report Name'\n                  hasError={!!errors.reportName}\n                  value={value?.toUpperCase()}\n                  onChange={reportName => {\n                    onChange(reportName);\n                    reportSettingStore.updateReportBody({\n                      ...reportSettingStore.reportBody,\n                      reportName: reportName?.toUpperCase(),\n                    });\n                  }}\n                />\n              )}\n              name='reportName'\n              rules={{ required: true }}\n              defaultValue=''\n            />\n\n            <div>\n              <Collapsible label='General' children={<General />} />\n              <Collapsible label='Panel' children={<Panel />} />\n            </div>\n          </List>\n          <List direction='col' space={4} justify='stretch' fill>\n            <div>\n              <Collapsible label='Test' children={<Test />} />\n              <Collapsible label='Analyte' children={<Analyte />} />\n            </div>\n          </List>\n        </Grid>\n        <br />\n        <List direction='row' space={3} align='center'>\n          <Buttons.Button\n            size='medium'\n            type='solid'\n            icon={Svg.Save}\n            onClick={handleSubmit(onSave)}\n          >\n            Save\n          </Buttons.Button>\n          <Buttons.Button\n            size='medium'\n            type='outline'\n            icon={Svg.Remove}\n            onClick={() => {\n              window.location.reload();\n            }}\n          >\n            Clear\n          </Buttons.Button>\n        </List>\n      </div>\n      <div className='rounded-lg shadow-xl overflow-auto p-2'>\n        <ReportBodyList\n          data={reportSettingStore.reportBodyList}\n          totalSize={reportSettingStore.reportBodyListCount}\n          isDelete={RouterFlow.checkPermission(\n            routerStore.userPermission,\n            'Delete',\n          )}\n          isEditModify={RouterFlow.checkPermission(\n            routerStore.userPermission,\n            'Update',\n          )}\n          onDelete={selectedItem => setModalConfirm(selectedItem)}\n          onSelectedRow={rows => {\n            setModalConfirm({\n              show: true,\n              type: 'delete',\n              id: rows,\n              title: 'Are you sure?',\n              body: 'Do you want to delete selected record?',\n            });\n          }}\n          onUpdateItem={(fields: any, id: string) => {\n            setModalConfirm({\n              show: true,\n              type: 'update',\n              data: { fields, id },\n              title: 'Are you sure?',\n              body: 'Do you want to update this record?',\n            });\n          }}\n          onPageSizeChange={(page, limit) => {\n            // bannerStore.fetchListBanner(page, limit);\n          }}\n          onFilter={(type, filter, page, limit) => {\n            // bannerStore.BannerService.filter({\n            //   input: {type, filter, page, limit},\n            // });\n          }}\n          onPdfPreview={item => {\n            reportSettingStore.pageLayoutService\n              .findByFields({\n                input: {\n                  filter: {\n                    tempCode: item?.tempCode,\n                  },\n                },\n              })\n              .then(res => {\n                if (res.findByFieldsTemplateSetting.success) {\n                  setModalView({\n                    visible: true,\n                    children: (\n                      <>\n                        {getTemplate(item.tempCode, {\n                          ...item,\n                          templateSettings:\n                            res.findByFieldsTemplateSetting.data[0],\n                        })}\n                      </>\n                    ),\n                  });\n                }\n              });\n          }}\n          setIsInputView={setIsInputView}\n          isInputView={isInputView}\n        />\n      </div>\n      <ModalConfirm\n        {...modalConfirm}\n        click={(type?: string) => {\n          switch (type) {\n            case 'delete': {\n              reportSettingStore.reportBodyService\n                .removeReportBody({\n                  input: { id: modalConfirm.id },\n                })\n                .then((res: any) => {\n                  setModalConfirm({ show: false });\n                  if (res.removeReportBody.success) {\n                    Toast.success({\n                      message: `😊 ${res.removeReportBody.message}`,\n                    });\n                    reportSettingStore.reportBodyService.listReportBody();\n                  }\n                });\n              break;\n            }\n            case 'update': {\n              reportSettingStore.reportBodyService\n                .update({\n                  input: {\n                    ...modalConfirm.data.fields,\n                    _id: modalConfirm.data.id,\n                  },\n                })\n                .then((res: any) => {\n                  setModalConfirm({ show: false });\n                  if (res.updateReportBody.success) {\n                    Toast.success({\n                      message: `😊 ${res.updateReportBody.message}`,\n                    });\n                    reportSettingStore.reportBodyService.listReportBody();\n                  }\n                });\n              break;\n            }\n          }\n        }}\n        onClose={() => setModalConfirm({ show: false })}\n      />\n      <ModalView\n        {...modalView}\n        onClose={() => setModalView({ visible: false })}\n      />\n    </>\n  );\n});\n","import React, { useEffect } from 'react';\nimport { observer } from 'mobx-react';\nimport {\n  Header,\n  PageHeading,\n  PageHeadingLabDetails,\n  MainPageHeading,\n} from '@/library/components';\nimport { useForm } from 'react-hook-form';\n\nimport '@/library/assets/css/accordion.css';\nimport { useStores } from '@/stores';\nimport { Accordion, AccordionItem } from 'react-sanfona';\nimport '@/library/assets/css/accordion.css';\n\nimport { PageBranding } from './page-branding.screen';\nimport { PageLayout } from './page-layout.screen';\nimport { TemplatePatientResult } from './template-patient-result.screen';\nimport { ReportBody } from './report-body.screen';\n\nconst ReportSettings = observer(() => {\n  const {\n    loading,\n    patientManagerStore,\n    routerStore,\n    administrativeDivisions,\n    doctorsStore,\n    loginStore,\n  } = useStores();\n\n  const {\n    control,\n    handleSubmit,\n    formState: { errors },\n    setValue,\n  } = useForm();\n  useEffect(() => {\n    // Default value initialization\n    setValue('species', patientManagerStore.patientManger.species);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [patientManagerStore.patientManger]);\n\n  return (\n    <>\n      <MainPageHeading\n        title={routerStore.selectedComponents?.title || ''}\n        store={loginStore}\n      />\n      <div>\n        <Accordion>\n          {[\n            { title: 'Page LAYOUT' },\n            { title: 'PAGE BRANDING' },\n            { title: 'REPORT BODY' },\n            { title: 'TEMPLATE PATIENT RESULT' },\n          ].map(item => {\n            return (\n              <AccordionItem\n                title={`${item.title}`}\n                // expanded={item.title === 'PAGE BRANDING'}\n              >\n                {item.title === 'Page LAYOUT' && <PageLayout />}\n                {item.title === 'PAGE BRANDING' && <PageBranding />}\n                {item.title === 'REPORT BODY' && <ReportBody />}\n                {item.title === 'TEMPLATE PATIENT RESULT' && (\n                  <TemplatePatientResult />\n                )}\n              </AccordionItem>\n            );\n          })}\n        </Accordion>\n      </div>\n    </>\n  );\n});\n\nexport default ReportSettings;\n","import React, {useRef} from 'react';\nimport {\n  PdfFooterView,\n  PdfSmall,\n} from '@components';\nimport {Image, View} from '@react-pdf/renderer';\n\ninterface PdfTemp0001FooterProps {\n  data: any;\n}\n\nexport const PdfTemp0001Footer = ({data}: PdfTemp0001FooterProps) => {\n  const mainBoxCSS = useRef<any>({});\n  const titleCSS = useRef<any>({});\n  const subTitleCSS = useRef<any>({});\n  if (data.footer?.mainBoxCSS) {\n    try {\n      mainBoxCSS.current = eval('({' + data.footer?.mainBoxCSS + '})');\n    } catch (e) {\n      mainBoxCSS.current = {};\n    }\n  }\n  if (data.footer?.titleCSS) {\n    try {\n      titleCSS.current = eval('({' + data.footer?.titleCSS + '})');\n    } catch (e) {\n      titleCSS.current = {};\n    }\n  }\n  if (data.footer?.subTitleCSS) {\n    try {\n      subTitleCSS.current = eval('({' + data.footer?.subTitleCSS + '})');\n    } catch (e) {\n      subTitleCSS.current = {};\n    }\n  }\n\n  return (\n    <PdfFooterView fixed style={{...mainBoxCSS.current}}>\n      {data.footer?.backgroundImage && (\n        <>\n          <View\n            style={{\n              position: 'absolute',\n              bottom: 0,\n              left: 0,\n              right: 0,\n              top: 0,\n            }}\n            fixed={true}\n          >\n            <Image\n              object-fit='fill'\n              style={{\n                position: 'absolute',\n                bottom: 0,\n                left: 0,\n                right: 0,\n                top: 0,\n                objectFit: 'fill',\n              }}\n              source={{\n                uri:\n                  typeof data.footer?.backgroundImage == 'object'\n                    ? data.footer?.backgroundImageBase64\n                    : data.footer?.backgroundImage,\n                method: 'GET',\n                headers: {'Cache-Control': 'no-cache'},\n                body: '',\n              }}\n            />\n          </View>\n        </>\n      )}\n      <PdfSmall style={{textAlign: 'center', ...titleCSS.current}}>\n        {data.footer?.title || 'Title'}\n      </PdfSmall>\n      <PdfSmall style={{...subTitleCSS.current}}>{`${\n        data.footer?.subTitle || 'Tel: 1234'\n      }`}</PdfSmall>\n    </PdfFooterView>\n  );\n};\n","import React, {useRef} from 'react';\nimport {\n  PdfHeading,\n  PdfHeader,\n  PdfImage,\n} from '@components';\nimport {Image, View} from '@react-pdf/renderer';\n\ninterface PdfTemp0001HeaderProps {\n  data: any;\n}\n\nexport const PdfTemp0001Header = ({data}: PdfTemp0001HeaderProps) => {\n  const headerTitleCSS = useRef<any>({});\n  const headerMainBoxCSS = useRef<any>({});\n  const imageCSS = useRef<any>({});\n  if (data.header?.titleCSS) {\n    try {\n      headerTitleCSS.current = eval('({' + data.header?.titleCSS + '})');\n    } catch (e) {\n      headerTitleCSS.current = {};\n    }\n  }\n  if (data.header?.mainBoxCSS) {\n    try {\n      headerMainBoxCSS.current = eval('({' + data.header?.mainBoxCSS + '})');\n    } catch (e) {\n      headerMainBoxCSS.current = {};\n    }\n  }\n  if (data.header?.logoCSS) {\n    try {\n      imageCSS.current = eval('({' + data.header?.logoCSS + '})');\n    } catch (e) {\n      imageCSS.current = {};\n    }\n  }\n\n  //\n  return (\n    <>\n      <PdfHeader\n        style={{\n          flexDirection: 'row',\n          alignItems: 'center',\n          ...headerMainBoxCSS.current,\n        }}\n        fixed\n      >\n        {data.header?.backgroundImage && (\n          <>\n            <View\n              style={{\n                position: 'absolute',\n                bottom: 0,\n                left: 0,\n                right: 0,\n                top: 0,\n              }}\n              fixed={true}\n            >\n              <Image\n                object-fit='fill'\n                style={{\n                  position: 'absolute',\n                  bottom: 0,\n                  left: 0,\n                  right: 0,\n                  top: 0,\n                  objectFit: 'fill',\n                }}\n                source={{\n                  uri:\n                    typeof data.header?.backgroundImage == 'object'\n                      ? data.header?.backgroundImageBase64\n                      : data.header?.backgroundImage,\n                  method: 'GET',\n                  headers: {'Cache-Control': 'no-cache'},\n                  body: '',\n                }}\n              />\n            </View>\n          </>\n        )}\n        {data.header?.logo && (\n          <PdfImage\n            src={data.header?.logo}\n            style={{\n              width: 50,\n              height: 50,\n              borderRadius: 25,\n              marginHorizontal: 10,\n              ...imageCSS.current,\n            }}\n          />\n        )}\n        <PdfHeading style={headerTitleCSS.current}>\n          {data.header?.title || 'Title'}\n        </PdfHeading>\n      </PdfHeader>\n    </>\n  );\n};\n","import React, {useRef} from 'react';\nimport {\n  PdfRegular,\n  PdfSubHeader,\n} from '@components';\n\ninterface PdfTemp0001SubHeaderProps {\n  data: any;\n}\n\nexport const PdfTemp0001SubHeader = ({data}: PdfTemp0001SubHeaderProps) => {\n  const mainBoxCSS = useRef<any>({});\n  const titleCSS = useRef<any>({});\n  const subTitleCSS = useRef<any>({});\n  if (data.subHeader?.mainBoxCSS) {\n    try {\n      mainBoxCSS.current = eval('({' + data.subHeader?.mainBoxCSS + '})');\n    } catch (e) {\n      mainBoxCSS.current = {};\n    }\n  }\n  if (data.subHeader?.titleCSS) {\n    try {\n      titleCSS.current = eval('({' + data.subHeader?.titleCSS + '})');\n    } catch (e) {\n      titleCSS.current = {};\n    }\n  }\n  if (data.subHeader?.subTitleCSS) {\n    try {\n      subTitleCSS.current = eval('({' + data.subHeader?.subTitleCSS + '})');\n    } catch (e) {\n      subTitleCSS.current = {};\n    }\n  }\n\n  return (\n    <PdfSubHeader style={{...mainBoxCSS.current}} fixed>\n      <PdfRegular style={{...titleCSS.current}}>\n        {data.subHeader?.title || 'Title'}\n      </PdfRegular>\n      <PdfRegular style={{...subTitleCSS.current}}>{`${\n        data.subHeader?.subTitle || 'web-url'\n      }`}</PdfRegular>\n    </PdfSubHeader>\n  );\n};\n","import React, {useRef} from 'react';\nimport {\n  Font,\n} from '@react-pdf/renderer';\nimport {\n  PdfView,\n  PdfFooterView,\n} from '@components';\nimport {observer} from 'mobx-react';\nimport {PdfTSTemp0001} from '../../page-layout/temp0001/temp0001.component';\n\nimport {PdfTemp0001Header} from './temp0001-header.component';\nimport {PdfTemp0001SubHeader} from './temp0001-sub-header.component';\nimport {PdfTemp0001Footer} from './temp0001-footer.component';\n\nFont.register({\n  family: 'arimaRegular',\n  src: '../../../assets/fonts/arima/Arima-Regular.ttf',\n});\n\ninterface PdfPBTemp0001Props {\n  data: any;\n  templateSettings?: any;\n  isWithHeader?: boolean;\n  children?: any;\n}\n\nexport const PdfPBTemp0001 = observer(\n  ({\n    data,\n    templateSettings,\n    isWithHeader = true,\n    children,\n  }: PdfPBTemp0001Props) => {\n    const pageNumberCSS = useRef<any>({});\n    if (data?.pageNumber?.pageNumberCSS) {\n      try {\n        pageNumberCSS.current = eval(\n          '({' + data?.pageNumber?.pageNumberCSS + '})',\n        );\n      } catch (e) {\n        pageNumberCSS.current = {};\n      }\n    }\n\n    return (\n      <PdfTSTemp0001\n        height={window.innerHeight / 1.3}\n        documentTitle='Page Branding'\n        isToolbar={templateSettings?.isToolbar}\n        isBackgroundImage={templateSettings?.isBackgroundImage || ''}\n        backgroundImage={templateSettings?.backgroundImage || ''}\n        mainBoxCSS={templateSettings?.mainBoxCSS}\n        pageSize={templateSettings?.pageSize}\n        isWithHeader={isWithHeader}\n        children={\n          <>\n            <PdfView style={{height: 100}} fixed mh={0} p={0}>\n              {isWithHeader && (\n                <>\n                  {/* Header */}\n                  {data?.isHeader && <PdfTemp0001Header data={data} />}\n\n                  {/* Sub Header */}\n                  {data?.isSubHeader && <PdfTemp0001SubHeader data={data} />}\n                </>\n              )}\n            </PdfView>\n\n            {/* children */}\n            {children}\n\n            {/* Page Number */}\n            {/* {data?.isPdfPageNumber && (\n              <PdfPageNumber style={{...pageNumberCSS.current}} />\n            )} */}\n\n            <PdfFooterView fixed bg='transparent' style={{height: 40}} p={0}>\n              {isWithHeader && data?.isFooter && (\n                <PdfTemp0001Footer data={data} />\n              )}\n            </PdfFooterView>\n          </>\n        }\n      />\n    );\n  },\n);\n","import React, {useRef} from 'react';\nimport {\n  Page,\n  StyleSheet,\n  Font,\n  Image,\n  View,\n} from '@react-pdf/renderer';\n\nFont.register({\n  family: 'arimaRegular',\n  src: '../../../assets/fonts/arima/Arima-Regular.ttf',\n});\n\nconst styles = StyleSheet.create({\n  page: {\n    backgroundColor: '#ffffff',\n    paddingBottom: '80pt',\n  },\n});\n\ninterface PdfTSTemp0001Props {\n  width?: string | number;\n  height?: number;\n  documentTitle?: string;\n  isToolbar?: boolean;\n  isBackgroundImage?: boolean;\n  backgroundImage?: string;\n  pageSize: any;\n  mainBoxCSS?: any;\n  isWithHeader?: boolean;\n  children: React.ReactNode;\n}\n\nexport const PdfTSTemp0001 = ({\n  width = '100%',\n  height = 300,\n  documentTitle = 'Page Layout',\n  isToolbar = false,\n  isBackgroundImage = false,\n  backgroundImage = '',\n  mainBoxCSS = {},\n  pageSize,\n  isWithHeader = true,\n  children,\n}: PdfTSTemp0001Props) => {\n  const boxCSS = useRef<any>(styles.page);\n  if (mainBoxCSS) {\n    try {\n      boxCSS.current = eval('({' + mainBoxCSS + '})');\n    } catch (e) {\n      boxCSS.current = styles.page;\n    }\n  }\n\n  return (\n    <>\n      {isToolbar ? (\n        <Page size={pageSize} style={boxCSS.current}>\n          {isBackgroundImage && isWithHeader && (\n            <View\n              style={{\n                position: 'absolute',\n                bottom: 0,\n                left: 0,\n                right: 0,\n                top: 0,\n              }}\n              fixed={true}\n            >\n              <Image\n                object-fit='fill'\n                style={{\n                  position: 'absolute',\n                  bottom: 0,\n                  left: 0,\n                  right: 0,\n                  top: 0,\n                  objectFit: 'fill',\n                }}\n                src={backgroundImage}\n              />\n            </View>\n          )}\n\n          {children}\n        </Page>\n      ) : (\n        <Page size={pageSize} style={boxCSS.current}>\n          {isBackgroundImage && isWithHeader && (\n            <View\n              style={{\n                position: 'absolute',\n                bottom: 0,\n                left: 0,\n                right: 0,\n                top: 0,\n              }}\n              fixed={true}\n            >\n              <Image\n                object-fit='fill'\n                style={{\n                  position: 'absolute',\n                  bottom: 0,\n                  left: 0,\n                  right: 0,\n                  top: 0,\n                  objectFit: 'fill',\n                }}\n                src={{\n                  uri: backgroundImage,\n                  method: 'GET',\n                  headers: {'Cache-Control': 'no-cache'},\n                  body: '',\n                }}\n              />\n            </View>\n          )}\n          {children}\n        </Page>\n      )}\n    </>\n  );\n};\n"],"names":["PageLayoutList","observer","props","_jsx","_Fragment","children","style","position","TableBootstrap","id","data","totalSize","isHideForm","isInputView","setHideForm","setIsInputView","columns","dataField","text","hidden","csvExport","headerClasses","sort","editable","editorStyle","textTransform","csvFormatter","col","row","concat","isToolbar","formatter","cell","Form","value","onChange","onUpdateItem","_id","isBackgroundImage","backgroundImage","src","alt","className","editorRenderer","editorProps","column","rowIndex","columnIndex","_jsxs","placeholder","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","e","wrap","_context","prev","next","target","files","stop","_x","apply","arguments","Buttons","size","type","icon","Svg","onClick","pageSize","selected","map","item","index","label","color","backgroundColor","onBlur","mainBoxCSS","defaultValue","cellContent","Tooltip","tooltipText","Icons","onPdfPreview","onDelete","show","title","body","classes","colIndex","_props$data","zIndex","length","isEditModify","isSelectRow","fileName","onSelectedRow","rows","onPageSizeChange","page","onFilter","filter","clearAllFilter","sectionSetting","version","environment","dynamicStylingFields","hideExcelSheet","AutoCompleteLayoutCode","_ref$hasError","hasError","onSelect","displayValue","_useStores","useStores","loading","reportSettingStore","routerStore","AutoCompleteFilterSingleSelectMultiFieldsDisplay","loader","list","pageLayoutList","displayKey","PageBrandingHeader","_useForm","useForm","control","errors","handleSubmit","formState","reset","setValue","setError","clearErrors","useEffect","isClearReset","Grid","cols","Controller","render","_ref$field","field","_reportSettingStore$p","updatePageBranding","_objectSpread","pageBranding","header","name","rules","required","_ref2","_ref2$field","CSSMultiline","titleCSS","_ref3","_ref3$field","headerLogo","_ref4","_reportSettingStore$p2","logo","_ref5","_ref5$field","logoCSS","_ref6","_ref6$field","_ref7","_callee2","_context2","t0","t1","t2","t3","t4","t5","t6","t7","resizeFile","t8","sent","t9","backgroundImageBase64","t10","t11","t12","call","_x2","_ref8","_ref8$field","PageBrandingSubHeader","subHeader","subTitle","_ref4$field","subTitleCSS","PageBrandingFooter","footerTitle","footer","_ref7$field","_reportSettingStore$p3","PageNumber","pageNumberCSS","pageNumber","PageBrandingList","layoutCode","tempCode","isHeader","_row$header","_row$header2","_row$header3","_row$header4","_row$header5","_row$header6","_row$header7","_row$header8","_row$header9","isSubHeader","_row$subHeader","_row$subHeader2","_row$subHeader3","_row$subHeader4","_row$subHeader5","_row$subHeader6","_row$subHeader7","_row$subHeader8","_row$subHeader9","_row$subHeader10","isFooter","_row$footer","_row$footer2","_row$footer3","_row$footer4","_row$footer5","_row$footer6","_row$footer7","_row$footer8","_row$footer9","_callee3","_context3","_x3","_row$footer10","_row$footer11","isPdfPageNumber","_row$pageNumber","_row$pageNumber2","companyCode","General","_reportSettingStore$r","_reportSettingStore$r2","_reportSettingStore$r4","_reportSettingStore$r5","_reportSettingStore$r7","_reportSettingStore$r8","_reportSettingStore$r10","_reportSettingStore$r11","_reportSettingStore$r13","_reportSettingStore$r14","_reportSettingStore$r16","_reportSettingStore$r17","_reportSettingStore$r19","_reportSettingStore$r20","_reportSettingStore$r22","_reportSettingStore$r23","_reportSettingStore$r25","_reportSettingStore$r26","_reportSettingStore$r28","_reportSettingStore$r29","List","direction","space","justify","fill","reportBody","general","printDepartmentNameCSS","_reportSettingStore$r3","updateReportBody","isToggleLabel","isPrintDepartmentName","_reportSettingStore$r6","packageNamePrintCSS","_reportSettingStore$r9","isPackageNamePrint","_reportSettingStore$r12","reportGroupingCSS","_reportSettingStore$r15","isReportGrouping","_reportSettingStore$r18","reportOrderCSS","_reportSettingStore$r21","isReportOrder","_reportSettingStore$r24","methodFlagCSS","_reportSettingStore$r27","isMethodFlag","_reportSettingStore$r30","Panel","panel","printPanelNameCSS","isPrintPanelName","methodNameCSS","isMethodName","panelInterpretationCSS","isPanelInterpretation","Test","test","printTestNameCSS","isPrintTestName","testInterpretationCSS","isTestInterpretation","Analyte","_reportSettingStore$r31","_reportSettingStore$r32","_reportSettingStore$r34","_reportSettingStore$r35","_reportSettingStore$r37","_reportSettingStore$r38","_reportSettingStore$r40","_reportSettingStore$r41","_reportSettingStore$r43","_reportSettingStore$r44","_reportSettingStore$r46","_reportSettingStore$r47","_reportSettingStore$r49","_reportSettingStore$r50","_reportSettingStore$r52","_reportSettingStore$r53","_reportSettingStore$r55","_reportSettingStore$r56","_reportSettingStore$r58","_reportSettingStore$r59","_reportSettingStore$r61","_reportSettingStore$r62","_reportSettingStore$r64","_reportSettingStore$r65","_reportSettingStore$r67","_reportSettingStore$r68","_reportSettingStore$r70","_reportSettingStore$r71","_reportSettingStore$r73","_reportSettingStore$r74","_reportSettingStore$r76","_reportSettingStore$r77","analyte","printAnalyteNameCSS","isPrintAnalyteName","headerItemCSS","isHeaderItem","abnFlagCSS","isAbnFlag","criticalCSS","isCritical","loNorCSS","_reportSettingStore$r33","isLoNor","_reportSettingStore$r36","hiNorCSS","_reportSettingStore$r39","isHiNor","_reportSettingStore$r42","resultStatusCSS","_reportSettingStore$r45","isResultStatus","_reportSettingStore$r48","methodCSS","_reportSettingStore$r51","isMethod","_reportSettingStore$r54","reportableCSS","_reportSettingStore$r57","isReportable","_reportSettingStore$r60","interpretationCSS","_reportSettingStore$r63","isInterpretation","_reportSettingStore$r66","conclusionCSS","_reportSettingStore$r69","isConclusion","_reportSettingStore$r72","printAnalyteInterpretationCSS","_reportSettingStore$r75","isPrintAnalyteInterpretation","_reportSettingStore$r78","ReportBodyList","AutoCompletePageBrandingCode","pageBrandingCode","JSON","stringify","pageBrandingList","ReportBodyComponents","reportBodyList","EndOfPageComponents","_reportSettingStore$s","libraryStore","AutoCompleteFilterMutiSelectMultiFieldsDisplay","listLibrary","selectedItemTemplatePatientResult","endOfPage","onUpdate","_reportSettingStore$s2","_","o","updateLibraryList","listLibraryCopy","libraryService","filterByFields","input","fields","srText","limit","_reportSettingStore$s3","items","push","updateSelectedItemTemplatePatientResult","EndOfReportComponents","endOfReport","TemplatePatientResultList","reportTemplateType","_row$reportBody","_row$reportBody2","reportCode","reportName","editor","Type","TEXTAREA","reportOrder","Number","parseInt","_row$endOfPage","details","_row$endOfReport","_defineProperty","arr","res","forEach","obj","key","Object","keys","mapToArray","alignContent","alignItems","alignSelf","flex","flexDirection","flexWrap","flexFlow","flexGrow","flexShrink","flexBasis","justifyContent","gap","rowGap","columnGap","aspectRatio","bottom","display","left","right","top","overflow","height","maxHeight","maxWidth","minHeight","minWidth","width","opacity","fontSize","fontFamily","fontStyle","fontWeight","letterSpacing","lineHeight","maxLines","textAlign","textDecoration","textDecorationColor","textDecorationStyle","textIndent","textOverflow","verticalAlign","objectFit","objectPosition","objectPositionX","objectPositionY","margin","marginHorizontal","marginVertical","marginTop","marginRight","marginBottom","marginLeft","padding","paddingHorizontal","paddingVertical","paddingTop","paddingRight","paddingBottom","paddingLeft","transform","transformOrigin","transformOriginX","transformOriginY","border","borderWidth","borderColor","borderStyle","borderTop","borderTopColor","borderTopStyle","borderTopWidth","borderRight","borderRightColor","borderRightStyle","borderRightWidth","borderBottom","borderBottomColor","borderBottomStyle","borderBottomWidth","borderLeft","borderLeftColor","borderLeftStyle","borderLeftWidth","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","borderRadius","_ref$label","_ref$defaultValue","_ref$className","_ref$style","_ref$placeholder","useRef","_useState","useState","_useState2","_slicedToArray","properties","setProperties","_useState3","_useState4","isListOpen","setIsListOpen","current","ref","wrapperRef","handleClickOutside","event","contains","document","addEventListener","removeEventListener","css","_matchString","_matchString2","_matchString3","matchString","split","_item$","innerItem","startsWith","onKeyUp","_item$2","prop","_value$current","existsString","includes","join","replaceAll","PageBranding","window","innerHeight","_reportSettingStore$p8","modalConfirm","setModalConfirm","modalView","setModalView","_useState5","_useState6","_useState7","_useState8","isExistsTempCode","setIsExistsTempCode","_useState9","_useState10","setClearReset","_reportSettingStore$p4","getTemplate","_reportSettingStore$p7","PDFViewer","showToolbar","pageLayout","Document","PdfPBTemp0001","templateSettings","RouterFlow","userPermission","brandingCode","toUpperCase","pageBrandingService","findByFields","then","findByFieldsPageBranding","success","Toast","error","message","brandingTitle","headerVisible","subHeaderVisible","footerVisible","Accordion","accordionItem","getAccordionItem","AccordionItem","expanded","align","_reportSettingStore$p5","_reportSettingStore$p6","addPageBranding","undefined","createPageBranding","resetReportBody","location","reload","overflowX","pageBrandingListCount","isDelete","selectedItem","pageLayoutService","findByFieldsTemplateSetting","visible","ModalConfirm","click","removePageBranding","listPageBranding","update","setTimeout","onClose","ModalView","PageLayout","tempCodeValue","updatePageLayout","tempName","tempNameValue","warning","isToolBar","href","rel","PdfTSTemp0001","documentTitle","PdfMedium","addTemplateSetting","createTemplateSetting","pageLayoutListCount","removeTemplateSetting","listTemplateSetting","updateTemplateSetting","TemplatePatientResult","isExistsRecord","setIsExistsRecord","_reportSettingStore$t","_reportSettingStore$t2","updateTemplatePatientResult","templatePatientResult","templatePatientResultService","templateCode","templateTitle","findByFieldsTemplatePatientResult","_reportSettingStore$t3","_reportSettingStore$t4","_reportSettingStore$t5","_reportSettingStore$t6","addTemplatePatientResult","createTemplatePatientResult","SelectedItemsTemplatePatientResult","templatePatientResultList","templatePatientResultListCount","listTemplatePatientResult","removeTemplatePatientResult","ReportBody","reportBodyService","findByFieldsReportBody","Collapsible","_Object$keys","_Object$keys2","_Object$keys3","_Object$keys4","addReportBody","omitBy","createReportBody","listReportBody","reportBodyListCount","removeReportBody","_routerStore$selected","patientManagerStore","loginStore","administrativeDivisions","doctorsStore","patientManger","species","MainPageHeading","selectedComponents","store","PdfTemp0001Footer","_data$footer","_data$footer3","_data$footer5","_data$footer7","_data$footer8","_data$footer9","_data$footer10","_data$footer11","_data$footer12","_data$footer2","eval","_data$footer4","_data$footer6","PdfFooterView","fixed","View","Image","source","uri","method","headers","PdfSmall","PdfTemp0001Header","_data$header","_data$header3","_data$header5","_data$header7","_data$header8","_data$header9","_data$header10","_data$header11","_data$header12","_data$header13","headerTitleCSS","headerMainBoxCSS","imageCSS","_data$header2","_data$header4","_data$header6","PdfHeader","PdfImage","PdfHeading","PdfTemp0001SubHeader","_data$subHeader","_data$subHeader3","_data$subHeader5","_data$subHeader7","_data$subHeader8","_data$subHeader2","_data$subHeader4","_data$subHeader6","PdfSubHeader","PdfRegular","Font","register","family","_data$pageNumber","_ref$isWithHeader","isWithHeader","_data$pageNumber2","PdfView","mh","p","bg","styles","StyleSheet","create","_ref$width","_ref$height","_ref$documentTitle","_ref$isToolbar","_ref$isBackgroundImag","_ref$backgroundImage","_ref$mainBoxCSS","boxCSS","Page"],"sourceRoot":""}