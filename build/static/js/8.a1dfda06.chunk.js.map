{"version":3,"sources":["features/settings/shortcutMenu/services/shortcutMenu-Services.ts","features/settings/shortcutMenu/stores/index.ts","features/settings/shortcutMenu/stores/rolemapping-store.ts","features/settings/shortcutMenu/scenes/ShortcutMenu.tsx"],"names":["ShortcutMenuService","updateShortcutMenu","shortcutMenu","Promise","resolve","reject","console","log","client","post","then","res","catch","error","BaseService","Stores","shortcutMenuStore","version","makeAutoObservable","this","Services","ignore","observable","computed","action","shortcut","shortcutMenuList","React","createContext","ShortcutMenu","Search","SearchBar","ClearSearchButton","CSVExport","ExportCSVButton","observer","useEffect","list","RootStore","routerStore","userRouter","filter","item","children","userShortcutMenu","LoginStore","loginStore","login","userItem","category","name","length","selected","push","Header","PageHeading","title","selectedComponents","className","map","index","Icons","IconContext","color","size","LibraryComponents","getIconTag","getIcons","icon","IconBs","BsList","type","value","checked","onChange","onItemSelect","List","direction","space","align","Buttons","Button","Icon","Save","onClick","selectedList","id","_id","status","ToastsStore","success","updateLogin"],"mappings":"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","file":"static/js/8.a1dfda06.chunk.js","sourcesContent":["/**\n * @fileoverview Use this file invoke Memetoons API\n * implementation related to Memetoons standards\n * @package Feed Service\n * @author limsplus\n */\n//import * as Models from \"../models\"\nimport BaseService from \"@lp/library/modules/base-service\"\n\nclass ShortcutMenuService extends BaseService {\n  updateShortcutMenu = (shortcutMenu: any) =>\n    new Promise<any>((resolve, reject) => {\n      console.log({shortcutMenu});\n      \n      this.client\n        .post(`/auth/updateShortcutMenu`, shortcutMenu)\n        .then((res) => {\n          resolve(res)\n        })\n        .catch((error) => {\n          reject({ error })\n        })\n    })\n}\n\nexport default ShortcutMenuService\n","import React from \"react\"\n\nimport ShortcutMenuStore from \"./rolemapping-store\"\n\nexport const Stores = {\n  shortcutMenuStore: new ShortcutMenuStore(),\n}\n  \nexport const Contexts = {\n  shortcutMenuContext: React.createContext(Stores.shortcutMenuStore),\n}\n","import { version, ignore } from \"mobx-sync\"\nimport { makeAutoObservable, action, observable, computed } from \"mobx\"\nimport * as Services from \"../services\"\n\n@version(0.1)\nclass ShortcutMenuStore {\n  @ignore @observable shortcutMenuList?: any[] = []\n  constructor() {\n    makeAutoObservable(this)\n  }\n\n  @computed get ShortcutMenuService() {\n    return new Services.ShortcutMenuService()\n  }\n\n  @action updateShortcutMenu = (shortcut: any) => {\n    this.shortcutMenuList = shortcut\n  }\n}\nexport default ShortcutMenuStore\n","/* eslint-disable */\nimport React, { useEffect, useState } from \"react\"\nimport { observer } from \"mobx-react\"\nimport * as LibraryComponents from \"@lp/library/components\"\nimport * as LibraryModels from \"@lp/library/models\"\nimport * as Services from \"../services\"\nimport TextField from \"@material-ui/core/TextField\"\nimport Autocomplete from \"@material-ui/lab/Autocomplete\"\nimport moment from \"moment\"\nimport BootstrapTable from \"react-bootstrap-table-next\"\nimport ToolkitProvider, { Search, CSVExport } from \"react-bootstrap-table2-toolkit\"\nimport paginationFactory from \"react-bootstrap-table2-paginator\"\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\"\n\nimport { Stores } from \"../stores\"\nimport { Stores as LoginStore } from \"@lp/features/login/stores\"\n\nimport { Stores as RootStore } from \"@lp/library/stores\"\n\nimport { RouterFlow } from \"@lp/flows\"\nimport { toJS } from \"mobx\"\nconst { SearchBar, ClearSearchButton } = Search\nconst { ExportCSVButton } = CSVExport\n\nconst ShortcutMenu = observer(() => {\n  useEffect(() => {\n    const list: any[] = []\n    RootStore.routerStore.userRouter?.filter((item) => {\n      item.children.filter((children: any) => {\n        const userShortcutMenu = LoginStore.loginStore.login?.shortcutMenu?.filter(\n          (userItem) =>\n            userItem.category === item.name && userItem.name === children.name\n        )\n        if (userShortcutMenu && userShortcutMenu?.length > 0) {\n          children.selected = true\n        }\n        children.category = item.name\n        list.push(children)\n      })\n    })\n    Stores.shortcutMenuStore.updateShortcutMenu(list)\n  }, [])\n\n  const onItemSelect = (item: any, index: number) => {\n    const list = Stores.shortcutMenuStore.shortcutMenuList\n    if (list) {\n      list[index].selected = !list[index].selected\n    }\n    Stores.shortcutMenuStore.updateShortcutMenu(list)\n  }\n  return (\n    <>\n      <LibraryComponents.Atoms.Header>\n        <LibraryComponents.Atoms.PageHeading\n          title={RootStore.routerStore.selectedComponents?.title || \"\"}\n        />\n      </LibraryComponents.Atoms.Header>\n      {LoginStore.loginStore.login?.shortcutMenu &&\n        LoginStore.loginStore.login?.shortcutMenu?.length > 0 && (\n          <div>\n            <label className=\"mt-2\">Active:</label>\n            <ul className=\"grid grid-cols-6 p-2\">\n              {LoginStore.loginStore.login?.shortcutMenu?.map((item, index) => (\n                <>\n                  <div className=\"flex items-center bg-blue-500  p-2 m-2 rounded-md\">\n                    <LibraryComponents.Atoms.Icons.IconContext\n                      color=\"#fff\"\n                      size=\"22\"\n                    >\n                      {LibraryComponents.Atoms.Icons.getIconTag(\n                        LibraryComponents.Atoms.Icons.getIcons(item.icon) ||\n                          LibraryComponents.Atoms.Icons.IconBs.BsList\n                      )}\n                    </LibraryComponents.Atoms.Icons.IconContext>\n                    <li className=\"m-2 text-white\">{item.title}</li>\n                  </div>\n                </>\n              ))}\n            </ul>\n          </div>\n        )}\n\n      <hr />\n      <div className=\"flex-wrap\">\n        <label className=\"mt-2\">List:</label>\n        <ul className=\"grid grid-cols-6 p-2\">\n          {Stores.shortcutMenuStore.shortcutMenuList &&\n            Stores.shortcutMenuStore.shortcutMenuList?.map((item, index) => (\n              <>\n                <div className=\"flex items-center bg-gray-500  p-2 m-2 rounded-md\">\n                  <input\n                    type=\"checkbox\"\n                    className=\"mr-2\"\n                    name={item.name}\n                    value={item.name}\n                    checked={item.selected}\n                    onChange={() => onItemSelect(item, index)}\n                  />\n\n                  <LibraryComponents.Atoms.Icons.IconContext color=\"#fff\" size=\"22\">\n                    {LibraryComponents.Atoms.Icons.getIconTag(\n                      LibraryComponents.Atoms.Icons.getIcons(item.icon) ||\n                        LibraryComponents.Atoms.Icons.IconBs.BsList\n                    )}\n                  </LibraryComponents.Atoms.Icons.IconContext>\n                  <li className=\"m-2 text-white\">{item.title}</li>\n                </div>\n              </>\n            ))}\n        </ul>\n        <br />\n        <LibraryComponents.Atoms.List direction=\"row\" space={3} align=\"center\">\n          <LibraryComponents.Atoms.Buttons.Button\n            size=\"medium\"\n            type=\"solid\"\n            icon={LibraryComponents.Atoms.Icon.Save}\n            onClick={() => {\n              const selectedList = Stores.shortcutMenuStore.shortcutMenuList?.filter(\n                (item) => item.selected === true\n              )\n              if (selectedList && selectedList?.length > 0) {\n                Stores.shortcutMenuStore.ShortcutMenuService.updateShortcutMenu({\n                  selectedList,\n                  id: LoginStore.loginStore.login?._id,\n                }).then((res) => {\n                  if (res.status === 200) {\n                    LibraryComponents.Atoms.ToastsStore.success(\n                      `Shortcut Menu updated.`\n                    )\n                    LoginStore.loginStore.updateLogin({\n                      ...LoginStore.loginStore.login,\n                      shortcutMenu: selectedList,\n                    })\n                  } else {\n                    LibraryComponents.Atoms.ToastsStore.error(`Please try agian.`)\n                  }\n                })\n              }\n            }}\n          >\n            Update\n          </LibraryComponents.Atoms.Buttons.Button>\n        </LibraryComponents.Atoms.List>\n      </div>\n    </>\n  )\n})\n\nexport default ShortcutMenu\n"],"sourceRoot":""}