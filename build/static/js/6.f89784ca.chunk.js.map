{"version":3,"sources":["features/communication/scenes/mapping/conversationMapping/ConversationMapping.tsx"],"names":["ConversationMapping","Search","SearchBar","ClearSearchButton","CSVExport","ExportCSVButton","observer","useState","modalConfirm","setModalConfirm","hideAddConversationMapping","setHideAddConversationMapping","Header","PageHeading","title","RootStore","routerStore","selectedComponents","RouterFlow","checkPermission","toJS","userPermission","Buttons","ButtonCircleAddRemove","show","onClick","status","className","Grid","cols","List","direction","space","justify","fill","Form","Input","type","label","id","name","placeholder","value","Stores","conversationMappingStore","conversationMapping","hexadecimal","onChange","updateConversationMapping","binary","ascii","align","Button","size","icon","LibraryComponents","Icon","Save","undefined","rootStore","setProcessLoading","conversationMappingService","addConversationMapping","then","res","ToastsStore","success","window","location","reload","warning","Remove","ConversationMappingList","data","listConversationMapping","isDelete","isEditModify","onDelete","selectedUser","onSelectedRow","rows","body","onUpdateItem","dataField","ModalConfirm","click","deleteConversationMapping","fetchConversationMapping","updateConversationMappingUpdateSingleFiled","onClose"],"mappings":"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","file":"static/js/6.f89784ca.chunk.js","sourcesContent":["/* eslint-disable */\r\nimport React, { useState, useContext, useEffect } from \"react\"\r\nimport { observer } from \"mobx-react\"\r\nimport * as LibraryComponents from \"@lp/library/components\"\r\nimport * as FeatureComponents from \"../../../components\"\r\nimport BootstrapTable from \"react-bootstrap-table-next\"\r\nimport cellEditFactory, { Type } from \"react-bootstrap-table2-editor\"\r\nimport ToolkitProvider, { Search, CSVExport } from \"react-bootstrap-table2-toolkit\"\r\nimport paginationFactory from \"react-bootstrap-table2-paginator\"\r\nimport moment from \"moment\"\r\n\r\nconst { SearchBar, ClearSearchButton } = Search\r\nconst { ExportCSVButton } = CSVExport\r\n\r\nimport { Stores } from \"../../../stores\"\r\nimport { Stores as RootStore } from \"@lp/library/stores\"\r\n\r\nimport { RouterFlow } from \"@lp/flows\"\r\nimport { toJS } from \"mobx\"\r\n\r\nconst ConversationMapping = observer(() => {\r\n  const [modalConfirm, setModalConfirm] = useState<any>()\r\n  const [\r\n    hideAddConversationMapping,\r\n    setHideAddConversationMapping,\r\n  ] = useState<boolean>(true)\r\n\r\n  return (\r\n    <>\r\n      <LibraryComponents.Atoms.Header>\r\n        <LibraryComponents.Atoms.PageHeading\r\n          title={RootStore.routerStore.selectedComponents?.title || \"\"}\r\n        />\r\n      </LibraryComponents.Atoms.Header>\r\n      {RouterFlow.checkPermission(\r\n        toJS(RootStore.routerStore.userPermission),\r\n        \"Add\"\r\n      ) && (\r\n        <LibraryComponents.Atoms.Buttons.ButtonCircleAddRemove\r\n          show={hideAddConversationMapping}\r\n          onClick={(status) =>\r\n            setHideAddConversationMapping(!hideAddConversationMapping)\r\n          }\r\n        />\r\n      )}\r\n      <div className=\" mx-auto  flex-wrap\">\r\n        <div\r\n          className={\r\n            \"p-2 rounded-lg shadow-xl \" +\r\n            (hideAddConversationMapping ? \"hidden\" : \"shown\")\r\n          }\r\n        >\r\n          <LibraryComponents.Atoms.Grid cols={2}>\r\n            <LibraryComponents.Atoms.List\r\n              direction=\"col\"\r\n              space={4}\r\n              justify=\"stretch\"\r\n              fill\r\n            >\r\n              <LibraryComponents.Atoms.Form.Input\r\n                type=\"text\"\r\n                label=\"Hexa Decimal\"\r\n                id=\"hexadecimal\"\r\n                name=\"hexadecimal\"\r\n                placeholder=\"Hexa Decimal\"\r\n                value={\r\n                  Stores.conversationMappingStore.conversationMapping?.hexadecimal\r\n                }\r\n                onChange={(hexadecimal) => {\r\n                  Stores.conversationMappingStore.updateConversationMapping({\r\n                    ...Stores.conversationMappingStore.conversationMapping,\r\n                    hexadecimal,\r\n                  })\r\n                }}\r\n              />\r\n\r\n              <LibraryComponents.Atoms.Form.Input\r\n                type=\"text\"\r\n                label=\"Binary\"\r\n                id=\"binary\"\r\n                name=\"binary\"\r\n                placeholder=\"Binary\"\r\n                value={Stores.conversationMappingStore.conversationMapping?.binary}\r\n                onChange={(binary) => {\r\n                  Stores.conversationMappingStore.updateConversationMapping({\r\n                    ...Stores.conversationMappingStore.conversationMapping,\r\n                    binary,\r\n                  })\r\n                }}\r\n              />\r\n\r\n              <LibraryComponents.Atoms.Form.Input\r\n                type=\"text\"\r\n                label=\"ASCII\"\r\n                id=\"ascii\"\r\n                name=\"ascii\"\r\n                placeholder=\"ASCII\"\r\n                value={Stores.conversationMappingStore.conversationMapping?.ascii}\r\n                onChange={(ascii) => {\r\n                  Stores.conversationMappingStore.updateConversationMapping({\r\n                    ...Stores.conversationMappingStore.conversationMapping,\r\n                    ascii,\r\n                  })\r\n                }}\r\n              />\r\n              <div className=\"clearfix\" />\r\n            </LibraryComponents.Atoms.List>\r\n          </LibraryComponents.Atoms.Grid>\r\n          <LibraryComponents.Atoms.List direction=\"row\" space={3} align=\"center\">\r\n            <LibraryComponents.Atoms.Buttons.Button\r\n              size=\"medium\"\r\n              type=\"solid\"\r\n              icon={LibraryComponents.Atoms.Icon.Save}\r\n              onClick={() => {\r\n                if (\r\n                  Stores.conversationMappingStore.conversationMapping !== undefined\r\n                ) {\r\n                  RootStore.rootStore.setProcessLoading(true)\r\n                  Stores.conversationMappingStore.conversationMappingService\r\n                    .addConversationMapping(\r\n                      Stores.conversationMappingStore.conversationMapping\r\n                    )\r\n                    .then((res) => {\r\n                      RootStore.rootStore.setProcessLoading(false)\r\n                      if (res.status === 200) {\r\n                        LibraryComponents.Atoms.ToastsStore.success(\r\n                          `Conversation Mapping created.`\r\n                        )\r\n                        window.location.reload()\r\n                        //Stores.conversationMappingStore.()\r\n                      }\r\n                    })\r\n                } else {\r\n                  LibraryComponents.Atoms.ToastsStore.warning(\r\n                    \"Please enter all information!\"\r\n                  )\r\n                }\r\n              }}\r\n            >\r\n              Save\r\n            </LibraryComponents.Atoms.Buttons.Button>\r\n\r\n            <LibraryComponents.Atoms.Buttons.Button\r\n              size=\"medium\"\r\n              type=\"outline\"\r\n              icon={LibraryComponents.Atoms.Icon.Remove}\r\n              onClick={() => {\r\n                window.location.reload()\r\n              }}\r\n            >\r\n              Clear\r\n            </LibraryComponents.Atoms.Buttons.Button>\r\n            <div className=\"clearfix\" />\r\n          </LibraryComponents.Atoms.List>\r\n        </div>\r\n        <div className=\"p-2 rounded-lg shadow-xl overflow-scroll\">\r\n          <FeatureComponents.Molecules.ConversationMappingList\r\n            data={Stores.conversationMappingStore.listConversationMapping || []}\r\n            isDelete={RouterFlow.checkPermission(\r\n              toJS(RootStore.routerStore.userPermission),\r\n              \"Delete\"\r\n            )}\r\n            isEditModify={RouterFlow.checkPermission(\r\n              toJS(RootStore.routerStore.userPermission),\r\n              \"Edit/Modify\"\r\n            )}\r\n            onDelete={(selectedUser) => setModalConfirm(selectedUser)}\r\n            onSelectedRow={(rows) => {\r\n              setModalConfirm({\r\n                show: true,\r\n                type: \"Delete\",\r\n                id: rows,\r\n                title: \"Are you sure?\",\r\n                body: `Delete selected items!`,\r\n              })\r\n            }}\r\n            onUpdateItem={(value: any, dataField: string, id: string) => {\r\n              setModalConfirm({\r\n                show: true,\r\n                type: \"Update\",\r\n                data: { value, dataField, id },\r\n                title: \"Are you sure?\",\r\n                body: `Update conversation mapping!`,\r\n              })\r\n            }}\r\n          />\r\n        </div>\r\n        <LibraryComponents.Molecules.ModalConfirm\r\n          {...modalConfirm}\r\n          click={(type?: string) => {\r\n            RootStore.rootStore.setProcessLoading(true)\r\n            if (type === \"Delete\") {\r\n              Stores.conversationMappingStore.conversationMappingService\r\n                .deleteConversationMapping(modalConfirm.id)\r\n                .then((res) => {\r\n                  RootStore.rootStore.setProcessLoading(false)\r\n                  setModalConfirm({ show: false })\r\n                  if (res.status === 200) {\r\n                    Stores.conversationMappingStore.fetchConversationMapping()\r\n                    LibraryComponents.Atoms.ToastsStore.success(`Items deleted.`)\r\n                  }\r\n                })\r\n            } else if (type == \"Update\") {\r\n              Stores.conversationMappingStore.conversationMappingService\r\n                .updateConversationMappingUpdateSingleFiled(modalConfirm.data)\r\n                .then((res) => {\r\n                  RootStore.rootStore.setProcessLoading(false)\r\n                  setModalConfirm({ show: false })\r\n                  if (res.status === 200) {\r\n                    Stores.conversationMappingStore.fetchConversationMapping()\r\n                    LibraryComponents.Atoms.ToastsStore.success(`Updated.`)\r\n                  }\r\n                })\r\n            }\r\n          }}\r\n          onClose={() => setModalConfirm({ show: false })}\r\n        />\r\n      </div>\r\n    </>\r\n  )\r\n})\r\n\r\nexport default ConversationMapping\r\n"],"sourceRoot":""}