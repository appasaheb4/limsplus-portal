{"version":3,"file":"static/js/8562.3dc94f50.chunk.js","mappings":"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","sources":["features/validation/panel-approval/components/molecules/result/table-bootstrap.components.tsx","features/validation/panel-approval/components/molecules/result/ref-ranges.component.tsx","features/validation/panel-approval/components/molecules/result/result.components.tsx","features/validation/panel-approval/components/molecules/panel-approval/table-bootstrap.components.tsx","features/validation/panel-approval/components/molecules/panel-approval/panel-approval.components.tsx","features/validation/panel-approval/components/molecules/patient-demographics/table-bootstrap.components.tsx","features/validation/panel-approval/components/molecules/patient-demographics/patient-demographics-list.components.tsx","features/validation/panel-approval/screens/panel-approval.screen.tsx"],"sourcesContent":["/* eslint-disable */\nimport React, { useState } from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport _ from 'lodash';\nimport ToolkitProvider, {\n  Search,\n  CSVExport,\n} from 'react-bootstrap-table2-toolkit/dist/react-bootstrap-table2-toolkit';\nimport cellEditFactory from 'react-bootstrap-table2-editor';\nimport paginationFactory, {\n  PaginationProvider,\n  PaginationListStandalone,\n  SizePerPageDropdownStandalone,\n  PaginationTotalStandalone,\n} from 'react-bootstrap-table2-paginator';\nimport filterFactory from 'react-bootstrap-table2-filter';\nimport dayjs from 'dayjs';\nimport '@/library/components/organisms/style.css';\n\nimport { Buttons, Icons } from '@/library/components';\n\nconst { SearchBar, ClearSearchButton } = Search;\nconst { ExportCSVButton } = CSVExport;\n\ninterface TableBootstrapProps {\n  id: string;\n  data: any;\n  totalSize?: number;\n  searchPlaceholder?: string;\n  page?: number;\n  sizePerPage?: number;\n  columns: any;\n  fileName: string;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  isSelectRow?: boolean;\n  selectedItem?: any;\n  onDelete?: (selectedItem: any) => void;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (value: any, dataField: string, id: string) => void;\n  onPageSizeChange?: (page: number, limit: number) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n  clearAllFilter?: () => void;\n  onClickRow?: (item: any, index: number) => void;\n}\nexport const TableBootstrap = ({\n  id = '',\n  data,\n  totalSize = 10,\n  searchPlaceholder = 'Search...',\n  page = 0,\n  sizePerPage = 10,\n  columns,\n  fileName,\n  isEditModify,\n  isSelectRow,\n  selectedItem,\n  onSelectedRow,\n  onUpdateItem,\n  onPageSizeChange,\n  onFilter,\n  clearAllFilter,\n  onClickRow,\n}: TableBootstrapProps) => {\n  const [selectedRow, setSelectedRow] = useState<any[]>();\n  const [isFilterOpen, setIsFilterOpen] = useState<boolean>(false);\n\n  const customTotal = (from, to, size) => {\n    return (\n      <>\n        <div className='clearfix' />\n        <span>\n          Showing {from} to {to} of {size} Results\n        </span>\n      </>\n    );\n  };\n\n  const sizePerPageRenderer = ({\n    options,\n    currSizePerPage,\n    onSizePerPageChange,\n  }) => (\n    <div className='btn-group items-center' role='group'>\n      <input\n        type='number'\n        min='0'\n        placeholder='No'\n        onChange={(e: any) => {\n          if (e.target.value) {\n            onSizePerPageChange(e.target.value);\n          }\n        }}\n        className='mr-2 ml-2 leading-4 p-2 w-14 focus:outline-none focus:ring block  shadow-sm sm:text-base border border-gray-300 rounded-md'\n      />\n      {options.map(option => (\n        <button\n          key={option.text}\n          type='button'\n          onClick={() => onSizePerPageChange(option.page)}\n          className={`btn  ${\n            currSizePerPage === `${option.page}` ? 'bg-primary' : 'bg-grey'\n          }`}\n        >\n          {option.text}\n        </button>\n      ))}\n    </div>\n  );\n  const options = {\n    cutome: true,\n    totalSize: totalSize,\n    paginationSize: 5,\n    pageStartIndex: 0,\n    firstPageText: '<<',\n    prePageText: '<',\n    nextPageText: '>',\n    lastPageText: '>>',\n    disablePageTitle: true,\n    paginationTotalRenderer: customTotal,\n    hideSizePerPage: true,\n    showTotal: false,\n    alwaysShowAllBtns: true,\n    sizePerPageList: [\n      {\n        text: '10',\n        value: 10,\n      },\n      {\n        text: '20',\n        value: 20,\n      },\n      {\n        text: '30',\n        value: 30,\n      },\n      {\n        text: '40',\n        value: 40,\n      },\n      {\n        text: '50',\n        value: 50,\n      },\n    ],\n    hidePageListOnlyOnePage: true,\n    sizePerPageRenderer: sizePerPageRenderer,\n  };\n  let searchProps: any = {\n    placeholder: searchPlaceholder,\n  };\n  const handleOnSelect = (rows: any, isSelect) => {\n    if (isSelect) {\n      if (selectedRow) {\n        let itemSelected: any[] = selectedRow;\n        itemSelected.push(rows);\n        setSelectedRow(itemSelected);\n      } else {\n        setSelectedRow([rows]);\n      }\n    }\n  };\n\n  const handleOnSelectAll = (isSelect, rows) => {\n    if (isSelect) {\n      setSelectedRow(rows);\n    }\n  };\n\n  const handleTableChange = (\n    type,\n    {\n      data,\n      cellEdit,\n      page,\n      sizePerPage,\n      filters,\n      sortField,\n      sortOrder,\n      searchText,\n    },\n  ) => {\n    // console.log({type});\n    if (type === 'cellEdit' && isEditModify) {\n      onUpdateItem &&\n        onUpdateItem(cellEdit.newValue, cellEdit.dataField, cellEdit.rowId);\n    }\n    if (type === 'pagination' && _.isEmpty(filters)) {\n      // if (sizePerPage > totalSize) return alert(\"You have not more records.\")\n      // if (page * sizePerPage > totalSize) return alert(\"You have not more records.\")\n      onPageSizeChange && onPageSizeChange(page, sizePerPage);\n    }\n    if (type === 'filter' || (type === 'pagination' && !_.isEmpty(filters))) {\n      if (type === 'pagination') {\n        if (sizePerPage > totalSize) return alert('You have not more records.');\n        if (page * sizePerPage > totalSize)\n          return alert('You have not more records.');\n      }\n      let filter: any = {};\n      for (const [key, value] of Object.entries(filters)) {\n        const values: any = value;\n        const object = { [key]: values.filterVal };\n        filter = Object.assign(filter, object);\n      }\n      onFilter &&\n        onFilter(\n          type,\n          filter,\n          type === 'filter' && page === 1 ? 0 : page,\n          sizePerPage,\n        );\n    }\n    if (type === 'search') {\n      setTimeout(() => {\n        onFilter && onFilter(type, { srText: searchText }, page, sizePerPage);\n      }, 2000);\n    }\n    if (type === 'sort') {\n      let result;\n      if (sortOrder === 'asc') {\n        result = data.sort((a, b) => {\n          if (a[sortField] > b[sortField]) {\n            return 1;\n          } else if (b[sortField] > a[sortField]) {\n            return -1;\n          }\n          return 0;\n        });\n      } else {\n        result = data.sort((a, b) => {\n          if (a[sortField] > b[sortField]) {\n            return -1;\n          } else if (b[sortField] > a[sortField]) {\n            return 1;\n          }\n          return 0;\n        });\n      }\n    }\n  };\n\n  const CustomToggleList = ({ columns, onColumnToggle, toggles }) => (\n    <div className='btn-group btn-group-toggle' data-toggle='buttons'>\n      {columns\n        .map(column => ({\n          ...column,\n          toggle: toggles[column.dataField],\n        }))\n        .map((column, index) => {\n          if (index > 0) {\n            return (\n              <button\n                type='button'\n                key={column.dataField}\n                className={` btn btn-primary  btn-sm whitespace-nowrap ${\n                  column.toggle ? 'active' : ''\n                }`}\n                data-toggle='button'\n                aria-pressed={column.toggle ? 'true' : 'false'}\n                onClick={() => onColumnToggle(column.dataField)}\n              >\n                {column.text}\n              </button>\n            );\n          }\n        })}\n    </div>\n  );\n\n  const rowEvents = {\n    onClick: (e, row, rowIndex) => {\n      onClickRow && onClickRow(row, rowIndex);\n    },\n  };\n\n  const rowStyle = (row, rowIndex) => {\n    switch (row?.colorScheme?.envRangeColor) {\n      case 'BOTH':\n        return {\n          backgroundColor: row?.colorScheme?.cellColor,\n          color: row?.colorScheme?.fontColor,\n        };\n        break;\n      case 'BACKGROUND':\n        return {\n          backgroundColor: row?.colorScheme?.cellColor,\n        };\n        break;\n      case 'FONT':\n        return {\n          color: row?.colorScheme?.fontColor,\n        };\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <PaginationProvider\n      pagination={paginationFactory(\n        totalSize !== 0 ? options : { page, sizePerPage, totalSize },\n      )}\n      keyField={id}\n      columns={columns}\n      data={data}\n    >\n      {({ paginationProps, paginationTableProps }) => (\n        <ToolkitProvider\n          keyField={id}\n          bootstrap4\n          data={data}\n          columns={columns}\n          search\n          exportCSV={{\n            fileName: `${fileName}_${dayjs(new Date()).format(\n              'YYYY-MM-DD HH:mm',\n            )}.csv`,\n            noAutoBOM: false,\n            blobType: 'text/csv;charset=ansi',\n            exportAll: false,\n            onlyExportFiltered: true,\n          }}\n          columnToggle\n        >\n          {props => (\n            <div>\n              <div className='scrollTable'>\n                <BootstrapTable\n                  remote\n                  {...props.baseProps}\n                  noDataIndication='Table is Empty'\n                  hover\n                  {...paginationTableProps}\n                  filter={filterFactory()}\n                  headerClasses='bg-gray-500 text-white whitespace-nowrap'\n                  onTableChange={handleTableChange}\n                  rowEvents={rowEvents}\n                  rowStyle={rowStyle}\n                />\n              </div>\n            </div>\n          )}\n        </ToolkitProvider>\n      )}\n    </PaginationProvider>\n  );\n};\n","import React from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport _ from 'lodash';\nimport ToolkitProvider from 'react-bootstrap-table2-toolkit/dist/react-bootstrap-table2-toolkit';\nimport paginationFactory, {\n  PaginationProvider,\n} from 'react-bootstrap-table2-paginator';\nimport filterFactory from 'react-bootstrap-table2-filter';\nimport '@/library/components/organisms/style.css';\nimport { debounce } from '@/core-utils';\n\ninterface RefRangesProps {\n  id: string;\n  data: any;\n  totalSize?: number;\n  searchPlaceholder?: string;\n  page?: number;\n  sizePerPage?: number;\n  columns: any;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (value: any, dataField: string, id: string) => void;\n  onPageSizeChange?: (page: number, limit: number) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n  clearAllFilter?: () => void;\n}\n\nexport const RefRanges = ({\n  id,\n  data = [],\n  totalSize = 10,\n  searchPlaceholder = 'Search...',\n  page = 0,\n  sizePerPage = 10,\n  columns,\n  onSelectedRow,\n  onUpdateItem,\n  onPageSizeChange,\n  onFilter,\n  clearAllFilter,\n}: RefRangesProps) => {\n  const customTotal = (from, to, size) => {\n    return (\n      <>\n        <div className='clearfix' />\n        <span>\n          Showing {from} to {to} of {size} Results\n        </span>\n      </>\n    );\n  };\n\n  const sizePerPageRenderer = ({\n    options,\n    currSizePerPage,\n    onSizePerPageChange,\n  }) => (\n    <div className='btn-group items-center' role='group'>\n      <input\n        type='number'\n        min='0'\n        placeholder='No'\n        onChange={e => {\n          if (e.target.value) {\n            onSizePerPageChange(e.target.value);\n          }\n        }}\n        className='mr-2 ml-2 leading-4 p-2 w-14 focus:outline-none focus:ring block  shadow-sm sm:text-base border border-gray-300 rounded-md'\n      />\n      {options.map(option => (\n        <button\n          key={option.text}\n          type='button'\n          onClick={() => onSizePerPageChange(option.page)}\n          className={`btn ${\n            currSizePerPage === `${option.page}`\n              ? 'btn-primary'\n              : 'btn-secondary'\n          }`}\n        >\n          {option.text}\n        </button>\n      ))}\n    </div>\n  );\n\n  const options = {\n    cutome: true,\n    totalSize: totalSize,\n    paginationSize: 5,\n    pageStartIndex: 0,\n    firstPageText: '<<',\n    prePageText: '<',\n    nextPageText: '>',\n    lastPageText: '>>',\n    disablePageTitle: true,\n    paginationTotalRenderer: customTotal,\n    hideSizePerPage: true,\n    showTotal: false,\n    alwaysShowAllBtns: true,\n    sizePerPageList: [\n      {\n        text: '10',\n        value: 10,\n      },\n      {\n        text: '20',\n        value: 20,\n      },\n      {\n        text: '30',\n        value: 30,\n      },\n      {\n        text: '40',\n        value: 40,\n      },\n      {\n        text: '50',\n        value: 50,\n      },\n    ],\n    hidePageListOnlyOnePage: true,\n    sizePerPageRenderer: sizePerPageRenderer,\n  };\n\n  const handleTableChange = (\n    type,\n    {\n      data,\n      cellEdit,\n      page,\n      sizePerPage,\n      filters,\n      sortField,\n      sortOrder,\n      searchText,\n    },\n  ) => {\n    if (type === 'cellEdit') {\n      onUpdateItem &&\n        onUpdateItem(cellEdit.newValue, cellEdit.dataField, cellEdit.rowId);\n    }\n    if (type === 'pagination' && _.isEmpty(filters)) {\n      // if (sizePerPage > totalSize) return alert(\"You have not more records.\")\n      // if (page * sizePerPage > totalSize) return alert(\"You have not more records.\")\n      onPageSizeChange && onPageSizeChange(page, sizePerPage);\n    }\n    if (type === 'filter' || (type === 'pagination' && !_.isEmpty(filters))) {\n      if (type === 'pagination') {\n        if (sizePerPage > totalSize) return alert('You have not more records.');\n        if (page * sizePerPage > totalSize)\n          return alert('You have not more records.');\n      }\n      let filter: any = {};\n      for (const [key, value] of Object.entries(filters)) {\n        const values: any = value;\n        const object = { [key]: values.filterVal };\n        filter = Object.assign(filter, object);\n      }\n      if (onFilter) {\n        debounce(() => {\n          onFilter(\n            type,\n            filter,\n            type === 'filter' && page === 1 ? 0 : page,\n            sizePerPage,\n          );\n        });\n      }\n    }\n    if (type === 'search') {\n      debounce(() => {\n        onFilter && onFilter(type, { srText: searchText }, page, sizePerPage);\n      });\n    }\n    if (type === 'sort') {\n      let result;\n      if (sortOrder === 'asc') {\n        result = data.sort((a, b) => {\n          if (a[sortField] > b[sortField]) {\n            return 1;\n          } else if (b[sortField] > a[sortField]) {\n            return -1;\n          }\n          return 0;\n        });\n      } else {\n        result = data.sort((a, b) => {\n          if (a[sortField] > b[sortField]) {\n            return -1;\n          } else if (b[sortField] > a[sortField]) {\n            return 1;\n          }\n          return 0;\n        });\n      }\n    }\n  };\n\n  const rowStyle = (row, rowIndex) => {\n    switch (row?.colorScheme?.envRangeColor) {\n      case 'BOTH':\n        return {\n          backgroundColor: row?.colorScheme?.cellColor,\n          color: row?.colorScheme?.fontColor,\n        };\n        break;\n      case 'BACKGROUND':\n        return {\n          backgroundColor: row?.colorScheme?.cellColor,\n        };\n        break;\n      case 'FONT':\n        return {\n          color: row?.colorScheme?.fontColor,\n        };\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <PaginationProvider\n      pagination={paginationFactory(\n        totalSize !== 0 ? options : { page, sizePerPage, totalSize },\n      )}\n      keyField={id}\n      columns={columns}\n      data={data}\n    >\n      {({ paginationProps, paginationTableProps }) => (\n        <ToolkitProvider\n          keyField={id}\n          bootstrap4\n          data={data}\n          columns={columns}\n          search\n          columnToggle\n        >\n          {props => (\n            <div style={{ maxWidth: 200 }}>\n              <BootstrapTable\n                remote\n                {...props.baseProps}\n                noDataIndication='Table is Empty'\n                hover\n                {...paginationTableProps}\n                filter={filterFactory()}\n                headerClasses='bg-gray-500 text-white whitespace-nowrap'\n                onTableChange={handleTableChange}\n                rowStyle={rowStyle}\n              />\n            </div>\n          )}\n        </ToolkitProvider>\n      )}\n    </PaginationProvider>\n  );\n};\n","import React, { useState } from 'react';\nimport { observer } from 'mobx-react';\n\nimport { Confirm } from '@/library/models';\nimport dayjs from 'dayjs';\n\nimport { TableBootstrap } from './table-bootstrap.components';\n\nimport {\n  Form,\n  Tooltip,\n  Icons,\n  NumberFilter,\n  sortCaret,\n  customFilter,\n} from '@/library/components';\n\nimport { InputResult } from '../../../../../result-entry/general-result-entry/components/molecules/output/input-result.components';\n\nimport {\n  getResultStatus,\n  getTestStatus,\n  getAbnFlag,\n  getCretical,\n} from '../../../../../result-entry/general-result-entry/utils';\nimport { RefRanges } from './ref-ranges.component';\n\ninterface ResultProps {\n  data: any;\n  totalSize: number;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  onUpdate?: (selectedItem: Confirm) => void;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (value: any, dataField: string, id: string) => void;\n  onPageSizeChange?: (page: number, totalSize: number) => void;\n  onUpdateResult?: (fields: any, id: string) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n  onClickRow?: (item: any, index: number) => void;\n  onReport?: (item: any) => void;\n  onUpdateFields?: (fields: any, id: string) => void;\n}\n\nlet labId;\n\nexport const Result = observer((props: ResultProps) => {\n  const [selectedItem, setSelectedItem] = useState<any>({});\n  const [widthRefBox, setWidthRefBox] = useState('20px');\n  const [selectedRowId, setSelectedRowId] = useState('');\n  const [widthConculsionBox, setWidthConculsionBox] = useState('20px');\n  const [conclusionId, setWidthConculsionId] = useState('');\n  return (\n    <>\n      <div style={{ position: 'relative' }}>\n        <TableBootstrap\n          id='_id'\n          data={props?.data}\n          totalSize={props?.totalSize}\n          selectedItem={selectedItem}\n          columns={[\n            {\n              dataField: '_id',\n              text: 'Id',\n              hidden: true,\n              csvExport: false,\n            },\n            {\n              dataField: 'sampleId',\n              text: 'Sample Id',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'test',\n              text: 'Test',\n              sort: true,\n              editable: false,\n              headerClasses: 'textHeader2',\n              style: {\n                whiteSpace: 'nowrap',\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n                minWidth: 0,\n                maxWidth: '130px',\n                position: 'relative',\n              },\n              formatter: (cellContent, row) => {\n                return <span title={row.test}>{cellContent}</span>;\n              },\n            },\n            {\n              dataField: 'analyte',\n              text: 'Analyte',\n              sort: true,\n              editable: false,\n              headerClasses: 'textHeader2',\n              style: {\n                whiteSpace: 'nowrap',\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n                minWidth: 0,\n                maxWidth: '130px',\n                position: 'relative',\n              },\n              formatter: (cellContent, row) => {\n                return <span title={row.analyte}>{cellContent}</span>;\n              },\n            },\n            {\n              dataField: 'result',\n              text: 'Result',\n              sort: true,\n              headerClasses: 'textHeader1',\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  <InputResult\n                    row={row}\n                    onSelect={async result => {\n                      const rows = { ...row, ...result };\n                      props.onUpdateResult &&\n                        props.onUpdateResult(\n                          {\n                            ...rows,\n                            resultStatus: getResultStatus(\n                              rows.resultType,\n                              rows,\n                            ),\n                            testStatus: getTestStatus(rows.resultType, rows),\n                            abnFlag: getAbnFlag(rows.resultType, rows),\n                            critical: getCretical(rows.resultType, rows),\n                            ...result,\n                          },\n                          rows.patientResultId,\n                        );\n                    }}\n                  />\n                </>\n              ),\n            },\n            {\n              dataField: 'abnFlag',\n              text: 'Abn Flag',\n              sort: true,\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <Form.Toggle disabled={true} value={row.abnFlag} />\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'critical',\n              text: 'Critical',\n              sort: true,\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <Form.Toggle disabled={true} value={row.critical} />\n                  </>\n                );\n              },\n            },\n\n            {\n              dataField: 'validationLevel',\n              text: 'Validation Level',\n              sort: true,\n              editable: true,\n              formatter: (cell, row) => (\n                <>\n                  <select\n                    value={row.validationLevel}\n                    className={\n                      'leading-4 p-2 focus:outline-none focus:ring block w-full shadow-sm sm:text-base border-2  rounded-md'\n                    }\n                    style={{ color: '#000000', backgroundColor: '#ffffff' }}\n                    onChange={e => {\n                      const validationLevel: any = e.target.value;\n                      props.onUpdateFields &&\n                        props.onUpdateFields(\n                          { validationLevel: Number.parseInt(validationLevel) },\n                          row._id,\n                        );\n                    }}\n                  >\n                    <option selected style={{ color: '#000000' }}>\n                      Select\n                    </option>\n                    {[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n                      .splice(row?.validationLevel, 8)\n                      .map((item: any, index: number) => (\n                        <option key={index} value={item}>\n                          {item}\n                        </option>\n                      ))}\n                  </select>\n                </>\n              ),\n            },\n\n            {\n              dataField: 'refRangesList',\n              text: 'Ref Ranges',\n              sort: true,\n              editable: false,\n              headerClasses: 'textHeaderxxm',\n              style: { width: widthRefBox },\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <div className='flex flex-row gap-2'>\n                      <span>\n                        {(row.loNor === 'NaN' && row.hiNor === 'NaN') ||\n                        (row.loNor === ' ' && row.hiNor === ' ')\n                          ? '-'\n                          : row.loNor === 'NaN' && row.hiNor === ' '\n                          ? '<'\n                          : row.loNor === ' ' && row.hiNor === 'NaN'\n                          ? '>'\n                          : row.loNor + '-' + row.hiNor}\n                      </span>\n                      <div>\n                        {row.refRangesList?.length > 0 && (\n                          <Tooltip\n                            tooltipText={\n                              row._id != selectedRowId ? 'Expand' : 'Collapse'\n                            }\n                          >\n                            <Icons.IconContext\n                              color='#000000'\n                              size='20'\n                              onClick={() => {\n                                if (row._id === selectedRowId) {\n                                  setSelectedRowId('');\n                                  setWidthRefBox('30px');\n                                } else {\n                                  setSelectedRowId(row._id);\n                                  setWidthRefBox('550px');\n                                }\n                              }}\n                            >\n                              {Icons.getIconTag(\n                                row._id != selectedRowId\n                                  ? Icons.IconBi.BiExpand\n                                  : Icons.IconBi.BiCollapse,\n                              )}\n                            </Icons.IconContext>\n                          </Tooltip>\n                        )}\n                      </div>\n                    </div>\n                    {selectedRowId == row._id ? (\n                      <div style={{ width: widthRefBox }}>\n                        <RefRanges\n                          id='_id'\n                          data={row?.refRangesList || []}\n                          totalSize={row?.refRangesList?.length || 0}\n                          columns={[\n                            {\n                              dataField: 'result',\n                              text: 'Result',\n                              editable: false,\n                              formatter: () => (\n                                <>\n                                  <span>{row.result}</span>\n                                </>\n                              ),\n                            },\n                            {\n                              dataField: 'rangeType',\n                              text: 'Range Type',\n                            },\n                            {\n                              dataField: 'low',\n                              text: 'Low',\n                            },\n                            {\n                              dataField: 'high',\n                              text: 'High',\n                            },\n                            {\n                              dataField: 'rangeSetOn',\n                              text: 'Range Set On',\n                            },\n                            {\n                              dataField: 'rangeId',\n                              text: 'Range Id',\n                            },\n                            {\n                              dataField: 'version',\n                              text: 'Range Version',\n                            },\n                          ]}\n                          onSelectedRow={rows => {}}\n                          onUpdateItem={(\n                            value: any,\n                            dataField: string,\n                            id: string,\n                          ) => {}}\n                        />\n                      </div>\n                    ) : null}\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'units',\n              text: 'Units',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'conclusion',\n              text: 'Conclusion',\n              editable: false,\n              style: { width: widthConculsionBox },\n              formatter: (cell, row) => {\n                return (\n                  <div className='flex flex-col'>\n                    <Tooltip\n                      tooltipText={\n                        row._id != conclusionId ? 'Expand' : 'Collapse'\n                      }\n                    >\n                      <Icons.IconContext\n                        color='#000000'\n                        size='20'\n                        onClick={() => {\n                          if (row._id === conclusionId) {\n                            setWidthConculsionId('');\n                            setWidthConculsionBox('30px');\n                          } else {\n                            setWidthConculsionId(row._id);\n                            setWidthConculsionBox('200px');\n                          }\n                        }}\n                      >\n                        {Icons.getIconTag(\n                          row._id != conclusionId\n                            ? Icons.IconBi.BiExpand\n                            : Icons.IconBi.BiCollapse,\n                        )}\n                      </Icons.IconContext>\n                    </Tooltip>\n\n                    {row._id === conclusionId && (\n                      <div style={{ width: widthConculsionBox }}>\n                        <Form.MultilineInput\n                          rows={3}\n                          placeholder='Conclusion'\n                          className='text-black'\n                          onBlur={conclusion => {\n                            props.onUpdateFields &&\n                              props.onUpdateFields({ conclusion }, row._id);\n                            setWidthConculsionId('');\n                            setWidthConculsionBox('30px');\n                          }}\n                          defaultValue={row?.conclusion}\n                        />\n                      </div>\n                    )}\n                  </div>\n                );\n              },\n            },\n            {\n              dataField: 'sampleType',\n              text: 'Sample Type',\n              sort: true,\n              editable: false,\n              headerClasses: 'textHeaderm',\n              style: {\n                whiteSpace: 'nowrap',\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n                minWidth: 0,\n                maxWidth: '130px',\n                position: 'relative',\n              },\n              formatter: (cellContent, row) => {\n                return <span title={row.sampleType}>{cellContent}</span>;\n              },\n            },\n            {\n              dataField: 'containerId',\n              text: 'Container Id',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'remarks',\n              text: 'Remarks',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'deltaFlag',\n              text: 'Delta Flag',\n              sort: true,\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <Form.Toggle disabled={true} value={row.deltaFlag} />\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'deltaValue',\n              text: 'Delta Value',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'Result Status',\n              text: 'Result Status',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'testStatus',\n              text: 'Test Status',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'approvalDate',\n              text: 'Approval Date',\n              sort: true,\n              editable: false,\n              headerClasses: 'textHeaderm',\n              formatter: (cell, row) => {\n                return row.approvalDate\n                  ? dayjs(row.approvalDate).format('DD-MM-YYYY HH:mm:ss')\n                  : '';\n              },\n            },\n            {\n              dataField: 'autoRelease',\n              text: 'Auto Release',\n              sort: true,\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <Form.Toggle disabled={true} value={row.autoRelease} />\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'final',\n              text: 'Final',\n              sort: true,\n              editable: false,\n              // headerClasses: 'textHeaderl',\n            },\n            {\n              dataField: 'enteredBy',\n              text: 'Entered By',\n              sort: true,\n              csvFormatter: col => (col ? col : ''),\n              editable: false,\n            },\n            // {\n            //   text: 'Company Code',\n            //   dataField: 'companyCode',\n            //   sort: true,\n            //   editable: false,\n            // },\n            // {\n            //   text: 'Environment',\n            //   dataField: 'environment',\n            //   editable: false,\n            //   sort: true,\n            // },\n          ]}\n          isEditModify={props.isEditModify}\n          isSelectRow={true}\n          fileName='Pending Panel Approval'\n          onSelectedRow={rows => {\n            props.onSelectedRow &&\n              props.onSelectedRow(rows.map((item: any) => item._id));\n          }}\n          onUpdateItem={(value: any, dataField: string, id: string) => {\n            props.onUpdateItem && props.onUpdateItem(value, dataField, id);\n          }}\n          onPageSizeChange={(page, size) => {\n            props.onPageSizeChange && props.onPageSizeChange(page, size);\n          }}\n          onFilter={(type, filter, page, size) => {\n            props.onFilter && props.onFilter(type, filter, page, size);\n          }}\n          clearAllFilter={() => {}}\n          onClickRow={(item, index) => {\n            setSelectedItem(item);\n            props.onClickRow && props.onClickRow(item, index);\n          }}\n        />\n      </div>\n    </>\n  );\n});\n","/* eslint-disable */\nimport React, { useEffect, useState } from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport _ from 'lodash';\nimport ToolkitProvider, {\n  Search,\n  CSVExport,\n} from 'react-bootstrap-table2-toolkit/dist/react-bootstrap-table2-toolkit';\nimport cellEditFactory from 'react-bootstrap-table2-editor';\nimport paginationFactory, {\n  PaginationProvider,\n} from 'react-bootstrap-table2-paginator';\nimport filterFactory from 'react-bootstrap-table2-filter';\nimport dayjs from 'dayjs';\nimport '@/library/components/organisms/style.css';\nimport { debounce } from '@/core-utils';\nimport { Buttons, Icons, Tooltip } from '@/library/components';\n\nconst { SearchBar, ClearSearchButton } = Search;\nconst { ExportCSVButton } = CSVExport;\nimport { Result } from '../result/result.components';\n\ninterface TableBootstrapProps {\n  id: string;\n  data: any;\n  totalSize?: number;\n  searchPlaceholder?: string;\n  page?: number;\n  sizePerPage?: number;\n  columns: any;\n  fileName: string;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  isExport?: boolean;\n  isSelectRow?: boolean;\n  selectedItem?: any;\n  onDelete?: (selectedItem: any) => void;\n  onSelectedRow?: (selectedItem: any, type: string) => void;\n  onUpdateItem?: (value: any, dataField: string, id: string) => void;\n  onPageSizeChange?: (page: number, limit: number) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n  clearAllFilter?: () => void;\n  onClickRow?: (item: any, index: number) => void;\n  onFilterRecord?: (item: any) => void;\n  onUpdateResult?: (id: string, fields: any) => void;\n  onUpdateFields?: (item: any, id: string) => void;\n  onPagination?: (type: string) => void;\n}\n\nexport const TableBootstrap = ({\n  id = '',\n  data,\n  totalSize = 10,\n  searchPlaceholder = 'Search by labId or sampleId',\n  page = 0,\n  sizePerPage = 10,\n  columns,\n  fileName,\n  isDelete = true,\n  isEditModify,\n  isExport = true,\n  isSelectRow,\n  selectedItem,\n  onSelectedRow,\n  onUpdateItem,\n  onPageSizeChange,\n  onFilter,\n  clearAllFilter,\n  onClickRow,\n  onFilterRecord,\n  onUpdateResult,\n  onUpdateFields,\n  onPagination,\n}: TableBootstrapProps) => {\n  const [selectedRow, setSelectedRow] = useState<any[]>();\n  const [isFilterOpen, setIsFilterOpen] = useState<boolean>(false);\n  const [expanded, setExpanded] = useState([0, 1]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      var expandButton: any = document.getElementsByClassName('expand-cell')[0];\n      expandButton?.click();\n    }, 1000);\n  }, []);\n\n  const statusData = [\n    { code: 'Pending', value: 'Pending', color: 'blue' },\n    { code: 'ReCheck', value: 'Recheck', color: 'yellow' },\n    { code: 'ReTest', value: 'Retest', color: 'orange' },\n    { code: 'Hold', value: 'Hold', color: 'indigo' },\n    { code: 'All', value: 'All', color: 'red' },\n    { code: 'ReCall', value: 'Recall', color: 'gray' },\n  ];\n\n  const sizePerPageRenderer = ({\n    options,\n    currSizePerPage,\n    onSizePerPageChange,\n  }) => (\n    <div className='btn-group items-center' role='group'>\n      {isSelectRow && (\n        <div className='flex flex-row gap-1 border-solid border-2 p-1'>\n          <Tooltip tooltipText='Approved'>\n            <Icons.IconContext\n              color='#fff'\n              size='30'\n              onClick={() => {\n                onSelectedRow && onSelectedRow(selectedRow, 'Approved');\n              }}\n            >\n              {Icons.getIconTag(Icons.Iconai.AiFillCheckCircle)}\n            </Icons.IconContext>\n          </Tooltip>\n          <Tooltip tooltipText='Rejected'>\n            <Icons.IconContext\n              color='#fff'\n              size='30'\n              onClick={() => {\n                onSelectedRow && onSelectedRow(selectedRow, 'Rejected');\n              }}\n            >\n              {Icons.getIconTag(Icons.Iconai.AiFillCloseCircle)}\n            </Icons.IconContext>\n          </Tooltip>\n        </div>\n      )}\n      <input\n        type='number'\n        min='0'\n        placeholder='No'\n        onChange={(e: any) => {\n          if (e.target.value) {\n            onSizePerPageChange(e.target.value);\n          }\n        }}\n        className='mr-2 ml-2 leading-4 p-2 w-14 focus:outline-none focus:ring block  shadow-sm sm:text-base border border-gray-300 rounded-md'\n      />\n      {options.map(option => (\n        <button\n          key={option.text}\n          type='button'\n          onClick={() => onSizePerPageChange(option.page)}\n          className={`btn  ${\n            currSizePerPage === `${option.page}` ? 'bg-primary' : 'bg-grey'\n          }`}\n        >\n          {option.text}\n        </button>\n      ))}\n    </div>\n  );\n\n  const options = {\n    cutome: true,\n    totalSize: totalSize,\n    paginationSize: 5,\n    pageStartIndex: 0,\n    firstPageText: '<<',\n    prePageText: '<',\n    nextPageText: '>',\n    lastPageText: '>>',\n    disablePageTitle: true,\n    hideSizePerPage: true,\n    showTotal: false,\n    alwaysShowAllBtns: true,\n    sizePerPageList: [\n      {\n        text: '10',\n        value: 10,\n      },\n      {\n        text: '20',\n        value: 20,\n      },\n      {\n        text: '30',\n        value: 30,\n      },\n      {\n        text: '40',\n        value: 40,\n      },\n      {\n        text: '50',\n        value: 50,\n      },\n    ],\n    hidePageListOnlyOnePage: true,\n    sizePerPageRenderer: sizePerPageRenderer,\n  };\n\n  let searchProps: any = {\n    placeholder: searchPlaceholder,\n  };\n\n  const handleOnSelect = (rows: any, isSelect) => {\n    if (isSelect) {\n      if (selectedRow) {\n        let itemSelected: any[] = selectedRow;\n        itemSelected.push(rows);\n        setSelectedRow(itemSelected);\n      } else {\n        setSelectedRow([rows]);\n      }\n    }\n  };\n\n  const handleOnSelectAll = (isSelect, rows) => {\n    if (isSelect) {\n      setSelectedRow(rows);\n    }\n  };\n\n  const handleTableChange = (\n    type,\n    {\n      data,\n      cellEdit,\n      page,\n      sizePerPage,\n      filters,\n      sortField,\n      sortOrder,\n      searchText,\n    },\n  ) => {\n    if (type === 'cellEdit' && isEditModify) {\n      onUpdateItem &&\n        onUpdateItem(cellEdit.newValue, cellEdit.dataField, cellEdit.rowId);\n    }\n    if (type === 'pagination' && _.isEmpty(filters)) {\n      // if (sizePerPage > totalSize) return alert(\"You have not more records.\")\n      // if (page * sizePerPage > totalSize) return alert(\"You have not more records.\")\n      onPageSizeChange && onPageSizeChange(page, sizePerPage);\n    }\n    if (type === 'filter' || (type === 'pagination' && !_.isEmpty(filters))) {\n      if (type === 'pagination') {\n        if (sizePerPage > totalSize) return alert('You have not more records.');\n        if (page * sizePerPage > totalSize)\n          return alert('You have not more records.');\n      }\n      let filter: any = {};\n      for (const [key, value] of Object.entries(filters)) {\n        const values: any = value;\n        const object = { [key]: values.filterVal };\n        filter = Object.assign(filter, object);\n      }\n      if (onFilter)\n        debounce(() => {\n          onFilter(\n            type,\n            filter,\n            type === 'filter' && page === 1 ? 0 : page,\n            sizePerPage,\n          );\n        });\n    }\n    if (type === 'search') {\n      debounce(() => {\n        onFilter && onFilter(type, { srText: searchText }, page, sizePerPage);\n      });\n    }\n    if (type === 'sort') {\n      let result;\n      if (sortOrder === 'asc') {\n        result = data?.sort((a, b) => {\n          if (a[sortField] > b[sortField]) {\n            return 1;\n          } else if (b[sortField] > a[sortField]) {\n            return -1;\n          }\n          return 0;\n        });\n      } else {\n        result = data?.sort((a, b) => {\n          if (a[sortField] > b[sortField]) {\n            return -1;\n          } else if (b[sortField] > a[sortField]) {\n            return 1;\n          }\n          return 0;\n        });\n      }\n    }\n  };\n\n  const CustomToggleList = ({ columns, onColumnToggle, toggles }) => (\n    <div className='btn-group btn-group-toggle' data-toggle='buttons'>\n      {columns\n        .map(column => ({\n          ...column,\n          toggle: toggles[column.dataField],\n        }))\n        .map((column, index) => {\n          if (index > 0) {\n            return (\n              <button\n                type='button'\n                key={column.dataField}\n                className={` btn btn-primary  btn-sm whitespace-nowrap ${\n                  column.toggle ? 'active' : ''\n                }`}\n                data-toggle='button'\n                aria-pressed={column.toggle ? 'true' : 'false'}\n                onClick={() => onColumnToggle(column.dataField)}\n              >\n                {column.text}\n              </button>\n            );\n          }\n        })}\n    </div>\n  );\n\n  const rowEvents = {\n    onClick: (e, row, rowIndex) => {\n      onClickRow && onClickRow(row, rowIndex);\n    },\n  };\n\n  const rowStyle = (row, rowIndex) => {\n    switch (row?.colorScheme?.envRangeColor) {\n      case 'BOTH':\n        return {\n          backgroundColor: row?.colorScheme?.cellColor,\n          color: row?.colorScheme?.fontColor,\n        };\n        break;\n      case 'BACKGROUND':\n        return {\n          backgroundColor: row?.colorScheme?.cellColor,\n        };\n        break;\n      case 'FONT':\n        return {\n          color: row?.colorScheme?.fontColor,\n        };\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleOnExpand = (row, isExpand, rowIndex, e) => {\n    if (isExpand) {\n      setExpanded([...expanded, row.id]);\n    } else {\n      setExpanded(expanded.filter(x => x !== row.id));\n    }\n  };\n\n  // const expandRow = {\n  //   renderer: row => (\n  //     <div>\n  //       <Result\n  //         data={row[1] || []}\n  //         totalSize={row[1].length}\n  //         onUpdateResult={(fields: any, id: string) => {\n  //           onUpdateResult && onUpdateResult(id, fields);\n  //         }}\n  //         onUpdateFields={(fields: any, id: string) => {\n  //           onUpdateFields && onUpdateFields(fields, id);\n  //         }}\n  //       />\n  //     </div>\n  //   ),\n  //   showExpandColumn: true,\n  //   expandByColumnOnly: true,\n  //   expanded: [0, 1],\n  // };\n\n  return (\n    <>\n      <PaginationProvider\n        pagination={paginationFactory(\n          totalSize !== 0 ? options : { page, sizePerPage, totalSize },\n        )}\n        keyField={id}\n        columns={columns}\n        data={_.without(data, undefined)?.length > 0 ? data : []}\n      >\n        {({ paginationProps, paginationTableProps }) => (\n          <ToolkitProvider\n            keyField={id}\n            bootstrap4\n            data={_.without(data, undefined)?.length > 0 ? data : []}\n            columns={columns}\n            search\n            exportCSV={{\n              fileName: `${fileName}_${dayjs(new Date()).format(\n                'YYYY-MM-DD HH:mm',\n              )}.csv`,\n              noAutoBOM: false,\n              blobType: 'text/csv;charset=ansi',\n              exportAll: false,\n              onlyExportFiltered: true,\n            }}\n            columnToggle\n          >\n            {props => (\n              <div>\n                <div className='flex flex-row items-center flex-wrap justify-between'>\n                  <div className='w-2/3 flex flex-row align-middle items-center'>\n                    <SearchBar\n                      {...searchProps}\n                      {...props.searchProps}\n                      onChange={value => {\n                        console.log({ value });\n                      }}\n                    />\n                    <ClearSearchButton\n                      className={`bg-gray-500 px-3.5 py-1 ml-2 focus:outline-none items-center outline shadow-sm font-medium text-center rounded-md  text-white disabled:opacity-50 disabled:cursor-not-allowed`}\n                      {...props.searchProps}\n                    />\n                    <button\n                      className={\n                        'bg-gray-500 px-3.5 py-2 mr-2 ml-2 focus:outline-none items-center outline shadow-sm font-medium text-center rounded-md  text-white disabled:opacity-50 disabled:cursor-not-allowed'\n                      }\n                      onClick={clearAllFilter}\n                    >\n                      Clear all filters\n                    </button>\n                    {isExport && (\n                      <ExportCSVButton\n                        className={\n                          'bg-gray-500 px-3.5 py-1.5 mr-2 focus:outline-none items-center outline shadow-sm font-medium text-center rounded-md  text-white disabled:opacity-50 disabled:cursor-not-allowed'\n                        }\n                        {...props.csvProps}\n                      >\n                        Export CSV!!\n                      </ExportCSVButton>\n                    )}\n\n                    {isFilterOpen ? (\n                      <Buttons.Button\n                        size='medium'\n                        type='outline'\n                        onClick={() => {\n                          setIsFilterOpen(!isFilterOpen);\n                        }}\n                      >\n                        <Icons.IconFa.FaChevronUp />\n                      </Buttons.Button>\n                    ) : (\n                      <Buttons.Button\n                        size='medium'\n                        type='outline'\n                        onClick={() => {\n                          setIsFilterOpen(!isFilterOpen);\n                        }}\n                      >\n                        <Icons.IconFa.FaChevronDown />\n                      </Buttons.Button>\n                    )}\n                    <div className='flex ml-2 flex-wrap gap-1'>\n                      {statusData.map(status => (\n                        <button\n                          key={status.code}\n                          className={`px-3.5 py-2 bg-${status.color}-600 text-white rounded`}\n                          onClick={() => onFilterRecord?.(status.code)}\n                        >\n                          {status.value}\n                        </button>\n                      ))}\n                    </div>\n                  </div>\n                  <div className='flex bg-blue-700 w-10 h-10 rounded-full justify-center items-center text-xl'>\n                    <span className='text-white'>{totalSize}</span>\n                  </div>\n                </div>\n                {isFilterOpen && (\n                  <div className={'mb-2 overflow-auto h-10'}>\n                    <CustomToggleList\n                      contextual='primary'\n                      className='list-custom-class'\n                      btnClassName='list-btn-custom-class'\n                      {...props.columnToggleProps}\n                    />\n                  </div>\n                )}\n                <div className='scrollTable mb-2'>\n                  <BootstrapTable\n                    keyField='_id'\n                    remote\n                    {...props.baseProps}\n                    noDataIndication='Table is Empty'\n                    hover\n                    {...paginationTableProps}\n                    filter={filterFactory()}\n                    headerClasses='bg-gray-500 text-white whitespace-nowrap'\n                    // selectRow={\n                    //   isSelectRow\n                    //     ? {\n                    //         mode: 'checkbox',\n                    //         onSelect: handleOnSelect,\n                    //         onSelectAll: handleOnSelectAll,\n                    //       }\n                    //     : undefined\n                    // }\n                    cellEdit={\n                      isEditModify\n                        ? cellEditFactory({\n                            mode: 'dbclick',\n                            blurToSave: true,\n                          })\n                        : undefined\n                    }\n                    rowEvents={rowEvents}\n                    rowStyle={rowStyle}\n                    onTableChange={handleTableChange}\n                    // expandRow={expandRow}\n                  />\n                  <div className='px-2 -mt-2'>\n                    <Result\n                      data={\n                        _.without(data, undefined)?.length > 0 ? data[0][1] : []\n                      }\n                      totalSize={\n                        _.without(data, undefined)?.length > 0\n                          ? data[0][1]?.length\n                          : []\n                      }\n                      onUpdateResult={(fields: any, id: string) => {\n                        onUpdateResult && onUpdateResult(id, fields);\n                      }}\n                      onUpdateFields={(fields: any, id: string) => {\n                        onUpdateFields && onUpdateFields(fields, id);\n                      }}\n                    />\n                  </div>\n                </div>\n                <div className='flex items-center gap-2 mt-2'>\n                  <Icons.IconContext\n                    color='#fff'\n                    size='25'\n                    style={{\n                      backgroundColor: '#808080',\n                      width: 32,\n                      height: 32,\n                      borderRadius: 16,\n                      align: 'center',\n                      padding: 4,\n                    }}\n                    onClick={async () => {\n                      onPagination && onPagination('next');\n                    }}\n                  >\n                    <Icons.IconBi.BiSkipNext />\n                  </Icons.IconContext>\n                  <Icons.IconContext\n                    color='#fff'\n                    size='25'\n                    style={{\n                      backgroundColor: '#808080',\n                      width: 32,\n                      height: 32,\n                      borderRadius: 16,\n                      align: 'center',\n                      padding: 4,\n                    }}\n                    onClick={async () => {\n                      onPagination && onPagination('prev');\n                    }}\n                  >\n                    <Icons.IconBi.BiSkipPrevious />\n                  </Icons.IconContext>\n                </div>\n              </div>\n            )}\n          </ToolkitProvider>\n        )}\n      </PaginationProvider>\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport {\n  Form,\n  Tooltip,\n  Icons,\n  NumberFilter,\n  sortCaret,\n  customFilter,\n} from '@/library/components';\nimport dayjs from 'dayjs';\nimport _ from 'lodash';\n\nimport { TableBootstrap } from './table-bootstrap.components';\nimport { RefRanges } from '../result/ref-ranges.component';\nimport { InputResult } from '../../../../../result-entry/general-result-entry/components/molecules/output/input-result.components';\n\nimport {\n  getResultStatus,\n  getTestStatus,\n  getAbnFlag,\n  getCretical,\n} from '../../../../../result-entry/general-result-entry/utils';\n\ninterface PanelApprovalListProps {\n  data: any;\n  totalSize: number;\n  isView?: boolean;\n  isDelete?: boolean;\n  isUpdate?: boolean;\n  isExport?: boolean;\n  isApproval?: boolean;\n  selectedId?: string;\n  selectedItems?: any;\n  filterRecord?: string;\n  onSelectedRow?: (selectedItem: any, type: string) => void;\n  onUpdateFields?: (fields: any, id: string[]) => void;\n  onUpdateResult?: (fields: any, id: string) => void;\n  onExpand?: (items: any) => void;\n  onRecheck?: (id: string, patientResultId: string) => void;\n  onRetest?: (id: string, patientResultId: string) => void;\n  onPageSizeChange?: (page: number, totalSize: number) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n  onClickRow?: (item: any, index: number) => void;\n  onReport?: (item: any) => void;\n  onFilterRecord?: (item: any) => void;\n}\n\nlet labId;\n\nexport const PanelApprovalList = (props: PanelApprovalListProps) => {\n  const [selectId, setSelectId] = useState('');\n  const [localData, setLocalData] = useState(props.data);\n  const [selectedRowId, setSelectedRowId] = useState('');\n  const [widthRefBox, setWidthRefBox] = useState('20px');\n  const [widthConculsionBox, setWidthConculsionBox] = useState('20px');\n  const [conclusionId, setWidthConculsionId] = useState('');\n  const [isAllRecordDisplay, setIsAllRecordDisplay] = useState(false);\n  const [fetchIndex, setFetchIndex] = useState<number>(0);\n\n  useEffect(() => {\n    setLocalData(JSON.parse(JSON.stringify(props.data)) || []);\n  }, [props.data, props.selectedId]);\n\n  // useEffect(() => {\n  //   const filterDataByHoldRecord = (data, holdRecord) => {\n  //     if (holdRecord === 'Pending') {\n  //       return data.filter(item => item.approvalStatus === 'Pending');\n  //     } else if (holdRecord === 'Done') {\n  //       return data.filter(item => item.approvalStatus === 'Done');\n  //     } else {\n  //       return data;\n  //     }\n  //   };\n  //   setSelectId(props.selectedId || '');\n  //   setLocalData(\n  //     props.selectedId\n  //       ? props.data\n  //           ?.filter(item => item._id === props.selectedId)\n  //           ?.map(item => ({ ...item, selectedId: props.selectedId }))\n  //       : filterDataByHoldRecord(props.data, props.filterRecord),\n  //   );\n  //   // eslint-disable-next-line react-hooks/exhaustive-deps\n  // }, [props.selectedId, props.data, props.filterRecord]);\n\n  // useEffect(() => {\n  //   setLocalData(JSON.parse(JSON.stringify(localData)));\n  //   // eslint-disable-next-line react-hooks/exhaustive-deps\n  // }, [selectedRowId]);\n\n  return (\n    <>\n      <div className={`${props.isView ? 'shown' : 'hidden'}`}>\n        <TableBootstrap\n          id='_id'\n          data={\n            localData?.length > 0\n              ? isAllRecordDisplay\n                ? localData\n                : [localData[fetchIndex]]\n              : []\n          }\n          totalSize={localData?.length}\n          columns={[\n            {\n              dataField: '_id',\n              text: 'Id',\n              hidden: true,\n              csvExport: false,\n            },\n            {\n              dataField: 'labId',\n              text: 'Lab Id',\n              sort: true,\n              editable: false,\n              formatter: (cell, row) => {\n                return <span>{row[1][0]?.labId}</span>;\n              },\n            },\n            {\n              dataField: 'panel',\n              text: 'Panel',\n              sort: true,\n              editable: false,\n              headerClasses: 'textHeaderl',\n              formatter: (cell, row) => {\n                return <span>{row[1][0]?.panel}</span>;\n              },\n            },\n            {\n              dataField: 'dueDate',\n              text: 'Due Date',\n              sort: true,\n              editable: false,\n              formatter: (cell, row) => {\n                return row[1][0]?.dueDate\n                  ? dayjs(row[1][0]?.dueDate).format('DD-MM-YYYY HH:mm:ss')\n                  : '';\n              },\n            },\n            {\n              dataField: 'approvalStatus',\n              text: 'Approval Status',\n              sort: true,\n              editable: false,\n              formatter: (cell, row) => {\n                return <span>{row[1][0]?.approvalStatus}</span>;\n              },\n            },\n            {\n              dataField: 'comments',\n              text: 'Comments',\n              sort: true,\n              editable: false,\n              formatter: (cell, row) => {\n                return <span>{row[1][0]?.comments}</span>;\n              },\n            },\n            {\n              dataField: 'pLab',\n              text: 'PLab',\n              sort: true,\n              editable: false,\n              formatter: (cell, row) => {\n                return <span>{row[1][0]?.pLab}</span>;\n              },\n            },\n            {\n              dataField: 'department',\n              text: 'Department',\n              sort: true,\n              editable: false,\n              formatter: (cell, row) => {\n                return <span>{row[1][0]?.department}</span>;\n              },\n            },\n            {\n              dataField: 'approvalStatus',\n              text: 'Action',\n              sort: true,\n              editable: false,\n              formatter: (cellContent, row) => (\n                <div className='flex flex-row gap-1' key={row[1][0]?._id}>\n                  {props.isApproval && (\n                    <>\n                      <Tooltip tooltipText='Approved'>\n                        <Icons.IconContext\n                          color='#fff'\n                          size='20'\n                          isDisable={\n                            row[1][0]?.approvalStatus == 'Hold' ? true : false\n                          }\n                          onClick={() => {\n                            props.onUpdateFields &&\n                              props.onUpdateFields(\n                                {\n                                  approvalStatus: 'Approved',\n                                },\n                                _.map(row[1], '_id'),\n                              );\n                            setFetchIndex(0);\n                            props.onExpand && props.onExpand('');\n                          }}\n                        >\n                          {Icons.getIconTag(Icons.Iconai.AiFillCheckCircle)}\n                        </Icons.IconContext>\n                      </Tooltip>\n                      <Tooltip\n                        tooltipText={`${\n                          row[1][0]?.approvalStatus == 'Hold'\n                            ? 'Pending'\n                            : 'Hold'\n                        } `}\n                      >\n                        <Icons.IconContext\n                          color='#fff'\n                          size='20'\n                          onClick={() => {\n                            props.onUpdateFields &&\n                              props.onUpdateFields(\n                                {\n                                  approvalStatus:\n                                    row[1][0]?.approvalStatus == 'Hold'\n                                      ? 'Pending'\n                                      : 'Hold',\n                                },\n                                _.map(row[1], '_id'),\n                              );\n                            setFetchIndex(0);\n                          }}\n                        >\n                          {row[1][0]?.approvalStatus == 'Hold'\n                            ? Icons.getIconTag(Icons.Iconmd.MdOutlinePending)\n                            : Icons.getIconTag(Icons.Iconmd.MdBackHand)}\n                        </Icons.IconContext>\n                      </Tooltip>\n                      <Tooltip tooltipText='Recheck'>\n                        <Icons.IconContext\n                          color='#fff'\n                          size='20'\n                          isDisable={\n                            row[1][0]?.approvalStatus == 'Hold' ? true : false\n                          }\n                          onClick={() => {\n                            props.onRecheck &&\n                              props.onRecheck(\n                                row[1][0]?._id,\n                                row[1][0]?.patientResultId,\n                              );\n                            setFetchIndex(0);\n                          }}\n                        >\n                          <Icons.RIcon\n                            nameIcon='GoIssueReopened'\n                            propsIcon={{\n                              color:\n                                row[1][0]?.approvalStatus == 'Hold'\n                                  ? '#808080'\n                                  : '#ffffff',\n                            }}\n                          />\n                        </Icons.IconContext>\n                      </Tooltip>\n                      <Tooltip tooltipText='Retest'>\n                        <Icons.IconContext\n                          color='#fff'\n                          size='20'\n                          isDisable={\n                            row[1][0]?.approvalStatus == 'Hold' ? true : false\n                          }\n                          onClick={() => {\n                            props.onRetest &&\n                              props.onRetest(\n                                row[1][0]?._id,\n                                row[1][0]?.patientResultId,\n                              );\n                            setFetchIndex(0);\n                          }}\n                        >\n                          <Icons.RIcon\n                            nameIcon='TbBrandSpeedtest'\n                            propsIcon={{\n                              color:\n                                row[1][0]?.approvalStatus == 'Hold'\n                                  ? '#808080'\n                                  : '#ffffff',\n                            }}\n                          />\n                        </Icons.IconContext>\n                      </Tooltip>\n                    </>\n                  )}\n                  {selectId == row[1][0]._id ? (\n                    <Tooltip tooltipText='Expand'>\n                      <Icons.IconContext\n                        color='#fff'\n                        size='20'\n                        onClick={() => {\n                          props.onExpand && props.onExpand('');\n                        }}\n                      >\n                        {Icons.getIconTag(Icons.Iconai.AiFillMinusCircle)}\n                      </Icons.IconContext>\n                    </Tooltip>\n                  ) : (\n                    <Tooltip tooltipText='Expand'>\n                      <Icons.IconContext\n                        color='#fff'\n                        size='20'\n                        onClick={() => {\n                          props.onExpand && props.onExpand(row[1][0]);\n                        }}\n                      >\n                        {Icons.getIconTag(Icons.Iconai.AiFillPlusCircle)}\n                      </Icons.IconContext>\n                    </Tooltip>\n                  )}\n                </div>\n              ),\n              headerClasses: 'sticky right-0  bg-gray-500 text-white z-50',\n              classes: (cell, row, rowIndex, colIndex) => {\n                return 'sticky right-0 bg-gray-500';\n              },\n              style: (cell, row, rowIndex, colIndex) => {\n                return {\n                  zIndex: props.data?.length - rowIndex,\n                };\n              },\n            },\n          ]}\n          isDelete={props.isDelete}\n          isEditModify={props.isUpdate}\n          isExport={props.isExport}\n          isSelectRow={true}\n          fileName='Report Panel Approval'\n          onSelectedRow={(rows, type) => {\n            props.onSelectedRow && props.onSelectedRow(rows, type);\n          }}\n          onFilter={(type, filter, page, size) => {\n            props.onFilter && props.onFilter(type, filter, page, size);\n          }}\n          onPageSizeChange={(page, size) => {\n            props.onPageSizeChange && props.onPageSizeChange(page, size);\n          }}\n          clearAllFilter={() => {\n            labId('');\n          }}\n          onFilterRecord={item => {\n            // if (item == 'Pending') setIsAllRecordDisplay(false);\n            // else setIsAllRecordDisplay(true);\n            props.onFilterRecord && props.onFilterRecord(item);\n          }}\n          // diff action to handle\n          onUpdateFields={(fields: any, id: string) => {\n            props.onUpdateFields && props.onUpdateFields({ ...fields }, [id]);\n          }}\n          onUpdateResult={(id, fields) => {\n            props.onUpdateResult && props.onUpdateResult(id, fields);\n          }}\n          onPagination={type => {\n            if (type == 'next') {\n              fetchIndex < localData?.length - 1\n                ? setFetchIndex(fetchIndex + 1)\n                : setFetchIndex(localData?.length - 1);\n            } else {\n              fetchIndex != 0 && fetchIndex < localData?.length\n                ? setFetchIndex(fetchIndex - 1)\n                : setFetchIndex(fetchIndex);\n            }\n          }}\n        />\n      </div>\n    </>\n  );\n};\n","/* eslint-disable */\nimport React, { useState } from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport _ from 'lodash';\nimport ToolkitProvider, {\n  Search,\n  CSVExport,\n} from 'react-bootstrap-table2-toolkit/dist/react-bootstrap-table2-toolkit';\nimport cellEditFactory from 'react-bootstrap-table2-editor';\nimport paginationFactory, {\n  PaginationProvider,\n  PaginationListStandalone,\n  SizePerPageDropdownStandalone,\n  PaginationTotalStandalone,\n} from 'react-bootstrap-table2-paginator';\nimport filterFactory from 'react-bootstrap-table2-filter';\nimport dayjs from 'dayjs';\nimport '@/library/components/organisms/style.css';\n\nimport { Buttons, Icons } from '@/library/components';\n\nconst { SearchBar, ClearSearchButton } = Search;\nconst { ExportCSVButton } = CSVExport;\n\ninterface TableBootstrapProps {\n  id: string;\n  data: any;\n  totalSize?: number;\n  searchPlaceholder?: string;\n  page?: number;\n  sizePerPage?: number;\n  columns: any;\n  fileName: string;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  isSelectRow?: boolean;\n  selectedItem?: any;\n  onDelete?: (selectedItem: any) => void;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (value: any, dataField: string, id: string) => void;\n  onPageSizeChange?: (page: number, limit: number) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n  clearAllFilter?: () => void;\n  onClickRow?: (item: any, index: number) => void;\n}\nexport const TableBootstrap = ({\n  id,\n  data,\n  totalSize = 10,\n  searchPlaceholder = 'Search...',\n  page = 0,\n  sizePerPage = 10,\n  columns,\n  fileName,\n  isEditModify,\n  isSelectRow,\n  selectedItem,\n  onSelectedRow,\n  onUpdateItem,\n  onPageSizeChange,\n  onFilter,\n  clearAllFilter,\n  onClickRow,\n}: TableBootstrapProps) => {\n  const [selectedRow, setSelectedRow] = useState<any[]>();\n  const [isFilterOpen, setIsFilterOpen] = useState<boolean>(false);\n\n  const customTotal = (from, to, size) => {\n    return (\n      <>\n        <div className='clearfix' />\n        <span>\n          Showing {from} to {to} of {size} Results\n        </span>\n      </>\n    );\n  };\n\n  const sizePerPageRenderer = ({\n    options,\n    currSizePerPage,\n    onSizePerPageChange,\n  }) => (\n    <div className='btn-group items-center' role='group'>\n      <input\n        type='number'\n        min='0'\n        placeholder='No'\n        onChange={(e: any) => {\n          if (e.target.value) {\n            onSizePerPageChange(e.target.value);\n          }\n        }}\n        className='mr-2 ml-2 leading-4 p-2 w-14 focus:outline-none focus:ring block  shadow-sm sm:text-base border border-gray-300 rounded-md'\n      />\n      {options.map(option => (\n        <button\n          key={option.text}\n          type='button'\n          onClick={() => onSizePerPageChange(option.page)}\n          className={`btn  ${\n            currSizePerPage === `${option.page}` ? 'bg-primary' : 'bg-grey'\n          }`}\n        >\n          {option.text}\n        </button>\n      ))}\n    </div>\n  );\n  const options = {\n    cutome: true,\n    totalSize: totalSize,\n    paginationSize: 5,\n    pageStartIndex: 0,\n    firstPageText: '<<',\n    prePageText: '<',\n    nextPageText: '>',\n    lastPageText: '>>',\n    disablePageTitle: true,\n    paginationTotalRenderer: customTotal,\n    hideSizePerPage: true,\n    showTotal: false,\n    alwaysShowAllBtns: true,\n    sizePerPageList: [\n      {\n        text: '10',\n        value: 10,\n      },\n      {\n        text: '20',\n        value: 20,\n      },\n      {\n        text: '30',\n        value: 30,\n      },\n      {\n        text: '40',\n        value: 40,\n      },\n      {\n        text: '50',\n        value: 50,\n      },\n    ],\n    hidePageListOnlyOnePage: true,\n    sizePerPageRenderer: sizePerPageRenderer,\n  };\n  let searchProps: any = {\n    placeholder: searchPlaceholder,\n  };\n  const handleOnSelect = (rows: any, isSelect) => {\n    if (isSelect) {\n      if (selectedRow) {\n        let itemSelected: any[] = selectedRow;\n        itemSelected.push(rows);\n        setSelectedRow(itemSelected);\n      } else {\n        setSelectedRow([rows]);\n      }\n    }\n  };\n\n  const handleOnSelectAll = (isSelect, rows) => {\n    if (isSelect) {\n      setSelectedRow(rows);\n    }\n  };\n\n  const handleTableChange = (\n    type,\n    {\n      data,\n      cellEdit,\n      page,\n      sizePerPage,\n      filters,\n      sortField,\n      sortOrder,\n      searchText,\n    },\n  ) => {\n    // console.log({type});\n    if (type === 'cellEdit' && isEditModify) {\n      onUpdateItem &&\n        onUpdateItem(cellEdit.newValue, cellEdit.dataField, cellEdit.rowId);\n    }\n    if (type === 'pagination' && _.isEmpty(filters)) {\n      // if (sizePerPage > totalSize) return alert(\"You have not more records.\")\n      // if (page * sizePerPage > totalSize) return alert(\"You have not more records.\")\n      onPageSizeChange && onPageSizeChange(page, sizePerPage);\n    }\n    if (type === 'filter' || (type === 'pagination' && !_.isEmpty(filters))) {\n      if (type === 'pagination') {\n        if (sizePerPage > totalSize) return alert('You have not more records.');\n        if (page * sizePerPage > totalSize)\n          return alert('You have not more records.');\n      }\n      let filter: any = {};\n      for (const [key, value] of Object.entries(filters)) {\n        const values: any = value;\n        const object = { [key]: values.filterVal };\n        filter = Object.assign(filter, object);\n      }\n      onFilter &&\n        onFilter(\n          type,\n          filter,\n          type === 'filter' && page === 1 ? 0 : page,\n          sizePerPage,\n        );\n    }\n    if (type === 'search') {\n      setTimeout(() => {\n        onFilter && onFilter(type, { srText: searchText }, page, sizePerPage);\n      }, 2000);\n    }\n    if (type === 'sort') {\n      let result;\n      if (sortOrder === 'asc') {\n        result = data.sort((a, b) => {\n          if (a[sortField] > b[sortField]) {\n            return 1;\n          } else if (b[sortField] > a[sortField]) {\n            return -1;\n          }\n          return 0;\n        });\n      } else {\n        result = data.sort((a, b) => {\n          if (a[sortField] > b[sortField]) {\n            return -1;\n          } else if (b[sortField] > a[sortField]) {\n            return 1;\n          }\n          return 0;\n        });\n      }\n    }\n  };\n\n  const CustomToggleList = ({ columns, onColumnToggle, toggles }) => (\n    <div className='btn-group btn-group-toggle' data-toggle='buttons'>\n      {columns\n        .map(column => ({\n          ...column,\n          toggle: toggles[column.dataField],\n        }))\n        .map((column, index) => {\n          if (index > 0) {\n            return (\n              <button\n                type='button'\n                key={column.dataField}\n                className={` btn btn-primary  btn-sm whitespace-nowrap ${\n                  column.toggle ? 'active' : ''\n                }`}\n                data-toggle='button'\n                aria-pressed={column.toggle ? 'true' : 'false'}\n                onClick={() => onColumnToggle(column.dataField)}\n              >\n                {column.text}\n              </button>\n            );\n          }\n        })}\n    </div>\n  );\n\n  const rowEvents = {\n    onClick: (e, row, rowIndex) => {\n      onClickRow && onClickRow(row, rowIndex);\n    },\n  };\n\n  const rowStyle = (row, rowIndex) => {\n    if (row._id == selectedItem?._id) {\n      return { backgroundColor: '#a9a9a9' };\n    }\n  };\n\n  return (\n    <PaginationProvider\n      pagination={paginationFactory(\n        totalSize !== 0 ? options : { page, sizePerPage, totalSize },\n      )}\n      keyField={id}\n      columns={columns}\n      data={data}\n    >\n      {({ paginationProps, paginationTableProps }) => (\n        <ToolkitProvider\n          keyField={id}\n          bootstrap4\n          data={data}\n          columns={columns}\n          search\n          exportCSV={{\n            fileName: `${fileName}_${dayjs(new Date()).format(\n              'YYYY-MM-DD HH:mm',\n            )}.csv`,\n            noAutoBOM: false,\n            blobType: 'text/csv;charset=ansi',\n            exportAll: false,\n            onlyExportFiltered: true,\n          }}\n          columnToggle\n        >\n          {props => (\n            <div>\n              <div className='scrollTable'>\n                <BootstrapTable\n                  remote\n                  {...props.baseProps}\n                  noDataIndication='Table is Empty'\n                  hover\n                  {...paginationTableProps}\n                  filter={filterFactory()}\n                  headerClasses='bg-gray-500 text-white whitespace-nowrap'\n                  onTableChange={handleTableChange}\n                  rowEvents={rowEvents}\n                  rowStyle={rowStyle}\n                />\n              </div>\n            </div>\n          )}\n        </ToolkitProvider>\n      )}\n    </PaginationProvider>\n  );\n};\n","import React, { useState } from 'react';\nimport { observer } from 'mobx-react';\nimport { Form } from '@/library/components';\nimport { Confirm } from '@/library/models';\nimport dayjs from 'dayjs';\n\nimport { TableBootstrap } from './table-bootstrap.components';\n\ninterface PatientDemographicsListProps {\n  data: any;\n  totalSize: number;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  onUpdate?: (selectedItem: Confirm) => void;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (value: any, dataField: string, id: string) => void;\n  onPageSizeChange?: (page: number, totalSize: number) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n  onClickRow?: (item: any, index: number) => void;\n  onReport?: (item: any) => void;\n}\n\nexport const PatientDemographicsList = observer(\n  (props: PatientDemographicsListProps) => {\n    const [selectedItem, setSelectedItem] = useState<any>({});\n    return (\n      <>\n        <div style={{ position: 'relative' }}>\n          <TableBootstrap\n            id='_id'\n            data={props.data}\n            totalSize={props.totalSize}\n            selectedItem={selectedItem}\n            columns={[\n              {\n                dataField: '_id',\n                text: 'Id',\n                hidden: true,\n                csvExport: false,\n              },\n              {\n                dataField: 'pId',\n                text: 'Pid',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'name',\n                text: 'Name',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'age',\n                text: 'Age',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'sex',\n                text: 'Sex',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'dob',\n                text: 'DOB',\n                sort: true,\n                editable: false,\n                formatter: (cell, row) => {\n                  const maxLength = 5;\n                  const displayTestName =\n                    row.dob.length > maxLength\n                      ? dayjs(row.dob)\n                          .format('DD-MM-YYYY HH:mm:ss')\n                          .slice(0, Math.max(0, maxLength)) + '...'\n                      : dayjs(row.dob).format('DD-MM-YYYY HH:mm:ss');\n                  return (\n                    <div className='flex flex-row'>\n                      <span\n                        title={dayjs(row.dob).format('DD-MM-YYYY HH:mm:ss')}\n                      >{`${displayTestName}`}</span>\n                    </div>\n                  );\n                },\n              },\n              {\n                dataField: 'patientMobileNo',\n                text: 'patientMobileNo',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'doctorId',\n                text: 'Doctor Id',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'doctorMobileNo',\n                text: 'Doctor Mobile No',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'registrationLocation',\n                text: 'Registration Location',\n                sort: true,\n                editable: false,\n                formatter: (cellContent, row) => {\n                  const maxLength = 15;\n                  const displayTestName =\n                    row.registrationLocation.length > maxLength\n                      ? row.registrationLocation.slice(\n                          0,\n                          Math.max(0, maxLength),\n                        ) + '...'\n                      : row.registrationLocation;\n                  return (\n                    <div className='flex flex-row'>\n                      <span\n                        title={row.registrationLocation}\n                      >{`${displayTestName}`}</span>\n                    </div>\n                  );\n                },\n              },\n              {\n                dataField: 'contactNo',\n                text: 'Contact Number',\n                sort: true,\n                editable: false,\n              },\n              {\n                dataField: 'history',\n                text: 'History',\n                sort: true,\n                csvFormatter: (col, row) =>\n                  `${row.history ? (row.history ? 'Yes' : 'No') : 'No'}`,\n                editable: false,\n                formatter: (cell, row) => {\n                  return (\n                    <>\n                      {' '}\n                      <Form.Toggle disabled={true} value={row.history} />\n                    </>\n                  );\n                },\n              },\n              // {\n              //   text: 'Company Code',\n              //   dataField: 'companyCode',\n              //   sort: true,\n              //   editable: false,\n              // },\n              // {\n              //   text: 'Environment',\n              //   dataField: 'environment',\n              //   editable: false,\n              //   sort: true,\n              // },\n            ]}\n            isEditModify={props.isEditModify}\n            isSelectRow={true}\n            fileName='Pending Panel Approval'\n            onSelectedRow={rows => {\n              props.onSelectedRow &&\n                props.onSelectedRow(rows.map((item: any) => item._id));\n            }}\n            onUpdateItem={(value: any, dataField: string, id: string) => {\n              props.onUpdateItem && props.onUpdateItem(value, dataField, id);\n            }}\n            onPageSizeChange={(page, size) => {\n              props.onPageSizeChange && props.onPageSizeChange(page, size);\n            }}\n            onFilter={(type, filter, page, size) => {\n              props.onFilter && props.onFilter(type, filter, page, size);\n            }}\n            clearAllFilter={() => {}}\n            onClickRow={(item, index) => {\n              setSelectedItem(item);\n              props.onClickRow && props.onClickRow(item, index);\n            }}\n          />\n        </div>\n      </>\n    );\n  },\n);\n","import React, { useEffect, useMemo, useState } from 'react';\nimport { observer } from 'mobx-react';\nimport _ from 'lodash';\nimport { Toast, MainPageHeading } from '@/library/components';\nimport { useForm } from 'react-hook-form';\nimport { RouterFlow } from '@/flows';\nimport { PanelApprovalList, PatientDemographicsList } from '../components';\nimport '@/library/assets/css/accordion.css';\nimport { useStores } from '@/stores';\nimport 'react-accessible-accordion/dist/fancy-example.css';\n\nconst PanelApproval = observer(() => {\n  const { panelApprovalStore, routerStore, loginStore, patientResultStore } =\n    useStores();\n  const {\n    control,\n    handleSubmit,\n    formState: { errors },\n    setValue,\n  } = useForm();\n  const [data, setData] = useState<Array<any>>([]);\n  const [receiptPath, setReceiptPath] = useState<string>();\n  const [expandItem, setExpandItem] = useState<any>([]);\n  const [tableReload, setTableReload] = useState<boolean>(false);\n  const [selectId, setSelectId] = useState('');\n  const [filterRecord, setFilterRecord] = useState<string>('');\n\n  useEffect(() => {\n    const uniqueList = _.groupBy(\n      panelApprovalStore.panelApprovalList,\n      item => `${item.labId}-${item.panelCode}`,\n    );\n    if (uniqueList)\n      setData(Object.keys(uniqueList).map(key => [key, uniqueList[key]]));\n  }, [panelApprovalStore.panelApprovalList]);\n\n  const updateRecords = payload => {\n    const { type, data } = payload;\n    switch (type) {\n      case 'update': {\n        panelApprovalStore.panelApprovalService\n          .update({\n            input: {\n              ...data.fields,\n              _id: data.id,\n            },\n          })\n          .then((res: any) => {\n            if (res.updatePanelApproval.success) {\n              Toast.success({\n                message: `😊 ${res.updatePanelApproval.message}`,\n              });\n              panelApprovalStore.panelApprovalService.listPanelApproval({});\n              setTableReload(!tableReload);\n            }\n          });\n        break;\n      }\n      case 'updateMany': {\n        panelApprovalStore.panelApprovalService\n          .update({\n            input: {\n              updateMany: {\n                fields: data.rows,\n                type: data.type,\n              },\n            },\n          })\n          .then((res: any) => {\n            if (res.updatePanelApproval.success) {\n              Toast.success({\n                message: `😊 ${res.updatePanelApproval.message}`,\n              });\n              panelApprovalStore.panelApprovalService.listPanelApproval({});\n              setTableReload(!tableReload);\n            }\n          });\n        break;\n      }\n      case 'updateByIds': {\n        panelApprovalStore.panelApprovalService\n          .updateByIds({\n            input: {\n              ...data.fields,\n              ids: data.ids,\n            },\n          })\n          .then((res: any) => {\n            if (res.updateByIdsPanelApproval.success) {\n              Toast.success({\n                message: `😊 ${res.updateByIdsPanelApproval.message}`,\n              });\n              panelApprovalStore.panelApprovalService.listPanelApproval({});\n            }\n          });\n        break;\n      }\n    }\n  };\n\n  const updateResultRecords = (id, payload) => {\n    patientResultStore.patientResultService\n      .updateSingleFiled({\n        input: {\n          result: payload?.result,\n          resultType: payload?.resultType,\n          file: payload?.file,\n          labId: payload?.labId,\n          analyteCode: payload?.analyteCode,\n          analyteName: payload?.analyteName,\n          testStatus: payload?.testStatus,\n          rangeType: payload?.rangeType,\n          critical: payload?.critical,\n          abnFlag: payload?.abnFlag,\n          refRangesList: payload?.refRangesList,\n          testCode: payload?.testCode,\n          testName: payload?.testName,\n          panelCode: payload?.panelCode,\n          resultDate: payload?.resultDate,\n          reportPriority: payload?.reportPriority,\n          deliveryMode: payload?.deliveryMode,\n          units: payload?.units,\n          conclusion: payload?.conclusion,\n          loNor: payload?.loNor,\n          hiNor: payload?.hiNor,\n          resultStatus: payload?.resultStatus,\n          panelStatus: payload?.panelStatus,\n          enteredBy: loginStore.login?.userId,\n          _id: id,\n          __v: undefined,\n          flagUpdate: undefined,\n        },\n      })\n      .then(res => {\n        if (res.updatePatientResult.success) {\n          Toast.success({\n            message: `😊 ${res.updatePatientResult.message}`,\n            timer: 2000,\n          });\n          panelApprovalStore.panelApprovalService.listPanelApproval({});\n        }\n      });\n    setTableReload(!tableReload);\n  };\n\n  const panelApprovalTable = useMemo(\n    () => (\n      <PanelApprovalList\n        data={data || []}\n        totalSize={panelApprovalStore.panelApprovalListCount}\n        selectedId={selectId}\n        filterRecord={filterRecord}\n        isView={RouterFlow.checkPermission(routerStore.userPermission, 'View')}\n        isDelete={RouterFlow.checkPermission(\n          routerStore.userPermission,\n          'Delete',\n        )}\n        isUpdate={RouterFlow.checkPermission(\n          routerStore.userPermission,\n          'Update',\n        )}\n        isExport={RouterFlow.checkPermission(\n          routerStore.userPermission,\n          'Export',\n        )}\n        isApproval={RouterFlow.checkPermission(\n          routerStore.userPermission,\n          'Approval',\n        )}\n        onSelectedRow={(rows, type) => {\n          updateRecords({\n            show: true,\n            type: 'updateMany',\n            data: { rows, type },\n            title: 'Are you sure?',\n            body: 'Update items!',\n          });\n        }}\n        onUpdateFields={(fields: any, ids: string[]) => {\n          updateRecords({\n            show: true,\n            type: 'updateByIds',\n            data: { fields, ids },\n            title: 'Are you sure?',\n            body: 'Update items!',\n          });\n        }}\n        onUpdateResult={(fields: any, id: string) => {\n          updateResultRecords(id, fields);\n        }}\n        onExpand={items => {\n          if (typeof items == 'object') {\n            setSelectId(items?._id);\n            setExpandItem([items]);\n          } else {\n            setExpandItem([]);\n          }\n        }}\n        onPageSizeChange={(page, limit) => {\n          panelApprovalStore.panelApprovalService.listPanelApproval({\n            page,\n            limit,\n          });\n        }}\n        onFilter={(type, filter, page, limit) => {\n          panelApprovalStore.panelApprovalService.filter({\n            input: { type, filter, page, limit },\n          });\n        }}\n        onRecheck={async (id: string, patientResultId: string) => {\n          await patientResultStore.patientResultService\n            .updateStatus({\n              input: {\n                filter: {\n                  id,\n                  patientResultId,\n                  mode: 'reCheck',\n                  approvalStatus: 'ReCheck',\n                },\n              },\n            })\n            .then(res => {\n              Toast.success({\n                message: `😊 ${res.updateStatusPatientResult.message}`,\n              });\n              panelApprovalStore.panelApprovalService?.listPanelApproval({});\n            });\n        }}\n        onRetest={async (id: string, patientResultId: string) => {\n          await patientResultStore.patientResultService\n            .updateStatus({\n              input: {\n                filter: {\n                  id,\n                  patientResultId,\n                  mode: 'reTest',\n                  approvalStatus: 'ReTest',\n                },\n              },\n            })\n            .then(res => {\n              Toast.success({\n                message: `😊 ${res.updateStatusPatientResult.message}`,\n              });\n              panelApprovalStore.panelApprovalService?.listPanelApproval({});\n            });\n        }}\n        onFilterRecord={status => {\n          if (status == 'ReCall') return alert('WIP');\n          else if (status == 'All') {\n            panelApprovalStore.panelApprovalService.listPanelApproval({\n              isNotEqualToApproved: true,\n            });\n          } else {\n            panelApprovalStore.panelApprovalService.find({\n              input: { filter: { approvalStatus: status } },\n            });\n          }\n        }}\n      />\n    ),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [data, tableReload, selectId, filterRecord],\n  );\n\n  return (\n    <>\n      <MainPageHeading\n        title={routerStore.selectedComponents?.title || ''}\n        store={loginStore}\n      />\n      <div className='p-3 rounded-lg shadow-xl overflow-auto'>\n        {panelApprovalTable}\n        <span className='text-red hidden'>\n          Note: Report Priority= Daily single-single update.\n        </span>\n      </div>\n      {expandItem?.length > 0 && (\n        <>\n          <div className='p-1 rounded-lg shadow-xl overflow-auto mt-4'>\n            <span className='font-bold text-lg underline'>\n              Patient Demographics\n            </span>\n            <PatientDemographicsList\n              data={expandItem || []}\n              totalSize={expandItem.length}\n            />\n          </div>\n        </>\n      )}\n    </>\n  );\n});\n\nexport default PanelApproval;\n"],"names":["TableBootstrap","Search","SearchBar","ClearSearchButton","CSVExport","ExportCSVButton","_ref","_ref$id","id","data","_ref$totalSize","totalSize","_ref$page","searchPlaceholder","page","_ref$sizePerPage","sizePerPage","columns","fileName","isEditModify","onUpdateItem","isSelectRow","selectedItem","onSelectedRow","onPageSizeChange","onFilter","onClickRow","clearAllFilter","_useState","useState","_useState2","_slicedToArray","_useState3","_useState4","options","cutome","paginationSize","pageStartIndex","firstPageText","prePageText","nextPageText","lastPageText","disablePageTitle","paginationTotalRenderer","from","to","size","_jsxs","_Fragment","children","_jsx","className","hideSizePerPage","showTotal","alwaysShowAllBtns","sizePerPageList","text","value","hidePageListOnlyOnePage","sizePerPageRenderer","_ref2","currSizePerPage","onSizePerPageChange","role","type","min","placeholder","onChange","e","target","map","option","onClick","concat","handleTableChange","_ref3","cellEdit","filters","sortField","sortOrder","searchText","newValue","dataField","rowId","_","alert","filter","_i","_Object$entries","Object","entries","length","_Object$entries$_i","key","values","object","_defineProperty","filterVal","assign","setTimeout","srText","sort","a","b","rowEvents","row","rowIndex","rowStyle","_row$colorScheme","_row$colorScheme2","_row$colorScheme3","_row$colorScheme4","_row$colorScheme5","colorScheme","envRangeColor","backgroundColor","cellColor","color","fontColor","PaginationProvider","pagination","paginationFactory","keyField","_ref5","paginationProps","paginationTableProps","ToolkitProvider","bootstrap4","search","exportCSV","dayjs","Date","format","noAutoBOM","blobType","exportAll","onlyExportFiltered","columnToggle","props","BootstrapTable","_objectSpread","remote","baseProps","noDataIndication","hover","filterFactory","headerClasses","onTableChange","RefRanges","_ref$data","debounce","_ref4","style","maxWidth","Result","observer","setSelectedItem","widthRefBox","setWidthRefBox","_useState5","_useState6","selectedRowId","setSelectedRowId","_useState7","_useState8","widthConculsionBox","setWidthConculsionBox","_useState9","_useState10","conclusionId","setWidthConculsionId","position","hidden","csvExport","editable","whiteSpace","overflow","textOverflow","minWidth","formatter","cellContent","title","test","analyte","editorRenderer","editorProps","column","columnIndex","InputResult","onSelect","_asyncToGenerator","_regeneratorRuntime","mark","_callee","result","rows","wrap","_context","prev","next","onUpdateResult","resultStatus","getResultStatus","resultType","testStatus","getTestStatus","abnFlag","getAbnFlag","critical","getCretical","patientResultId","stop","_x","apply","arguments","cell","Form","disabled","validationLevel","onUpdateFields","Number","parseInt","_id","selected","splice","item","index","width","_row$refRangesList","_row$refRangesList2","loNor","hiNor","refRangesList","Tooltip","tooltipText","Icons","onBlur","conclusion","defaultValue","sampleType","deltaFlag","approvalDate","autoRelease","csvFormatter","col","_$without","_ref$searchPlaceholde","isDelete","_ref$isExport","isExport","onFilterRecord","onPagination","selectedRow","isFilterOpen","setIsFilterOpen","useEffect","expandButton","document","getElementsByClassName","click","statusData","code","searchProps","CustomToggleList","onColumnToggle","toggles","toggle","undefined","_$without2","_$without3","_$without4","_data$0$","console","log","csvProps","Buttons","status","contextual","btnClassName","columnToggleProps","cellEditFactory","mode","blurToSave","fields","height","borderRadius","align","padding","_callee2","_context2","PanelApprovalList","selectId","localData","setLocalData","_useState11","_useState12","_useState13","_useState14","isAllRecordDisplay","_useState15","_useState16","fetchIndex","setFetchIndex","JSON","parse","stringify","selectedId","isView","_row$1$","labId","_row$1$2","panel","_row$1$3","_row$1$4","dueDate","_row$1$5","approvalStatus","_row$1$6","comments","_row$1$7","pLab","_row$1$8","department","_row$1$9","_row$1$10","_row$1$11","_row$1$13","_row$1$14","_row$1$17","_row$1$18","_row$1$21","isApproval","isDisable","onExpand","_row$1$12","_row$1$15","_row$1$16","onRecheck","nameIcon","propsIcon","_row$1$19","_row$1$20","onRetest","classes","colIndex","_props$data","zIndex","isUpdate","PatientDemographicsList","displayTestName","dob","slice","Math","max","registrationLocation","history","PanelApproval","_routerStore$selected","_useStores","useStores","panelApprovalStore","routerStore","loginStore","patientResultStore","_useForm","useForm","control","handleSubmit","formState","errors","setValue","setData","expandItem","setExpandItem","tableReload","setTableReload","setSelectId","filterRecord","uniqueList","panelApprovalList","panelCode","keys","updateRecords","payload","panelApprovalService","update","input","then","res","updatePanelApproval","success","Toast","message","listPanelApproval","updateMany","updateByIds","ids","updateByIdsPanelApproval","panelApprovalTable","useMemo","panelApprovalListCount","RouterFlow","userPermission","show","body","_loginStore$login","patientResultService","updateSingleFiled","file","analyteCode","analyteName","rangeType","testCode","testName","resultDate","reportPriority","deliveryMode","units","panelStatus","enteredBy","login","userId","__v","flagUpdate","updatePatientResult","timer","updateResultRecords","items","limit","updateStatus","_panelApprovalStore$p","updateStatusPatientResult","_x2","_panelApprovalStore$p2","_x3","_x4","isNotEqualToApproved","find","MainPageHeading","selectedComponents","store"],"sourceRoot":""}