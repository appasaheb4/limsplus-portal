{"version":3,"file":"static/js/6044.cfefaacb.chunk.js","mappings":"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","sources":["features/report-builder/report-settings/components/molecules/page-layout/page-layout-list.components.tsx","features/report-builder/report-settings/components/molecules/page-branding/input/auto-complet-layout-code.component.tsx","features/report-builder/report-settings/components/molecules/page-branding/header.component.tsx","features/report-builder/report-settings/components/molecules/page-branding/sub-header.component.tsx","features/report-builder/report-settings/components/molecules/page-branding/footer.component.tsx","features/report-builder/report-settings/components/molecules/page-branding/page-number.component.tsx","features/report-builder/report-settings/components/molecules/page-branding/page-branding-list.components.tsx","features/report-builder/report-settings/components/molecules/report-body/general.component.tsx","features/report-builder/report-settings/components/molecules/report-body/panel.component.tsx","features/report-builder/report-settings/components/molecules/report-body/test.component.tsx","features/report-builder/report-settings/components/molecules/report-body/analyte.component.tsx","features/report-builder/report-settings/components/molecules/report-body/report-body-list.components.tsx","features/report-builder/report-settings/components/molecules/report-body/input/auto-complet-page-branding-code.component.tsx","features/report-builder/report-settings/components/molecules/template-patient-result/report-body.components.tsx","features/report-builder/report-settings/components/molecules/template-patient-result/end-of-page.components.tsx","features/report-builder/report-settings/components/molecules/template-patient-result/end-of-report.components.tsx","features/report-builder/report-settings/components/molecules/template-patient-result/template-patient-result-list.components.tsx","features/report-builder/report-settings/screens/page-branding.screen.tsx","features/report-builder/report-settings/screens/page-layout.screen.tsx","features/report-builder/report-settings/screens/template-patient-result.screen.tsx","features/report-builder/report-settings/screens/report-body.screen.tsx","features/report-builder/report-settings/screens/report-settings.screen.tsx","features/report-builder/report-template/components/molecules/pdf/page-branding/temp0001/temp0001-footer.component.tsx","features/report-builder/report-template/components/molecules/pdf/page-branding/temp0001/temp0001-header.component.tsx","features/report-builder/report-template/components/molecules/pdf/page-branding/temp0001/temp0001-sub-header.component.tsx","features/report-builder/report-template/components/molecules/pdf/page-branding/temp0001/temp0001.component.tsx","features/report-builder/report-template/components/molecules/pdf/page-layout/temp0001/temp0001.component.tsx"],"sourcesContent":["import React from 'react';\nimport {observer} from 'mobx-react';\nimport {\n  Form,\n  TableBootstrap,\n  Tooltip,\n  Icons,\n  Buttons,\n  Svg,\n} from '@/library/components';\nimport {Confirm} from '@/library/models';\n\ninterface PageLayoutProps {\n  data: any;\n  totalSize: number;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  onDelete?: (selectedItem: Confirm) => void;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (fields: any, id: string) => void;\n  onPageSizeChange?: (page: number, totalSize: number) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n  onPdfPreview?: (selectedItem: any) => void;\n}\n\nlet sectionSetting;\nlet version;\nlet environment;\n\nexport const PageLayoutList = observer((props: PageLayoutProps) => {\n  return (\n    <>\n      <div style={{position: 'relative'}}>\n        <TableBootstrap\n          id='_id'\n          data={props.data}\n          totalSize={props.totalSize}\n          columns={[\n            {\n              dataField: '_id',\n              text: 'Id',\n              hidden: true,\n              csvExport: false,\n            },\n            {\n              dataField: 'tempCode',\n              text: 'Layout Code',\n              headerClasses: 'textHeader',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'tempName',\n              text: 'Layout Name',\n              headerClasses: 'textHeader',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'isToolbar',\n              text: 'Show tool bar',\n              sort: true,\n              csvFormatter: (col, row) =>\n                `${row.isToolbar ? (row.isToolbar ? 'Yes' : 'No') : 'No'}`,\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <Form.Toggle\n                      value={row.isToolbar}\n                      onChange={isToolbar => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem({isToolbar}, row._id);\n                      }}\n                    />\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'isBackgroundImage',\n              text: 'Background Image Visible',\n              sort: true,\n              csvFormatter: (col, row) =>\n                `${\n                  row.isBackgroundImage\n                    ? row.isBackgroundImage\n                      ? 'Yes'\n                      : 'No'\n                    : 'No'\n                }`,\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <Form.Toggle\n                      value={row.isBackgroundImage}\n                      onChange={isBackgroundImage => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem({isBackgroundImage}, row._id);\n                      }}\n                    />\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'backgroundImage',\n              text: 'Background Image',\n              sort: true,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    {row?.backgroundImage && (\n                      <img\n                        src={row?.backgroundImage}\n                        alt='logo'\n                        className='object-fill h-35 w-40 rounded-md'\n                      />\n                    )}\n                  </>\n                );\n              },\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <div className='flex flex-col justify-center items-center gap-2'>\n                  <Form.InputFile\n                    placeholder='File'\n                    onChange={async e => {\n                      const backgroundImage = e.target.files[0];\n                      props.onUpdateItem &&\n                        props.onUpdateItem(\n                          {\n                            backgroundImage,\n                          },\n                          row._id,\n                        );\n                    }}\n                  />\n                  <Buttons.Button\n                    size='small'\n                    type='outline'\n                    icon={Svg.Remove}\n                    onClick={() => {\n                      props.onUpdateItem &&\n                        props.onUpdateItem(\n                          {\n                            backgroundImage: null,\n                          },\n                          row._id,\n                        );\n                    }}\n                  >\n                    Remove Image\n                  </Buttons.Button>\n                </div>\n              ),\n            },\n            {\n              dataField: 'pageSize',\n              text: 'Page Size',\n              sort: true,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <select\n                      value={row?.pageSize}\n                      className={`leading-4 p-2 focus:outline-none focus:ring block w-full shadow-sm sm:text-base border-2 border-gray-300\n                       rounded-md`}\n                      onChange={e => {\n                        const pageSize = e.target.value;\n                        props.onUpdateItem &&\n                          props.onUpdateItem({pageSize}, row._id);\n                      }}\n                    >\n                      <option selected>Select</option>\n                      {[\n                        '4A0',\n                        '2A0',\n                        'A0',\n                        'A1',\n                        'A2',\n                        'A3',\n                        'A4',\n                        'A5',\n                        'A6',\n                        'A7',\n                        'A8',\n                        'A9',\n                        'A10',\n                        'B0',\n                        'B1',\n                        'B2',\n                        'B3',\n                        'B4',\n                        'B5',\n                        'B6',\n                        'B7',\n                        'B8',\n                        'B9',\n                        'B10',\n                        'C0',\n                        'C1',\n                        'C2',\n                        'C3',\n                        'C4',\n                        'C5',\n                        'C6',\n                        'C7',\n                        'C8',\n                        'C9',\n                        'C10',\n                        'RA0',\n                        'RA1',\n                        'RA2',\n                        'RA3',\n                        'RA4',\n                        'SRA0',\n                        'SRA1',\n                        'SRA2',\n                        'SRA3',\n                        'SRA4',\n                        'EXECUTIVE',\n                        'FOLIO',\n                        'LEGAL',\n                        'LETTER',\n                        'TABLOID',\n                        'ID1',\n                      ].map((item: any, index: number) => (\n                        <option key={index} value={item}>\n                          {item}\n                        </option>\n                      ))}\n                    </select>\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'mainBoxCSS',\n              text: 'Main Box Css',\n              headerClasses: 'textHeader4',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  <Form.MultilineInput\n                    label=''\n                    style={{color: '#ffffff', backgroundColor: '#000000'}}\n                    placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n                    onBlur={mainBoxCSS => {\n                      props.onUpdateItem &&\n                        props.onUpdateItem({mainBoxCSS}, row._id);\n                    }}\n                    defaultValue={row?.mainBoxCSS}\n                  />\n                </>\n              ),\n            },\n            {\n              dataField: 'operation',\n              text: 'Action',\n              editable: false,\n              csvExport: false,\n              hidden: !props.isDelete,\n              formatter: (cellContent, row) => (\n                <>\n                  <div className='flex flex-row'>\n                    <Tooltip tooltipText='Preview' position='bottom'>\n                      <Icons.IconContext\n                        color='#fff'\n                        size='20'\n                        onClick={() =>\n                          props.onPdfPreview && props.onPdfPreview(row)\n                        }\n                      >\n                        {Icons.getIconTag(Icons.IconIm.ImFilePdf)}\n                      </Icons.IconContext>\n                    </Tooltip>\n                    <Tooltip tooltipText='Delete' position='bottom'>\n                      <Icons.IconContext\n                        color='#fff'\n                        size='20'\n                        onClick={() =>\n                          props.onDelete &&\n                          props.onDelete({\n                            type: 'delete',\n                            show: true,\n                            id: [row._id],\n                            title: 'Are you sure?',\n                            body: 'Delete item',\n                          })\n                        }\n                      >\n                        {Icons.getIconTag(Icons.IconBs.BsFillTrashFill)}\n                      </Icons.IconContext>\n                    </Tooltip>\n                  </div>\n                </>\n              ),\n              headerClasses: 'sticky right-0  bg-gray-500 text-white z-50',\n              classes: (cell, row, rowIndex, colIndex) => {\n                return 'sticky right-0 bg-gray-500';\n              },\n              style: (cell, row, rowIndex, colIndex) => {\n                return {\n                  zIndex: props.data?.length - rowIndex,\n                };\n              },\n            },\n          ]}\n          isEditModify={props.isEditModify}\n          isSelectRow={true}\n          fileName='Template_Settings'\n          onSelectedRow={rows => {\n            props.onSelectedRow &&\n              props.onSelectedRow(rows.map((item: any) => item._id));\n          }}\n          onPageSizeChange={(page, size) => {\n            props.onPageSizeChange && props.onPageSizeChange(page, size);\n          }}\n          onFilter={(type, filter, page, size) => {\n            props.onFilter && props.onFilter(type, filter, page, size);\n          }}\n          clearAllFilter={() => {\n            sectionSetting('');\n            version('');\n            environment('');\n          }}\n          dynamicStylingFields={['tempName', 'tempCode']}\n          hideExcelSheet={['_id', 'operation', 'backgroundImage']}\n        />\n      </div>\n    </>\n  );\n});\n","import React from 'react';\nimport {observer} from 'mobx-react';\nimport {AutoCompleteFilterSingleSelectMultiFieldsDisplay} from '@/library/components';\nimport {useStores} from '@/stores';\n\ninterface AutoCompleteLayoutCodeProps {\n  hasError?: boolean;\n  displayValue?: string;\n  onSelect: (item) => void;\n}\n\nexport const AutoCompleteLayoutCode = observer(\n  ({hasError = false, onSelect, displayValue}: AutoCompleteLayoutCodeProps) => {\n    const {loading, routerStore, reportSettingStore} = useStores();\n    return (\n      <>\n        <AutoCompleteFilterSingleSelectMultiFieldsDisplay\n          loader={loading}\n          placeholder='Layout Code'\n          hasError={hasError}\n          displayValue={displayValue}\n          data={{\n            list: reportSettingStore.pageLayoutList,\n            displayKey: ['tempCode', 'tempName'],\n          }}\n          onFilter={(value: string) => {\n            // reportSettingStore.updateReportSectionList(\n            //   reportSettingStore.reportSectionListCopy.filter(item =>\n            //     item.section\n            //       .toString()\n            //       .toLowerCase()\n            //       .includes(value.toLowerCase()),\n            //   ),\n            // );\n          }}\n          onSelect={item => {\n            onSelect(item);\n          }}\n        />\n      </>\n    );\n  },\n);\n","import React, { useEffect} from 'react';\nimport {observer} from 'mobx-react';\nimport {Form, Grid} from '@/library/components';\nimport {useForm, Controller} from 'react-hook-form';\nimport {useStores} from '@/stores';\nimport {resizeFile} from '@/library/utils';\n\ninterface HeaderComponentProps {\n  isClearReset: boolean;\n}\n\nexport const PageBrandingHeader = observer((props: HeaderComponentProps) => {\n  const {reportSettingStore} = useStores();\n  const {\n    control,\n    handleSubmit,\n    formState: {errors},\n    setValue,\n    setError,\n    clearErrors,\n    reset,\n  } = useForm();\n\n  useEffect(() => {\n    if (props.isClearReset) {\n      reset();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.isClearReset]);\n  return (\n    <>\n      <Grid cols={1}>\n        <Controller\n          control={control}\n          render={({field: {onChange, value}}) => (\n            <Form.Input\n              label='Title'\n              placeholder='Tile'\n              hasError={!!errors.title}\n              value={value}\n              onChange={title => {\n                onChange(title);\n                reportSettingStore.updatePageBranding({\n                  ...reportSettingStore.pageBranding,\n                  header: {\n                    ...reportSettingStore.pageBranding?.header,\n                    title,\n                  },\n                });\n              }}\n            />\n          )}\n          name='title'\n          rules={{required: false}}\n          defaultValue=''\n        />\n        <Controller\n          control={control}\n          render={({field: {onChange, value}}) => (\n            <Form.MultilineInput\n              label='Title CSS'\n              style={{color: '#ffffff', backgroundColor: '#000000'}}\n              placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n              value={value}\n              onChange={titleCSS => {\n                onChange(titleCSS);\n                reportSettingStore.updatePageBranding({\n                  ...reportSettingStore.pageBranding,\n                  header: {\n                    ...reportSettingStore.pageBranding.header,\n                    titleCSS,\n                  },\n                });\n              }}\n            />\n          )}\n          name='titleCSS'\n          rules={{required: false}}\n          defaultValue=''\n        />\n        <Controller\n          control={control}\n          render={({field: {onChange, value}}) => (\n            <Form.InputFile\n              label='Logo'\n              placeholder={'Select Logo'}\n              hasError={!!errors.headerLogo}\n              value={value ? value.fileName : ''}\n              onChange={async e => {\n                const logo = e.target.files[0];\n                onChange(logo);\n                reportSettingStore.updatePageBranding({\n                  ...reportSettingStore.pageBranding,\n                  header: {\n                    ...reportSettingStore.pageBranding?.header,\n                    logo,\n                  },\n                });\n              }}\n            />\n          )}\n          name='headerLogo'\n          rules={{required: false}}\n          defaultValue=''\n        />\n        <Controller\n          control={control}\n          render={({field: {onChange, value}}) => (\n            <Form.MultilineInput\n              label='Logo CSS'\n              style={{color: '#ffffff', backgroundColor: '#000000'}}\n              placeholder={'Like borderRadius:25,width:50'}\n              value={value}\n              onChange={logoCSS => {\n                onChange(logoCSS);\n                reportSettingStore.updatePageBranding({\n                  ...reportSettingStore.pageBranding,\n                  header: {\n                    ...reportSettingStore.pageBranding.header,\n                    logoCSS,\n                  },\n                });\n              }}\n            />\n          )}\n          name='logoCSS'\n          rules={{required: false}}\n          defaultValue=''\n        />\n        <Controller\n          control={control}\n          render={({field: {onChange, value}}) => (\n            <Form.InputFile\n              label='Background Image'\n              placeholder='Background Image'\n              hasError={!!errors.backgroundImage}\n              value={value ? value.fileName : ''}\n              onChange={async e => {\n                const backgroundImage = e.target.files[0];\n                onChange(backgroundImage);\n                reportSettingStore.updatePageBranding({\n                  ...reportSettingStore.pageBranding,\n                  header: {\n                    ...reportSettingStore.pageBranding.header,\n                    backgroundImage,\n                    backgroundImageBase64: (await resizeFile(\n                      backgroundImage,\n                    )) as string,\n                  },\n                });\n              }}\n            />\n          )}\n          name='backgroundImage'\n          rules={{required: false}}\n          defaultValue=''\n        />\n        <Controller\n          control={control}\n          render={({field: {onChange, value}}) => (\n            <Form.MultilineInput\n              label='Main Box CSS'\n              style={{color: '#ffffff', backgroundColor: '#000000'}}\n              placeholder={\"Like backgroundColor:'#000000'\"}\n              value={value}\n              onChange={mainBoxCSS => {\n                onChange(mainBoxCSS);\n                reportSettingStore.updatePageBranding({\n                  ...reportSettingStore.pageBranding,\n                  header: {\n                    ...reportSettingStore.pageBranding.header,\n                    mainBoxCSS,\n                  },\n                });\n              }}\n            />\n          )}\n          name='mainBoxCSS'\n          rules={{required: false}}\n          defaultValue=''\n        />\n      </Grid>\n    </>\n  );\n});\n","import React, {useEffect} from 'react';\nimport {observer} from 'mobx-react';\nimport {Form} from '@/library/components';\nimport {useForm, Controller} from 'react-hook-form';\nimport {useStores} from '@/stores';\n\ninterface PageBrandingSubHeaderComponentProps {\n  isClearReset: boolean;\n}\nexport const PageBrandingSubHeader = observer(\n  (props: PageBrandingSubHeaderComponentProps) => {\n    const {loading, routerStore, reportSettingStore} = useStores();\n    const {\n      control,\n      handleSubmit,\n      formState: {errors},\n      setValue,\n      setError,\n      clearErrors,\n      reset,\n    } = useForm();\n\n    useEffect(() => {\n      if (props.isClearReset) {\n        reset();\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.isClearReset]);\n    return (\n      <>\n        <Controller\n          control={control}\n          render={({field: {onChange, value}}) => (\n            <Form.Input\n              label='Title'\n              placeholder='Title'\n              hasError={!!errors.title}\n              value={value}\n              onChange={title => {\n                onChange(title);\n                reportSettingStore.updatePageBranding({\n                  ...reportSettingStore.pageBranding,\n                  subHeader: {\n                    ...reportSettingStore.pageBranding?.subHeader,\n                    title,\n                  },\n                });\n              }}\n            />\n          )}\n          name='title'\n          rules={{required: false}}\n          defaultValue=''\n        />\n\n        <Controller\n          control={control}\n          render={({field: {onChange, value}}) => (\n            <Form.MultilineInput\n              label='Title CSS'\n              style={{color: '#ffffff', backgroundColor: '#000000'}}\n              placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n              value={value}\n              onChange={titleCSS => {\n                onChange(titleCSS);\n                reportSettingStore.updatePageBranding({\n                  ...reportSettingStore.pageBranding,\n                  subHeader: {\n                    ...reportSettingStore.pageBranding.subHeader,\n                    titleCSS,\n                  },\n                });\n              }}\n            />\n          )}\n          name='titleCSS'\n          rules={{required: false}}\n          defaultValue=''\n        />\n\n        <Controller\n          control={control}\n          render={({field: {onChange, value}}) => (\n            <Form.Input\n              label='Sub Title'\n              placeholder='Sub Title'\n              hasError={!!errors.subTitle}\n              value={value}\n              onChange={subTitle => {\n                onChange(subTitle);\n                reportSettingStore.updatePageBranding({\n                  ...reportSettingStore.pageBranding,\n                  subHeader: {\n                    ...reportSettingStore.pageBranding?.subHeader,\n                    subTitle,\n                  },\n                });\n              }}\n            />\n          )}\n          name='subTitle'\n          rules={{required: false}}\n          defaultValue=''\n        />\n\n        <Controller\n          control={control}\n          render={({field: {onChange, value}}) => (\n            <Form.MultilineInput\n              label='Sub Title CSS'\n              style={{color: '#ffffff', backgroundColor: '#000000'}}\n              placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n              value={value}\n              onChange={subTitleCSS => {\n                onChange(subTitleCSS);\n                reportSettingStore.updatePageBranding({\n                  ...reportSettingStore.pageBranding,\n                  subHeader: {\n                    ...reportSettingStore.pageBranding.subHeader,\n                    subTitleCSS,\n                  },\n                });\n              }}\n            />\n          )}\n          name='subTitleCSS'\n          rules={{required: false}}\n          defaultValue=''\n        />\n\n        <Controller\n          control={control}\n          render={({field: {onChange, value}}) => (\n            <Form.MultilineInput\n              label='Main Box CSS'\n              style={{color: '#ffffff', backgroundColor: '#000000'}}\n              placeholder={\"Like backgroundColor:'#000000'\"}\n              value={value}\n              onChange={mainBoxCSS => {\n                onChange(mainBoxCSS);\n                reportSettingStore.updatePageBranding({\n                  ...reportSettingStore.pageBranding,\n                  subHeader: {\n                    ...reportSettingStore.pageBranding.subHeader,\n                    mainBoxCSS,\n                  },\n                });\n              }}\n            />\n          )}\n          name='subHeaderMainBoxCss'\n          rules={{required: false}}\n          defaultValue=''\n        />\n      </>\n    );\n  },\n);\n","import React, {useEffect} from 'react';\nimport {observer} from 'mobx-react';\nimport {Form} from '@/library/components';\nimport {useForm, Controller} from 'react-hook-form';\nimport {useStores} from '@/stores';\nimport {resizeFile} from '@/library/utils';\ninterface PageBrandingFooterComponentProps {\n  isClearReset: boolean;\n}\nexport const PageBrandingFooter = observer(\n  (props: PageBrandingFooterComponentProps) => {\n    const {reportSettingStore} = useStores();\n    const {\n      control,\n      handleSubmit,\n      formState: {errors},\n      setValue,\n      setError,\n      clearErrors,\n      reset,\n    } = useForm();\n\n    useEffect(() => {\n      if (props.isClearReset) {\n        reset();\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.isClearReset]);\n\n    return (\n      <>\n        <Controller\n          control={control}\n          render={({field: {onChange, value}}) => (\n            <Form.Input\n              label='Title'\n              placeholder='Title'\n              hasError={!!errors.footerTitle}\n              value={value}\n              onChange={title => {\n                onChange(title);\n                reportSettingStore.updatePageBranding({\n                  ...reportSettingStore.pageBranding,\n                  footer: {\n                    ...reportSettingStore.pageBranding?.footer,\n                    title,\n                  },\n                });\n              }}\n            />\n          )}\n          name='footerTitle'\n          rules={{required: false}}\n          defaultValue=''\n        />\n\n        <Controller\n          control={control}\n          render={({field: {onChange, value}}) => (\n            <Form.MultilineInput\n              label='Title CSS'\n              style={{color: '#ffffff', backgroundColor: '#000000'}}\n              placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n              value={value}\n              onChange={titleCSS => {\n                onChange(titleCSS);\n                reportSettingStore.updatePageBranding({\n                  ...reportSettingStore.pageBranding,\n                  footer: {\n                    ...reportSettingStore.pageBranding.footer,\n                    titleCSS,\n                  },\n                });\n              }}\n            />\n          )}\n          name='footerTitleCSS'\n          rules={{required: false}}\n          defaultValue=''\n        />\n        <Controller\n          control={control}\n          render={({field: {onChange, value}}) => (\n            <Form.Input\n              label='Sub Title'\n              placeholder='Sub Title'\n              hasError={!!errors.subTitle}\n              value={value}\n              onChange={subTitle => {\n                onChange(subTitle);\n                reportSettingStore.updatePageBranding({\n                  ...reportSettingStore.pageBranding,\n                  footer: {\n                    ...reportSettingStore.pageBranding?.footer,\n                    subTitle,\n                  },\n                });\n              }}\n            />\n          )}\n          name='subTitle'\n          rules={{required: false}}\n          defaultValue=''\n        />\n\n        <Controller\n          control={control}\n          render={({field: {onChange, value}}) => (\n            <Form.MultilineInput\n              label='Sub Title CSS'\n              style={{color: '#ffffff', backgroundColor: '#000000'}}\n              placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n              value={value}\n              onChange={subTitleCSS => {\n                onChange(subTitleCSS);\n                reportSettingStore.updatePageBranding({\n                  ...reportSettingStore.pageBranding,\n                  footer: {\n                    ...reportSettingStore.pageBranding.footer,\n                    subTitleCSS,\n                  },\n                });\n              }}\n            />\n          )}\n          name='subTitleCSS'\n          rules={{required: false}}\n          defaultValue=''\n        />\n\n        <Controller\n          control={control}\n          render={({field: {onChange, value}}) => (\n            <Form.InputFile\n              label='Background Image'\n              placeholder='Background Image'\n              hasError={!!errors.backgroundImage}\n              value={value ? value.fileName : ''}\n              onChange={async e => {\n                const backgroundImage = e.target.files[0];\n                onChange(backgroundImage);\n                reportSettingStore.updatePageBranding({\n                  ...reportSettingStore.pageBranding,\n                  footer: {\n                    ...reportSettingStore.pageBranding.footer,\n                    backgroundImage,\n                    backgroundImageBase64: (await resizeFile(\n                      backgroundImage,\n                    )) as string,\n                  },\n                });\n              }}\n            />\n          )}\n          name='backgroundImage'\n          rules={{required: false}}\n          defaultValue=''\n        />\n        <Controller\n          control={control}\n          render={({field: {onChange, value}}) => (\n            <Form.MultilineInput\n              label='Main Box CSS'\n              style={{color: '#ffffff', backgroundColor: '#000000'}}\n              placeholder={\"Like backgroundColor:'#000000'\"}\n              value={value}\n              onChange={mainBoxCSS => {\n                onChange(mainBoxCSS);\n                reportSettingStore.updatePageBranding({\n                  ...reportSettingStore.pageBranding,\n                  footer: {\n                    ...reportSettingStore.pageBranding?.footer,\n                    mainBoxCSS,\n                  },\n                });\n              }}\n            />\n          )}\n          name='footerMainBoxCss'\n          rules={{required: false}}\n          defaultValue=''\n        />\n      </>\n    );\n  },\n);\n","import React, {useEffect} from 'react';\nimport {observer} from 'mobx-react';\nimport {Form} from '@/library/components';\nimport {useForm, Controller} from 'react-hook-form';\nimport {useStores} from '@/stores';\n\ninterface PageNumberComponentProps {\n  isClearReset: boolean;\n}\n\nexport const PageNumber = observer((props: PageNumberComponentProps) => {\n  const {reportSettingStore} = useStores();\n  const {\n    control,\n    handleSubmit,\n    formState: {errors},\n    setValue,\n    setError,\n    clearErrors,\n    reset,\n  } = useForm();\n\n  useEffect(() => {\n    if (props.isClearReset) {\n      reset();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.isClearReset]);\n  return (\n    <>\n      <Controller\n        control={control}\n        render={({field: {onChange, value}}) => (\n          <Form.MultilineInput\n            label='Page Number CSS'\n            style={{color: '#ffffff', backgroundColor: '#000000'}}\n            placeholder={\n              \"Like  position: 'absolute',bottom: bottom,right: 5,fontSize: 12,color: 'grey',\"\n            }\n            value={value}\n            onChange={pageNumberCSS => {\n              onChange(pageNumberCSS);\n              reportSettingStore.updatePageBranding({\n                ...reportSettingStore.pageBranding,\n                pageNumber: {\n                  ...reportSettingStore.pageBranding.pageNumber,\n                  pageNumberCSS,\n                },\n              });\n            }}\n          />\n        )}\n        name='pageNumberCSS'\n        rules={{required: false}}\n        defaultValue=''\n      />\n    </>\n  );\n});\n","import React from 'react';\nimport {observer} from 'mobx-react';\nimport {\n  Form,\n  TableBootstrap,\n  Tooltip,\n  Icons,\n  Buttons,\n  Svg,\n} from '@/library/components';\nimport {AutoCompleteLayoutCode} from '../../';\nimport {Confirm} from '@/library/models';\n\ninterface PageBrandingProps {\n  data: any;\n  totalSize: number;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  onDelete?: (selectedItem: Confirm) => void;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (fields: any, id: string) => void;\n  onPageSizeChange?: (page: number, totalSize: number) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n  onPdfPreview?: (selectedItem: any) => void;\n}\n\nlet sectionSetting;\nlet version;\nlet environment;\n\nexport const PageBrandingList = observer((props: PageBrandingProps) => {\n  return (\n    <>\n      <div style={{position: 'relative'}}>\n        <TableBootstrap\n          id='_id'\n          data={props.data}\n          totalSize={props.totalSize}\n          columns={[\n            {\n              dataField: '_id',\n              text: 'Id',\n              hidden: true,\n              csvExport: false,\n            },\n            {\n              dataField: 'layoutCode',\n              text: 'Layout Code',\n              headerClasses: 'textHeader',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  <AutoCompleteLayoutCode\n                    hasError={false}\n                    onSelect={item => {\n                      props.onUpdateItem &&\n                        props.onUpdateItem(\n                          {layoutCode: item.tempCode},\n                          row._id,\n                        );\n                    }}\n                  />\n                </>\n              ),\n            },\n            {\n              dataField: 'tempCode',\n              text: 'Branding Code',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'brandingTitle',\n              text: 'Branding Title',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'isHeader',\n              text: 'Header Visible',\n              csvFormatter: (col, row) =>\n                `${row.isHeader ? (row.isHeader ? 'Yes' : 'No') : 'No'}`,\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <Form.Toggle\n                      value={row.isHeader}\n                      onChange={isHeader => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem({isHeader}, row._id);\n                      }}\n                    />\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'header.title',\n              text: 'Header Title',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  {row?.header?.title && (\n                    <Form.MultilineInput\n                      label=''\n                      className='w-40'\n                      onBlur={title => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            {header: {...row?.header, title}},\n                            row._id,\n                          );\n                      }}\n                      defaultValue={row.header?.title}\n                    />\n                  )}\n                </>\n              ),\n            },\n            {\n              dataField: 'header.titleCSS',\n              text: 'Header Title CSS',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  {row?.header?.titleCSS && (\n                    <Form.MultilineInput\n                      label=''\n                      style={{color: '#ffffff', backgroundColor: '#000000'}}\n                      onBlur={titleCSS => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            {header: {...row?.header, titleCSS}},\n                            row._id,\n                          );\n                      }}\n                      defaultValue={row?.header.titleCSS}\n                    />\n                  )}\n                </>\n              ),\n            },\n            {\n              dataField: 'header.logo',\n              text: 'Header Logo',\n              sort: true,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <img\n                      src={row.header?.logo}\n                      alt='logo'\n                      className='object-fill h-35 w-40 rounded-md'\n                    />\n                  </>\n                );\n              },\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <div className='flex flex-col items-center gap gap-2'>\n                  <Form.InputFile\n                    label='File'\n                    placeholder='File'\n                    onChange={async e => {\n                      const logo = e.target.files[0];\n                      props.onUpdateItem &&\n                        props.onUpdateItem(\n                          {\n                            header: {\n                              ...row.header,\n                              logo,\n                            },\n                          },\n                          row._id,\n                        );\n                    }}\n                  />\n                  <Buttons.Button\n                    size='small'\n                    type='outline'\n                    icon={Svg.Remove}\n                    onClick={() => {\n                      props.onUpdateItem &&\n                        props.onUpdateItem(\n                          {\n                            header: {\n                              ...row.header,\n                              logo: null,\n                            },\n                          },\n                          row._id,\n                        );\n                    }}\n                  >\n                    Remove Image\n                  </Buttons.Button>\n                </div>\n              ),\n            },\n            {\n              dataField: 'header.logoCSS',\n              text: 'Header Logo CSS',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  {row?.header?.logoCSS && (\n                    <Form.MultilineInput\n                      label=''\n                      style={{color: '#ffffff', backgroundColor: '#000000'}}\n                      onBlur={logoCSS => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            {header: {...row?.header, logoCSS}},\n                            row._id,\n                          );\n                      }}\n                      defaultValue={row.header?.logoCSS}\n                    />\n                  )}\n                </>\n              ),\n            },\n            {\n              dataField: 'header.backgroundImage',\n              text: 'Header Background Image',\n              sort: true,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <img\n                      src={row.header?.backgroundImage}\n                      alt='backgroundImage'\n                      className='object-fill h-35 w-40 rounded-md'\n                    />\n                  </>\n                );\n              },\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <div className='flex flex-col items-center gap gap-2'>\n                  <Form.InputFile\n                    label='File'\n                    placeholder='File'\n                    onChange={async e => {\n                      const backgroundImage = e.target.files[0];\n                      props.onUpdateItem &&\n                        props.onUpdateItem(\n                          {\n                            header: {\n                              ...row.header,\n                              backgroundImage,\n                            },\n                          },\n                          row._id,\n                        );\n                    }}\n                  />\n                  <Buttons.Button\n                    size='small'\n                    type='outline'\n                    icon={Svg.Remove}\n                    onClick={() => {\n                      props.onUpdateItem &&\n                        props.onUpdateItem(\n                          {\n                            header: {\n                              ...row.header,\n                              backgroundImage: null,\n                            },\n                          },\n                          row._id,\n                        );\n                    }}\n                  >\n                    Remove Image\n                  </Buttons.Button>\n                </div>\n              ),\n            },\n            {\n              dataField: 'header.mainBoxCSS',\n              text: 'Header Main Box CSS',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  {row?.header?.mainBoxCSS && (\n                    <Form.MultilineInput\n                      label=''\n                      style={{color: '#ffffff', backgroundColor: '#000000'}}\n                      onBlur={mainBoxCSS => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            {header: {...row?.header, mainBoxCSS}},\n                            row._id,\n                          );\n                      }}\n                      defaultValue={row.header?.mainBoxCSS}\n                    />\n                  )}\n                </>\n              ),\n            },\n            {\n              dataField: 'isSubHeader',\n              text: 'Sub Header Visible',\n              csvFormatter: (col, row) =>\n                `${row.isSubHeader ? (row.isSubHeader ? 'Yes' : 'No') : 'No'}`,\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <Form.Toggle\n                      value={row.isSubHeader}\n                      onChange={isSubHeader => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem({isSubHeader}, row._id);\n                      }}\n                    />\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'subHeader.title',\n              text: 'Sub Header Title',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  {row?.subHeader?.title && (\n                    <Form.MultilineInput\n                      label=''\n                      className='w-40'\n                      onBlur={title => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            {subHeader: {...row?.subHeader, title}},\n                            row._id,\n                          );\n                      }}\n                      defaultValue={row?.subHeader?.title}\n                    />\n                  )}\n                </>\n              ),\n            },\n            {\n              dataField: 'subHeader.titleCSS',\n              text: 'Sub Header Title CSS',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  {row?.subHeader?.titleCSS && (\n                    <Form.MultilineInput\n                      label=''\n                      style={{color: '#ffffff', backgroundColor: '#000000'}}\n                      onBlur={titleCSS => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            {subHeader: {...row?.subHeader, titleCSS}},\n                            row._id,\n                          );\n                      }}\n                      defaultValue={row?.subHeader?.titleCSS}\n                    />\n                  )}\n                </>\n              ),\n            },\n            {\n              dataField: 'subHeader.subTitle',\n              text: 'Sub Header Sub Title',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  {row.subHeader?.subTitle && (\n                    <Form.MultilineInput\n                      label=''\n                      className='w-40'\n                      onBlur={subTitle => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            {subHeader: {...row?.subHeader, subTitle}},\n                            row._id,\n                          );\n                      }}\n                      defaultValue={row.subHeader?.subTitle}\n                    />\n                  )}\n                </>\n              ),\n            },\n            {\n              dataField: 'subHeader.subTitleCSS',\n              text: 'Sub Header Sub Title CSS',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  {row.subHeader?.subTitleCSS && (\n                    <Form.MultilineInput\n                      label=''\n                      style={{color: '#ffffff', backgroundColor: '#000000'}}\n                      onBlur={subTitleCSS => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            {subHeader: {...row?.subHeader, subTitleCSS}},\n                            row._id,\n                          );\n                      }}\n                      defaultValue={row?.subHeader?.subTitleCSS}\n                    />\n                  )}\n                </>\n              ),\n            },\n            {\n              dataField: 'subHeader.mainBoxCSS',\n              text: 'Sub Header Main Box CSS',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  {row.subHeader?.mainBoxCSS && (\n                    <Form.MultilineInput\n                      label=''\n                      style={{color: '#ffffff', backgroundColor: '#000000'}}\n                      onBlur={mainBoxCSS => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            {subHeader: {...row?.subHeader, mainBoxCSS}},\n                            row._id,\n                          );\n                      }}\n                      defaultValue={row?.subHeader?.mainBoxCSS}\n                    />\n                  )}\n                </>\n              ),\n            },\n            {\n              dataField: 'isFooter',\n              text: 'Footer Visible',\n              csvFormatter: (col, row) =>\n                `${row.isFooter ? (row.isFooter ? 'Yes' : 'No') : 'No'}`,\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <Form.Toggle\n                      value={row.isFooter}\n                      onChange={isFooter => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem({isFooter}, row._id);\n                      }}\n                    />\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'footer.title',\n              text: 'Footer Title',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  {row.footer?.title && (\n                    <Form.MultilineInput\n                      label=''\n                      className='w-40'\n                      onBlur={title => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            {footer: {...row?.footer, title}},\n                            row._id,\n                          );\n                      }}\n                      defaultValue={row.footer?.title}\n                    />\n                  )}\n                </>\n              ),\n            },\n            {\n              dataField: 'footer.titleCSS',\n              text: 'Footer Title CSS',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  {row.footer?.titleCSS && (\n                    <Form.MultilineInput\n                      label=''\n                      style={{color: '#ffffff', backgroundColor: '#000000'}}\n                      onBlur={titleCSS => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            {footer: {...row?.footer, titleCSS}},\n                            row._id,\n                          );\n                      }}\n                      defaultValue={row.footer?.titleCSS}\n                    />\n                  )}\n                </>\n              ),\n            },\n            {\n              dataField: 'footer.subTitle',\n              text: 'Footer Sub Title',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  {row.footer?.subTitle && (\n                    <Form.MultilineInput\n                      label=''\n                      className='w-40'\n                      onBlur={subTitle => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            {footer: {...row?.footer, subTitle}},\n                            row._id,\n                          );\n                      }}\n                      defaultValue={row.footer?.subTitle}\n                    />\n                  )}\n                </>\n              ),\n            },\n            {\n              dataField: 'footer.subTitleCSS',\n              text: 'Footer Sub Title CSS',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  {row.footer?.subTitleCSS && (\n                    <Form.MultilineInput\n                      label=''\n                      style={{color: '#ffffff', backgroundColor: '#000000'}}\n                      onBlur={subTitleCSS => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            {footer: {...row?.footer, subTitleCSS}},\n                            row._id,\n                          );\n                      }}\n                      defaultValue={row.footer?.subTitleCSS}\n                    />\n                  )}\n                </>\n              ),\n            },\n            {\n              dataField: 'footer.backgroundImage',\n              text: 'Footer Background Image',\n              sort: true,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <img\n                      src={row.footer?.backgroundImage}\n                      alt='backgroundImage'\n                      className='object-fill h-35 w-40 rounded-md'\n                    />\n                  </>\n                );\n              },\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <div className='flex flex-col items-center gap gap-2'>\n                  <Form.InputFile\n                    label='File'\n                    placeholder='File'\n                    onChange={async e => {\n                      const backgroundImage = e.target.files[0];\n                      props.onUpdateItem &&\n                        props.onUpdateItem(\n                          {\n                            footer: {\n                              ...row.footer,\n                              backgroundImage,\n                            },\n                          },\n                          row._id,\n                        );\n                    }}\n                  />\n                  <Buttons.Button\n                    size='small'\n                    type='outline'\n                    icon={Svg.Remove}\n                    onClick={() => {\n                      props.onUpdateItem &&\n                        props.onUpdateItem(\n                          {\n                            footer: {\n                              ...row.footer,\n                              backgroundImage: null,\n                            },\n                          },\n                          row._id,\n                        );\n                    }}\n                  >\n                    Remove Image\n                  </Buttons.Button>\n                </div>\n              ),\n            },\n            {\n              dataField: 'footer.mainBoxCSS',\n              text: 'Footer Main Box CSS',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  {row.footer?.mainBoxCSS && (\n                    <Form.MultilineInput\n                      label=''\n                      style={{color: '#ffffff', backgroundColor: '#000000'}}\n                      onBlur={mainBoxCSS => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            {footer: {...row?.footer, mainBoxCSS}},\n                            row._id,\n                          );\n                      }}\n                      defaultValue={row.footer?.mainBoxCSS}\n                    />\n                  )}\n                </>\n              ),\n            },\n            {\n              dataField: 'isPdfPageNumber',\n              text: 'Page Number Visible',\n              csvFormatter: (col, row) =>\n                `${\n                  row.isPdfPageNumber\n                    ? row.isPdfPageNumber\n                      ? 'Yes'\n                      : 'No'\n                    : 'No'\n                }`,\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <Form.Toggle\n                      value={row.isPdfPageNumber}\n                      onChange={isPdfPageNumber => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem({isPdfPageNumber}, row._id);\n                      }}\n                    />\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'pageNumber.pageNumberCSS',\n              text: 'Page Number CSS',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  {row.pageNumber?.pageNumberCSS && (\n                    <Form.MultilineInput\n                      label=''\n                      style={{color: '#ffffff', backgroundColor: '#000000'}}\n                      onBlur={pageNumberCSS => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            {pageNumber: {...row?.pageNumber, pageNumberCSS}},\n                            row._id,\n                          );\n                      }}\n                      defaultValue={row.pageNumber?.pageNumberCSS}\n                    />\n                  )}\n                </>\n              ),\n            },\n            {\n              dataField: 'operation',\n              text: 'Action',\n              editable: false,\n              csvExport: false,\n              hidden: !props.isDelete,\n              formatter: (cellContent, row) => (\n                <>\n                  <div className='flex flex-row'>\n                    <Tooltip tooltipText='Preview'>\n                      <Icons.IconContext\n                        color='#fff'\n                        size='20'\n                        onClick={() =>\n                          props.onPdfPreview && props.onPdfPreview(row)\n                        }\n                      >\n                        {Icons.getIconTag(Icons.IconIm.ImFilePdf)}\n                      </Icons.IconContext>\n                    </Tooltip>\n                    <Tooltip tooltipText='Delete'>\n                      <Icons.IconContext\n                        color='#fff'\n                        size='20'\n                        onClick={() =>\n                          props.onDelete &&\n                          props.onDelete({\n                            type: 'delete',\n                            show: true,\n                            id: [row._id],\n                            title: 'Are you sure?',\n                            body: 'Delete item',\n                          })\n                        }\n                      >\n                        {Icons.getIconTag(Icons.IconBs.BsFillTrashFill)}\n                      </Icons.IconContext>\n                    </Tooltip>\n                  </div>\n                </>\n              ),\n              headerClasses: 'sticky right-0  bg-gray-500 text-white z-50',\n              classes: (cell, row, rowIndex, colIndex) => {\n                return 'sticky right-0 bg-gray-500';\n              },\n              style: (cell, row, rowIndex, colIndex) => {\n                return {\n                  zIndex: props.data?.length - rowIndex,\n                };\n              },\n            },\n          ]}\n          isEditModify={props.isEditModify}\n          isSelectRow={true}\n          fileName='Page Branding'\n          onSelectedRow={rows => {\n            props.onSelectedRow &&\n              props.onSelectedRow(rows.map((item: any) => item._id));\n          }}\n          // onUpdateItem={(value: any, dataField: string, id: string) => {\n          //   props.onUpdateItem &&\n          //     props.onUpdateItem({'header.title': value}, id);\n          // }}\n          onPageSizeChange={(page, size) => {\n            props.onPageSizeChange && props.onPageSizeChange(page, size);\n          }}\n          onFilter={(type, filter, page, size) => {\n            props.onFilter && props.onFilter(type, filter, page, size);\n          }}\n          clearAllFilter={() => {\n            sectionSetting('');\n            version('');\n            environment('');\n          }}\n          dynamicStylingFields={['layoutCode', 'tempCode', 'brandingTitle']}\n          hideExcelSheet={[\n            '_id',\n            'operation',\n            'header.logo',\n            'header.backgroundImage',\n            'footer.backgroundImage',\n          ]}\n        />\n      </div>\n    </>\n  );\n});\n","import React from 'react';\nimport {observer} from 'mobx-react';\nimport {\n  List,\n  Form,\n} from '@/library/components';\nimport {useStores} from '@/stores';\n\ninterface GeneralProps {\n  label?: string;\n}\n\nexport const General = observer(({label}: GeneralProps) => {\n  const {reportSettingStore} = useStores();\n  return (\n    <List direction='col' space={1} justify='stretch' fill>\n      <div className='flex flex-row flex-auto object-fill gap-2'>\n        <Form.MultilineInput\n          label='Print Department Name CSS'\n          className='w-4/6'\n          style={{color: '#ffffff', backgroundColor: '#000000'}}\n          placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n          value={reportSettingStore.reportBody?.general?.printDepartmentNameCSS}\n          onChange={printDepartmentNameCSS => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              general: {\n                ...reportSettingStore.reportBody?.general,\n                printDepartmentNameCSS,\n              },\n            });\n          }}\n        />\n        <Form.Toggle\n          isToggleLabel={false}\n          label='Print Department Name'\n          className='w-2/6'\n          value={reportSettingStore.reportBody?.general?.isPrintDepartmentName}\n          onChange={isPrintDepartmentName => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              general: {\n                ...reportSettingStore.reportBody?.general,\n                isPrintDepartmentName,\n              },\n            });\n          }}\n        />\n      </div>\n      <div className='flex flex-row flex-auto object-fill gap-2'>\n        <Form.MultilineInput\n          label='Package Name Print CSS'\n          className='w-4/6'\n          style={{color: '#ffffff', backgroundColor: '#000000'}}\n          placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n          value={reportSettingStore.reportBody?.general?.packageNamePrintCSS}\n          onChange={packageNamePrintCSS => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              general: {\n                ...reportSettingStore.reportBody?.general,\n                packageNamePrintCSS,\n              },\n            });\n          }}\n        />\n        <Form.Toggle\n          isToggleLabel={false}\n          label='Package Name Print'\n          className='w-2/6'\n          value={reportSettingStore.reportBody?.general?.isPackageNamePrint}\n          onChange={isPackageNamePrint => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              general: {\n                ...reportSettingStore.reportBody?.general,\n                isPackageNamePrint,\n              },\n            });\n          }}\n        />\n      </div>\n      <div className='flex flex-row flex-auto object-fill gap-2'>\n        <Form.MultilineInput\n          label='Report Grouping CSS'\n          className='w-4/6'\n          style={{color: '#ffffff', backgroundColor: '#000000'}}\n          placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n          value={reportSettingStore.reportBody?.general?.reportGroupingCSS}\n          onChange={reportGroupingCSS => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              general: {\n                ...reportSettingStore.reportBody?.general,\n                reportGroupingCSS,\n              },\n            });\n          }}\n        />\n        <Form.Toggle\n          isToggleLabel={false}\n          label='Report Grouping'\n          className='w-2/6'\n          value={reportSettingStore.reportBody?.general?.isReportGrouping}\n          onChange={isReportGrouping => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              general: {\n                ...reportSettingStore.reportBody?.general,\n                isReportGrouping,\n              },\n            });\n          }}\n        />\n      </div>\n      <div className='flex flex-row flex-auto object-fill gap-2'>\n        <Form.MultilineInput\n          label='Report Order CSS'\n          className='w-4/6'\n          style={{color: '#ffffff', backgroundColor: '#000000'}}\n          placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n          value={reportSettingStore.reportBody?.general?.reportOrderCSS}\n          onChange={reportOrderCSS => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              general: {\n                ...reportSettingStore.reportBody?.general,\n                reportOrderCSS,\n              },\n            });\n          }}\n        />\n        <Form.Toggle\n          isToggleLabel={false}\n          label='Report Order'\n          className='w-2/6'\n          value={reportSettingStore.reportBody?.general?.isReportOrder}\n          onChange={isReportOrder => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              general: {\n                ...reportSettingStore.reportBody?.general,\n                isReportOrder,\n              },\n            });\n          }}\n        />\n      </div>\n      <div className='flex flex-row flex-auto object-fill gap-2'>\n        <Form.MultilineInput\n          label='Method Flag CSS'\n          className='w-4/6'\n          style={{color: '#ffffff', backgroundColor: '#000000'}}\n          placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n          value={reportSettingStore.reportBody?.general?.methodFlagCSS}\n          onChange={methodFlagCSS => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              general: {\n                ...reportSettingStore.reportBody?.general,\n                methodFlagCSS,\n              },\n            });\n          }}\n        />\n        <Form.Toggle\n          isToggleLabel={false}\n          label='Method Flag'\n          className='w-2/6'\n          value={reportSettingStore.reportBody?.general?.isMethodFlag}\n          onChange={isMethodFlag => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              general: {\n                ...reportSettingStore.reportBody?.general,\n                isMethodFlag,\n              },\n            });\n          }}\n        />\n      </div>\n    </List>\n  );\n});\n","import React from 'react';\nimport {observer} from 'mobx-react';\nimport {\n  List,\n  Form,\n} from '@/library/components';\nimport {useStores} from '@/stores';\n\ninterface PanelProps {\n  label?: string;\n}\n\nexport const Panel = observer(({label}: PanelProps) => {\n  const {reportSettingStore} = useStores();\n  return (\n    <List direction='col' space={1} justify='stretch' fill>\n      <div className='flex flex-row flex-auto object-fill gap-2'>\n        <Form.MultilineInput\n          label='Print Panel Name CSS'\n          className='w-4/6'\n          style={{color: '#ffffff', backgroundColor: '#000000'}}\n          placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n          value={reportSettingStore.reportBody?.panel?.printPanelNameCSS}\n          onChange={printPanelNameCSS => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              panel: {\n                ...reportSettingStore.reportBody?.panel,\n                printPanelNameCSS,\n              },\n            });\n          }}\n        />\n        <Form.Toggle\n          isToggleLabel={false}\n          label='Print Panel Name'\n          className='w-2/6'\n          value={reportSettingStore.reportBody?.panel?.isPrintPanelName}\n          onChange={isPrintPanelName => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              panel: {\n                ...reportSettingStore.reportBody?.panel,\n                isPrintPanelName,\n              },\n            });\n          }}\n        />\n      </div>\n\n      <div className='flex flex-row flex-auto object-fill gap-2'>\n        <Form.MultilineInput\n          label='Method Name CSS'\n          className='w-4/6'\n          style={{color: '#ffffff', backgroundColor: '#000000'}}\n          placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n          value={reportSettingStore.reportBody?.panel?.methodNameCSS}\n          onChange={methodNameCSS => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              panel: {\n                ...reportSettingStore.reportBody?.panel,\n                methodNameCSS,\n              },\n            });\n          }}\n        />\n        <Form.Toggle\n          isToggleLabel={false}\n          label='Method Name'\n          className='w-2/6'\n          value={reportSettingStore.reportBody?.panel?.isMethodName}\n          onChange={isMethodName => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              panel: {\n                ...reportSettingStore.reportBody?.panel,\n                isMethodName,\n              },\n            });\n          }}\n        />\n      </div>\n\n      <div className='flex flex-row flex-auto object-fill gap-2'>\n        <Form.MultilineInput\n          label='Panel Interpretation CSS'\n          className='w-4/6'\n          style={{color: '#ffffff', backgroundColor: '#000000'}}\n          placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n          value={reportSettingStore.reportBody?.panel?.panelInterpretationCSS}\n          onChange={panelInterpretationCSS => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              panel: {\n                ...reportSettingStore.reportBody?.panel,\n                panelInterpretationCSS,\n              },\n            });\n          }}\n        />\n        <Form.Toggle\n          isToggleLabel={false}\n          label='Panel Interpretation'\n          className='w-2/6'\n          value={reportSettingStore.reportBody?.panel?.isPanelInterpretation}\n          onChange={isPanelInterpretation => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              panel: {\n                ...reportSettingStore.reportBody?.panel,\n                isPanelInterpretation,\n              },\n            });\n          }}\n        />\n      </div>\n    </List>\n  );\n});\n","import React from 'react';\nimport {observer} from 'mobx-react';\nimport {\n  List,\n  Form,\n} from '@/library/components';\nimport {useStores} from '@/stores';\n\ninterface TestProps {\n  label?: string;\n}\n\nexport const Test = observer(({label}: TestProps) => {\n  const {reportSettingStore} = useStores();\n  return (\n    <List direction='col' space={1} justify='stretch' fill>\n      <div className='flex flex-row flex-auto object-fill gap-2'>\n        <Form.MultilineInput\n          label='Print Test Name CSS'\n          className='w-4/6'\n          style={{color: '#ffffff', backgroundColor: '#000000'}}\n          placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n          value={reportSettingStore.reportBody?.test?.printTestNameCSS}\n          onChange={printTestNameCSS => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              test: {\n                ...reportSettingStore.reportBody?.test,\n                printTestNameCSS,\n              },\n            });\n          }}\n        />\n        <Form.Toggle\n          isToggleLabel={false}\n          label='Print Test Name'\n          className='w-2/6'\n          value={reportSettingStore.reportBody?.test?.isPrintTestName}\n          onChange={isPrintTestName => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              test: {\n                ...reportSettingStore.reportBody?.test,\n                isPrintTestName,\n              },\n            });\n          }}\n        />\n      </div>\n\n      <div className='flex flex-row flex-auto object-fill gap-2'>\n        <Form.MultilineInput\n          label='Method Name CSS'\n          className='w-4/6'\n          style={{color: '#ffffff', backgroundColor: '#000000'}}\n          placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n          value={reportSettingStore.reportBody?.test?.methodNameCSS}\n          onChange={methodNameCSS => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              test: {\n                ...reportSettingStore.reportBody?.test,\n                methodNameCSS,\n              },\n            });\n          }}\n        />\n        <Form.Toggle\n          isToggleLabel={false}\n          label='Method Name'\n          className='w-2/6'\n          value={reportSettingStore.reportBody?.test?.isMethodName}\n          onChange={isMethodName => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              test: {\n                ...reportSettingStore.reportBody?.test,\n                isMethodName,\n              },\n            });\n          }}\n        />\n      </div>\n\n      <div className='flex flex-row flex-auto object-fill gap-2'>\n        <Form.MultilineInput\n          label='Test Interpretation CSS'\n          className='w-4/6'\n          style={{color: '#ffffff', backgroundColor: '#000000'}}\n          placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n          value={reportSettingStore.reportBody?.test?.testInterpretationCSS}\n          onChange={testInterpretationCSS => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              test: {\n                ...reportSettingStore.reportBody?.test,\n                testInterpretationCSS,\n              },\n            });\n          }}\n        />\n        <Form.Toggle\n          isToggleLabel={false}\n          label='Test Interpretation'\n          className='w-2/6'\n          value={reportSettingStore.reportBody?.test?.isTestInterpretation}\n          onChange={isTestInterpretation => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              test: {\n                ...reportSettingStore.reportBody?.test,\n                isTestInterpretation,\n              },\n            });\n          }}\n        />\n      </div>\n    </List>\n  );\n});\n","import React from 'react';\nimport {observer} from 'mobx-react';\nimport {\n  List,\n  Form,\n} from '@/library/components';\nimport {useStores} from '@/stores';\n\ninterface AnalyteProps {\n  label?: string;\n}\n\nexport const Analyte = observer(({label}: AnalyteProps) => {\n  const {reportSettingStore} = useStores();\n  return (\n    <List direction='col' space={1} justify='stretch' fill>\n      <div className='flex flex-row flex-auto object-fill gap-2'>\n        <Form.MultilineInput\n          label='Print Analyte Name CSS'\n          className='w-4/6'\n          style={{color: '#ffffff', backgroundColor: '#000000'}}\n          placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n          value={reportSettingStore.reportBody?.analyte?.printAnalyteNameCSS}\n          onChange={printAnalyteNameCSS => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                printAnalyteNameCSS,\n              },\n            });\n          }}\n        />\n        <Form.Toggle\n          isToggleLabel={false}\n          label='Print Analyte Name'\n          className='w-2/6'\n          value={reportSettingStore.reportBody?.analyte?.isPrintAnalyteName}\n          onChange={isPrintAnalyteName => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                isPrintAnalyteName,\n              },\n            });\n          }}\n        />\n      </div>\n\n      <div className='flex flex-row flex-auto object-fill gap-2'>\n        <Form.MultilineInput\n          label='Method Name CSS'\n          className='w-4/6'\n          style={{color: '#ffffff', backgroundColor: '#000000'}}\n          placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n          value={reportSettingStore.reportBody?.analyte?.methodNameCSS}\n          onChange={methodNameCSS => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                methodNameCSS,\n              },\n            });\n          }}\n        />\n        <Form.Toggle\n          isToggleLabel={false}\n          label='Method Name'\n          className='w-2/6'\n          value={reportSettingStore.reportBody?.analyte?.isMethodName}\n          onChange={isMethodName => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                isMethodName,\n              },\n            });\n          }}\n        />\n      </div>\n\n      <div className='flex flex-row flex-auto object-fill gap-2'>\n        <Form.MultilineInput\n          label='Header Item CSS'\n          className='w-4/6'\n          style={{color: '#ffffff', backgroundColor: '#000000'}}\n          placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n          value={reportSettingStore.reportBody?.analyte?.headerItemCSS}\n          onChange={headerItemCSS => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                headerItemCSS,\n              },\n            });\n          }}\n        />\n        <Form.Toggle\n          isToggleLabel={false}\n          label='Header Item'\n          className='w-2/6'\n          value={reportSettingStore.reportBody?.analyte?.isHeaderItem}\n          onChange={isHeaderItem => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                isHeaderItem,\n              },\n            });\n          }}\n        />\n      </div>\n\n      <div className='flex flex-row flex-auto object-fill gap-2'>\n        <Form.MultilineInput\n          label='ABN Flag CSS'\n          className='w-4/6'\n          style={{color: '#ffffff', backgroundColor: '#000000'}}\n          placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n          value={reportSettingStore.reportBody?.analyte?.abnFlagCSS}\n          onChange={abnFlagCSS => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                abnFlagCSS,\n              },\n            });\n          }}\n        />\n        <Form.Toggle\n          isToggleLabel={false}\n          label='ABN Flag'\n          className='w-2/6'\n          value={reportSettingStore.reportBody?.analyte?.isAbnFlag}\n          onChange={isAbnFlag => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                isAbnFlag,\n              },\n            });\n          }}\n        />\n      </div>\n\n      <div className='flex flex-row flex-auto object-fill gap-2'>\n        <Form.MultilineInput\n          label='Critical CSS'\n          className='w-4/6'\n          style={{color: '#ffffff', backgroundColor: '#000000'}}\n          placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n          value={reportSettingStore.reportBody?.analyte?.criticalCSS}\n          onChange={criticalCSS => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                criticalCSS,\n              },\n            });\n          }}\n        />\n        <Form.Toggle\n          isToggleLabel={false}\n          label='Critical'\n          className='w-2/6'\n          value={reportSettingStore.reportBody?.analyte?.isCritical}\n          onChange={isCritical => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                isCritical,\n              },\n            });\n          }}\n        />\n      </div>\n\n      <div className='flex flex-row flex-auto object-fill gap-2'>\n        <Form.MultilineInput\n          label='Lo Nor CSS'\n          className='w-4/6'\n          style={{color: '#ffffff', backgroundColor: '#000000'}}\n          placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n          value={reportSettingStore.reportBody?.analyte?.loNorCSS}\n          onChange={loNorCSS => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                loNorCSS,\n              },\n            });\n          }}\n        />\n        <Form.Toggle\n          isToggleLabel={false}\n          label='Lo Nor'\n          className='w-2/6'\n          value={reportSettingStore.reportBody?.analyte?.isLoNor}\n          onChange={isLoNor => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                isLoNor,\n              },\n            });\n          }}\n        />\n      </div>\n\n      <div className='flex flex-row flex-auto object-fill gap-2'>\n        <Form.MultilineInput\n          label='Hi Nor CSS'\n          className='w-4/6'\n          style={{color: '#ffffff', backgroundColor: '#000000'}}\n          placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n          value={reportSettingStore.reportBody?.analyte?.hiNorCSS}\n          onChange={hiNorCSS => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                hiNorCSS,\n              },\n            });\n          }}\n        />\n        <Form.Toggle\n          isToggleLabel={false}\n          label='Hi Nor'\n          className='w-2/6'\n          value={reportSettingStore.reportBody?.analyte?.isHiNor}\n          onChange={isHiNor => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                isHiNor,\n              },\n            });\n          }}\n        />\n      </div>\n\n      <div className='flex flex-row flex-auto object-fill gap-2'>\n        <Form.MultilineInput\n          label='Result Status CSS'\n          className='w-4/6'\n          style={{color: '#ffffff', backgroundColor: '#000000'}}\n          placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n          value={reportSettingStore.reportBody?.analyte?.resultStatusCSS}\n          onChange={resultStatusCSS => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                resultStatusCSS,\n              },\n            });\n          }}\n        />\n        <Form.Toggle\n          isToggleLabel={false}\n          label='Result Status'\n          className='w-2/6'\n          value={reportSettingStore.reportBody?.analyte?.isResultStatus}\n          onChange={isResultStatus => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                isResultStatus,\n              },\n            });\n          }}\n        />\n      </div>\n\n      <div className='flex flex-row flex-auto object-fill gap-2'>\n        <Form.MultilineInput\n          label='Method CSS'\n          className='w-4/6'\n          style={{color: '#ffffff', backgroundColor: '#000000'}}\n          placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n          value={reportSettingStore.reportBody?.analyte?.methodCSS}\n          onChange={methodCSS => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                methodCSS,\n              },\n            });\n          }}\n        />\n        <Form.Toggle\n          isToggleLabel={false}\n          label='Method'\n          className='w-2/6'\n          value={reportSettingStore.reportBody?.analyte?.isMethod}\n          onChange={isMethod => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                isMethod,\n              },\n            });\n          }}\n        />\n      </div>\n\n      <div className='flex flex-row flex-auto object-fill gap-2'>\n        <Form.MultilineInput\n          label='Reportable CSS'\n          className='w-4/6'\n          style={{color: '#ffffff', backgroundColor: '#000000'}}\n          placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n          value={reportSettingStore.reportBody?.analyte?.reportableCSS}\n          onChange={reportableCSS => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                reportableCSS,\n              },\n            });\n          }}\n        />\n        <Form.Toggle\n          isToggleLabel={false}\n          label='Reportable'\n          className='w-2/6'\n          value={reportSettingStore.reportBody?.analyte?.isReportable}\n          onChange={isReportable => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                isReportable,\n              },\n            });\n          }}\n        />\n      </div>\n\n      <div className='flex flex-row flex-auto object-fill gap-2'>\n        <Form.MultilineInput\n          label='Interpretation CSS'\n          className='w-4/6'\n          style={{color: '#ffffff', backgroundColor: '#000000'}}\n          placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n          value={reportSettingStore.reportBody?.analyte?.interpretationCSS}\n          onChange={interpretationCSS => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                interpretationCSS,\n              },\n            });\n          }}\n        />\n        <Form.Toggle\n          isToggleLabel={false}\n          label='Interpretation'\n          className='w-2/6'\n          value={reportSettingStore.reportBody?.analyte?.isInterpretation}\n          onChange={isInterpretation => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                isInterpretation,\n              },\n            });\n          }}\n        />\n      </div>\n\n      <div className='flex flex-row flex-auto object-fill gap-2'>\n        <Form.MultilineInput\n          label='Conclusion CSS'\n          className='w-4/6'\n          style={{color: '#ffffff', backgroundColor: '#000000'}}\n          placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n          value={reportSettingStore.reportBody?.analyte?.conclusionCSS}\n          onChange={conclusionCSS => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                conclusionCSS,\n              },\n            });\n          }}\n        />\n        <Form.Toggle\n          isToggleLabel={false}\n          label='Conclusion'\n          className='w-2/6'\n          value={reportSettingStore.reportBody?.analyte?.isConclusion}\n          onChange={isConclusion => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                isConclusion,\n              },\n            });\n          }}\n        />\n      </div>\n\n      <div className='flex flex-row flex-auto object-fill gap-2'>\n        <Form.MultilineInput\n          label='Print Analyte Interpretation CSS'\n          className='w-4/6'\n          style={{color: '#ffffff', backgroundColor: '#000000'}}\n          placeholder={\"Like fontSize: 12,backgroundColor:'#000000'\"}\n          value={\n            reportSettingStore.reportBody?.analyte\n              ?.printAnalyteInterpretationCSS\n          }\n          onChange={printAnalyteInterpretationCSS => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                printAnalyteInterpretationCSS,\n              },\n            });\n          }}\n        />\n        <Form.Toggle\n          isToggleLabel={false}\n          label='Print Analyte Interpretation'\n          className='w-2/6'\n          value={\n            reportSettingStore.reportBody?.analyte?.isPrintAnalyteInterpretation\n          }\n          onChange={isPrintAnalyteInterpretation => {\n            reportSettingStore.updateReportBody({\n              ...reportSettingStore.reportBody,\n              analyte: {\n                ...reportSettingStore.reportBody?.analyte,\n                isPrintAnalyteInterpretation,\n              },\n            });\n          }}\n        />\n      </div>\n    </List>\n  );\n});\n","import React from 'react';\nimport {observer} from 'mobx-react';\nimport {TableBootstrap, Tooltip, Icons} from '@/library/components';\nimport {Confirm} from '@/library/models';\nimport {AutoCompletePageBrandingCode} from '../..';\n\ninterface ReportBodyListProps {\n  data: any;\n  totalSize: number;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  onDelete?: (selectedItem: Confirm) => void;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (fields: any, id: string) => void;\n  onPageSizeChange?: (page: number, totalSize: number) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n  onPdfPreview?: (selectedItem: any) => void;\n}\n\nlet sectionSetting;\nlet version;\nlet environment;\n\nexport const ReportBodyList = observer((props: ReportBodyListProps) => {\n  return (\n    <>\n      <div style={{position: 'relative'}}>\n        <TableBootstrap\n          id='_id'\n          data={props.data}\n          totalSize={props.totalSize}\n          columns={[\n            {\n              dataField: '_id',\n              text: 'Id',\n              hidden: true,\n              csvExport: false,\n            },\n            {\n              dataField: 'pageBrandingCode',\n              text: 'Page Branding',\n              headerClasses: 'textHeader',\n              sort: true,\n              editorRenderer: (\n                editorProps,\n                value,\n                row,\n                column,\n                rowIndex,\n                columnIndex,\n              ) => (\n                <>\n                  <AutoCompletePageBrandingCode\n                    hasError={false}\n                    onSelect={item => {\n                      props.onUpdateItem &&\n                        props.onUpdateItem(\n                          {pageBrandingCode: item.tempCode},\n                          row._id,\n                        );\n                    }}\n                  />\n                </>\n              ),\n            },\n            {\n              dataField: 'reportCode',\n              text: 'Report Code',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'reportName',\n              text: 'Report Name',\n              sort: true,\n              editable: false,\n            },\n            {\n              dataField: 'general',\n              text: 'General',\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <span>\n                      {row?.general ? JSON.stringify(row?.general) : ''}\n                    </span>\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'panel',\n              text: 'Panel',\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <span>{row?.panel ? JSON.stringify(row?.panel) : ''}</span>\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'test',\n              text: 'Test',\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <span>{row?.test ? JSON.stringify(row?.test) : ''}</span>\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'analyte',\n              text: 'Analyte',\n              editable: false,\n              formatter: (cell, row) => {\n                return (\n                  <>\n                    <span>\n                      {row?.analyte ? JSON.stringify(row?.analyte) : ''}\n                    </span>\n                  </>\n                );\n              },\n            },\n            {\n              dataField: 'operation',\n              text: 'Action',\n              editable: false,\n              csvExport: false,\n              hidden: !props.isDelete,\n              formatter: (cellContent, row) => (\n                <>\n                  <div className='flex flex-row'>\n                    <Tooltip tooltipText='Preview'>\n                      <Icons.IconContext\n                        color='#fff'\n                        size='20'\n                        onClick={() =>\n                          props.onPdfPreview && props.onPdfPreview(row)\n                        }\n                      >\n                        {Icons.getIconTag(Icons.IconIm.ImFilePdf)}\n                      </Icons.IconContext>\n                    </Tooltip>\n                    <Tooltip tooltipText='Delete'>\n                      <Icons.IconContext\n                        color='#fff'\n                        size='20'\n                        onClick={() =>\n                          props.onDelete &&\n                          props.onDelete({\n                            type: 'delete',\n                            show: true,\n                            id: [row._id],\n                            title: 'Are you sure?',\n                            body: 'Delete item',\n                          })\n                        }\n                      >\n                        {Icons.getIconTag(Icons.IconBs.BsFillTrashFill)}\n                      </Icons.IconContext>\n                    </Tooltip>\n                  </div>\n                </>\n              ),\n              headerClasses: 'sticky right-0  bg-gray-500 text-white z-50',\n              classes: (cell, row, rowIndex, colIndex) => {\n                return 'sticky right-0 bg-gray-500';\n              },\n              style: (cell, row, rowIndex, colIndex) => {\n                return {\n                  zIndex: props.data?.length - rowIndex,\n                };\n              },\n            },\n          ]}\n          isEditModify={props.isEditModify}\n          isSelectRow={true}\n          fileName='Page Branding'\n          onSelectedRow={rows => {\n            props.onSelectedRow &&\n              props.onSelectedRow(rows.map((item: any) => item._id));\n          }}\n          // onUpdateItem={(value: any, dataField: string, id: string) => {\n          //   props.onUpdateItem &&\n          //     props.onUpdateItem({'header.title': value}, id);\n          // }}\n          onPageSizeChange={(page, size) => {\n            props.onPageSizeChange && props.onPageSizeChange(page, size);\n          }}\n          onFilter={(type, filter, page, size) => {\n            props.onFilter && props.onFilter(type, filter, page, size);\n          }}\n          clearAllFilter={() => {\n            sectionSetting('');\n            version('');\n            environment('');\n          }}\n          dynamicStylingFields={[\n            'pageBrandingCode',\n            'reportCode',\n            'reportName',\n          ]}\n          hideExcelSheet={['_id', 'operation']}\n        />\n      </div>\n    </>\n  );\n});\n","import React from 'react';\nimport {observer} from 'mobx-react';\nimport {AutoCompleteFilterSingleSelectMultiFieldsDisplay} from '@/library/components';\nimport {useStores} from '@/stores';\n\ninterface AutoCompletePageBrandingCodeProps {\n  hasError?: boolean;\n  onSelect: (item) => void;\n}\n\nexport const AutoCompletePageBrandingCode = observer(\n  ({hasError = false, onSelect}: AutoCompletePageBrandingCodeProps) => {\n    const {loading, routerStore, reportSettingStore} = useStores();\n    return (\n      <>\n        <AutoCompleteFilterSingleSelectMultiFieldsDisplay\n          loader={loading}\n          placeholder='Page Branding Code'\n          data={{\n            list: reportSettingStore.pageBrandingList,\n            displayKey: ['tempCode', 'brandingTitle'],\n          }}\n          hasError={hasError}\n          onFilter={(value: string) => {\n            // reportSettingStore.updateReportSectionList(\n            //   reportSettingStore.reportSectionListCopy.filter(item =>\n            //     item.section\n            //       .toString()\n            //       .toLowerCase()\n            //       .includes(value.toLowerCase()),\n            //   ),\n            // );\n          }}\n          onSelect={item => {\n            onSelect(item);\n          }}\n        />\n      </>\n    );\n  },\n);\n","import React from 'react';\nimport {AutoCompleteFilterSingleSelectMultiFieldsDisplay} from '@/library/components';\nimport {observer} from 'mobx-react';\nimport {useStores} from '@/stores';\n\ninterface ReportBodyComponentsProps {\n  displayValue?: string;\n  onSelect: (item) => void;\n}\n\nexport const ReportBodyComponents = observer(\n  ({onSelect, displayValue}: ReportBodyComponentsProps) => {\n    const {loading, reportSettingStore} = useStores();\n    return (\n      <div>\n        <AutoCompleteFilterSingleSelectMultiFieldsDisplay\n          displayValue={displayValue}\n          loader={loading}\n          placeholder='Report Body'\n          data={{\n            list: reportSettingStore.reportBodyList,\n            displayKey: ['reportCode', 'reportName'],\n          }}\n          onFilter={(value: string) => {\n            // reportSettingStore.pageBrandingService.filterByFields({\n            //   input: {\n            //     filter: {\n            //       fields: ['reportCode', 'reportName'],\n            //       srText: value,\n            //     },\n            //     page: 0,\n            //     limit: 10,\n            //   },\n            // });\n          }}\n          onSelect={item => {\n            onSelect && onSelect(item);\n          }}\n        />\n      </div>\n    );\n  },\n);\n","import React from 'react';\nimport _ from 'lodash';\nimport {observer} from 'mobx-react';\nimport {AutoCompleteFilterMutiSelectMultiFieldsDisplay} from '@/library/components';\nimport {useStores} from '@/stores';\n\ninterface EndOfPageComponentsProps {\n  onSelect: (item: any) => void;\n}\n\nexport const EndOfPageComponents = observer(\n  ({onSelect}: EndOfPageComponentsProps) => {\n    const {loading, routerStore, reportSettingStore, libraryStore} =\n      useStores();\n    return (\n      <div>\n        <AutoCompleteFilterMutiSelectMultiFieldsDisplay\n          loader={loading}\n          placeholder='Search by code or details'\n          data={{\n            list: libraryStore.listLibrary,\n            selected:\n              reportSettingStore.selectedItemTemplatePatientResult?.endOfPage,\n            displayKey: ['code', 'details'],\n          }}\n          onUpdate={item => {\n            const endOfPage =\n              reportSettingStore.selectedItemTemplatePatientResult?.endOfPage;\n            onSelect &&\n              onSelect(\n                _.map(endOfPage, o => _.pick(o, ['_id', 'code', 'details'])),\n              );\n            libraryStore.updateLibraryList(libraryStore.listLibraryCopy);\n          }}\n          onFilter={(value: string) => {\n            libraryStore.libraryService.filterByFields({\n              input: {\n                filter: {\n                  fields: ['code', 'details'],\n                  srText: value,\n                },\n                page: 0,\n                limit: 10,\n              },\n            });\n          }}\n          onSelect={item => {\n            let endOfPage =\n              reportSettingStore.selectedItemTemplatePatientResult?.endOfPage;\n            if (!item.selected) {\n              if (endOfPage && endOfPage.length > 0) {\n                endOfPage.push(item);\n              } else endOfPage = [item];\n            } else {\n              endOfPage = endOfPage.filter(items => {\n                return items._id !== item._id;\n              });\n            }\n            reportSettingStore.updateSelectedItemTemplatePatientResult({\n              ...reportSettingStore.selectedItemTemplatePatientResult,\n              endOfPage,\n            });\n          }}\n        />\n      </div>\n    );\n  },\n);\n","import React from 'react';\nimport _ from 'lodash';\nimport {observer} from 'mobx-react';\nimport {AutoCompleteFilterMutiSelectMultiFieldsDisplay} from '@/library/components';\nimport {useStores} from '@/stores';\n\ninterface EndOfReportComponentsProps {\n  onSelect: (item) => void;\n}\n\nexport const EndOfReportComponents = observer(\n  ({onSelect}: EndOfReportComponentsProps) => {\n    const {loading, reportSettingStore, libraryStore} = useStores();\n    return (\n      <div>\n        <AutoCompleteFilterMutiSelectMultiFieldsDisplay\n          loader={loading}\n          placeholder='Search by code or details'\n          data={{\n            list: libraryStore.listLibrary,\n            selected:\n              reportSettingStore.selectedItemTemplatePatientResult?.endOfReport,\n            displayKey: ['code', 'details'],\n          }}\n          onUpdate={item => {\n            const endOfReport =\n              reportSettingStore.selectedItemTemplatePatientResult?.endOfReport;\n            onSelect &&\n              onSelect(\n                _.map(endOfReport, o => _.pick(o, ['_id', 'code', 'details'])),\n              );\n            libraryStore.updateLibraryList(libraryStore.listLibraryCopy);\n          }}\n          onFilter={(value: string) => {\n            libraryStore.libraryService.filterByFields({\n              input: {\n                filter: {\n                  fields: ['code', 'details'],\n                  srText: value,\n                },\n                page: 0,\n                limit: 10,\n              },\n            });\n          }}\n          onSelect={item => {\n            let endOfReport =\n              reportSettingStore.selectedItemTemplatePatientResult?.endOfReport;\n            if (!item.selected) {\n              if (endOfReport && endOfReport.length > 0) {\n                endOfReport.push(item);\n              } else endOfReport = [item];\n            } else {\n              endOfReport = endOfReport.filter(items => {\n                return items._id !== item._id;\n              });\n            }\n            reportSettingStore.updateSelectedItemTemplatePatientResult({\n              ...reportSettingStore.selectedItemTemplatePatientResult,\n              endOfReport,\n            });\n          }}\n        />\n      </div>\n    );\n  },\n);\n","import React from 'react';\nimport {observer} from 'mobx-react';\nimport {Type, TableBootstrap, Tooltip, Icons, Form} from '@/library/components';\nimport {ReportBodyComponents} from './report-body.components';\nimport {EndOfPageComponents} from './end-of-page.components';\nimport {EndOfReportComponents} from './end-of-report.components';\nimport {Confirm} from '@/library/models';\n\ninterface TemplatePatientResultProps {\n  data: any;\n  totalSize: number;\n  isDelete?: boolean;\n  isEditModify?: boolean;\n  onDelete?: (selectedItem: Confirm) => void;\n  onSelectedRow?: (selectedItem: any) => void;\n  onUpdateItem?: (fields: any, id: string) => void;\n  onPageSizeChange?: (page: number, totalSize: number) => void;\n  onFilter?: (\n    type: string,\n    filter: any,\n    page: number,\n    totalSize: number,\n  ) => void;\n  onPdfPreview?: (selectedItem: any) => void;\n}\n\nlet sectionSetting;\nlet version;\nlet environment;\n\nexport const TemplatePatientResultList = observer(\n  (props: TemplatePatientResultProps) => {\n    return (\n      <>\n        <div style={{position: 'relative'}}>\n          <TableBootstrap\n            id='_id'\n            data={props.data}\n            totalSize={props.totalSize}\n            columns={[\n              {\n                dataField: '_id',\n                text: 'Id',\n                hidden: true,\n                csvExport: false,\n              },\n              {\n                dataField: 'reportTemplateType',\n                text: 'Report Template Type',\n                headerClasses: 'textHeader',\n                sort: true,\n                editorRenderer: (\n                  editorProps,\n                  value,\n                  row,\n                  column,\n                  rowIndex,\n                  columnIndex,\n                ) => (\n                  <>\n                    <select\n                      className={\n                        'leading-4 p-2 focus:outline-none focus:ring block w-full shadow-sm sm:text-base border-2  border-gray-300 rounded-md'\n                      }\n                      onChange={e => {\n                        const reportTemplateType = e.target.value;\n                        props.onUpdateItem &&\n                          props.onUpdateItem({reportTemplateType}, row._id);\n                      }}\n                    >\n                      <option selected>Select</option>\n                      {['Lab Wise', 'Client Wise', 'Doctor Wise'].map(\n                        (item: any, index: number) => (\n                          <option key={index} value={item}>\n                            {item}\n                          </option>\n                        ),\n                      )}\n                    </select>\n                  </>\n                ),\n              },\n              {\n                dataField: 'reportBody',\n                text: 'Report Body',\n                headerClasses: 'textHeader',\n                sort: true,\n                formatter: (cell, row) => {\n                  return <>{row?.reportBody?.reportCode}</>;\n                },\n                editorRenderer: (\n                  editorProps,\n                  value,\n                  row,\n                  column,\n                  rowIndex,\n                  columnIndex,\n                ) => (\n                  <>\n                    <ReportBodyComponents\n                      onSelect={item => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            {\n                              reportBody: {\n                                _id: item?._id,\n                                reportCode: item?.reportCode,\n                                reportName: item?.reportName,\n                              },\n                            },\n                            row._id,\n                          );\n                      }}\n                    />\n                  </>\n                ),\n              },\n              {\n                dataField: 'templateCode',\n                text: 'Template code',\n                headerClasses: 'textHeader',\n                sort: true,\n              },\n              {\n                dataField: 'templateTitle',\n                text: 'Template title',\n                headerClasses: 'textHeader',\n                sort: true,\n                editor: {\n                  type: Type.TEXTAREA,\n                },\n              },\n              {\n                dataField: 'reportOrder',\n                text: 'Report Order',\n                headerClasses: 'textHeader',\n                sort: true,\n                editorRenderer: (\n                  editorProps,\n                  value,\n                  row,\n                  column,\n                  rowIndex,\n                  columnIndex,\n                ) => (\n                  <>\n                    <Form.Input\n                      type='number'\n                      onBlur={reportOrder => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            {\n                              reportOrder: Number.parseInt(reportOrder),\n                            },\n                            row._id,\n                          );\n                      }}\n                    />\n                  </>\n                ),\n              },\n              {\n                dataField: 'endOfPage',\n                text: 'End Of Page',\n                headerClasses: 'textHeader',\n                sort: true,\n                formatter: (cell, row) => {\n                  return (\n                    <>\n                      {row?.endOfPage?.map(item => (\n                        <p>{` ${item?.details}`}</p>\n                      ))}\n                    </>\n                  );\n                },\n                editorRenderer: (\n                  editorProps,\n                  value,\n                  row,\n                  column,\n                  rowIndex,\n                  columnIndex,\n                ) => (\n                  <>\n                    <EndOfPageComponents\n                      onSelect={item => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            {\n                              endOfPage: item,\n                            },\n                            row._id,\n                          );\n                      }}\n                    />\n                  </>\n                ),\n              },\n              {\n                dataField: 'endOfReport',\n                text: 'End Of Report',\n                headerClasses: 'textHeader',\n                sort: true,\n                formatter: (cell, row) => {\n                  return (\n                    <>\n                      {row?.endOfReport?.map(item => (\n                        <p>{` ${item?.details}`}</p>\n                      ))}\n                    </>\n                  );\n                },\n                editorRenderer: (\n                  editorProps,\n                  value,\n                  row,\n                  column,\n                  rowIndex,\n                  columnIndex,\n                ) => (\n                  <>\n                    <EndOfReportComponents\n                      onSelect={item => {\n                        props.onUpdateItem &&\n                          props.onUpdateItem(\n                            {\n                              endOfReport: item,\n                            },\n                            row._id,\n                          );\n                      }}\n                    />\n                  </>\n                ),\n              },\n              {\n                dataField: 'operation',\n                text: 'Action',\n                editable: false,\n                csvExport: false,\n                hidden: !props.isDelete,\n                formatter: (cellContent, row) => (\n                  <>\n                    <div className='flex flex-row'>\n                      <Tooltip tooltipText='Delete' position='bottom'>\n                        <Icons.IconContext\n                          color='#fff'\n                          size='20'\n                          onClick={() =>\n                            props.onDelete &&\n                            props.onDelete({\n                              type: 'delete',\n                              show: true,\n                              id: [row._id],\n                              title: 'Are you sure?',\n                              body: 'Delete item',\n                            })\n                          }\n                        >\n                          {Icons.getIconTag(Icons.IconBs.BsFillTrashFill)}\n                        </Icons.IconContext>\n                      </Tooltip>\n                    </div>\n                  </>\n                ),\n                headerClasses: 'sticky right-0  bg-gray-500 text-white z-50',\n                classes: (cell, row, rowIndex, colIndex) => {\n                  return 'sticky right-0 bg-gray-500';\n                },\n                style: (cell, row, rowIndex, colIndex) => {\n                  return {\n                    zIndex: props.data?.length - rowIndex,\n                  };\n                },\n              },\n            ]}\n            isEditModify={props.isEditModify}\n            isSelectRow={true}\n            fileName='Template Patient Result'\n            onSelectedRow={rows => {\n              props.onSelectedRow &&\n                props.onSelectedRow(rows.map((item: any) => item._id));\n            }}\n            onPageSizeChange={(page, size) => {\n              props.onPageSizeChange && props.onPageSizeChange(page, size);\n            }}\n            onFilter={(type, filter, page, size) => {\n              props.onFilter && props.onFilter(type, filter, page, size);\n            }}\n            onUpdateItem={(value: any, dataField: string, id: string) => {\n              props.onUpdateItem &&\n                props.onUpdateItem({[dataField]: value}, id);\n            }}\n            clearAllFilter={() => {\n              sectionSetting('');\n              version('');\n              environment('');\n            }}\n          />\n        </div>\n      </>\n    );\n  },\n);\n","import React, {useEffect, useState} from 'react';\nimport {observer} from 'mobx-react';\nimport {\n  Toast,\n  Buttons,\n  Grid,\n  List,\n  Form,\n  Svg,\n  ModalConfirm,\n  ModalView,\n  ModalViewProps,\n} from '@/library/components';\nimport {PDFViewer, Document} from '@react-pdf/renderer';\nimport {\n  PageBrandingList,\n  PageBrandingHeader,\n  PageBrandingSubHeader,\n  PageBrandingFooter,\n  PageNumber,\n  AutoCompleteLayoutCode,\n} from '../components';\nimport {useForm, Controller} from 'react-hook-form';\nimport {RouterFlow} from '@/flows';\nimport {useStores} from '@/stores';\nimport {PageBranding as PageBrandingModel} from '../models';\n\nimport {Accordion, AccordionItem} from 'react-sanfona';\nimport '@/library/assets/css/accordion.css';\n\nimport 'react-accessible-accordion/dist/fancy-example.css';\nimport '@/library/assets/css/accordion.css';\n\nimport {PdfPBTemp0001} from '@features/report-builder/report-template/components/molecules/pdf/page-branding/temp0001/temp0001.component';\nimport {resetReportBody} from '../startup';\nconst width = '100%';\nconst height = window.innerHeight / 1.3;\n\nexport const PageBranding = observer(() => {\n  const {loading, routerStore, reportSettingStore} = useStores();\n  const {\n    control,\n    handleSubmit,\n    formState: {errors},\n    setValue,\n    setError,\n    clearErrors,\n    reset,\n  } = useForm();\n\n  const [modalConfirm, setModalConfirm] = useState<any>();\n  const [modalView, setModalView] = useState<ModalViewProps>();\n  const [isInputView, setIsInputView] = useState<boolean>(false);\n  const [isExistsTempCode, setIsExistsTempCode] = useState<boolean>(false);\n  const [isClearReset, setClearReset] = useState<boolean>(false);\n\n  useEffect(() => {\n    // Default value initialization\n    setValue('subHeaderVisible', reportSettingStore.pageBranding?.isSubHeader);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [reportSettingStore.pageBranding]);\n  const onSave = () => {\n    if (isExistsTempCode)\n      return Toast.error({\n        message: '😔 Already exists branding code. Please select diff.',\n      });\n    reportSettingStore.pageBrandingService\n      .addPageBranding({\n        input: {\n          ...reportSettingStore.pageBranding,\n          header: {\n            ...reportSettingStore.pageBranding?.header,\n            backgroundImageBase64: undefined,\n          },\n          footer: {\n            ...reportSettingStore.pageBranding?.footer,\n            backgroundImageBase64: undefined,\n          },\n        },\n      })\n      .then(res => {\n        if (res.createPageBranding.success) {\n          Toast.success({\n            message: `😊 ${res.createPageBranding.message}`,\n          });\n          setClearReset(true);\n          setIsInputView(false);\n          reset();\n          resetReportBody();\n          reportSettingStore.updatePageBranding({\n            ...reportSettingStore.pageBranding,\n            layoutCode: '',\n          });\n        }\n      });\n  };\n\n  const getTemplate = (tempCode: string, data: any) => {\n    if (tempCode)\n      return (\n        <PDFViewer\n          style={{width: '100%', height: '100%'}}\n          showToolbar={reportSettingStore.pageLayout?.isToolbar}\n        >\n          <Document title='Page Branding'>\n            <PdfPBTemp0001\n              data={data}\n              templateSettings={data?.templateSettings}\n            />\n          </Document>\n        </PDFViewer>\n      );\n    else {\n      return (\n        <div className='justify-center items-center'>\n          <h4 className='text-center text-red'>\n            Template not found. Please select correct temp code. 🚨\n          </h4>\n        </div>\n      );\n    }\n  };\n\n  const getAccordionItem = (pageBranding: PageBrandingModel) => {\n    const accordionItem: Array<any> = [];\n    if (pageBranding.isHeader) accordionItem.push({title: 'Header'});\n    if (pageBranding.isSubHeader) accordionItem.push({title: 'Sub Header'});\n    if (pageBranding.isFooter) accordionItem.push({title: 'Footer'});\n    if (pageBranding.isPdfPageNumber)\n      accordionItem.push({title: 'Page Number'});\n    return accordionItem;\n  };\n\n  return (\n    <>\n      {RouterFlow.checkPermission(routerStore.userPermission, 'Add') && (\n        <Buttons.ButtonCircleAddRemoveBottom\n          style={{bottom: 50}}\n          show={isInputView}\n          onClick={() => setIsInputView(!isInputView)}\n        />\n      )}\n      <div className='mx-auto flex-wrap'>\n        <div\n          className={\n            'rounded-lg shadow-xl p-2 ' + (!isInputView ? 'hidden' : 'shown')\n          }\n        >\n          <Grid cols={2}>\n            <List direction='col' space={4} justify='stretch' fill>\n              <Controller\n                control={control}\n                render={({field: {onChange, value}}) => (\n                  <AutoCompleteLayoutCode\n                    displayValue={value ?? ''}\n                    hasError={!!errors.layoutCode}\n                    onSelect={item => {\n                      onChange(item.tempCode);\n                      reportSettingStore.updatePageBranding({\n                        ...reportSettingStore.pageBranding,\n                        layoutCode: item.tempCode,\n                      });\n                    }}\n                  />\n                )}\n                name='layoutCode'\n                rules={{required: true}}\n                defaultValue={reportSettingStore.pageLayoutList}\n              />\n              <Controller\n                control={control}\n                render={({field: {onChange, value}}) => (\n                  <Form.Input\n                    label='Branding Code'\n                    placeholder='Branding Code'\n                    hasError={!!errors.brandingCode}\n                    value={value?.toUpperCase()}\n                    onChange={tempCode => {\n                      onChange(tempCode);\n                      reportSettingStore.updatePageBranding({\n                        ...reportSettingStore.pageBranding,\n                        tempCode: tempCode?.toUpperCase(),\n                      });\n                    }}\n                    onBlur={tempCode => {\n                      reportSettingStore.pageBrandingService\n                        .findByFields({\n                          input: {\n                            filter: {\n                              tempCode,\n                            },\n                          },\n                        })\n                        .then(res => {\n                          if (res.findByFieldsPageBranding.success) {\n                            setError('tempCode', {type: 'onBlur'});\n                            Toast.error({\n                              message:\n                                '😔 Already exists temp code. Please select diff.',\n                            });\n                            return setIsExistsTempCode(true);\n                          } else {\n                            clearErrors('tempCode');\n                            return setIsExistsTempCode(false);\n                          }\n                        });\n                    }}\n                  />\n                )}\n                name='brandingCode'\n                rules={{required: true}}\n                defaultValue=''\n              />\n              <Controller\n                control={control}\n                render={({field: {onChange, value}}) => (\n                  <Form.Input\n                    label='Branding Title'\n                    placeholder='Branding Title'\n                    hasError={!!errors.brandingTitle}\n                    value={value?.toUpperCase()}\n                    onChange={brandingTitle => {\n                      onChange(brandingTitle);\n                      reportSettingStore.updatePageBranding({\n                        ...reportSettingStore.pageBranding,\n                        brandingTitle: brandingTitle?.toUpperCase(),\n                      });\n                    }}\n                    // onBlur={brandingTitle => {\n                    //   reportSettingStore.pageBrandingService\n                    //     .findByFields({\n                    //       input: {\n                    //         filter: {\n                    //           tempCode:\n                    //             reportSettingStore.pageBranding?.tempCode || '',\n                    //           brandingTitle: brandingTitle?.toUpperCase(),\n                    //         },\n                    //       },\n                    //     })\n                    //     .then(res => {\n                    //       if (res.findByFieldsPageBranding.success) {\n                    //         setError('tempCode', {type: 'onBlur'});\n                    //         setError('brandingTitle', {type: 'onBlur'});\n                    //         Toast.error({\n                    //           message:\n                    //             '😔 Already exists temp code. Please select diff.',\n                    //         });\n                    //         return setIsExistsTempCode(true);\n                    //       } else {\n                    //         clearErrors('tempCode');\n                    //         clearErrors('brandingTitle');\n                    //         return setIsExistsTempCode(false);\n                    //       }\n                    //     });\n                    // }}\n                  />\n                )}\n                name='brandingTitle'\n                rules={{required: true}}\n                defaultValue=''\n              />\n\n              <Grid cols={4}>\n                <Controller\n                  control={control}\n                  render={({field: {onChange, value}}) => (\n                    <Form.Toggle\n                      label='Header Visible'\n                      hasError={!!errors.headerVisible}\n                      value={value}\n                      onChange={isHeader => {\n                        onChange(isHeader);\n                        reportSettingStore.updatePageBranding({\n                          ...reportSettingStore.pageBranding,\n                          isHeader,\n                        });\n                      }}\n                    />\n                  )}\n                  name='headerVisible'\n                  rules={{required: false}}\n                  defaultValue=''\n                />\n                <Controller\n                  control={control}\n                  render={({field: {onChange, value}}) => (\n                    <Form.Toggle\n                      label='Sub Header Visible'\n                      hasError={!!errors.subHeaderVisible}\n                      value={value}\n                      onChange={isSubHeader => {\n                        onChange(isSubHeader);\n                        reportSettingStore.updatePageBranding({\n                          ...reportSettingStore.pageBranding,\n                          isSubHeader,\n                        });\n                      }}\n                    />\n                  )}\n                  name='subHeaderVisible'\n                  rules={{required: false}}\n                  defaultValue=''\n                />\n                <Controller\n                  control={control}\n                  render={({field: {onChange, value}}) => (\n                    <Form.Toggle\n                      label='Footer Visible'\n                      hasError={!!errors.footerVisible}\n                      value={value}\n                      onChange={isFooter => {\n                        onChange(isFooter);\n                        reportSettingStore.updatePageBranding({\n                          ...reportSettingStore.pageBranding,\n                          isFooter,\n                        });\n                      }}\n                    />\n                  )}\n                  name='footerVisible'\n                  rules={{required: false}}\n                  defaultValue=''\n                />\n                <Controller\n                  control={control}\n                  render={({field: {onChange, value}}) => (\n                    <Form.Toggle\n                      label='Page Number'\n                      hasError={!!errors.pageNumber}\n                      value={value}\n                      onChange={isPdfPageNumber => {\n                        onChange(isPdfPageNumber);\n                        reportSettingStore.updatePageBranding({\n                          ...reportSettingStore.pageBranding,\n                          isPdfPageNumber,\n                        });\n                      }}\n                    />\n                  )}\n                  name='pageNumber'\n                  rules={{required: false}}\n                  defaultValue=''\n                />\n              </Grid>\n              <Accordion>\n                {getAccordionItem(reportSettingStore?.pageBranding).map(\n                  item => {\n                    return (\n                      <AccordionItem\n                        title={`${item.title}`}\n                        expanded={item.title === 'Header'}\n                      >\n                        {item.title === 'Header' && (\n                          <PageBrandingHeader isClearReset={isClearReset} />\n                        )}\n                        {item.title === 'Sub Header' && (\n                          <PageBrandingSubHeader isClearReset={isClearReset} />\n                        )}\n                        {item.title === 'Footer' && (\n                          <PageBrandingFooter isClearReset={isClearReset} />\n                        )}\n                        {item.title === 'Page Number' && (\n                          <PageNumber isClearReset={isClearReset} />\n                        )}\n                      </AccordionItem>\n                    );\n                  },\n                )}\n              </Accordion>\n            </List>\n            <List direction='col' space={4} justify='stretch' fill>\n              {getTemplate(\n                reportSettingStore.pageBranding?.layoutCode,\n                reportSettingStore.pageBranding,\n              )}\n            </List>\n          </Grid>\n          <br />\n          <List direction='row' space={3} align='center'>\n            <Buttons.Button\n              size='medium'\n              type='solid'\n              icon={Svg.Save}\n              onClick={handleSubmit(onSave)}\n            >\n              Save\n            </Buttons.Button>\n            <Buttons.Button\n              size='medium'\n              type='outline'\n              icon={Svg.Remove}\n              onClick={() => {\n                window.location.reload();\n              }}\n            >\n              Clear\n            </Buttons.Button>\n          </List>\n        </div>\n        <div\n          className='rounded-lg shadow-xl overflow-auto p-2'\n          style={{overflowX: 'scroll'}}\n        >\n          <PageBrandingList\n            data={reportSettingStore.pageBrandingList}\n            totalSize={reportSettingStore.pageBrandingListCount}\n            isDelete={RouterFlow.checkPermission(\n              routerStore.userPermission,\n              'Delete',\n            )}\n            isEditModify={RouterFlow.checkPermission(\n              routerStore.userPermission,\n              'Edit/Modify',\n            )}\n            onDelete={selectedItem => setModalConfirm(selectedItem)}\n            onSelectedRow={rows => {\n              setModalConfirm({\n                show: true,\n                type: 'delete',\n                id: rows,\n                title: 'Are you sure?',\n                body: 'Delete selected items!',\n              });\n            }}\n            onUpdateItem={(fields: any, id: string) => {\n              setModalConfirm({\n                show: true,\n                type: 'update',\n                data: {fields, id},\n                title: 'Are you sure?',\n                body: 'Update banner!',\n              });\n            }}\n            onPageSizeChange={(page, limit) => {\n              // bannerStore.fetchListBanner(page, limit);\n            }}\n            onFilter={(type, filter, page, limit) => {\n              // bannerStore.BannerService.filter({\n              //   input: {type, filter, page, limit},\n              // });\n            }}\n            onPdfPreview={item => {\n              reportSettingStore.pageLayoutService\n                .findByFields({\n                  input: {\n                    filter: {\n                      tempCode: item?.tempCode,\n                    },\n                  },\n                })\n                .then(res => {\n                  if (res.findByFieldsTemplateSetting.success) {\n                    setModalView({\n                      visible: true,\n                      children: (\n                        <>\n                          {getTemplate(item.tempCode, {\n                            ...item,\n                            templateSettings:\n                              res.findByFieldsTemplateSetting.data[0],\n                          })}\n                        </>\n                      ),\n                    });\n                  }\n                });\n            }}\n          />\n        </div>\n      </div>\n      <ModalConfirm\n        {...modalConfirm}\n        click={(type?: string) => {\n          switch (type) {\n            case 'delete': {\n              reportSettingStore.pageBrandingService\n                .removePageBranding({\n                  input: {id: modalConfirm.id},\n                })\n                .then((res: any) => {\n                  if (res.removePageBranding.success) {\n                    Toast.success({\n                      message: `😊 ${res.removePageBranding.message}`,\n                    });\n                    setModalConfirm({show: false});\n                    reportSettingStore.pageBrandingService.listPageBranding();\n                  }\n                });\n              break;\n            }\n            case 'update': {\n              reportSettingStore.pageBrandingService\n                .update({\n                  input: {\n                    ...modalConfirm.data.fields,\n                    _id: modalConfirm.data.id,\n                  },\n                })\n                .then((res: any) => {\n                  setModalConfirm({show: false});\n                  if (res.updatePageBranding.success) {\n                    Toast.success({\n                      message: `😊 ${res.updatePageBranding.message}`,\n                    });\n                    setTimeout(() => {\n                      window.location.reload();\n                    }, 2000);\n                  }\n                });\n              break;\n            }\n          }\n        }}\n        onClose={() => setModalConfirm({show: false})}\n      />\n      <ModalView\n        {...modalView}\n        onClose={() => setModalView({visible: false})}\n      />\n    </>\n  );\n});\n","import React, {useState} from 'react';\nimport {observer} from 'mobx-react';\nimport {PDFViewer, Document} from '@react-pdf/renderer';\nimport {\n  Toast,\n  Buttons,\n  Grid,\n  List,\n  Form,\n  Svg,\n  ModalConfirm,\n  PdfMedium,\n  ModalView,\n  ModalViewProps,\n} from '@/library/components';\nimport {PageLayoutList} from '../components';\nimport {useForm, Controller} from 'react-hook-form';\nimport {RouterFlow} from '@/flows';\nimport {useStores} from '@/stores';\n\nimport 'react-accessible-accordion/dist/fancy-example.css';\nimport '@/library/assets/css/accordion.css';\n\nimport {PdfTSTemp0001} from '@/features/report-builder/report-template/components/molecules/pdf/page-layout/temp0001/temp0001.component';\nimport {resetReportBody} from '../startup';\nexport const PageLayout = observer(() => {\n  const {loading, routerStore, reportSettingStore} = useStores();\n  const {\n    control,\n    handleSubmit,\n    formState: {errors},\n    setValue,\n    setError,\n    clearErrors,\n    reset,\n  } = useForm();\n\n  const [modalConfirm, setModalConfirm] = useState<any>();\n  const [modalView, setModalView] = useState<ModalViewProps>();\n  const [isInputView, setIsInputView] = useState<boolean>(true);\n  const [isExistsTempCode, setIsExistsTempCode] = useState<boolean>(false);\n\n  const width = '100%';\n  const height = window.innerHeight / 1.3;\n  const onSave = () => {\n    if (isExistsTempCode)\n      return Toast.error({\n        message: '😔 Already exists temp code. Please enter diff.',\n      });\n    reportSettingStore.pageLayoutService\n      .addTemplateSetting({\n        input: {...reportSettingStore.pageLayout},\n      })\n      .then(res => {\n        if (res.createTemplateSetting.success) {\n          Toast.success({\n            message: `😊 ${res.createTemplateSetting.message}`,\n          });\n          setIsInputView(true);\n          reset();\n          resetReportBody();\n          reportSettingStore.updatePageLayout({\n            ...reportSettingStore.pageLayout,\n            isToolbar: false,\n            isBackgroundImage: false,\n            backgroundImage: '',\n            mainBoxCSS: \"backgroundColor: '#ffffff',paddingBottom: '120pt',\",\n            pageSize: '',\n          });\n        }\n      });\n  };\n\n  return (\n    <>\n      {RouterFlow.checkPermission(routerStore.userPermission, 'Add') && (\n        <Buttons.ButtonCircleAddRemoveBottom\n          style={{bottom: 40}}\n          show={isInputView}\n          onClick={() => setIsInputView(!isInputView)}\n        />\n      )}\n      <div className='mx-auto flex-wrap'>\n        <div className={'p-2 rounded-lg shadow-xl '}>\n          <Grid cols={2}>\n            <List direction='col' space={4} justify='stretch' fill>\n              <Grid cols={2}>\n                <List direction='col' space={4} justify='stretch' fill>\n                  <Controller\n                    control={control}\n                    render={({field: {onChange, value}}) => (\n                      <Form.Input\n                        label='Layout Code'\n                        placeholder='Layout code'\n                        hasError={!!errors.tempCode}\n                        value={value}\n                        onChange={tempCode => {\n                          onChange(tempCode);\n                          reportSettingStore.updatePageLayout({\n                            ...reportSettingStore.pageLayout,\n                            tempCode,\n                          });\n                        }}\n                        onBlur={tempCode => {\n                          reportSettingStore.pageLayoutService\n                            .findByFields({\n                              input: {\n                                filter: {\n                                  tempCode,\n                                  tempName:\n                                    reportSettingStore.pageLayout?.tempName ||\n                                    '',\n                                },\n                              },\n                            })\n                            .then(res => {\n                              if (res.findByFieldsTemplateSetting.success) {\n                                setError('tempCode', {type: 'onBlur'});\n                                setError('tempName', {type: 'onBlur'});\n                                Toast.error({\n                                  message:\n                                    '😔 Already exists temp code. Please enter diff.',\n                                });\n                                return setIsExistsTempCode(true);\n                              } else {\n                                clearErrors('tempCode');\n                                clearErrors('tempName');\n                                return setIsExistsTempCode(false);\n                              }\n                            });\n                        }}\n                      />\n                    )}\n                    name='tempCode'\n                    rules={{required: true}}\n                    defaultValue=''\n                  />\n                  <Controller\n                    control={control}\n                    render={({field: {onChange, value}}) => (\n                      <Form.Input\n                        label='Layout Name'\n                        placeholder='Layout Name'\n                        hasError={!!errors.tempName}\n                        value={value}\n                        onChange={tempName => {\n                          onChange(tempName);\n                          reportSettingStore.updatePageLayout({\n                            ...reportSettingStore.pageLayout,\n                            tempName,\n                          });\n                        }}\n                        onBlur={tempName => {\n                          reportSettingStore.pageLayoutService\n                            .findByFields({\n                              input: {\n                                filter: {\n                                  tempName,\n                                  tempCode:\n                                    reportSettingStore.pageLayout?.tempCode ||\n                                    '',\n                                },\n                              },\n                            })\n                            .then(res => {\n                              if (res.findByFieldsTemplateSetting.success) {\n                                setError('tempCode', {type: 'onBlur'});\n                                setError('tempName', {type: 'onBlur'});\n                                Toast.warning({\n                                  message:\n                                    '😔 Already exists temp code. Please enter diff.',\n                                });\n                                return setIsExistsTempCode(true);\n                              } else {\n                                clearErrors('tempCode');\n                                clearErrors('tempName');\n                                return setIsExistsTempCode(false);\n                              }\n                            });\n                        }}\n                      />\n                    )}\n                    name='tempName'\n                    rules={{required: true}}\n                    defaultValue=''\n                  />\n                  <Grid cols={2}>\n                    <Controller\n                      control={control}\n                      render={({field: {onChange, value}}) => (\n                        <Form.Toggle\n                          label='Show tool bar'\n                          hasError={!!errors.isToolBar}\n                          value={value}\n                          onChange={isToolbar => {\n                            onChange(isToolbar);\n                            reportSettingStore.updatePageLayout({\n                              ...reportSettingStore.pageLayout,\n                              isToolbar,\n                            });\n                          }}\n                        />\n                      )}\n                      name='isToolBar'\n                      rules={{required: false}}\n                      defaultValue=''\n                    />\n                    <Controller\n                      control={control}\n                      render={({field: {onChange, value}}) => (\n                        <Form.Toggle\n                          label='Background Image Visible'\n                          hasError={!!errors.isBackgroundImage}\n                          value={value}\n                          onChange={isBackgroundImage => {\n                            onChange(isBackgroundImage);\n                            reportSettingStore.updatePageLayout({\n                              ...reportSettingStore.pageLayout,\n                              isBackgroundImage,\n                            });\n                          }}\n                        />\n                      )}\n                      name='isBackgroundImage'\n                      rules={{required: false}}\n                      defaultValue=''\n                    />\n                  </Grid>\n                  <Controller\n                    control={control}\n                    render={({field: {onChange, value}}) => (\n                      <Form.InputFile\n                        label='Background Image'\n                        placeholder='Background Image'\n                        hasError={!!errors.backgroundImage}\n                        value={value ? value.fileName : ''}\n                        onChange={async e => {\n                          const backgroundImage = e.target.files[0];\n                          onChange(backgroundImage);\n                          reportSettingStore.updatePageLayout({\n                            ...reportSettingStore.pageLayout,\n                            backgroundImage,\n                          });\n                        }}\n                      />\n                    )}\n                    name='backgroundImage'\n                    rules={{required: false}}\n                    defaultValue=''\n                  />\n                </List>\n                <List direction='col' space={4} justify='stretch' fill>\n                  <Controller\n                    control={control}\n                    render={({field: {onChange, value}}) => (\n                      <Form.InputWrapper\n                        label='Page Size'\n                        hasError={!!errors.pageSize}\n                      >\n                        <select\n                          value={value}\n                          className={`leading-4 p-2 focus:outline-none focus:ring block w-full shadow-sm sm:text-base border-2 ${\n                            errors.pageSize ? 'border-red  ' : 'border-gray-300'\n                          } rounded-md`}\n                          onChange={e => {\n                            const pageSize = e.target.value;\n                            onChange(pageSize);\n                            reportSettingStore.updatePageLayout({\n                              ...reportSettingStore.pageLayout,\n                              pageSize,\n                            });\n                          }}\n                        >\n                          <option selected>Select</option>\n                          {[\n                            '4A0',\n                            '2A0',\n                            'A0',\n                            'A1',\n                            'A2',\n                            'A3',\n                            'A4',\n                            'A5',\n                            'A6',\n                            'A7',\n                            'A8',\n                            'A9',\n                            'A10',\n                            'B0',\n                            'B1',\n                            'B2',\n                            'B3',\n                            'B4',\n                            'B5',\n                            'B6',\n                            'B7',\n                            'B8',\n                            'B9',\n                            'B10',\n                            'C0',\n                            'C1',\n                            'C2',\n                            'C3',\n                            'C4',\n                            'C5',\n                            'C6',\n                            'C7',\n                            'C8',\n                            'C9',\n                            'C10',\n                            'RA0',\n                            'RA1',\n                            'RA2',\n                            'RA3',\n                            'RA4',\n                            'SRA0',\n                            'SRA1',\n                            'SRA2',\n                            'SRA3',\n                            'SRA4',\n                            'EXECUTIVE',\n                            'FOLIO',\n                            'LEGAL',\n                            'LETTER',\n                            'TABLOID',\n                            'ID1',\n                          ].map((item: any, index: number) => (\n                            <option key={index} value={item}>\n                              {item}\n                            </option>\n                          ))}\n                        </select>\n                      </Form.InputWrapper>\n                    )}\n                    name='pageSize'\n                    rules={{required: false}}\n                    defaultValue=''\n                  />\n                  <Controller\n                    control={control}\n                    render={({field: {onChange, value}}) => (\n                      <Form.MultilineInput\n                        label='Main Box CSS'\n                        style={{color: '#ffffff', backgroundColor: '#000000'}}\n                        placeholder={\n                          \"Like fontSize: 12,backgroundColor:'#000000'\"\n                        }\n                        value={value}\n                        onChange={mainBoxCSS => {\n                          onChange(mainBoxCSS);\n                          reportSettingStore.updatePageLayout({\n                            ...reportSettingStore.pageLayout,\n                            mainBoxCSS,\n                          });\n                        }}\n                      />\n                    )}\n                    name='mainBoxCSS'\n                    rules={{required: false}}\n                    defaultValue=''\n                  />\n                  <a\n                    href='https://dev.azure.com/limsplus0644/_git/limsplus-portal?path=/react-styling-cheat-sheet.md&_a=preview'\n                    target='_blank'\n                    className='text-red underline'\n                    rel='noreferrer'\n                  >\n                    Note: Check more properties\n                  </a>\n                  <p>\n                    {\n                      \"Note: if footer present then min paddingBottom:'120pt' required.\"\n                    }\n                  </p>\n                </List>\n              </Grid>\n            </List>\n            <List direction='col' space={2} justify='stretch' fill>\n              <PDFViewer\n                style={{width, height}}\n                showToolbar={reportSettingStore.pageLayout?.isToolbar}\n              >\n                <Document title='Template Setting'>\n                  <PdfTSTemp0001\n                    documentTitle='Template Setting'\n                    isBackgroundImage={\n                      reportSettingStore.pageLayout?.isBackgroundImage\n                    }\n                    backgroundImage={\n                      reportSettingStore.pageLayout?.backgroundImage\n                    }\n                    mainBoxCSS={reportSettingStore.pageLayout?.mainBoxCSS}\n                    pageSize={reportSettingStore.pageLayout?.pageSize}\n                    children={<PdfMedium>Template Setting</PdfMedium>}\n                  />\n                </Document>\n              </PDFViewer>\n            </List>\n          </Grid>\n          <br />\n          <List direction='row' space={3} align='center'>\n            <Buttons.Button\n              size='medium'\n              type='solid'\n              icon={Svg.Save}\n              onClick={handleSubmit(onSave)}\n            >\n              Save\n            </Buttons.Button>\n            <Buttons.Button\n              size='medium'\n              type='outline'\n              icon={Svg.Remove}\n              onClick={() => {\n                window.location.reload();\n              }}\n            >\n              Clear\n            </Buttons.Button>\n          </List>\n        </div>\n        <div className='p-2 rounded-lg shadow-xl overflow-auto'>\n          <PageLayoutList\n            data={reportSettingStore.pageLayoutList || []}\n            totalSize={reportSettingStore.pageLayoutListCount}\n            isDelete={RouterFlow.checkPermission(\n              routerStore.userPermission,\n              'Delete',\n            )}\n            isEditModify={RouterFlow.checkPermission(\n              routerStore.userPermission,\n              'Edit/Modify',\n            )}\n            onDelete={selectedItem => setModalConfirm(selectedItem)}\n            onSelectedRow={rows => {\n              setModalConfirm({\n                show: true,\n                type: 'delete',\n                id: rows,\n                title: 'Are you sure?',\n                body: 'Delete selected items!',\n              });\n            }}\n            onUpdateItem={(fields: any, id: string) => {\n              setModalConfirm({\n                show: true,\n                type: 'update',\n                data: {fields, id},\n                title: 'Are you sure?',\n                body: 'Update items!',\n              });\n            }}\n            onPageSizeChange={(page, limit) => {\n              // bannerStore.fetchListBanner(page, limit);\n            }}\n            onFilter={(type, filter, page, limit) => {\n              // bannerStore.BannerService.filter({\n              //   input: {type, filter, page, limit},\n              // });\n            }}\n            onPdfPreview={item => {\n              setModalView({\n                visible: true,\n                children: (\n                  <PDFViewer\n                    style={{width, height}}\n                    showToolbar={item.isToolbar}\n                  >\n                    <Document title='Page Layout'>\n                      <PdfTSTemp0001\n                        documentTitle='Page Layout'\n                        height={window.innerHeight / 1.3}\n                        isToolbar={item.isToolbar}\n                        isBackgroundImage={item?.isBackgroundImage}\n                        backgroundImage={item?.backgroundImage}\n                        mainBoxCSS={item.mainBoxCSS}\n                        pageSize={item.pageSize}\n                        children={<PdfMedium>Page Layout</PdfMedium>}\n                      />\n                    </Document>\n                  </PDFViewer>\n                ),\n              });\n            }}\n          />\n        </div>\n      </div>\n      <ModalConfirm\n        {...modalConfirm}\n        click={(type?: string) => {\n          switch (type) {\n            case 'delete': {\n              reportSettingStore.pageLayoutService\n                .removeTemplateSetting({\n                  input: {id: modalConfirm.id},\n                })\n                .then((res: any) => {\n                  setModalConfirm({show: false});\n                  if (res.removeTemplateSetting.success) {\n                    Toast.success({\n                      message: `😊 ${res.removeTemplateSetting.message}`,\n                    });\n                    reportSettingStore.pageLayoutService.listTemplateSetting();\n                  }\n                });\n              break;\n            }\n            case 'update': {\n              reportSettingStore.pageLayoutService\n                .update({\n                  input: {\n                    ...modalConfirm.data.fields,\n                    _id: modalConfirm.data.id,\n                  },\n                })\n                .then((res: any) => {\n                  setModalConfirm({show: false});\n                  if (res.updateTemplateSetting.success) {\n                    Toast.success({\n                      message: `😊 ${res.updateTemplateSetting.message}`,\n                    });\n                    setTimeout(() => {\n                      window.location.reload();\n                    }, 2000);\n                  }\n                });\n\n              break;\n            }\n          }\n        }}\n        onClose={() => setModalConfirm({show: false})}\n      />\n      <ModalView\n        {...modalView}\n        onClose={() => setModalView({visible: false})}\n      />\n    </>\n  );\n});\n","import React, {useState} from 'react';\nimport {observer} from 'mobx-react';\nimport {\n  Toast,\n  Buttons,\n  Grid,\n  List,\n  Form,\n  Svg,\n  ModalConfirm,\n  ModalView,\n  ModalViewProps,\n} from '@/library/components';\nimport {\n  TemplatePatientResultList,\n  ReportBodyComponents,\n  EndOfPageComponents,\n  EndOfReportComponents,\n} from '../components';\nimport {useForm, Controller} from 'react-hook-form';\nimport {RouterFlow} from '@/flows';\nimport {useStores} from '@/stores';\n\nimport '@/library/assets/css/accordion.css';\n\nimport 'react-accessible-accordion/dist/fancy-example.css';\nimport '@/library/assets/css/accordion.css';\nimport {resetReportBody} from '../startup';\nimport {SelectedItemsTemplatePatientResult} from '../models/template-patient-result.model';\n\nexport const TemplatePatientResult = observer(() => {\n  const {loading, routerStore, reportSettingStore, libraryStore} = useStores();\n  const {\n    control,\n    handleSubmit,\n    formState: {errors},\n    setValue,\n    setError,\n    clearErrors,\n    reset,\n  } = useForm();\n\n  const [modalConfirm, setModalConfirm] = useState<any>();\n  const [modalView, setModalView] = useState<ModalViewProps>();\n  const [isInputView, setIsInputView] = useState<boolean>(true);\n  const [isExistsRecord, setIsExistsRecord] = useState<boolean>(false);\n\n  const onSave = () => {\n    if (isExistsRecord)\n      return Toast.error({\n        message: '😔 Already exists records.',\n      });\n    reportSettingStore.templatePatientResultService\n      .addTemplatePatientResult({\n        input: {...reportSettingStore.templatePatientResult},\n      })\n      .then(res => {\n        if (res.createTemplatePatientResult.success) {\n          Toast.success({\n            message: `😊 ${res.createTemplatePatientResult.message}`,\n          });\n          setIsInputView(true);\n          reset();\n          resetReportBody();\n          reportSettingStore.updateSelectedItemTemplatePatientResult(\n            new SelectedItemsTemplatePatientResult({}),\n          );\n        }\n      });\n  };\n\n  const getTemplate = (tempCode: string, data: any) => {\n    switch (tempCode) {\n      case 'TEMP0001':\n        return <h1>hi</h1>;\n      default:\n        return (\n          <div className='justify-center items-center'>\n            <h4 className='text-center text-red'>\n              Template not found. Please select correct temp code. 🚨\n            </h4>\n          </div>\n        );\n        break;\n    }\n  };\n\n  return (\n    <>\n      {RouterFlow.checkPermission(routerStore.userPermission, 'Add') && (\n        <Buttons.ButtonCircleAddRemoveBottom\n          style={{bottom: 50}}\n          show={isInputView}\n          onClick={() => setIsInputView(!isInputView)}\n        />\n      )}\n      <div\n        className={\n          'p-2 rounded-lg shadow-xl ' + (isInputView ? 'shown' : 'hidden')\n        }\n      >\n        <Grid cols={2}>\n          <Grid cols={2}>\n            <List direction='col' space={4} justify='stretch' fill>\n              <Controller\n                control={control}\n                render={({field: {onChange, value}}) => (\n                  <Form.InputWrapper\n                    label='Report Template Type'\n                    hasError={!!errors.reportTemplateType}\n                  >\n                    <select\n                      value={value}\n                      className={`leading-4 p-2 focus:outline-none focus:ring block w-full shadow-sm sm:text-base border-2 ${\n                        errors.reportTemplateType\n                          ? 'border-red  '\n                          : 'border-gray-300'\n                      } rounded-md`}\n                      onChange={e => {\n                        const reportTemplateType = e.target.value;\n                        onChange(reportTemplateType);\n                        reportSettingStore.updateTemplatePatientResult({\n                          ...reportSettingStore.templatePatientResult,\n                          reportTemplateType,\n                        });\n                        reportSettingStore.templatePatientResultService\n                          .findByFields({\n                            input: {\n                              filter: {\n                                reportTemplateType,\n                                templateCode:\n                                  reportSettingStore.templatePatientResult\n                                    ?.templateCode || '',\n                                templateTitle:\n                                  reportSettingStore.templatePatientResult\n                                    ?.templateTitle || '',\n                              },\n                            },\n                          })\n                          .then(res => {\n                            if (res.findByFieldsTemplatePatientResult.success) {\n                              setError('reportTemplateType', {type: 'onBlur'});\n                              setError('templateCode', {type: 'onBlur'});\n                              setError('templateTitle', {type: 'onBlur'});\n                              Toast.error({\n                                message: '😔 Already exists record.',\n                              });\n                              return setIsExistsRecord(true);\n                            } else {\n                              clearErrors('reportTemplateType');\n                              clearErrors('templateCode');\n                              clearErrors('templateTitle');\n                              return setIsExistsRecord(false);\n                            }\n                          });\n                      }}\n                    >\n                      <option selected>Select</option>\n                      {['Lab Wise', 'Client Wise', 'Doctor Wise'].map(\n                        (item: any, index: number) => (\n                          <option key={index} value={item}>\n                            {item}\n                          </option>\n                        ),\n                      )}\n                    </select>\n                  </Form.InputWrapper>\n                )}\n                name='reportTemplateType'\n                rules={{required: true}}\n                defaultValue=''\n              />\n              <Controller\n                control={control}\n                render={({field: {onChange, value}}) => (\n                  <Form.InputWrapper\n                    label='Report Body'\n                    hasError={!!errors.reportBody}\n                  >\n                    <ReportBodyComponents\n                      displayValue={value}\n                      onSelect={item => {\n                        onChange(item?.reportName);\n                        reportSettingStore.updateTemplatePatientResult({\n                          ...reportSettingStore.templatePatientResult,\n                          reportBody: {\n                            _id: item?._id,\n                            reportCode: item?.reportCode,\n                            reportName: item?.reportName,\n                          },\n                        });\n                      }}\n                    />\n                  </Form.InputWrapper>\n                )}\n                name='reportBody'\n                rules={{required: false}}\n                defaultValue={reportSettingStore.reportBodyList}\n              />\n              <Controller\n                control={control}\n                render={({field: {onChange, value}}) => (\n                  <Form.Input\n                    label='Template Code'\n                    placeholder='Template Code'\n                    hasError={!!errors.templateCode}\n                    value={value?.toUpperCase()}\n                    onChange={templateCode => {\n                      onChange(templateCode);\n                      reportSettingStore.updateTemplatePatientResult({\n                        ...reportSettingStore.templatePatientResult,\n                        templateCode: templateCode?.toUpperCase(),\n                      });\n                    }}\n                    onBlur={templateCode => {\n                      reportSettingStore.templatePatientResultService\n                        .findByFields({\n                          input: {\n                            filter: {\n                              reportTemplateType:\n                                reportSettingStore.templatePatientResult\n                                  ?.reportTemplateType || '',\n                              templateCode,\n                              templateTitle:\n                                reportSettingStore.templatePatientResult\n                                  ?.templateTitle || '',\n                            },\n                          },\n                        })\n                        .then(res => {\n                          if (res.findByFieldsTemplatePatientResult.success) {\n                            setError('reportTemplateType', {type: 'onBlur'});\n                            setError('templateCode', {type: 'onBlur'});\n                            setError('templateTitle', {type: 'onBlur'});\n                            Toast.error({\n                              message: '😔 Already exists record.',\n                            });\n                            return setIsExistsRecord(true);\n                          } else {\n                            clearErrors('reportTemplateType');\n                            clearErrors('templateCode');\n                            clearErrors('templateTitle');\n                            return setIsExistsRecord(false);\n                          }\n                        });\n                    }}\n                  />\n                )}\n                name='templateCode'\n                rules={{required: true}}\n                defaultValue=''\n              />\n              <Controller\n                control={control}\n                render={({field: {onChange, value}}) => (\n                  <Form.Input\n                    label='Template Title'\n                    placeholder='Template Title'\n                    hasError={!!errors.templateTitle}\n                    value={value?.toUpperCase()}\n                    onChange={templateTitle => {\n                      onChange(templateTitle);\n                      reportSettingStore.updateTemplatePatientResult({\n                        ...reportSettingStore.templatePatientResult,\n                        templateTitle: templateTitle?.toUpperCase(),\n                      });\n                    }}\n                    onBlur={templateTitle => {\n                      reportSettingStore.templatePatientResultService\n                        .findByFields({\n                          input: {\n                            filter: {\n                              reportTemplateType:\n                                reportSettingStore.templatePatientResult\n                                  ?.reportTemplateType || '',\n                              templateCode:\n                                reportSettingStore.templatePatientResult\n                                  ?.templateCode || '',\n                              templateTitle,\n                            },\n                          },\n                        })\n                        .then(res => {\n                          if (res.findByFieldsTemplatePatientResult.success) {\n                            setError('reportTemplateType', {type: 'onBlur'});\n                            setError('templateCode', {type: 'onBlur'});\n                            setError('templateTitle', {type: 'onBlur'});\n                            Toast.error({\n                              message: '😔 Already exists record.',\n                            });\n                            return setIsExistsRecord(true);\n                          } else {\n                            clearErrors('reportTemplateType');\n                            clearErrors('templateCode');\n                            clearErrors('templateTitle');\n                            return setIsExistsRecord(false);\n                          }\n                        });\n                    }}\n                  />\n                )}\n                name='templateTitle'\n                rules={{required: true}}\n                defaultValue=''\n              />\n              <Controller\n                control={control}\n                render={({field: {onChange, value}}) => (\n                  <Form.Input\n                    label='Report Order'\n                    type='number'\n                    placeholder={\n                      errors.reportOrder\n                        ? 'Please Enter ReportOrder'\n                        : 'Report Order'\n                    }\n                    hasError={!!errors.reportOrder}\n                    value={value}\n                    onChange={reportOrder => {\n                      onChange(reportOrder);\n                      reportSettingStore.updateTemplatePatientResult({\n                        ...reportSettingStore.templatePatientResult,\n                        reportOrder: Number.parseInt(reportOrder),\n                      });\n                    }}\n                  />\n                )}\n                name='reportOrder'\n                rules={{required: false}}\n                defaultValue=''\n              />\n            </List>\n\n            <List direction='col' space={4} justify='stretch' fill>\n              <Controller\n                control={control}\n                render={({field: {onChange, value}}) => (\n                  <Form.InputWrapper\n                    label='End Of Page'\n                    hasError={!!errors.endOfPage}\n                  >\n                    <EndOfPageComponents\n                      onSelect={item => {\n                        reportSettingStore.updateTemplatePatientResult({\n                          ...reportSettingStore.templatePatientResult,\n                          endOfPage: item,\n                        });\n                      }}\n                    />\n                  </Form.InputWrapper>\n                )}\n                name='endOfPage'\n                rules={{required: false}}\n                defaultValue={\n                  libraryStore.listLibrary ||\n                  reportSettingStore.selectedItemTemplatePatientResult\n                    ?.endOfPage\n                }\n              />\n              <Controller\n                control={control}\n                render={({field: {onChange, value}}) => (\n                  <Form.InputWrapper\n                    label='End Of Report'\n                    hasError={!!errors.endOfReport}\n                  >\n                    <EndOfReportComponents\n                      onSelect={item => {\n                        reportSettingStore.updateTemplatePatientResult({\n                          ...reportSettingStore.templatePatientResult,\n                          endOfReport: item,\n                        });\n                      }}\n                    />\n                  </Form.InputWrapper>\n                )}\n                name='endOfReport'\n                rules={{required: false}}\n                defaultValue={\n                  libraryStore.listLibrary ||\n                  reportSettingStore.selectedItemTemplatePatientResult\n                    ?.endOfReport\n                }\n              />\n            </List>\n          </Grid>\n        </Grid>\n        <br />\n        <List direction='row' space={3} align='center'>\n          <Buttons.Button\n            size='medium'\n            type='solid'\n            icon={Svg.Save}\n            onClick={handleSubmit(onSave)}\n          >\n            Save\n          </Buttons.Button>\n          <Buttons.Button\n            size='medium'\n            type='outline'\n            icon={Svg.Remove}\n            onClick={() => {\n              window.location.reload();\n            }}\n          >\n            Clear\n          </Buttons.Button>\n        </List>\n      </div>\n      <div className='p-2 rounded-lg shadow-xl overflow-auto'>\n        <TemplatePatientResultList\n          data={reportSettingStore.templatePatientResultList}\n          totalSize={reportSettingStore.templatePatientResultListCount}\n          isDelete={RouterFlow.checkPermission(\n            routerStore.userPermission,\n            'Delete',\n          )}\n          isEditModify={RouterFlow.checkPermission(\n            routerStore.userPermission,\n            'Edit/Modify',\n          )}\n          onDelete={selectedItem => setModalConfirm(selectedItem)}\n          onSelectedRow={rows => {\n            setModalConfirm({\n              show: true,\n              type: 'delete',\n              id: rows,\n              title: 'Are you sure?',\n              body: 'Delete selected items!',\n            });\n          }}\n          onUpdateItem={(fields: any, id: string) => {\n            setModalConfirm({\n              show: true,\n              type: 'update',\n              data: {fields, id},\n              title: 'Are you sure?',\n              body: 'Update item!',\n            });\n          }}\n          onPageSizeChange={(page, limit) => {\n            reportSettingStore.templatePatientResultService.listTemplatePatientResult(\n              page,\n              limit,\n            );\n          }}\n          onFilter={(type, filter, page, limit) => {\n            // bannerStore.BannerService.filter({\n            //   input: {type, filter, page, limit},\n            // });\n          }}\n          onPdfPreview={item => {\n            setModalView({\n              visible: true,\n              children: <>{getTemplate(item.tempCode, item)}</>,\n            });\n          }}\n        />\n      </div>\n      <ModalConfirm\n        {...modalConfirm}\n        click={(type?: string) => {\n          switch (type) {\n            case 'delete': {\n              reportSettingStore.templatePatientResultService\n                .removeTemplatePatientResult({\n                  input: {id: modalConfirm.id},\n                })\n                .then((res: any) => {\n                  if (res.removeTemplatePatientResult.success) {\n                    Toast.success({\n                      message: `😊 ${res.removeTemplatePatientResult.message}`,\n                    });\n                    setModalConfirm({show: false});\n                    reportSettingStore.templatePatientResultService.listTemplatePatientResult();\n                  }\n                });\n              break;\n            }\n            case 'update': {\n              reportSettingStore.templatePatientResultService\n                .update({\n                  input: {\n                    ...modalConfirm.data.fields,\n                    _id: modalConfirm.data.id,\n                  },\n                })\n                .then((res: any) => {\n                  setModalConfirm({show: false});\n                  if (res.updateTemplatePatientResult.success) {\n                    Toast.success({\n                      message: `😊 ${res.updateTemplatePatientResult.message}`,\n                    });\n                    reportSettingStore.templatePatientResultService.listTemplatePatientResult();\n                  }\n                });\n              break;\n            }\n          }\n        }}\n        onClose={() => setModalConfirm({show: false})}\n      />\n      <ModalView\n        {...modalView}\n        onClose={() => setModalView({visible: false})}\n      />\n    </>\n  );\n});\n","import React, {useState} from 'react';\nimport {observer} from 'mobx-react';\nimport {\n  Toast,\n  Buttons,\n  Grid,\n  List,\n  Form,\n  Svg,\n  ModalConfirm,\n  ModalView,\n  ModalViewProps,\n} from '@/library/components';\nimport {Collapsible} from '@/core-components';\nimport {PDFViewer, Document} from '@react-pdf/renderer';\nimport {\n  ReportBodyList,\n  General,\n  Panel,\n  Test,\n  Analyte,\n  AutoCompletePageBrandingCode,\n} from '../components';\nimport {useForm, Controller} from 'react-hook-form';\nimport {RouterFlow} from '@/flows';\nimport {useStores} from '@/stores';\n\nimport {PdfPBTemp0001} from '@features/report-builder/report-template/components/molecules/pdf/page-branding/temp0001/temp0001.component';\n\nconst width = '100%';\nconst height = window.innerHeight / 1.3;\n\nexport const ReportBody = observer(() => {\n  const {loading, routerStore, reportSettingStore} = useStores();\n  const {\n    control,\n    handleSubmit,\n    formState: {errors},\n    setValue,\n    setError,\n    clearErrors,\n    reset,\n  } = useForm();\n\n  const [modalConfirm, setModalConfirm] = useState<any>();\n  const [modalView, setModalView] = useState<ModalViewProps>();\n  const [isInputView, setIsInputView] = useState<boolean>(false);\n  const [isExistsTempCode, setIsExistsTempCode] = useState<boolean>(false);\n\n  const onSave = () => {\n    if (isExistsTempCode)\n      return Toast.error({\n        message: '😔 Already exists report code. Please select diff.',\n      });\n    if (\n      !reportSettingStore.reportBody?.general &&\n      !reportSettingStore.reportBody?.panel &&\n      !reportSettingStore.reportBody?.test &&\n      !reportSettingStore.reportBody?.analyte\n    )\n      return Toast.error({\n        message: '😔 Please enter anyone correct style',\n      });\n    reportSettingStore.reportBodyService\n      .addReportBody({\n        input: {\n          ...reportSettingStore.reportBody,\n        },\n      })\n      .then(res => {\n        if (res.createReportBody.success) {\n          Toast.success({\n            message: `😊 ${res.createReportBody.message}`,\n          });\n          reportSettingStore.reportBodyService.listReportBody();\n        }\n        setIsInputView(false);\n        reset();\n      });\n  };\n\n  const getTemplate = (tempCode: string, data: any) => {\n    if (tempCode)\n      return (\n        <PDFViewer\n          style={{width, height}}\n          showToolbar={reportSettingStore.pageLayout?.isToolbar}\n        >\n          <Document title='Page Branding'>\n            <PdfPBTemp0001\n              data={data}\n              templateSettings={data?.templateSettings}\n            />\n          </Document>\n        </PDFViewer>\n      );\n    else {\n      return (\n        <div className='justify-center items-center'>\n          <h4 className='text-center text-red'>\n            Template not found. Please select correct temp code. 🚨\n          </h4>\n        </div>\n      );\n    }\n  };\n\n  return (\n    <>\n      {RouterFlow.checkPermission(routerStore.userPermission, 'Add') && (\n        <Buttons.ButtonCircleAddRemoveBottom\n          style={{bottom: 50}}\n          show={!isInputView}\n          onClick={() => setIsInputView(!isInputView)}\n        />\n      )}\n      <div\n        className={\n          'rounded-lg shadow-xl p-2 ' + (!isInputView ? 'hidden' : 'shown')\n        }\n      >\n        <Grid cols={2}>\n          <List direction='col' space={4} justify='stretch' fill>\n            <Controller\n              control={control}\n              render={({field: {onChange, value}}) => (\n                <AutoCompletePageBrandingCode\n                  hasError={!!errors.pageBrandingCode}\n                  onSelect={item => {\n                    onChange(item.tempCode);\n                    reportSettingStore.updateReportBody({\n                      ...reportSettingStore.reportBody,\n                      pageBrandingCode: item.tempCode,\n                    });\n                  }}\n                />\n              )}\n              name='pageBrandingCode'\n              rules={{required: true}}\n              defaultValue={reportSettingStore.pageBrandingList}\n            />\n            <Controller\n              control={control}\n              render={({field: {onChange, value}}) => (\n                <Form.Input\n                  label='Report Code'\n                  placeholder='Report Code'\n                  hasError={!!errors.reportCode}\n                  value={value?.toUpperCase()}\n                  onChange={reportCode => {\n                    onChange(reportCode);\n                    reportSettingStore.updateReportBody({\n                      ...reportSettingStore.reportBody,\n                      reportCode: reportCode?.toUpperCase(),\n                    });\n                  }}\n                  onBlur={reportCode => {\n                    reportSettingStore.reportBodyService\n                      .findByFields({\n                        input: {\n                          filter: {\n                            reportCode,\n                          },\n                        },\n                      })\n                      .then(res => {\n                        if (res.findByFieldsReportBody.success) {\n                          Toast.error({\n                            message:\n                              '😔 Already exists report code. Please select diff.',\n                          });\n                          return setIsExistsTempCode(true);\n                        } else {\n                          onChange(reportCode);\n                          return setIsExistsTempCode(false);\n                        }\n                      });\n                  }}\n                />\n              )}\n              name='reportCode'\n              rules={{required: true}}\n              defaultValue=''\n            />\n            <Controller\n              control={control}\n              render={({field: {onChange, value}}) => (\n                <Form.Input\n                  label='Report Name'\n                  placeholder='Report Name'\n                  hasError={!!errors.reportName}\n                  value={value?.toUpperCase()}\n                  onChange={reportName => {\n                    onChange(reportName);\n                    reportSettingStore.updateReportBody({\n                      ...reportSettingStore.reportBody,\n                      reportName: reportName?.toUpperCase(),\n                    });\n                  }}\n                />\n              )}\n              name='reportName'\n              rules={{required: true}}\n              defaultValue=''\n            />\n\n            <div>\n              <Collapsible label='General' children={<General />} />\n              <Collapsible label='Panel' children={<Panel />} />\n            </div>\n          </List>\n          <List direction='col' space={4} justify='stretch' fill>\n            <div>\n              <Collapsible label='Test' children={<Test />} />\n              <Collapsible label='Analyte' children={<Analyte />} />\n            </div>\n          </List>\n        </Grid>\n        <br />\n        <List direction='row' space={3} align='center'>\n          <Buttons.Button\n            size='medium'\n            type='solid'\n            icon={Svg.Save}\n            onClick={handleSubmit(onSave)}\n          >\n            Save\n          </Buttons.Button>\n          <Buttons.Button\n            size='medium'\n            type='outline'\n            icon={Svg.Remove}\n            onClick={() => {\n              window.location.reload();\n            }}\n          >\n            Clear\n          </Buttons.Button>\n        </List>\n      </div>\n      <div className='rounded-lg shadow-xl overflow-auto p-2'>\n        <ReportBodyList\n          data={reportSettingStore.reportBodyList}\n          totalSize={reportSettingStore.reportBodyListCount}\n          isDelete={RouterFlow.checkPermission(\n            routerStore.userPermission,\n            'Delete',\n          )}\n          isEditModify={RouterFlow.checkPermission(\n            routerStore.userPermission,\n            'Edit/Modify',\n          )}\n          onDelete={selectedItem => setModalConfirm(selectedItem)}\n          onSelectedRow={rows => {\n            setModalConfirm({\n              show: true,\n              type: 'delete',\n              id: rows,\n              title: 'Are you sure?',\n              body: 'Delete selected items!',\n            });\n          }}\n          onUpdateItem={(fields: any, id: string) => {\n            setModalConfirm({\n              show: true,\n              type: 'update',\n              data: {fields, id},\n              title: 'Are you sure?',\n              body: 'Update banner!',\n            });\n          }}\n          onPageSizeChange={(page, limit) => {\n            // bannerStore.fetchListBanner(page, limit);\n          }}\n          onFilter={(type, filter, page, limit) => {\n            // bannerStore.BannerService.filter({\n            //   input: {type, filter, page, limit},\n            // });\n          }}\n          onPdfPreview={item => {\n            reportSettingStore.pageLayoutService\n              .findByFields({\n                input: {\n                  filter: {\n                    tempCode: item?.tempCode,\n                  },\n                },\n              })\n              .then(res => {\n                if (res.findByFieldsTemplateSetting.success) {\n                  setModalView({\n                    visible: true,\n                    children: (\n                      <>\n                        {getTemplate(item.tempCode, {\n                          ...item,\n                          templateSettings:\n                            res.findByFieldsTemplateSetting.data[0],\n                        })}\n                      </>\n                    ),\n                  });\n                }\n              });\n          }}\n        />\n      </div>\n      <ModalConfirm\n        {...modalConfirm}\n        click={(type?: string) => {\n          switch (type) {\n            case 'delete': {\n              reportSettingStore.reportBodyService\n                .removeReportBody({\n                  input: {id: modalConfirm.id},\n                })\n                .then((res: any) => {\n                  setModalConfirm({show: false});\n                  if (res.removeReportBody.success) {\n                    Toast.success({\n                      message: `😊 ${res.removeReportBody.message}`,\n                    });\n                    reportSettingStore.reportBodyService.listReportBody();\n                  }\n                });\n              break;\n            }\n            case 'update': {\n              reportSettingStore.reportBodyService\n                .update({\n                  input: {\n                    ...modalConfirm.data.fields,\n                    _id: modalConfirm.data.id,\n                  },\n                })\n                .then((res: any) => {\n                  setModalConfirm({show: false});\n                  if (res.updateReportBody.success) {\n                    Toast.success({\n                      message: `😊 ${res.updateReportBody.message}`,\n                    });\n                    reportSettingStore.reportBodyService.listReportBody();\n                  }\n                });\n              break;\n            }\n          }\n        }}\n        onClose={() => setModalConfirm({show: false})}\n      />\n      <ModalView\n        {...modalView}\n        onClose={() => setModalView({visible: false})}\n      />\n    </>\n  );\n});\n","import React, {useEffect} from 'react';\nimport {observer} from 'mobx-react';\nimport {Header, PageHeading, PageHeadingLabDetails} from '@/library/components';\nimport {useForm} from 'react-hook-form';\n\nimport '@/library/assets/css/accordion.css';\nimport {useStores} from '@/stores';\nimport {Accordion, AccordionItem} from 'react-sanfona';\nimport '@/library/assets/css/accordion.css';\n\nimport {PageBranding} from './page-branding.screen';\nimport {PageLayout} from './page-layout.screen';\nimport {TemplatePatientResult} from './template-patient-result.screen';\nimport {ReportBody} from './report-body.screen';\n\nconst ReportSettings = observer(() => {\n  const {\n    loading,\n    patientManagerStore,\n    routerStore,\n    administrativeDivisions,\n    doctorsStore,\n    loginStore,\n  } = useStores();\n\n  const {\n    control,\n    handleSubmit,\n    formState: {errors},\n    setValue,\n  } = useForm();\n  useEffect(() => {\n    // Default value initialization\n    setValue('species', patientManagerStore.patientManger.species);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [patientManagerStore.patientManger]);\n\n  return (\n    <>\n      <Header>\n        <PageHeading title={routerStore.selectedComponents?.title || ''} />\n        <PageHeadingLabDetails store={loginStore} />\n      </Header>\n      <div>\n        <Accordion>\n          {[\n            {title: 'Page LAYOUT'},\n            {title: 'PAGE BRANDING'},\n            {title: 'REPORT BODY'},\n            {title: 'TEMPLATE PATIENT RESULT'},\n          ].map(item => {\n            return (\n              <AccordionItem\n                title={`${item.title}`}\n                // expanded={item.title === 'PAGE BRANDING'}\n              >\n                {item.title === 'Page LAYOUT' && <PageLayout />}\n                {item.title === 'PAGE BRANDING' && <PageBranding />}\n                {item.title === 'REPORT BODY' && <ReportBody />}\n                {item.title === 'TEMPLATE PATIENT RESULT' && (\n                  <TemplatePatientResult />\n                )}\n              </AccordionItem>\n            );\n          })}\n        </Accordion>\n      </div>\n    </>\n  );\n});\n\nexport default ReportSettings;\n","import React, {useRef} from 'react';\nimport {\n  PdfFooterView,\n  PdfSmall,\n} from '@components';\nimport {Image, View} from '@react-pdf/renderer';\n\ninterface PdfTemp0001FooterProps {\n  data: any;\n}\n\nexport const PdfTemp0001Footer = ({data}: PdfTemp0001FooterProps) => {\n  const mainBoxCSS = useRef<any>({});\n  const titleCSS = useRef<any>({});\n  const subTitleCSS = useRef<any>({});\n  if (data.footer?.mainBoxCSS) {\n    try {\n      mainBoxCSS.current = eval('({' + data.footer?.mainBoxCSS + '})');\n    } catch (e) {\n      mainBoxCSS.current = {};\n    }\n  }\n  if (data.footer?.titleCSS) {\n    try {\n      titleCSS.current = eval('({' + data.footer?.titleCSS + '})');\n    } catch (e) {\n      titleCSS.current = {};\n    }\n  }\n  if (data.footer?.subTitleCSS) {\n    try {\n      subTitleCSS.current = eval('({' + data.footer?.subTitleCSS + '})');\n    } catch (e) {\n      subTitleCSS.current = {};\n    }\n  }\n\n  return (\n    <PdfFooterView fixed style={{...mainBoxCSS.current}}>\n      {data.footer?.backgroundImage && (\n        <>\n          <View\n            style={{\n              position: 'absolute',\n              bottom: 0,\n              left: 0,\n              right: 0,\n              top: 0,\n            }}\n            fixed={true}\n          >\n            <Image\n              object-fit='fill'\n              style={{\n                position: 'absolute',\n                bottom: 0,\n                left: 0,\n                right: 0,\n                top: 0,\n                objectFit: 'fill',\n              }}\n              source={{\n                uri:\n                  typeof data.footer?.backgroundImage == 'object'\n                    ? data.footer?.backgroundImageBase64\n                    : data.footer?.backgroundImage,\n                method: 'GET',\n                headers: {'Cache-Control': 'no-cache'},\n                body: '',\n              }}\n            />\n          </View>\n        </>\n      )}\n      <PdfSmall style={{textAlign: 'center', ...titleCSS.current}}>\n        {data.footer?.title || 'Title'}\n      </PdfSmall>\n      <PdfSmall style={{...subTitleCSS.current}}>{`${\n        data.footer?.subTitle || 'Tel: 1234'\n      }`}</PdfSmall>\n    </PdfFooterView>\n  );\n};\n","import React, {useRef} from 'react';\nimport {\n  PdfHeading,\n  PdfHeader,\n  PdfImage,\n} from '@components';\nimport {Image, View} from '@react-pdf/renderer';\n\ninterface PdfTemp0001HeaderProps {\n  data: any;\n}\n\nexport const PdfTemp0001Header = ({data}: PdfTemp0001HeaderProps) => {\n  console.log({data});\n\n  const headerTitleCSS = useRef<any>({});\n  const headerMainBoxCSS = useRef<any>({});\n  const imageCSS = useRef<any>({});\n  if (data.header?.titleCSS) {\n    try {\n      headerTitleCSS.current = eval('({' + data.header?.titleCSS + '})');\n    } catch (e) {\n      headerTitleCSS.current = {};\n    }\n  }\n  if (data.header?.mainBoxCSS) {\n    try {\n      headerMainBoxCSS.current = eval('({' + data.header?.mainBoxCSS + '})');\n    } catch (e) {\n      headerMainBoxCSS.current = {};\n    }\n  }\n  if (data.header?.logoCSS) {\n    try {\n      imageCSS.current = eval('({' + data.header?.logoCSS + '})');\n    } catch (e) {\n      imageCSS.current = {};\n    }\n  }\n\n  //\n  return (\n    <>\n      <PdfHeader\n        style={{\n          flexDirection: 'row',\n          alignItems: 'center',\n          ...headerMainBoxCSS.current,\n        }}\n        fixed\n      >\n        {data.header?.backgroundImage && (\n          <>\n            <View\n              style={{\n                position: 'absolute',\n                bottom: 0,\n                left: 0,\n                right: 0,\n                top: 0,\n              }}\n              fixed={true}\n            >\n              <Image\n                object-fit='fill'\n                style={{\n                  position: 'absolute',\n                  bottom: 0,\n                  left: 0,\n                  right: 0,\n                  top: 0,\n                  objectFit: 'fill',\n                }}\n                source={{\n                  uri:\n                    typeof data.header?.backgroundImage == 'object'\n                      ? data.header?.backgroundImageBase64\n                      : data.header?.backgroundImage,\n                  method: 'GET',\n                  headers: {'Cache-Control': 'no-cache'},\n                  body: '',\n                }}\n              />\n            </View>\n          </>\n        )}\n        {data.header?.logo && (\n          <PdfImage\n            src={data.header?.logo}\n            style={{\n              width: 50,\n              height: 50,\n              borderRadius: 25,\n              marginHorizontal: 10,\n              ...imageCSS.current,\n            }}\n          />\n        )}\n        <PdfHeading style={headerTitleCSS.current}>\n          {data.header?.title || 'Title'}\n        </PdfHeading>\n      </PdfHeader>\n    </>\n  );\n};\n","import React, {useRef} from 'react';\nimport {\n  PdfRegular,\n  PdfSubHeader,\n} from '@components';\n\ninterface PdfTemp0001SubHeaderProps {\n  data: any;\n}\n\nexport const PdfTemp0001SubHeader = ({data}: PdfTemp0001SubHeaderProps) => {\n  const mainBoxCSS = useRef<any>({});\n  const titleCSS = useRef<any>({});\n  const subTitleCSS = useRef<any>({});\n  if (data.subHeader?.mainBoxCSS) {\n    try {\n      mainBoxCSS.current = eval('({' + data.subHeader?.mainBoxCSS + '})');\n    } catch (e) {\n      mainBoxCSS.current = {};\n    }\n  }\n  if (data.subHeader?.titleCSS) {\n    try {\n      titleCSS.current = eval('({' + data.subHeader?.titleCSS + '})');\n    } catch (e) {\n      titleCSS.current = {};\n    }\n  }\n  if (data.subHeader?.subTitleCSS) {\n    try {\n      subTitleCSS.current = eval('({' + data.subHeader?.subTitleCSS + '})');\n    } catch (e) {\n      subTitleCSS.current = {};\n    }\n  }\n\n  return (\n    <PdfSubHeader style={{...mainBoxCSS.current}} fixed>\n      <PdfRegular style={{...titleCSS.current}}>\n        {data.subHeader?.title || 'Title'}\n      </PdfRegular>\n      <PdfRegular style={{...subTitleCSS.current}}>{`${\n        data.subHeader?.subTitle || 'web-url'\n      }`}</PdfRegular>\n    </PdfSubHeader>\n  );\n};\n","import React, {useRef} from 'react';\nimport {\n  Font,\n} from '@react-pdf/renderer';\nimport {\n  PdfView,\n  PdfFooterView,\n} from '@components';\nimport {observer} from 'mobx-react';\nimport {PdfTSTemp0001} from '../../page-layout/temp0001/temp0001.component';\n\nimport {PdfTemp0001Header} from './temp0001-header.component';\nimport {PdfTemp0001SubHeader} from './temp0001-sub-header.component';\nimport {PdfTemp0001Footer} from './temp0001-footer.component';\n\nFont.register({\n  family: 'arimaRegular',\n  src: '../../../assets/fonts/arima/Arima-Regular.ttf',\n});\n\ninterface PdfPBTemp0001Props {\n  data: any;\n  templateSettings?: any;\n  isWithHeader?: boolean;\n  children?: any;\n}\n\nexport const PdfPBTemp0001 = observer(\n  ({\n    data,\n    templateSettings,\n    isWithHeader = true,\n    children,\n  }: PdfPBTemp0001Props) => {\n    const pageNumberCSS = useRef<any>({});\n    if (data?.pageNumber?.pageNumberCSS) {\n      try {\n        pageNumberCSS.current = eval(\n          '({' + data?.pageNumber?.pageNumberCSS + '})',\n        );\n      } catch (e) {\n        pageNumberCSS.current = {};\n      }\n    }\n\n    return (\n      <PdfTSTemp0001\n        height={window.innerHeight / 1.3}\n        documentTitle='Page Branding'\n        isToolbar={templateSettings?.isToolbar}\n        isBackgroundImage={templateSettings?.isBackgroundImage || ''}\n        backgroundImage={templateSettings?.backgroundImage || ''}\n        mainBoxCSS={templateSettings?.mainBoxCSS}\n        pageSize={templateSettings?.pageSize}\n        isWithHeader={isWithHeader}\n        children={\n          <>\n            <PdfView style={{height: 100}} fixed mh={0} p={0}>\n              {isWithHeader && (\n                <>\n                  {/* Header */}\n                  {data?.isHeader && <PdfTemp0001Header data={data} />}\n\n                  {/* Sub Header */}\n                  {data?.isSubHeader && <PdfTemp0001SubHeader data={data} />}\n                </>\n              )}\n            </PdfView>\n\n            {/* children */}\n            {children}\n\n            {/* Page Number */}\n            {/* {data?.isPdfPageNumber && (\n              <PdfPageNumber style={{...pageNumberCSS.current}} />\n            )} */}\n\n            <PdfFooterView fixed bg='transparent' style={{height: 40}} p={0}>\n              {isWithHeader && data?.isFooter && (\n                <PdfTemp0001Footer data={data} />\n              )}\n            </PdfFooterView>\n          </>\n        }\n      />\n    );\n  },\n);\n","import React, {useRef} from 'react';\nimport {\n  Page,\n  StyleSheet,\n  Font,\n  Image,\n  View,\n} from '@react-pdf/renderer';\n\nFont.register({\n  family: 'arimaRegular',\n  src: '../../../assets/fonts/arima/Arima-Regular.ttf',\n});\n\nconst styles = StyleSheet.create({\n  page: {\n    backgroundColor: '#ffffff',\n    paddingBottom: '80pt',\n  },\n});\n\ninterface PdfTSTemp0001Props {\n  width?: string | number;\n  height?: number;\n  documentTitle?: string;\n  isToolbar?: boolean;\n  isBackgroundImage?: boolean;\n  backgroundImage?: string;\n  pageSize: any;\n  mainBoxCSS?: any;\n  isWithHeader?: boolean;\n  children: React.ReactNode;\n}\n\nexport const PdfTSTemp0001 = ({\n  width = '100%',\n  height = 300,\n  documentTitle = 'Page Layout',\n  isToolbar = false,\n  isBackgroundImage = false,\n  backgroundImage = '',\n  mainBoxCSS = {},\n  pageSize,\n  isWithHeader = true,\n  children,\n}: PdfTSTemp0001Props) => {\n  const boxCSS = useRef<any>(styles.page);\n  if (mainBoxCSS) {\n    try {\n      boxCSS.current = eval('({' + mainBoxCSS + '})');\n    } catch (e) {\n      boxCSS.current = styles.page;\n    }\n  }\n\n  return (\n    <>\n      {isToolbar ? (\n        <Page size={pageSize} style={boxCSS.current}>\n          {isBackgroundImage && isWithHeader && (\n            <View\n              style={{\n                position: 'absolute',\n                bottom: 0,\n                left: 0,\n                right: 0,\n                top: 0,\n              }}\n              fixed={true}\n            >\n              <Image\n                object-fit='fill'\n                style={{\n                  position: 'absolute',\n                  bottom: 0,\n                  left: 0,\n                  right: 0,\n                  top: 0,\n                  objectFit: 'fill',\n                }}\n                src={backgroundImage}\n              />\n            </View>\n          )}\n\n          {children}\n        </Page>\n      ) : (\n        <Page size={pageSize} style={boxCSS.current}>\n          {isBackgroundImage && isWithHeader && (\n            <View\n              style={{\n                position: 'absolute',\n                bottom: 0,\n                left: 0,\n                right: 0,\n                top: 0,\n              }}\n              fixed={true}\n            >\n              <Image\n                object-fit='fill'\n                style={{\n                  position: 'absolute',\n                  bottom: 0,\n                  left: 0,\n                  right: 0,\n                  top: 0,\n                  objectFit: 'fill',\n                }}\n                src={{\n                  uri: backgroundImage,\n                  method: 'GET',\n                  headers: {'Cache-Control': 'no-cache'},\n                  body: '',\n                }}\n              />\n            </View>\n          )}\n          {children}\n        </Page>\n      )}\n    </>\n  );\n};\n"],"names":["PageLayoutList","observer","props","_jsx","_Fragment","children","style","position","TableBootstrap","id","data","totalSize","columns","dataField","text","hidden","csvExport","headerClasses","sort","editable","csvFormatter","col","row","concat","isToolbar","formatter","cell","Form","value","onChange","onUpdateItem","_id","isBackgroundImage","backgroundImage","src","alt","className","editorRenderer","editorProps","column","rowIndex","columnIndex","_jsxs","placeholder","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","e","wrap","_context","prev","next","target","files","stop","_x","apply","arguments","Buttons","size","type","icon","Svg","onClick","pageSize","selected","map","item","index","label","color","backgroundColor","onBlur","mainBoxCSS","defaultValue","isDelete","cellContent","Tooltip","tooltipText","Icons","onPdfPreview","onDelete","show","title","body","classes","colIndex","_props$data","zIndex","length","isEditModify","isSelectRow","fileName","onSelectedRow","rows","onPageSizeChange","page","onFilter","filter","clearAllFilter","sectionSetting","version","environment","dynamicStylingFields","hideExcelSheet","AutoCompleteLayoutCode","_ref$hasError","hasError","onSelect","displayValue","_useStores","useStores","loading","reportSettingStore","routerStore","AutoCompleteFilterSingleSelectMultiFieldsDisplay","loader","list","pageLayoutList","displayKey","PageBrandingHeader","_useForm","useForm","control","errors","handleSubmit","formState","reset","setValue","setError","clearErrors","useEffect","isClearReset","Grid","cols","Controller","render","_ref$field","field","_reportSettingStore$p","updatePageBranding","_objectSpread","pageBranding","header","name","rules","required","_ref2","_ref2$field","titleCSS","_ref3","_ref3$field","headerLogo","_ref4","_reportSettingStore$p2","logo","_ref5","_ref5$field","logoCSS","_ref6","_ref6$field","_ref7","_callee2","_context2","t0","t1","t2","t3","t4","t5","t6","t7","resizeFile","t8","sent","t9","backgroundImageBase64","t10","t11","t12","call","_x2","_ref8","_ref8$field","PageBrandingSubHeader","subHeader","subTitle","_ref4$field","subTitleCSS","PageBrandingFooter","footerTitle","footer","_ref7$field","_reportSettingStore$p3","PageNumber","pageNumberCSS","pageNumber","PageBrandingList","layoutCode","tempCode","isHeader","_row$header","_row$header2","_row$header3","_row$header4","_row$header5","_row$header6","_row$header7","_row$header8","_row$header9","isSubHeader","_row$subHeader","_row$subHeader2","_row$subHeader3","_row$subHeader4","_row$subHeader5","_row$subHeader6","_row$subHeader7","_row$subHeader8","_row$subHeader9","_row$subHeader10","isFooter","_row$footer","_row$footer2","_row$footer3","_row$footer4","_row$footer5","_row$footer6","_row$footer7","_row$footer8","_row$footer9","_callee3","_context3","_x3","_row$footer10","_row$footer11","isPdfPageNumber","_row$pageNumber","_row$pageNumber2","General","_reportSettingStore$r","_reportSettingStore$r2","_reportSettingStore$r4","_reportSettingStore$r5","_reportSettingStore$r7","_reportSettingStore$r8","_reportSettingStore$r10","_reportSettingStore$r11","_reportSettingStore$r13","_reportSettingStore$r14","_reportSettingStore$r16","_reportSettingStore$r17","_reportSettingStore$r19","_reportSettingStore$r20","_reportSettingStore$r22","_reportSettingStore$r23","_reportSettingStore$r25","_reportSettingStore$r26","_reportSettingStore$r28","_reportSettingStore$r29","List","direction","space","justify","fill","reportBody","general","printDepartmentNameCSS","_reportSettingStore$r3","updateReportBody","isToggleLabel","isPrintDepartmentName","_reportSettingStore$r6","packageNamePrintCSS","_reportSettingStore$r9","isPackageNamePrint","_reportSettingStore$r12","reportGroupingCSS","_reportSettingStore$r15","isReportGrouping","_reportSettingStore$r18","reportOrderCSS","_reportSettingStore$r21","isReportOrder","_reportSettingStore$r24","methodFlagCSS","_reportSettingStore$r27","isMethodFlag","_reportSettingStore$r30","Panel","panel","printPanelNameCSS","isPrintPanelName","methodNameCSS","isMethodName","panelInterpretationCSS","isPanelInterpretation","Test","test","printTestNameCSS","isPrintTestName","testInterpretationCSS","isTestInterpretation","Analyte","_reportSettingStore$r31","_reportSettingStore$r32","_reportSettingStore$r34","_reportSettingStore$r35","_reportSettingStore$r37","_reportSettingStore$r38","_reportSettingStore$r40","_reportSettingStore$r41","_reportSettingStore$r43","_reportSettingStore$r44","_reportSettingStore$r46","_reportSettingStore$r47","_reportSettingStore$r49","_reportSettingStore$r50","_reportSettingStore$r52","_reportSettingStore$r53","_reportSettingStore$r55","_reportSettingStore$r56","_reportSettingStore$r58","_reportSettingStore$r59","_reportSettingStore$r61","_reportSettingStore$r62","_reportSettingStore$r64","_reportSettingStore$r65","_reportSettingStore$r67","_reportSettingStore$r68","_reportSettingStore$r70","_reportSettingStore$r71","_reportSettingStore$r73","_reportSettingStore$r74","_reportSettingStore$r76","_reportSettingStore$r77","analyte","printAnalyteNameCSS","isPrintAnalyteName","headerItemCSS","isHeaderItem","abnFlagCSS","isAbnFlag","criticalCSS","isCritical","loNorCSS","_reportSettingStore$r33","isLoNor","_reportSettingStore$r36","hiNorCSS","_reportSettingStore$r39","isHiNor","_reportSettingStore$r42","resultStatusCSS","_reportSettingStore$r45","isResultStatus","_reportSettingStore$r48","methodCSS","_reportSettingStore$r51","isMethod","_reportSettingStore$r54","reportableCSS","_reportSettingStore$r57","isReportable","_reportSettingStore$r60","interpretationCSS","_reportSettingStore$r63","isInterpretation","_reportSettingStore$r66","conclusionCSS","_reportSettingStore$r69","isConclusion","_reportSettingStore$r72","printAnalyteInterpretationCSS","_reportSettingStore$r75","isPrintAnalyteInterpretation","_reportSettingStore$r78","ReportBodyList","AutoCompletePageBrandingCode","pageBrandingCode","JSON","stringify","pageBrandingList","ReportBodyComponents","reportBodyList","EndOfPageComponents","_reportSettingStore$s","libraryStore","AutoCompleteFilterMutiSelectMultiFieldsDisplay","listLibrary","selectedItemTemplatePatientResult","endOfPage","onUpdate","_reportSettingStore$s2","_","o","updateLibraryList","listLibraryCopy","libraryService","filterByFields","input","fields","srText","limit","_reportSettingStore$s3","items","push","updateSelectedItemTemplatePatientResult","EndOfReportComponents","endOfReport","TemplatePatientResultList","reportTemplateType","_row$reportBody","reportCode","reportName","editor","Type","TEXTAREA","reportOrder","Number","parseInt","_row$endOfPage","details","_row$endOfReport","_defineProperty","PageBranding","window","innerHeight","_reportSettingStore$p5","_useState","useState","_useState2","_slicedToArray","modalConfirm","setModalConfirm","_useState3","_useState4","modalView","setModalView","_useState5","_useState6","isInputView","setIsInputView","_useState7","_useState8","isExistsTempCode","setIsExistsTempCode","_useState9","_useState10","setClearReset","getTemplate","_reportSettingStore$p4","PDFViewer","width","height","showToolbar","pageLayout","Document","PdfPBTemp0001","templateSettings","RouterFlow","userPermission","bottom","brandingCode","toUpperCase","pageBrandingService","findByFields","then","res","findByFieldsPageBranding","success","Toast","error","message","brandingTitle","headerVisible","subHeaderVisible","footerVisible","Accordion","accordionItem","getAccordionItem","AccordionItem","expanded","align","addPageBranding","undefined","createPageBranding","resetReportBody","location","reload","overflowX","pageBrandingListCount","selectedItem","pageLayoutService","findByFieldsTemplateSetting","visible","ModalConfirm","click","removePageBranding","listPageBranding","update","setTimeout","onClose","ModalView","PageLayout","_reportSettingStore$p6","_reportSettingStore$p7","updatePageLayout","tempName","warning","isToolBar","href","rel","PdfTSTemp0001","documentTitle","PdfMedium","addTemplateSetting","createTemplateSetting","pageLayoutListCount","removeTemplateSetting","listTemplateSetting","updateTemplateSetting","TemplatePatientResult","isExistsRecord","setIsExistsRecord","_reportSettingStore$t","_reportSettingStore$t2","updateTemplatePatientResult","templatePatientResult","templatePatientResultService","templateCode","templateTitle","findByFieldsTemplatePatientResult","_reportSettingStore$t3","_reportSettingStore$t4","_reportSettingStore$t5","_reportSettingStore$t6","addTemplatePatientResult","createTemplatePatientResult","SelectedItemsTemplatePatientResult","templatePatientResultList","templatePatientResultListCount","listTemplatePatientResult","removeTemplatePatientResult","ReportBody","reportBodyService","findByFieldsReportBody","Collapsible","addReportBody","createReportBody","listReportBody","reportBodyListCount","removeReportBody","_routerStore$selected","patientManagerStore","loginStore","administrativeDivisions","doctorsStore","patientManger","species","Header","PageHeading","selectedComponents","PageHeadingLabDetails","store","PdfTemp0001Footer","_data$footer","_data$footer3","_data$footer5","_data$footer7","_data$footer8","_data$footer9","_data$footer10","_data$footer11","_data$footer12","useRef","_data$footer2","current","eval","_data$footer4","_data$footer6","PdfFooterView","fixed","View","left","right","top","Image","objectFit","source","uri","method","headers","PdfSmall","textAlign","PdfTemp0001Header","_data$header","_data$header3","_data$header5","_data$header7","_data$header8","_data$header9","_data$header10","_data$header11","_data$header12","_data$header13","console","log","headerTitleCSS","headerMainBoxCSS","imageCSS","_data$header2","_data$header4","_data$header6","PdfHeader","flexDirection","alignItems","PdfImage","borderRadius","marginHorizontal","PdfHeading","PdfTemp0001SubHeader","_data$subHeader","_data$subHeader3","_data$subHeader5","_data$subHeader7","_data$subHeader8","_data$subHeader2","_data$subHeader4","_data$subHeader6","PdfSubHeader","PdfRegular","Font","register","family","_data$pageNumber","_ref$isWithHeader","isWithHeader","_data$pageNumber2","PdfView","mh","p","bg","styles","StyleSheet","create","paddingBottom","_ref$width","_ref$height","_ref$documentTitle","_ref$isToolbar","_ref$isBackgroundImag","_ref$backgroundImage","_ref$mainBoxCSS","boxCSS","Page"],"sourceRoot":""}