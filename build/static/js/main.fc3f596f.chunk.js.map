{"version":3,"sources":["features/banner/index.ts","features/collection/labs/index.ts","features/collection/deginisation/index.ts","features/collection/department/index.ts","features/collection/roles/util/validation.ts","features/collection/roles/scenes/role.tsx","features/collection/roles/index.ts","features/users/pipes/index.ts","features/users/index.ts","config/styles.ts","config/api.ts","library/clients/limsplus-client.ts","library/clients/storage-client.ts","library/utils/validation.ts","library/utils/utilites.ts","library/assets/applogo.jpg","features/users/scenes/user.tsx","features/changePassword/scenes/changePassword.tsx","features/collection/labs/util/validation.ts","features/collection/labs/scenes/Lab.tsx","features/collection/deginisation/util/validation.ts","features/collection/deginisation/scenes/deginisation.tsx","features/collection/department/util/validation.ts","features/collection/department/scenes/department.tsx","library/models/index.ts","features/banner/scenes/banner.tsx","library/components/list.tsx","library/components/form.tsx","library/components/button.tsx","library/components/icon.tsx","library/components/grid.tsx","library/components/modal/modalChangePassword.tsx","library/components/modal/modalConfirm.tsx","library/components/header.tsx","library/components/page-heading.tsx","library/stores/rootStore.ts","library/stores/index.ts","features/users/services/index.ts","redux/reducers/sidebarReducers.ts","redux/reducers/layoutReducer.ts","redux/reducers/themeReducer.ts","redux/reducers/index.ts","redux/constants.ts","redux/store/index.ts","layouts/components/Loader.tsx","layouts/components/Async.tsx","routes/index.ts","layouts/components/Wrapper.tsx","layouts/components/Sidebar.tsx","layouts/components/Main.tsx","layouts/components/Navbar.tsx","redux/actions/sidebarActions.ts","layouts/components/Content.tsx","layouts/components/Footer.tsx","layouts/components/Settings.tsx","redux/actions/layoutActions.ts","layouts/Dashboard.tsx","layouts/Landing.tsx","layouts/Auth.tsx","features/login/scenes/Page404.tsx","layouts/components/ScrollToTop.tsx","routes/Routes.tsx","App.tsx","index.tsx","features/collection/labs/services/index.ts","features/collection/deginisation/services/index.ts","features/collection/department/services/index.ts","features/collection/roles/services/index.ts","features/banner/services/index.ts","features/login/scenes/login.tsx","features/users/stores/index.ts","features/collection/labs/stores/index.ts","features/collection/deginisation/stores/index.ts","features/collection/department/stores/index.ts","features/collection/roles/stores/index.ts","features/banner/stores/index.ts"],"names":["Stores","constraintsRole","code","presence","length","minimum","message","description","SearchBar","Search","ClearSearchButton","ExportCSVButton","CSVExport","Role","observer","rootStore","useContext","RootStoreContext","useState","errors","setErrors","deleteItem","setDeleteItem","title","subTitle","className","cols","direction","space","justify","fill","Input","label","id","placeholder","value","roleStore","role","onChange","Util","single","updateRole","name","align","size","type","icon","LibraryComponents","Save","onClick","undefined","setProcessLoading","Services","then","success","fetchListRole","clear","warning","Remove","keyField","data","listRole","columns","dataField","text","sort","editable","csvExport","formatter","cellContent","row","show","_id","body","search","exportCSV","fileName","moment","Date","format","noAutoBOM","blobType","props","searchProps","csvProps","baseProps","noDataIndication","hover","ModalConfirm","click","res","status","onLogin","loginStore","Promise","resolve","reject","catch","error","console","log","addUser","userStore","user","Scenes","Pipes","Definition","COLORS","LIMSPLUS_API_HOST","createLimsPlusClient","token","Axios","create","baseURL","Config","headers","getItem","key","a","result","window","localStorage","JSON","parse","setItem","stringify","validate","extend","validators","datetime","utc","options","dateOnly","constraintsLogin","lab","userId","password","pattern","constraintsChangePassword","oldPassword","newPassword","confirmPassword","constraintsUser","deginisation","fullName","department","exipreDate","earliest","subtract","exipreDays","checkNotUndefined","object","module","exports","Users","React","Contexts","deleteUser","setDeleteUser","useEffect","loadUser","afterSaveCell","oldValue","newValue","column","fluid","Utils","updateUser","onBlur","setExitsUserId","checkExitsUserId","InputWrapper","e","target","selected","labStore","listLabs","map","item","deginisationStore","listDeginisation","InputRadio","values","departmentStore","listDepartment","InputDate","date","add","formatDate","Features","style","overflowX","userList","width","editorRenderer","editorProps","rowIndex","columnIndex","index","cell","editor","Type","SELECT","getOptions","cellEdit","cellEditFactory","mode","blurToSave","ChangePassword","history","useHistory","changePassword","setChangePassword","ModalChangePassword","Clients","isLogin","changePass","Object","assign","push","close","constraintsLabs","Lab","labs","updateLabs","fetchListLab","constraintsDeginisation","Deginisation","updateDescription","fetchListDeginisation","constraintsDepartment","Department","Container","updateDepartment","fetchListDepartment","StatusCode","Banner","bannerStore","banner","updateBanner","InputFile","image","files","LibraryModels","CREATED","setTimeout","location","reload","listBanner","src","alt","fetchListBanner","List","spacingClass","paddingClass","padding","backgroundClass","background","alignClass","justifyClass","fillClass","children","Label","htmlFor","required","disabled","autoComplete","checked","SelectOption","MultilineInput","rows","Button","buttonSizeClass","buttonColorClass","roundedClass","pill","Icon","buttonOffset","getIconClass","iconSizeClass","iconColorClass","stroke","viewBox","xmlns","strokeLinecap","strokeLinejoin","strokeWidth","d","Add","Check","Plus","aria-hidden","Spinner","cx","cy","r","stroke-width","Tick","small","Grid","updateChangePassword","transition","showModal","setShowModal","Header","PageHeading","store","version","processLoading","this","ignore","observable","UsersStore","LabStore","DeginisationStore","DepartmentStore","RoleStore","BannerStore","action","corporate","primary","secondary","tertiary","info","danger","modern","classic","AsyncTrunk","RootStore","storage","storageKey","delay","init","createContext","post","get","delete","updateUserSingleFiled","userInfo","initialState","isOpen","isSticky","isBoxed","themes","currentTheme","combineReducers","sidebar","state","actions","layout","theme","payload","toastr","createStore","rootReducer","Loader","Row","color","asyncComponent","importComponent","component","default","setState","C","Component","defaultDashboard","async","collection_Lab","collection_Deginisation","collection_Department","collection_Role","loginRoutes","path","login","dashboardRoutes","header","SlidersIcon","bannerRoutes","LayoutIcon","collectionRoutes","userRoutes","dashboardRouter","loginRouter","connect","SidebarCategory","withRouter","badgeColor","badgeText","to","pathname","indexOf","data-toggle","aria-expanded","Badge","Collapse","SidebarItem","activeClassName","Sidebar","pathName","_routes","routes","forEach","route","isActive","open","isHome","containsHome","initOpenRoutes","openRoutes","setOpenRoutes","href","category","Fragment","keys","toggle","inputLogin","faCircle","Main","classNames","notifications","time","messages","avatar","NavbarDropdown","count","showBadge","footer","UncontrolledDropdown","nav","inNavbar","DropdownToggle","DropdownMenu","right","ListGroup","DropdownItem","NavbarDropdownItem","ListGroupItem","noGutters","Col","xs","app","dispatch","Navbar","light","expand","Form","inline","aria-label","navbar","Nav","MessageCircle","spacing","BellOff","caret","divider","clearLogin","Content","Footer","getFullYear","Settings","setWrapperRef","bind","handleClickOutside","document","addEventListener","removeEventListener","node","event","ref","toggleSidebar","tag","faAngleRight","Dashboard","fetchData","Landing","Auth","sm","md","lg","Page404","ScrollToTop","prevProps","scrollTo","childRoutes","Layout","exact","render","Routes","LandingLayout","loginRouters","DashboardLayout","App","timeOut","newestOnTop","position","transitionIn","transitionOut","progressBar","closeOnToastrClick","BOTTOM_RIGHT","ReactDOM","StrictMode","getElementById","addLab","deleteLab","addDeginisation","deleteDeginisation","adddepartment","deletedepartment","addrole","deleterole","addBanner","form","FormData","append","Accept","deleteBanner","Login","Assets","Item","interval","maxWidth","maxHeight","minWidth","minHeight","updateInputUser","initUser","initLogin","initLab"],"mappings":"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","file":"static/js/main.fc3f596f.chunk.js","sourcesContent":["import * as Scenes from \"./scenes\";\r\nimport * as Services from \"./services\";\r\n// import * as Pipes from \"./pipes\";\r\nimport Stores from \"./stores\";\r\nimport Definition from \"./definition.json\";\r\n\r\nexport default { Scenes, Stores, Services, Definition };\r\n","import * as Scenes from \"./scenes\";\r\nimport * as Services from \"./services\";\r\nimport Stores from \"./stores\";\r\nimport Definition from \"./definition.json\";\r\n\r\nexport default { Scenes, Stores, Services, Definition };\r\n","import * as Scenes from \"./scenes\";\r\nimport * as Services from \"./services\";\r\nimport Stores from \"./stores\";\r\nimport Definition from \"./definition.json\";\r\n\r\nexport default { Scenes, Stores, Services, Definition };\r\n","import * as Scenes from \"./scenes\";\r\nimport * as Services from \"./services\";\r\nimport Stores from \"./stores\";\r\nimport Definition from \"./definition.json\";\r\n\r\nexport default { Scenes, Stores, Services, Definition };\r\n","import validate from \"validate.js\";\r\nexport { validate };\r\nexport const constraintsRole = {\r\n  code: {\r\n    presence: true,\r\n    length: {\r\n      minimum: 4,\r\n      message: \"Code must be least 4 characters \",\r\n    },\r\n  },\r\n  description: {\r\n    presence: true,\r\n    length: {\r\n      minimum: 4,\r\n      message: \"Description must be least 4 characters\",\r\n    },\r\n  },\r\n};\r\n","import React, { useState, useContext } from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport * as LibraryComponents from \"@lp/library/components\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport ToolkitProvider, {\r\n  Search,\r\n  CSVExport,\r\n} from \"react-bootstrap-table2-toolkit\";\r\nimport moment from \"moment\";\r\n\r\nimport * as Models from \"../models\";\r\nimport * as Util from \"../util\";\r\nimport RootStoreContext from \"@lp/library/stores\";\r\nimport * as Services from \"../services\";\r\n\r\nconst { SearchBar, ClearSearchButton } = Search;\r\nconst { ExportCSVButton } = CSVExport;\r\n\r\nconst Role = observer(() => {\r\n  const rootStore = useContext(RootStoreContext.rootStore);\r\n  const [errors, setErrors] = useState<Models.IRole>();\r\n  const [deleteItem, setDeleteItem] = useState<any>({});\r\n\r\n  return (\r\n    <>\r\n      <LibraryComponents.Header>\r\n        <LibraryComponents.PageHeading\r\n          title=\"Role\"\r\n          subTitle=\"Add, Edit & Delete Lab\"\r\n        />\r\n      </LibraryComponents.Header>\r\n      <div className=\" mx-auto  p-4  flex-wrap\">\r\n        <div className=\"m-1 p-2 rounded-lg shadow-xl\">\r\n          <LibraryComponents.Grid cols={2}>\r\n            <LibraryComponents.List\r\n              direction=\"col\"\r\n              space={4}\r\n              justify=\"stretch\"\r\n              fill\r\n            >\r\n              <LibraryComponents.Form.Input\r\n                label=\"Code\"\r\n                id=\"code\"\r\n                placeholder=\"Code\"\r\n                value={rootStore.roleStore.role?.code}\r\n                onChange={(code) => {\r\n                  setErrors({\r\n                    ...errors,\r\n                    code: Util.validate.single(code, Util.constraintsRole.code),\r\n                  });\r\n                  rootStore.roleStore.updateRole({\r\n                    ...rootStore.roleStore.role,\r\n                    code,\r\n                  });\r\n                }}\r\n              />\r\n              {errors?.code && (\r\n                <span className=\"text-red-600 font-medium relative\">\r\n                  {errors.code}\r\n                </span>\r\n              )}\r\n              <LibraryComponents.Form.Input\r\n                label=\"Description\"\r\n                name=\"description\"\r\n                placeholder=\"Description\"\r\n                value={rootStore.roleStore.role?.description}\r\n                onChange={(description) => {\r\n                  setErrors({\r\n                    ...errors,\r\n                    description: Util.validate.single(\r\n                      description,\r\n                      Util.constraintsRole.description\r\n                    ),\r\n                  });\r\n                  rootStore.roleStore.updateRole({\r\n                    ...rootStore.roleStore.role,\r\n                    description,\r\n                  });\r\n                }}\r\n              />\r\n\r\n              {errors?.description && (\r\n                <span className=\"text-red-600 font-medium relative\">\r\n                  {errors.description}\r\n                </span>\r\n              )}\r\n            </LibraryComponents.List>\r\n          </LibraryComponents.Grid>\r\n          <br />\r\n\r\n          <LibraryComponents.List direction=\"row\" space={3} align=\"center\">\r\n            <LibraryComponents.Button\r\n              size=\"medium\"\r\n              type=\"solid\"\r\n              icon={LibraryComponents.Icons.Save}\r\n              onClick={() => {\r\n                if (\r\n                  Util.validate(\r\n                    rootStore.roleStore.role,\r\n                    Util.constraintsRole\r\n                  ) === undefined\r\n                ) {\r\n                  rootStore.setProcessLoading(true);\r\n                  Services.addrole(rootStore.roleStore.role).then(() => {\r\n                    rootStore.setProcessLoading(false);\r\n                    LibraryComponents.ToastsStore.success(`Role created.`);\r\n                    rootStore.roleStore.fetchListRole();\r\n                    rootStore.roleStore.clear();\r\n                  });\r\n                } else {\r\n                  LibraryComponents.ToastsStore.warning(\r\n                    \"Please enter all information!\"\r\n                  );\r\n                }\r\n              }}\r\n            >\r\n              Save\r\n            </LibraryComponents.Button>\r\n            <LibraryComponents.Button\r\n              size=\"medium\"\r\n              type=\"outline\"\r\n              icon={LibraryComponents.Icons.Remove}\r\n              onClick={() => {\r\n                rootStore.roleStore.clear();\r\n              }}\r\n            >\r\n              Clear\r\n            </LibraryComponents.Button>\r\n          </LibraryComponents.List>\r\n        </div>\r\n        <br />\r\n        <div className=\"m-1 p-2 rounded-lg shadow-xl\">\r\n          <ToolkitProvider\r\n            keyField=\"id\"\r\n            data={rootStore.roleStore.listRole || []}\r\n            columns={[\r\n              {\r\n                dataField: \"code\",\r\n                text: \"Code\",\r\n                sort: true,\r\n              },\r\n              {\r\n                dataField: \"description\",\r\n                text: \"Description\",\r\n              },\r\n              {\r\n                dataField: \"opration\",\r\n                text: \"Delete\",\r\n                editable: false,\r\n                csvExport: false,\r\n                formatter: (cellContent, row) => (\r\n                  <>\r\n                    <LibraryComponents.Button\r\n                      size=\"small\"\r\n                      type=\"outline\"\r\n                      icon={LibraryComponents.Icons.Remove}\r\n                      onClick={() => {\r\n                        setDeleteItem({\r\n                          show: true,\r\n                          id: row._id,\r\n                          title: \"Are you sure?\",\r\n                          body: `Delete ${row.description} lab!`,\r\n                        });\r\n                      }}\r\n                    >\r\n                      Delete\r\n                    </LibraryComponents.Button>\r\n                  </>\r\n                ),\r\n              },\r\n            ]}\r\n            search\r\n            exportCSV={{\r\n              fileName: `roles_${moment(new Date()).format(\r\n                \"YYYY-MM-DD HH:mm\"\r\n              )}.csv`,\r\n              noAutoBOM: false,\r\n              blobType: \"text/csv;charset=ansi\",\r\n            }}\r\n          >\r\n            {(props) => (\r\n              <div>\r\n                <SearchBar {...props.searchProps} />\r\n                <ClearSearchButton\r\n                  className={`inline-flex ml-4 bg-gray-500 items-center  small outline shadow-sm  font-medium  disabled:opacity-50 disabled:cursor-not-allowed text-center`}\r\n                  {...props.searchProps}\r\n                />\r\n                <ExportCSVButton\r\n                  className={`inline-flex ml-2 bg-gray-500 items-center  small outline shadow-sm  font-medium  disabled:opacity-50 disabled:cursor-not-allowed text-center`}\r\n                  {...props.csvProps}\r\n                >\r\n                  Export CSV!!\r\n                </ExportCSVButton>\r\n                <hr />\r\n                <BootstrapTable\r\n                  {...props.baseProps}\r\n                  noDataIndication=\"Table is Empty\"\r\n                  hover\r\n                  // cellEdit={cellEditFactory({\r\n                  //   mode: \"dbclick\",\r\n                  //   blurToSave: true,\r\n                  //   // afterSaveCell,\r\n                  // })}\r\n                />\r\n              </div>\r\n            )}\r\n          </ToolkitProvider>\r\n        </div>\r\n        <LibraryComponents.Modal.ModalConfirm\r\n          {...deleteItem}\r\n          click={() => {\r\n            Services.deleterole(deleteItem.id).then((res: any) => {\r\n              if (res.status) {\r\n                LibraryComponents.ToastsStore.success(`Role deleted.`);\r\n                setDeleteItem({ show: false });\r\n                rootStore.roleStore.fetchListRole();\r\n              }\r\n            });\r\n          }}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default Role;\r\n","import * as Scenes from \"./scenes\";\r\nimport * as Services from \"./services\";\r\nimport Stores from \"./stores\";\r\nimport Definition from \"./definition.json\";\r\n\r\nexport default { Scenes, Stores, Services, Definition };\r\n","import * as Services from \"../services\"\nimport * as Models from \"../models\"\n\nexport const onLogin = (loginStore: Models.Login): Promise<any> => {\n  return new Promise((resolve, reject) => {\n    try {\n      Services.onLogin(loginStore)\n        .then((res: any) => {\n          resolve(res)\n        })\n        .catch((error) => {\n          reject(error)\n        })\n    } catch (error) {\n      console.log(\"error new\")\n\n      reject(error)\n    }\n  })\n}\nexport const addUser = (userStore: any): Promise<any> => {\n  return new Promise((resolve, reject) => {\n    try {\n      console.log({ user: userStore.user })\n\n      Services.addUser(userStore.user).then((res: any) => {\n        console.log({ res })\n        resolve(res.data)\n      })\n    } catch (error) {\n      reject(error)\n    }\n  })\n}\n","import * as Scenes from \"./scenes\";\r\nimport * as Services from \"./services\";\r\nimport * as Pipes from \"./pipes\";\r\nimport Stores from \"./stores\";\r\nimport Definition from \"./definition.json\";\r\n\r\nexport default { Scenes, Stores, Services, Pipes, Definition };\r\n","export enum COLORS {\n  PRIMARY = \"#454CBF\",\n  SECONDARY = \"#C57C85\",\n  ACCENT = \"#422a68\",\n  BLACK = \"#000000\",\n  GREY_0 = \"#4A4A4A\",\n  GREY_1 = \"#707070\",\n  LIGHT_1 = \"#EbEbEb\",\n  WHITE = \"#FFFFFF\",\n  BACKGROUND = \"#FFFFFF\",\n  RED = \"#FF0000\",\n  LIGHT_WHITE = \"#F4F6F6\",\n  ORANGE = \"#ffae1a\",\n  MONO = \"#754C00\",\n}\n","//export const LIMSPLUS_API_HOST = \"http://localhost:8080/api\"    \r\nexport const LIMSPLUS_API_HOST = \"https://limsplus-api.azurewebsites.net/api\";  \r\n","import Axios from \"axios\";\r\n\r\nimport * as Config from \"@lp/config\";\r\n\r\nexport default function createLimsPlusClient(token?: string) {\r\n  return Axios.create({\r\n    baseURL: Config.Api.LIMSPLUS_API_HOST,\r\n    headers: {\r\n      \"x-limsplus-Key\":  \r\n        token ||\r\n        \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzM4NCJ9.eyJsYWIiOiJEUiBMQUwgUEFUSExBQlMgLSBERUxISSIsInVzZXJJZCI6IjEyMzQ1NiJ9.OqExKrvy2AdzunV942z7U23shX7A0AJZrrIhi2qmq3rUFk9bXCrTRGdoa2k1k2iT\",\r\n    },\r\n  });\r\n}\r\n","export function getItem<T>(key: string): Promise<T> {\r\n  return new Promise<T>(async (resolve, reject) => {\r\n    const result = window && window.localStorage.getItem(key)\r\n    if (!result) {\r\n      reject()\r\n    } else {\r\n      resolve((await JSON.parse(result)) as T)\r\n    }\r\n  })\r\n}\r\n\r\nexport function setItem(key: string, value: any): Promise<boolean> {\r\n  return new Promise<boolean>(async (resolve) => {\r\n    await window.localStorage.setItem(key, JSON.stringify(value))\r\n    resolve(true)\r\n  })\r\n}\r\n","import validate from \"validate.js\"\nimport moment from \"moment\"\nexport { validate }\nvalidate.extend(validate.validators.datetime, {\n  // The value is guaranteed not to be null or undefined but otherwise it\n  // could be anything.\n  parse: function (value: any) {\n    return +moment.utc(value)\n  },\n  // Input is a unix timestamp\n  format: function (value: any, options: any) {\n    var format = options.dateOnly ? \"YYYY-MM-DD\" : \"YYYY-MM-DD hh:mm:ss\"\n    return moment.utc(value).format(format)\n  },\n})\n\nexport const constraintsLogin = {\n  lab: {\n    presence: true,\n    length: {\n      minimum: 2,\n      message: \"Lab must be least 2 characters \",\n    },\n  },\n  userId: {\n    presence: true,\n    length: {\n      minimum: 4,\n      message: \"UserId must be least 4 characters\",\n    },\n  },\n  password: {\n    presence: true,\n    format: {\n      pattern: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,20}$/,\n      message:\n        \"Password should be included Lower case, Upper case, Numbers, special, 6 to 20 characters\",\n    },\n  },\n}\n\nexport const constraintsChangePassword = {\n  oldPassword: {\n    presence: true,\n    format: {\n      pattern: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,20}$/,\n      message:\n        \"Password should be included Lower case, Upper case, Numbers, special, 6 to 20 characters\",\n    },\n  },\n  newPassword: {\n    presence: true,\n    format: {\n      pattern: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,20}$/,\n      message:\n        \"Password should be included Lower case, Upper case, Numbers, special, 6 to 20 characters\",\n    },\n  },\n  confirmPassword: {\n    presence: true,\n    format: {\n      pattern: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,20}$/,\n      message:\n        \"Password should be included Lower case, Upper case, Numbers, special, 6 to 20 characters\",\n    },\n  },\n}\n\nexport const constraintsUser = {\n  lab: {\n    presence: true,\n    length: {\n      minimum: 2,\n      message: \"Lab must be least 2 characters \",\n    },\n  },\n  userId: {\n    presence: true,\n    length: {\n      minimum: 6,\n      message: \"UserId must be least 6 characters\",\n    },\n  },\n  password: {\n    presence: true,\n    format: {\n      pattern: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,20}$/,\n      message:\n        \"Password should be included Lower case, Upper case, Numbers, special, 6 to 20 characters\",\n    },\n  },\n  deginisation: {\n    presence: true,\n  },\n  fullName: {\n    presence: true,\n  },\n  department: {\n    presence: true,\n  },\n  exipreDate: {\n    presence: true,\n    datetime: {\n      dateOnly: false,\n      earliest: moment.utc().subtract(1, \"days\"),\n      message: \"^You need to be at least 1 month earliest\",\n    },\n  },\n  exipreDays: {\n    presence: true,\n  },\n  role: {\n    presence: true,\n  },\n  status: {\n    presence: true,\n  },\n}\n","export const checkNotUndefined = (object: any) => {\n  console.log({ object });\n  for (var key in object) {\n    if (object[key] !== undefined) return true;\n  }\n  return false;\n};\n","module.exports = __webpack_public_path__ + \"static/media/applogo.fa8b0d4a.jpg\";","/* eslint-disable */\r\nimport React, { useState, useEffect } from \"react\"\r\nimport { observer } from \"mobx-react\"\r\nimport * as LibraryComponents from \"@lp/library/components\"\r\nimport * as Models from \"../models\"\r\nimport * as Utils from \"@lp/library/utils\"\r\nimport moment from \"moment\"\r\nimport * as Features from \"@lp/features\"\r\nimport Contexts from \"@lp/library/stores\"\r\nimport BootstrapTable from \"react-bootstrap-table-next\"\r\nimport cellEditFactory, { Type } from \"react-bootstrap-table2-editor\"\r\nimport ToolkitProvider, { Search, CSVExport } from \"react-bootstrap-table2-toolkit\"\r\nimport * as Services from \"../services\"\r\nimport { Container } from \"reactstrap\"\r\n\r\nconst { SearchBar, ClearSearchButton } = Search\r\nconst { ExportCSVButton } = CSVExport\r\n\r\nconst Users = observer(() => {\r\n  const rootStore = React.useContext(Contexts.rootStore)\r\n  const [errors, setErrors] = useState<Models.Users>()\r\n  const [deleteUser, setDeleteUser] = useState<any>({})\r\n\r\n  useEffect(() => {\r\n    rootStore.userStore.loadUser()\r\n  }, [rootStore.userStore])\r\n\r\n  const afterSaveCell = (oldValue, newValue, row, column) => {\r\n    if (oldValue !== newValue) {\r\n      Services.updateUserSingleFiled({\r\n        newValue,\r\n        dataField: column.dataField,\r\n        id: row._id,\r\n      }).then((res) => {\r\n        if (res.data) {\r\n          rootStore.userStore.loadUser()\r\n          LibraryComponents.ToastsStore.success(`User update.`)\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Container fluid>\r\n        <LibraryComponents.Header>\r\n          <LibraryComponents.PageHeading\r\n            title=\"User\"\r\n            subTitle=\"Add, Edit & Delete User\"\r\n          />\r\n        </LibraryComponents.Header>\r\n        <div className=\" mx-auto  p-4  flex-wrap\">\r\n          <div className=\"m-1 p-2 rounded-lg shadow-xl\">\r\n            <LibraryComponents.Grid cols={2}>\r\n              <LibraryComponents.List\r\n                direction=\"col\"\r\n                space={4}\r\n                justify=\"stretch\"\r\n                fill\r\n              >\r\n                <LibraryComponents.Form.Input\r\n                  label=\"User Id\"\r\n                  id=\"userId\"\r\n                  placeholder=\"User Id\"\r\n                  value={rootStore.userStore.user.userId}\r\n                  onChange={(userId) => {\r\n                    setErrors({\r\n                      ...errors,\r\n                      userId: Utils.validate.single(\r\n                        userId,\r\n                        Utils.constraintsUser.userId\r\n                      ),\r\n                    })\r\n                    rootStore.userStore.updateUser({\r\n                      ...rootStore.userStore.user,\r\n                      userId,\r\n                    })\r\n                  }}\r\n                  onBlur={(userId) => {\r\n                    Services.checkExitsUserId(userId).then((res) => {\r\n                      if (res)\r\n                        if (res.length > 0) rootStore.userStore.setExitsUserId(true)\r\n                        else rootStore.userStore.setExitsUserId(false)\r\n                    })\r\n                  }}\r\n                />\r\n                {errors?.userId && (\r\n                  <span className=\"text-red-600 font-medium relative\">\r\n                    {errors.userId}\r\n                  </span>\r\n                )}\r\n                {rootStore.userStore.checkExitsUserId && (\r\n                  <span className=\"text-red-600 font-medium relative\">\r\n                    UserId already exits. Please use other userid.\r\n                  </span>\r\n                )}\r\n\r\n                <LibraryComponents.Form.InputWrapper label=\"Lab\" id=\"lab\">\r\n                  <select\r\n                    name=\"lab\"\r\n                    className=\"leading-4 p-2 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-base border border-gray-300 rounded-md\"\r\n                    onChange={(e) => {\r\n                      const lab = e.target.value\r\n                      console.log({ lab })\r\n\r\n                      setErrors({\r\n                        ...errors,\r\n                        lab: Utils.validate.single(lab, Utils.constraintsUser.lab),\r\n                      })\r\n                      rootStore.userStore.updateUser({\r\n                        ...rootStore.userStore.user,\r\n                        lab,\r\n                      })\r\n                    }}\r\n                  >\r\n                    <option selected>Select</option>\r\n                    {rootStore.labStore.listLabs.map((item: any) => (\r\n                      <option key={item.name} value={item.code}>\r\n                        {item.name}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </LibraryComponents.Form.InputWrapper>\r\n                {errors?.lab && (\r\n                  <span className=\"text-red-600 font-medium relative\">\r\n                    {errors.lab}\r\n                  </span>\r\n                )}\r\n                <LibraryComponents.Form.Input\r\n                  label=\"Password\"\r\n                  name=\"password\"\r\n                  type=\"password\"\r\n                  placeholder=\"Password\"\r\n                  value={rootStore.userStore.user.password}\r\n                  onChange={(password) => {\r\n                    setErrors({\r\n                      ...errors,\r\n                      password: Utils.validate.single(\r\n                        password,\r\n                        Utils.constraintsUser.password\r\n                      ),\r\n                    })\r\n                    rootStore.userStore.updateUser({\r\n                      ...rootStore.userStore.user,\r\n                      password,\r\n                    })\r\n                  }}\r\n                />\r\n                {errors?.password && (\r\n                  <span className=\"text-red-600 font-medium relative\">\r\n                    {errors.password}\r\n                  </span>\r\n                )}\r\n                <LibraryComponents.Form.InputWrapper\r\n                  label=\"Deginisation\"\r\n                  id=\"deginisation\"\r\n                >\r\n                  <select\r\n                    name=\"deginisation\"\r\n                    className=\"leading-4 p-2 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-base border border-gray-300 rounded-md\"\r\n                    onChange={(e) => {\r\n                      const deginisation = e.target.value\r\n                      setErrors({\r\n                        ...errors,\r\n                        deginisation:\r\n                          deginisation !== \"\"\r\n                            ? Utils.validate.single(\r\n                                deginisation,\r\n                                Utils.constraintsUser.deginisation\r\n                              )\r\n                            : \"Deginisation requried\",\r\n                      })\r\n                      rootStore.userStore.updateUser({\r\n                        ...rootStore.userStore.user,\r\n                        deginisation,\r\n                      })\r\n                    }}\r\n                  >\r\n                    <option selected>Select</option>\r\n                    {rootStore.deginisationStore.listDeginisation.map(\r\n                      (item: any) => (\r\n                        <option key={item.description} value={item.code}>\r\n                          {item.description}\r\n                        </option>\r\n                      )\r\n                    )}\r\n                  </select>\r\n                </LibraryComponents.Form.InputWrapper>\r\n                {errors?.deginisation && (\r\n                  <span className=\"text-red-600 font-medium relative\">\r\n                    {errors.deginisation}\r\n                  </span>\r\n                )}\r\n                <LibraryComponents.Form.InputRadio\r\n                  label=\"Status\"\r\n                  name=\"status\"\r\n                  values={[\"Active\", \"Retired\", \"Disable\"]}\r\n                  value={rootStore.userStore.user.status}\r\n                  onChange={(status) => {\r\n                    setErrors({\r\n                      ...errors,\r\n                      status:\r\n                        status !== \"\"\r\n                          ? Utils.validate.single(\r\n                              status,\r\n                              Utils.constraintsUser.status\r\n                            )\r\n                          : \"Status requried\",\r\n                    })\r\n                    rootStore.userStore.updateUser({\r\n                      ...rootStore.userStore.user,\r\n                      status,\r\n                    })\r\n                  }}\r\n                />\r\n              </LibraryComponents.List>\r\n              <LibraryComponents.List\r\n                direction=\"col\"\r\n                space={4}\r\n                justify=\"stretch\"\r\n                fill\r\n              >\r\n                <LibraryComponents.Form.Input\r\n                  label=\"Full Name\"\r\n                  id=\"fullName\"\r\n                  placeholder=\"Full Name\"\r\n                  value={rootStore.userStore.user.fullName}\r\n                  onChange={(fullName) => {\r\n                    setErrors({\r\n                      ...errors,\r\n                      fullName:\r\n                        fullName !== \"\"\r\n                          ? Utils.validate.single(\r\n                              fullName,\r\n                              Utils.constraintsUser.fullName\r\n                            )\r\n                          : \"Full Name required!\",\r\n                    })\r\n                    rootStore.userStore.updateUser({\r\n                      ...rootStore.userStore.user,\r\n                      fullName,\r\n                    })\r\n                  }}\r\n                />\r\n                {errors?.fullName && (\r\n                  <span className=\"text-red-600 font-medium relative\">\r\n                    {errors.fullName}\r\n                  </span>\r\n                )}\r\n\r\n                <LibraryComponents.Form.InputWrapper\r\n                  label=\"Department\"\r\n                  id=\"department\"\r\n                >\r\n                  <select\r\n                    name=\"department\"\r\n                    className=\"leading-4 p-2 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-base border border-gray-300 rounded-md\"\r\n                    onChange={(e) => {\r\n                      const department = e.target.value\r\n                      setErrors({\r\n                        ...errors,\r\n                        department:\r\n                          department !== \"\"\r\n                            ? Utils.validate.single(\r\n                                department,\r\n                                Utils.constraintsUser.department\r\n                              )\r\n                            : \"Department required!\",\r\n                      })\r\n                      rootStore.userStore.updateUser({\r\n                        ...rootStore.userStore.user,\r\n                        department,\r\n                      })\r\n                    }}\r\n                  >\r\n                    <option selected>Select</option>\r\n                    {rootStore.departmentStore.listDepartment.map((item: any) => (\r\n                      <option key={item.name} value={item.code}>\r\n                        {item.name}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </LibraryComponents.Form.InputWrapper>\r\n                {errors?.department && (\r\n                  <span className=\"text-red-600 font-medium relative\">\r\n                    {errors.department}\r\n                  </span>\r\n                )}\r\n\r\n                <LibraryComponents.List space={3} direction=\"row\">\r\n                  <LibraryComponents.Form.InputDate\r\n                    label=\"Exipre Date\"\r\n                    id=\"exipreData\"\r\n                    value={moment(rootStore.userStore.user.exipreDate).format(\r\n                      \"YYYY-MM-DD\"\r\n                    )}\r\n                    onChange={(e: any) => {\r\n                      let date = new Date(e.target.value)\r\n                      date = new Date(\r\n                        moment(date)\r\n                          .add(rootStore.userStore.user.exipreDays, \"days\")\r\n                          .format(\"YYYY-MM-DD HH:mm\")\r\n                      )\r\n                      const formatDate = moment(date).format(\"YYYY-MM-DD HH:mm\")\r\n                      setErrors({\r\n                        ...errors,\r\n                        exipreDate: Utils.validate.single(\r\n                          formatDate,\r\n                          Utils.constraintsUser.exipreDate\r\n                        ),\r\n                      })\r\n                      rootStore.userStore.updateUser({\r\n                        ...rootStore.userStore.user,\r\n                        exipreDate: new Date(formatDate),\r\n                      })\r\n                    }}\r\n                  />\r\n                  {errors?.exipreDate && (\r\n                    <span className=\"text-red-600 font-medium relative\">\r\n                      {errors.exipreDate}\r\n                    </span>\r\n                  )}\r\n\r\n                  <LibraryComponents.Form.Input\r\n                    type=\"number\"\r\n                    label=\"Exipre Days\"\r\n                    id=\"exipreDays\"\r\n                    placeholder=\"Exipre Days\"\r\n                    value={rootStore.userStore.user.exipreDays}\r\n                    onChange={(exipreDays) => {\r\n                      setErrors({\r\n                        ...errors,\r\n                        exipreDays:\r\n                          exipreDays !== \"\"\r\n                            ? Utils.validate.single(\r\n                                exipreDays,\r\n                                Utils.constraintsUser.exipreDays\r\n                              )\r\n                            : \"Exipre Days required!\",\r\n                      })\r\n                      rootStore.userStore.updateUser({\r\n                        ...rootStore.userStore.user,\r\n                        exipreDays,\r\n                      })\r\n                    }}\r\n                  />\r\n\r\n                  <LibraryComponents.Button\r\n                    size=\"small\"\r\n                    type=\"solid\"\r\n                    onClick={() => {\r\n                      const date = new Date(\r\n                        moment(rootStore.userStore.user.exipreDate)\r\n                          .add(rootStore.userStore.user.exipreDays, \"days\")\r\n                          .format(\"YYYY-MM-DD HH:mm\")\r\n                      )\r\n                      const exipreDate = new Date(\r\n                        moment(date).format(\"YYYY-MM-DD HH:mm\")\r\n                      )\r\n                      rootStore.userStore.updateUser({\r\n                        ...rootStore.userStore.user,\r\n                        exipreDate,\r\n                      })\r\n                    }}\r\n                  >\r\n                    Apply Days\r\n                  </LibraryComponents.Button>\r\n                  {errors?.exipreDays && (\r\n                    <span className=\"text-red-600 font-medium relative\">\r\n                      {errors.exipreDays}\r\n                    </span>\r\n                  )}\r\n                </LibraryComponents.List>\r\n\r\n                <LibraryComponents.Form.InputWrapper label=\"Role\" id=\"role\">\r\n                  <select\r\n                    name=\"role\"\r\n                    className=\"leading-4 p-2 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-base border border-gray-300 rounded-md\"\r\n                    onChange={(e) => {\r\n                      const role = e.target.value\r\n                      setErrors({\r\n                        ...errors,\r\n                        role:\r\n                          role !== \"\"\r\n                            ? Utils.validate.single(role, Utils.constraintsUser.role)\r\n                            : \"Role required!\",\r\n                      })\r\n                      rootStore.userStore.updateUser({\r\n                        ...rootStore.userStore.user,\r\n                        role,\r\n                      })\r\n                    }}\r\n                  >\r\n                    <option selected>Select</option>\r\n                    {rootStore.roleStore.listRole.map((item: any) => (\r\n                      <option key={item.description} value={item.code}>\r\n                        {item.description}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </LibraryComponents.Form.InputWrapper>\r\n                {errors?.role && (\r\n                  <span className=\"text-red-600 font-medium relative\">\r\n                    {errors.role}\r\n                  </span>\r\n                )}\r\n              </LibraryComponents.List>\r\n            </LibraryComponents.Grid>\r\n            <br />\r\n\r\n            <LibraryComponents.List direction=\"row\" space={3} align=\"center\">\r\n              <LibraryComponents.Button\r\n                size=\"medium\"\r\n                type=\"solid\"\r\n                icon={LibraryComponents.Icons.Save}\r\n                onClick={() => {\r\n                  if (\r\n                    Utils.validate(\r\n                      rootStore.userStore.user,\r\n                      Utils.constraintsLogin\r\n                    ) === undefined &&\r\n                    !rootStore.userStore.checkExitsUserId\r\n                  ) {\r\n                    rootStore.setProcessLoading(true)\r\n                    Features.Users.Pipes.addUser(rootStore.userStore).then(() => {\r\n                      rootStore.setProcessLoading(false)\r\n                      LibraryComponents.ToastsStore.success(`User created.`)\r\n                      rootStore.userStore.clear()\r\n                      rootStore.userStore.loadUser()\r\n                    })\r\n                  } else {\r\n                    LibraryComponents.ToastsStore.warning(\r\n                      \"Please enter all information!\"\r\n                    )\r\n                  }\r\n                }}\r\n              >\r\n                Save\r\n              </LibraryComponents.Button>\r\n              <LibraryComponents.Button\r\n                size=\"medium\"\r\n                type=\"outline\"\r\n                icon={LibraryComponents.Icons.Remove}\r\n                onClick={() => {\r\n                  rootStore.userStore.clear()\r\n                }}\r\n              >\r\n                Clear\r\n              </LibraryComponents.Button>\r\n            </LibraryComponents.List>\r\n          </div>\r\n          <br />\r\n          <div className=\"m-1  rounded-lg shadow-xl\" style={{ overflowX: \"scroll\" }}>\r\n            <ToolkitProvider\r\n              keyField=\"id\"\r\n              data={rootStore.userStore.userList || []}\r\n              columns={[\r\n                {\r\n                  dataField: \"userId\",\r\n                  text: \"UserId\",\r\n                  sort: true,\r\n                  editable: false,\r\n                  style: { width: 200 },\r\n                },\r\n                {\r\n                  dataField: \"lab\",\r\n                  text: \"Lab\",\r\n                  editorRenderer: (\r\n                    editorProps,\r\n                    value,\r\n                    row,\r\n                    column,\r\n                    rowIndex,\r\n                    columnIndex\r\n                  ) => (\r\n                    <>\r\n                      <select\r\n                        name=\"lab\"\r\n                        className=\"leading-4 p-2 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-base border border-gray-300 rounded-md\"\r\n                        onChange={(e) => {\r\n                          const lab = e.target.value\r\n                          Services.updateUserSingleFiled({\r\n                            newValue: lab,\r\n                            dataField: column.dataField,\r\n                            id: row._id,\r\n                          }).then((res) => {\r\n                            if (res.data) {\r\n                              rootStore.userStore.loadUser()\r\n                              LibraryComponents.ToastsStore.success(`User update.`)\r\n                            }\r\n                          })\r\n                        }}\r\n                      >\r\n                        <option selected>{row.lab}</option>\r\n                        {rootStore.labStore.listLabs.map(\r\n                          (item: any, index: number) => (\r\n                            <option key={item.name} value={item.code}>\r\n                              {item.name}\r\n                            </option>\r\n                          )\r\n                        )}\r\n                      </select>\r\n                    </>\r\n                  ),\r\n                },\r\n                {\r\n                  dataField: \"fullName\",\r\n                  text: \"Full Name\",\r\n                },\r\n                {\r\n                  dataField: \"department\",\r\n                  text: \"Department\",\r\n                  editorRenderer: (\r\n                    editorProps,\r\n                    value,\r\n                    row,\r\n                    column,\r\n                    rowIndex,\r\n                    columnIndex\r\n                  ) => (\r\n                    <>\r\n                      <select\r\n                        name=\"department\"\r\n                        className=\"leading-4 p-2 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-base border border-gray-300 rounded-md\"\r\n                        onChange={(e) => {\r\n                          const department = e.target.value\r\n                          Services.updateUserSingleFiled({\r\n                            newValue: department,\r\n                            dataField: column.dataField,\r\n                            id: row._id,\r\n                          }).then((res) => {\r\n                            if (res.data) {\r\n                              rootStore.userStore.loadUser()\r\n                              LibraryComponents.ToastsStore.success(`User update.`)\r\n                            }\r\n                          })\r\n                        }}\r\n                      >\r\n                        <option selected>{row.department}</option>\r\n                        {rootStore.departmentStore.listDepartment.map(\r\n                          (item: any, index: number) => (\r\n                            <option key={item.name} value={item.code}>\r\n                              {item.name}\r\n                            </option>\r\n                          )\r\n                        )}\r\n                      </select>\r\n                    </>\r\n                  ),\r\n                },\r\n                {\r\n                  dataField: \"deginisation\",\r\n                  text: \"Deginisation\",\r\n                  editorRenderer: (\r\n                    editorProps,\r\n                    value,\r\n                    row,\r\n                    column,\r\n                    rowIndex,\r\n                    columnIndex\r\n                  ) => (\r\n                    <>\r\n                      <select\r\n                        name=\"deginisation\"\r\n                        className=\"leading-4 p-2 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-base border border-gray-300 rounded-md\"\r\n                        onChange={(e) => {\r\n                          const deginisation = e.target.value\r\n                          Services.updateUserSingleFiled({\r\n                            newValue: deginisation,\r\n                            dataField: column.dataField,\r\n                            id: row._id,\r\n                          }).then((res) => {\r\n                            if (res.data) {\r\n                              rootStore.userStore.loadUser()\r\n                              LibraryComponents.ToastsStore.success(`User update.`)\r\n                            }\r\n                          })\r\n                        }}\r\n                      >\r\n                        <option selected>{row.deginisation}</option>\r\n                        {rootStore.deginisationStore.listDeginisation.map(\r\n                          (item: any, index: number) => (\r\n                            <option key={item.description} value={item.code}>\r\n                              {item.description}\r\n                            </option>\r\n                          )\r\n                        )}\r\n                      </select>\r\n                    </>\r\n                  ),\r\n                },\r\n                {\r\n                  dataField: \"role\",\r\n                  text: \"Role\",\r\n                  editorRenderer: (\r\n                    editorProps,\r\n                    value,\r\n                    row,\r\n                    column,\r\n                    rowIndex,\r\n                    columnIndex\r\n                  ) => (\r\n                    <>\r\n                      <select\r\n                        name=\"role\"\r\n                        className=\"leading-4 p-2 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-base border border-gray-300 rounded-md\"\r\n                        onChange={(e) => {\r\n                          const role = e.target.value\r\n                          Services.updateUserSingleFiled({\r\n                            newValue: role,\r\n                            dataField: column.dataField,\r\n                            id: row._id,\r\n                          }).then((res) => {\r\n                            if (res.data) {\r\n                              rootStore.userStore.loadUser()\r\n                              LibraryComponents.ToastsStore.success(`User update.`)\r\n                            }\r\n                          })\r\n                        }}\r\n                      >\r\n                        <option selected>{row.role}</option>\r\n                        {rootStore.roleStore.listRole.map(\r\n                          (item: any, index: number) => (\r\n                            <option key={item.description} value={item.code}>\r\n                              {item.description}\r\n                            </option>\r\n                          )\r\n                        )}\r\n                      </select>\r\n                    </>\r\n                  ),\r\n                },\r\n                {\r\n                  text: \"Exipre Date\",\r\n                  dataField: \"exipreDate\",\r\n                  formatter: (cell, row) => {\r\n                    return moment(row.exipreDate).format(\"YYYY-MM-DD\")\r\n                  },\r\n                  editorRenderer: (\r\n                    editorProps,\r\n                    value,\r\n                    row,\r\n                    column,\r\n                    rowIndex,\r\n                    columnIndex\r\n                  ) => (\r\n                    <>\r\n                      <LibraryComponents.Form.InputDate\r\n                        label=\"Exipre Date\"\r\n                        id=\"exipreData\"\r\n                        value={moment(row.exipreDate).format(\"YYYY-MM-DD\")}\r\n                        onChange={(e: any) => {\r\n                          let date = new Date(e.target.value)\r\n                          date = new Date(moment(date).format(\"YYYY-MM-DD HH:mm\"))\r\n                          const formatDate = moment(date).format(\"YYYY-MM-DD HH:mm\")\r\n\r\n                          Services.updateUserSingleFiled({\r\n                            newValue: new Date(formatDate),\r\n                            dataField: column.dataField,\r\n                            id: row._id,\r\n                          }).then((res) => {\r\n                            if (res.data) {\r\n                              rootStore.userStore.loadUser()\r\n                              LibraryComponents.ToastsStore.success(`User update.`)\r\n                            }\r\n                          })\r\n                        }}\r\n                      />\r\n                    </>\r\n                  ),\r\n                },\r\n                {\r\n                  text: \"Status\",\r\n                  dataField: \"status\",\r\n                  style: {\r\n                    width: 120,\r\n                  },\r\n                  editor: {\r\n                    type: Type.SELECT,\r\n                    getOptions: () => {\r\n                      return [\r\n                        {\r\n                          value: \"Active\",\r\n                          label: \"Active\",\r\n                        },\r\n                        {\r\n                          value: \"Retired\",\r\n                          label: \"Retired\",\r\n                        },\r\n                        {\r\n                          value: \"Disable\",\r\n                          label: \"Disable\",\r\n                        },\r\n                      ]\r\n                    },\r\n                  },\r\n                },\r\n                {\r\n                  dataField: \"opration\",\r\n                  text: \"Delete\",\r\n                  editable: false,\r\n                  csvExport: false,\r\n                  formatter: (cellContent, row) => (\r\n                    <>\r\n                      <LibraryComponents.Button\r\n                        size=\"small\"\r\n                        type=\"outline\"\r\n                        icon={LibraryComponents.Icons.Remove}\r\n                        onClick={() => {\r\n                          setDeleteUser({\r\n                            show: true,\r\n                            id: row._id,\r\n                            title: \"Are you sure?\",\r\n                            body: `Delete ${row.fullName} user!`,\r\n                          })\r\n                        }}\r\n                      >\r\n                        Delete\r\n                      </LibraryComponents.Button>\r\n                    </>\r\n                  ),\r\n                },\r\n              ]}\r\n              search\r\n              exportCSV={{\r\n                fileName: `users_${moment(new Date()).format(\r\n                  \"YYYY-MM-DD HH:mm\"\r\n                )}.csv`,\r\n                noAutoBOM: false,\r\n                blobType: \"text/csv;charset=ansi\",\r\n              }}\r\n            >\r\n              {(props) => (\r\n                <div>\r\n                  <SearchBar {...props.searchProps} />\r\n                  <ClearSearchButton\r\n                    className={`inline-flex ml-4 bg-gray-500 items-center  small outline shadow-sm  font-medium  disabled:opacity-50 disabled:cursor-not-allowed text-center`}\r\n                    {...props.searchProps}\r\n                  />\r\n                  <ExportCSVButton\r\n                    className={`inline-flex ml-2 bg-gray-500 items-center  small outline shadow-sm  font-medium  disabled:opacity-50 disabled:cursor-not-allowed text-center`}\r\n                    {...props.csvProps}\r\n                  >\r\n                    Export CSV!!\r\n                  </ExportCSVButton>\r\n                  <hr />\r\n                  <BootstrapTable\r\n                    {...props.baseProps}\r\n                    noDataIndication=\"Table is Empty\"\r\n                    hover\r\n                    cellEdit={cellEditFactory({\r\n                      mode: \"dbclick\",\r\n                      blurToSave: true,\r\n                      afterSaveCell,\r\n                    })}\r\n                  />\r\n                </div>\r\n              )}\r\n            </ToolkitProvider>\r\n          </div>\r\n          <LibraryComponents.Modal.ModalConfirm\r\n            {...deleteUser}\r\n            click={() => {\r\n              Services.deleteUser(deleteUser.id).then((res: any) => {\r\n                if (res.status) {\r\n                  LibraryComponents.ToastsStore.success(`User deleted.`)\r\n                  setDeleteUser({ show: false })\r\n                  rootStore.userStore.loadUser()\r\n                }\r\n              })\r\n            }}\r\n          />\r\n        </div>\r\n      </Container>\r\n    </>\r\n  )\r\n})\r\n\r\nexport default Users\r\n","import React, { useState } from \"react\"\r\nimport { observer } from \"mobx-react\"\r\nimport * as Clients from \"@lp/library/clients\"\r\nimport * as LibraryComponents from \"@lp/library/components\"\r\nimport * as Services from \"@lp/features/users/services\"\r\nimport Contexts from \"@lp/library/stores\"\r\nimport { useHistory } from \"react-router-dom\"\r\n\r\nconst ChangePassword = observer(() => {\r\n  const history = useHistory()\r\n  const rootStore = React.useContext(Contexts.rootStore)\r\n  const [changePassword, setChangePassword] = useState(true)\r\n  \r\n  // useEffect(() => {\r\n  //   Clients.storageClient.getItem(\"isLogin\").then((isLogin: any) => {\r\n  //     if (isLogin) {\r\n  //       if (isLogin.changePass !== true) setChangePassword(true);\r\n  //     }\r\n  //   });\r\n  // }, []);\r\n  \r\n  return (\r\n    <>\r\n      <div className=\"max-w-xl mx-auto  py-20  flex-wrap p-4  bg-gray-100 \">\r\n        {changePassword && (\r\n          <LibraryComponents.Modal.ModalChangePassword\r\n            click={() => {\r\n              Clients.storageClient.getItem(\"isLogin\").then((isLogin: any) => {\r\n                Clients.storageClient.setItem(\"isLogin\", {\r\n                  ...isLogin,\r\n                  changePass: true,\r\n                })  \r\n                const body = Object.assign(\r\n                  isLogin,\r\n                  rootStore.userStore.changePassword\r\n                )\r\n                Services.changePassword(body).then((res) => {\r\n                  if (res) {\r\n                    LibraryComponents.ToastsStore.success(`Password changed!`)\r\n                    history.push(\"/dashboard/default\")\r\n                    setChangePassword(false)\r\n                  } else {\r\n                    LibraryComponents.ToastsStore.error(\r\n                      `Please enter correct old password`\r\n                    )\r\n                  }\r\n                })\r\n              })\r\n            }}\r\n            close={() => {\r\n              Clients.storageClient.getItem(\"isLogin\").then((isLogin: any) => {\r\n                Clients.storageClient.setItem(\"isLogin\", {\r\n                  ...isLogin,\r\n                  changePass: true,\r\n                })\r\n              })\r\n              history.push(\"/dashboard/default\")\r\n              setChangePassword(false)\r\n            }}\r\n          />\r\n        )}\r\n      </div>\r\n    </>\r\n  )\r\n})\r\n\r\nexport default ChangePassword\r\n","import validate from \"validate.js\";\nexport { validate };\nexport const constraintsLabs = {\n  code: {\n    presence: true,\n    length: {\n      minimum: 4,\n      message: \"Code must be least 4 characters \",\n    },\n  },\n  name: {\n    presence: true,\n    length: {\n      minimum: 4,\n      message: \"Name must be least 4 characters\",\n    },\n  },\n};\n","import React, { useState, useContext } from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport * as LibraryComponents from \"@lp/library/components\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport ToolkitProvider, {\r\n  Search,\r\n  CSVExport,\r\n} from \"react-bootstrap-table2-toolkit\";\r\nimport moment from \"moment\";\r\n\r\nimport * as Models from \"../models\";\r\nimport * as Util from \"../util\";\r\nimport RootStoreContext from \"@lp/library/stores\";\r\nimport * as Services from \"../services\";\r\n\r\nconst { SearchBar, ClearSearchButton } = Search;\r\nconst { ExportCSVButton } = CSVExport;\r\n\r\nconst Lab = observer(() => {\r\n  const rootStore = useContext(RootStoreContext.rootStore);\r\n  const [errors, setErrors] = useState<Models.Labs>();\r\n  const [deleteItem, setDeleteItem] = useState<any>({});\r\n\r\n  return (\r\n    <>\r\n      <LibraryComponents.Header>\r\n        <LibraryComponents.PageHeading\r\n          title=\"Lab\"\r\n          subTitle=\"Add, Edit & Delete Lab\"\r\n        />\r\n      </LibraryComponents.Header>\r\n      <div className=\" mx-auto  p-4  flex-wrap\">\r\n        <div className=\"m-1 p-2 rounded-lg shadow-xl\">\r\n          <LibraryComponents.Grid cols={2}>\r\n            <LibraryComponents.List\r\n              direction=\"col\"\r\n              space={4}\r\n              justify=\"stretch\"\r\n              fill\r\n            >\r\n              <LibraryComponents.Form.Input\r\n                label=\"Code\"\r\n                id=\"code\"\r\n                placeholder=\"Code\"\r\n                value={rootStore.labStore.labs?.code}\r\n                onChange={(code) => {\r\n                  setErrors({\r\n                    ...errors,\r\n                    code: Util.validate.single(code, Util.constraintsLabs.code),\r\n                  });\r\n                  rootStore.labStore.updateLabs({\r\n                    ...rootStore.labStore.labs,\r\n                    code,\r\n                  });\r\n                }}\r\n              />\r\n              {errors?.code && (\r\n                <span className=\"text-red-600 font-medium relative\">\r\n                  {errors.code}\r\n                </span>\r\n              )}\r\n              <LibraryComponents.Form.Input\r\n                label=\"Name\"\r\n                name=\"name\"\r\n                placeholder=\"Name\"\r\n                value={rootStore.labStore.labs?.name}\r\n                onChange={(name) => {\r\n                  setErrors({\r\n                    ...errors,\r\n                    name: Util.validate.single(name, Util.constraintsLabs.name),\r\n                  });\r\n                  rootStore.labStore.updateLabs({\r\n                    ...rootStore.labStore.labs,\r\n                    name,\r\n                  });\r\n                }}\r\n              />\r\n\r\n              {errors?.name && (\r\n                <span className=\"text-red-600 font-medium relative\">\r\n                  {errors.name}\r\n                </span>\r\n              )}\r\n            </LibraryComponents.List>\r\n          </LibraryComponents.Grid>\r\n          <br />\r\n\r\n          <LibraryComponents.List direction=\"row\" space={3} align=\"center\">\r\n            <LibraryComponents.Button\r\n              size=\"medium\"\r\n              type=\"solid\"\r\n              icon={LibraryComponents.Icons.Save}\r\n              onClick={() => {\r\n                if (\r\n                  Util.validate(\r\n                    rootStore.labStore.labs,\r\n                    Util.constraintsLabs\r\n                  ) === undefined\r\n                ) {\r\n                  rootStore.setProcessLoading(true);\r\n                  Services.addLab(rootStore.labStore.labs).then(() => {\r\n                    rootStore.setProcessLoading(false);\r\n                    LibraryComponents.ToastsStore.success(`Lab created.`);\r\n                    rootStore.labStore.fetchListLab();\r\n                    rootStore.labStore.clear();\r\n                  });\r\n                } else {\r\n                  LibraryComponents.ToastsStore.warning(\r\n                    \"Please enter all information!\"\r\n                  );\r\n                }\r\n              }}\r\n            >\r\n              Save\r\n            </LibraryComponents.Button>\r\n            <LibraryComponents.Button\r\n              size=\"medium\"\r\n              type=\"outline\"\r\n              icon={LibraryComponents.Icons.Remove}\r\n              onClick={() => {\r\n                rootStore.labStore.clear();\r\n              }}\r\n            >\r\n              Clear\r\n            </LibraryComponents.Button>\r\n          </LibraryComponents.List>\r\n        </div>\r\n        <br />\r\n        <div className=\"m-1 p-2 rounded-lg shadow-xl\">\r\n          <ToolkitProvider\r\n            keyField=\"id\"\r\n            data={rootStore.labStore.listLabs || []}\r\n            columns={[\r\n              {\r\n                dataField: \"code\",\r\n                text: \"Code\",\r\n                sort: true,\r\n              },\r\n              {\r\n                dataField: \"name\",\r\n                text: \"name\",\r\n              },\r\n              {\r\n                dataField: \"opration\",\r\n                text: \"Delete\",\r\n                editable: false,\r\n                csvExport: false,\r\n                formatter: (cellContent, row) => (\r\n                  <>\r\n                    <LibraryComponents.Button\r\n                      size=\"small\"\r\n                      type=\"outline\"\r\n                      icon={LibraryComponents.Icons.Remove}\r\n                      onClick={() => {\r\n                        setDeleteItem({\r\n                          show: true,\r\n                          id: row._id,\r\n                          title: \"Are you sure?\",\r\n                          body: `Delete ${row.name} lab!`,\r\n                        });\r\n                      }}\r\n                    >\r\n                      Delete\r\n                    </LibraryComponents.Button>\r\n                  </>\r\n                ),\r\n              },\r\n            ]}\r\n            search\r\n            exportCSV={{\r\n              fileName: `labs_${moment(new Date()).format(\r\n                \"YYYY-MM-DD HH:mm\"\r\n              )}.csv`,\r\n              noAutoBOM: false,\r\n              blobType: \"text/csv;charset=ansi\",\r\n            }}\r\n          >\r\n            {(props) => (\r\n              <div>\r\n                <SearchBar {...props.searchProps} />\r\n                <ClearSearchButton\r\n                  className={`inline-flex ml-4 bg-gray-500 items-center  small outline shadow-sm  font-medium  disabled:opacity-50 disabled:cursor-not-allowed text-center`}\r\n                  {...props.searchProps}\r\n                />\r\n                <ExportCSVButton\r\n                  className={`inline-flex ml-2 bg-gray-500 items-center  small outline shadow-sm  font-medium  disabled:opacity-50 disabled:cursor-not-allowed text-center`}\r\n                  {...props.csvProps}\r\n                >\r\n                  Export CSV!!\r\n                </ExportCSVButton>\r\n                <br />\r\n                <BootstrapTable\r\n                  {...props.baseProps}\r\n                  noDataIndication=\"Table is Empty\"\r\n                  hover\r\n                  // cellEdit={cellEditFactory({\r\n                  //   mode: \"dbclick\",\r\n                  //   blurToSave: true,\r\n                  //   // afterSaveCell,\r\n                  // })}\r\n                />\r\n              </div>\r\n            )}\r\n          </ToolkitProvider>\r\n        </div>\r\n        <LibraryComponents.Modal.ModalConfirm\r\n          {...deleteItem}\r\n          click={() => {\r\n            Services.deleteLab(deleteItem.id).then((res: any) => {\r\n              if (res.status) {\r\n                LibraryComponents.ToastsStore.success(`Lab deleted.`);\r\n                setDeleteItem({ show: false });\r\n                rootStore.labStore.fetchListLab();\r\n              }\r\n            });\r\n          }}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default Lab;\r\n","import validate from \"validate.js\";\r\nexport { validate };\r\nexport const constraintsDeginisation = {\r\n  code: {\r\n    presence: true,\r\n    length: {\r\n      minimum: 4,\r\n      message: \"Code must be least 4 characters \",\r\n    },\r\n  },\r\n  description: {\r\n    presence: true,\r\n    length: {\r\n      minimum: 4,\r\n      message: \"Description must be least 4 characters\",\r\n    },\r\n  },\r\n};\r\n","import React, { useState, useContext } from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport * as LibraryComponents from \"@lp/library/components\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport ToolkitProvider, {\r\n  Search,\r\n  CSVExport,\r\n} from \"react-bootstrap-table2-toolkit\";\r\nimport moment from \"moment\";\r\n\r\nimport * as Models from \"../models\";\r\nimport * as Util from \"../util\";\r\nimport RootStoreContext from \"@lp/library/stores\";\r\nimport * as Services from \"../services\";\r\n\r\nconst { SearchBar, ClearSearchButton } = Search;\r\nconst { ExportCSVButton } = CSVExport;\r\n\r\nconst Deginisation = observer(() => {\r\n  const rootStore = useContext(RootStoreContext.rootStore);\r\n  const [errors, setErrors] = useState<Models.IDeginisation>();\r\n  const [deleteItem, setDeleteItem] = useState<any>({});\r\n\r\n  return (\r\n    <>\r\n      <LibraryComponents.Header>\r\n        <LibraryComponents.PageHeading\r\n          title=\"Deginisation\"\r\n          subTitle=\"Add, Edit & Delete Deginisation\"\r\n        />\r\n      </LibraryComponents.Header>\r\n      <div className=\" mx-auto  p-4  flex-wrap\">\r\n        <div className=\"m-1 p-2 rounded-lg shadow-xl\">\r\n          <LibraryComponents.Grid cols={2}>\r\n            <LibraryComponents.List\r\n              direction=\"col\"\r\n              space={4}\r\n              justify=\"stretch\"\r\n              fill\r\n            >\r\n              <LibraryComponents.Form.Input\r\n                label=\"Code\"\r\n                id=\"code\"\r\n                placeholder=\"Code\"\r\n                value={rootStore.deginisationStore.deginisation?.code}\r\n                onChange={(code) => {\r\n                  setErrors({\r\n                    ...errors,\r\n                    code: Util.validate.single(\r\n                      code,\r\n                      Util.constraintsDeginisation.code\r\n                    ),\r\n                  });\r\n                  rootStore.deginisationStore.updateDescription({\r\n                    ...rootStore.deginisationStore.deginisation,\r\n                    code,\r\n                  });\r\n                }}\r\n              />\r\n              {errors?.code && (\r\n                <span className=\"text-red-600 font-medium relative\">\r\n                  {errors.code}\r\n                </span>\r\n              )}\r\n              <LibraryComponents.Form.Input\r\n                label=\"Description\"\r\n                name=\"description\"\r\n                placeholder=\"description\"\r\n                value={rootStore.deginisationStore.deginisation?.description}\r\n                onChange={(description) => {\r\n                  setErrors({\r\n                    ...errors,\r\n                    description: Util.validate.single(\r\n                      description,\r\n                      Util.constraintsDeginisation.description\r\n                    ),\r\n                  });\r\n                  rootStore.deginisationStore.updateDescription({\r\n                    ...rootStore.deginisationStore.deginisation,\r\n                    description,\r\n                  });\r\n                }}\r\n              />\r\n              {errors?.description && (\r\n                <span className=\"text-red-600 font-medium relative\">\r\n                  {errors.description}\r\n                </span>\r\n              )}\r\n            </LibraryComponents.List>\r\n          </LibraryComponents.Grid>\r\n          <br />\r\n\r\n          <LibraryComponents.List direction=\"row\" space={3} align=\"center\">\r\n            <LibraryComponents.Button\r\n              size=\"medium\"\r\n              type=\"solid\"\r\n              icon={LibraryComponents.Icons.Save}\r\n              onClick={() => {\r\n                if (\r\n                  Util.validate(\r\n                    rootStore.deginisationStore.deginisation,\r\n                    Util.constraintsDeginisation\r\n                  ) === undefined\r\n                ) {\r\n                  rootStore.setProcessLoading(true);\r\n                  Services.addDeginisation(\r\n                    rootStore.deginisationStore.deginisation\r\n                  ).then(() => {\r\n                    rootStore.setProcessLoading(false);\r\n                    LibraryComponents.ToastsStore.success(\r\n                      `Deginisation created.`\r\n                    );\r\n                    rootStore.deginisationStore.fetchListDeginisation();\r\n                    rootStore.deginisationStore.clear();\r\n                  });\r\n                } else {\r\n                  LibraryComponents.ToastsStore.warning(\r\n                    \"Please enter all information!\"\r\n                  );\r\n                }\r\n              }}\r\n            >\r\n              Save\r\n            </LibraryComponents.Button>\r\n            <LibraryComponents.Button\r\n              size=\"medium\"\r\n              type=\"outline\"\r\n              icon={LibraryComponents.Icons.Remove}\r\n              onClick={() => {\r\n                rootStore.deginisationStore.clear();\r\n              }}\r\n            >\r\n              Clear\r\n            </LibraryComponents.Button>\r\n          </LibraryComponents.List>\r\n        </div>\r\n        <br />\r\n        <div className=\"m-1 p-2 rounded-lg shadow-xl\">\r\n          <ToolkitProvider\r\n            keyField=\"id\"\r\n            data={rootStore.deginisationStore.listDeginisation || []}\r\n            columns={[\r\n              {\r\n                dataField: \"code\",\r\n                text: \"Code\",\r\n                sort: true,\r\n              },\r\n              {\r\n                dataField: \"description\",\r\n                text: \"Description\",\r\n              },\r\n              {\r\n                dataField: \"opration\",\r\n                text: \"Delete\",\r\n                editable: false,\r\n                csvExport: false,\r\n                formatter: (cellContent, row) => (\r\n                  <>\r\n                    <LibraryComponents.Button\r\n                      size=\"small\"\r\n                      type=\"outline\"\r\n                      icon={LibraryComponents.Icons.Remove}\r\n                      onClick={() => {\r\n                        setDeleteItem({\r\n                          show: true,\r\n                          id: row._id,\r\n                          title: \"Are you sure?\",\r\n                          body: `Delete ${row.description} deginisation!`,\r\n                        });\r\n                      }}\r\n                    >\r\n                      Delete\r\n                    </LibraryComponents.Button>\r\n                  </>\r\n                ),\r\n              },\r\n            ]}\r\n            search\r\n            exportCSV={{\r\n              fileName: `deginisation_${moment(new Date()).format(\r\n                \"YYYY-MM-DD HH:mm\"\r\n              )}.csv`,\r\n              noAutoBOM: false,\r\n              blobType: \"text/csv;charset=ansi\",\r\n            }}\r\n          >\r\n            {(props) => (\r\n              <div>\r\n                <SearchBar {...props.searchProps} />\r\n                <ClearSearchButton\r\n                  className={`inline-flex ml-4 bg-gray-500 items-center  small outline shadow-sm  font-medium  disabled:opacity-50 disabled:cursor-not-allowed text-center`}\r\n                  {...props.searchProps}\r\n                />\r\n                <ExportCSVButton\r\n                  className={`inline-flex ml-2 bg-gray-500 items-center  small outline shadow-sm  font-medium  disabled:opacity-50 disabled:cursor-not-allowed text-center`}\r\n                  {...props.csvProps}\r\n                >\r\n                  Export CSV!!\r\n                </ExportCSVButton>\r\n                <hr />\r\n                <BootstrapTable\r\n                  {...props.baseProps}\r\n                  noDataIndication=\"Table is Empty\"\r\n                  hover\r\n                  // cellEdit={cellEditFactory({\r\n                  //   mode: \"dbclick\",\r\n                  //   blurToSave: true,\r\n                  //   // afterSaveCell,\r\n                  // })}\r\n                />\r\n              </div>\r\n            )}\r\n          </ToolkitProvider>\r\n        </div>\r\n        <LibraryComponents.Modal.ModalConfirm\r\n          {...deleteItem}\r\n          click={() => {\r\n            Services.deleteDeginisation(deleteItem.id).then((res: any) => {\r\n              if (res.status) {\r\n                LibraryComponents.ToastsStore.success(`Deginisation deleted.`);\r\n                setDeleteItem({ show: false });\r\n                rootStore.deginisationStore.fetchListDeginisation();\r\n              }\r\n            });\r\n          }}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default Deginisation;\r\n","import validate from \"validate.js\";\r\nexport { validate };\r\nexport const constraintsDepartment = {\r\n  lab: {\r\n    presence: true,\r\n    length: {\r\n      minimum: 2,\r\n      message: \"Lab must be least 2 characters \",\r\n    },\r\n  },\r\n  code: {\r\n    presence: true,\r\n    length: {\r\n      minimum: 4,\r\n      message: \"Code must be least 4 characters \",\r\n    },\r\n  },\r\n  name: {\r\n    presence: true,\r\n    length: {\r\n      minimum: 4,\r\n      message: \"Name must be least 4 characters\",\r\n    },\r\n  },\r\n};\r\n","import React, { useState, useContext } from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport * as LibraryComponents from \"@lp/library/components\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport ToolkitProvider, {\r\n  Search,\r\n  CSVExport,\r\n} from \"react-bootstrap-table2-toolkit\";\r\nimport moment from \"moment\";\r\nimport {\r\n  Container,\r\n} from \"reactstrap\";\r\n\r\nimport * as Models from \"../models\";\r\nimport * as Util from \"../util\";\r\nimport RootStoreContext from \"@lp/library/stores\";\r\nimport * as Services from \"../services\";\r\n\r\nconst { SearchBar, ClearSearchButton } = Search;\r\nconst { ExportCSVButton } = CSVExport;\r\n\r\nconst Department = observer(() => {\r\n  const rootStore = useContext(RootStoreContext.rootStore);\r\n  const [errors, setErrors] = useState<Models.IDepartment>();\r\n  const [deleteItem, setDeleteItem] = useState<any>({});\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        <LibraryComponents.Header>\r\n          <LibraryComponents.PageHeading\r\n            title=\"Department\"\r\n            subTitle=\"Add, Edit & Delete Lab\"\r\n          />\r\n        </LibraryComponents.Header>\r\n        <div className=\" mx-auto  p-4\">\r\n          <div className=\"m-1 p-2 rounded-lg shadow-xl\">\r\n            <LibraryComponents.Grid cols={2}>\r\n              <LibraryComponents.List\r\n                direction=\"col\"\r\n                space={4}\r\n                justify=\"stretch\"\r\n                fill\r\n              >\r\n                <LibraryComponents.Form.InputWrapper label=\"Lab\" id=\"lab\">\r\n                  <select\r\n                    name=\"lab\"\r\n                    className=\"leading-4 p-2 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-base border border-gray-300 rounded-md\"\r\n                    onChange={(e) => {\r\n                      const lab = e.target.value;\r\n                      setErrors({\r\n                        ...errors,\r\n                        lab: Util.validate.single(\r\n                          lab,\r\n                          Util.constraintsDepartment.lab\r\n                        ),\r\n                      });\r\n                      rootStore.departmentStore.updateDepartment({\r\n                        ...rootStore.departmentStore.department,\r\n                        lab,\r\n                      });\r\n                    }}\r\n                  >\r\n                    <option selected>Select</option>\r\n                    {rootStore.labStore.listLabs.map(\r\n                      (item: any) => (\r\n                        <option key={item.name} value={item.code}>\r\n                          {item.name}\r\n                        </option>\r\n                      )\r\n                    )}\r\n                  </select>\r\n                </LibraryComponents.Form.InputWrapper>\r\n\r\n                <LibraryComponents.Form.Input\r\n                  label=\"Code\"\r\n                  id=\"code\"\r\n                  placeholder=\"Code\"\r\n                  value={rootStore.departmentStore.department?.code}\r\n                  onChange={(code) => {\r\n                    setErrors({\r\n                      ...errors,\r\n                      code: Util.validate.single(\r\n                        code,\r\n                        Util.constraintsDepartment.code\r\n                      ),\r\n                    });\r\n                    rootStore.departmentStore.updateDepartment({\r\n                      ...rootStore.departmentStore.department,\r\n                      code,\r\n                    });\r\n                  }}\r\n                />\r\n                {errors?.code && (\r\n                  <span className=\"text-red-600 font-medium relative\">\r\n                    {errors.code}\r\n                  </span>\r\n                )}\r\n                <LibraryComponents.Form.Input\r\n                  label=\"Name\"\r\n                  name=\"name\"\r\n                  placeholder=\"Name\"\r\n                  value={rootStore.departmentStore.department?.name}\r\n                  onChange={(name) => {\r\n                    setErrors({\r\n                      ...errors,\r\n                      name: Util.validate.single(\r\n                        name,\r\n                        Util.constraintsDepartment.name\r\n                      ),\r\n                    });\r\n                    rootStore.departmentStore.updateDepartment({\r\n                      ...rootStore.departmentStore.department,\r\n                      name,\r\n                    });\r\n                  }}\r\n                />\r\n\r\n                {errors?.name && (\r\n                  <span className=\"text-red-600 font-medium relative\">\r\n                    {errors.name}\r\n                  </span>\r\n                )}\r\n              </LibraryComponents.List>\r\n            </LibraryComponents.Grid>\r\n            <br />\r\n\r\n            <LibraryComponents.List direction=\"row\" space={3} align=\"center\">\r\n              <LibraryComponents.Button\r\n                size=\"medium\"\r\n                type=\"solid\"\r\n                icon={LibraryComponents.Icons.Save}\r\n                onClick={() => {\r\n                  if (\r\n                    Util.validate(\r\n                      rootStore.departmentStore.department,\r\n                      Util.constraintsDepartment\r\n                    ) === undefined\r\n                  ) {\r\n                    rootStore.setProcessLoading(true);\r\n                    Services.adddepartment(\r\n                      rootStore.departmentStore.department\r\n                    ).then(() => {\r\n                      rootStore.setProcessLoading(false);\r\n                      LibraryComponents.ToastsStore.success(\r\n                        `Department created.`\r\n                      );\r\n                      rootStore.departmentStore.fetchListDepartment();\r\n                      rootStore.departmentStore.clear();\r\n                    });\r\n                  } else {\r\n                    LibraryComponents.ToastsStore.warning(\r\n                      \"Please enter all information!\"\r\n                    );\r\n                  }\r\n                }}\r\n              >\r\n                Save\r\n              </LibraryComponents.Button>\r\n              <LibraryComponents.Button\r\n                size=\"medium\"\r\n                type=\"outline\"\r\n                icon={LibraryComponents.Icons.Remove}\r\n                onClick={() => {\r\n                  rootStore.departmentStore.clear();\r\n                }}\r\n              >\r\n                Clear\r\n              </LibraryComponents.Button>\r\n            </LibraryComponents.List>\r\n          </div>\r\n          <br />\r\n          <div className=\"m-1 p-1 rounded-lg shadow-xl flex flex-row\">\r\n            \r\n            <ToolkitProvider\r\n              keyField=\"id\"\r\n              data={rootStore.departmentStore.listDepartment || []}\r\n              columns={[\r\n                {\r\n                  dataField: \"lab\",\r\n                  text: \"Lab\",\r\n                  sort: true,\r\n                },\r\n                {\r\n                  dataField: \"code\",\r\n                  text: \"Code\",\r\n                  sort: true,\r\n                },\r\n                {\r\n                  dataField: \"name\",\r\n                  text: \"name\",\r\n                },\r\n                {\r\n                  dataField: \"opration\",\r\n                  text: \"Delete\",\r\n                  editable: false,\r\n                  csvExport: false,\r\n                  formatter: (cellContent, row) => (\r\n                    <>\r\n                      <LibraryComponents.Button\r\n                        size=\"small\"\r\n                        type=\"outline\"\r\n                        icon={LibraryComponents.Icons.Remove}\r\n                        onClick={() => {\r\n                          setDeleteItem({\r\n                            show: true,\r\n                            id: row._id,\r\n                            title: \"Are you sure?\",\r\n                            body: `Delete ${row.name} lab!`,\r\n                          });\r\n                        }}\r\n                      >\r\n                        Delete\r\n                      </LibraryComponents.Button>\r\n                    </>\r\n                  ),\r\n                },\r\n              ]}\r\n              search\r\n              exportCSV={{\r\n                fileName: `department_${moment(new Date()).format(\r\n                  \"YYYY-MM-DD HH:mm\"\r\n                )}.csv`,\r\n                noAutoBOM: false,\r\n                blobType: \"text/csv;charset=ansi\",\r\n              }}\r\n            >\r\n              {(props) => (\r\n                <div>\r\n                  <SearchBar {...props.searchProps} />\r\n                  <ClearSearchButton\r\n                    className={`inline-flex ml-4 bg-gray-500 items-center  small outline shadow-sm  font-medium  disabled:opacity-50 disabled:cursor-not-allowed text-center`}\r\n                    {...props.searchProps}\r\n                  />\r\n                  <ExportCSVButton\r\n                    className={`inline-flex ml-2 bg-gray-500 items-center  small outline shadow-sm  font-medium  disabled:opacity-50 disabled:cursor-not-allowed text-center`}\r\n                    {...props.csvProps}\r\n                  >\r\n                    Export CSV!!\r\n                  </ExportCSVButton>\r\n                  <hr />\r\n                  <BootstrapTable\r\n                    {...props.baseProps}\r\n                    noDataIndication=\"Table is Empty\"\r\n                    hover\r\n                    // cellEdit={cellEditFactory({\r\n                    //   mode: \"dbclick\",\r\n                    //   blurToSave: true,\r\n                    //   // afterSaveCell,\r\n                    // })}\r\n                  />\r\n                </div>\r\n              )}\r\n            </ToolkitProvider>\r\n          </div>\r\n          <LibraryComponents.Modal.ModalConfirm\r\n            {...deleteItem}\r\n            click={() => {\r\n              Services.deletedepartment(deleteItem.id).then((res: any) => {\r\n                if (res.status) {\r\n                  LibraryComponents.ToastsStore.success(`Department deleted.`);\r\n                  setDeleteItem({ show: false });\r\n                  rootStore.departmentStore.fetchListDepartment();\r\n                }\r\n              });\r\n            }}\r\n          />\r\n        </div>\r\n      </Container>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default Department;\r\n","export enum StatusCode {\n    SUCCESS = 200,\n    CREATED = 201,\n    BAD_REQUEST = 400,\n    UNAUTHORIZED = 401,\n    NOT_FOUND = 404,\n    SERVER_ERROR = 500,\n  }","import React, { useState } from \"react\"\r\nimport { observer } from \"mobx-react\"\r\nimport * as LibraryComponents from \"@lp/library/components\"\r\nimport * as LibraryModels from \"@lp/library/models\"\r\nimport Contexts from \"@lp/library/stores\"\r\nimport * as Services from \"../services\"\r\n\r\nconst Banner = observer(() => {\r\n  const rootStore = React.useContext(Contexts.rootStore)\r\n  const [deleteItem, setDeleteItem] = useState<any>({})\r\n\r\n  return (\r\n    <>\r\n      <LibraryComponents.Header>\r\n        <LibraryComponents.PageHeading\r\n          title=\"Banner\"\r\n          subTitle=\"Add, Edit & Delete Banner\"\r\n        />\r\n      </LibraryComponents.Header>\r\n      <div className=\" mx-auto  p-4  flex-wrap\">\r\n        <div className=\"m-1 p-2 rounded-lg shadow-xl\">\r\n          <LibraryComponents.Grid cols={2}>\r\n            <LibraryComponents.List direction=\"col\" space={4} justify=\"stretch\" fill>\r\n              <LibraryComponents.Form.Input\r\n                label=\"Title\"\r\n                id=\"title\"\r\n                placeholder=\"Title\"\r\n                value={rootStore.bannerStore.banner?.title}\r\n                onChange={(title) => {\r\n                  rootStore.bannerStore.updateBanner({\r\n                    ...rootStore.bannerStore.banner,\r\n                    title,\r\n                  })\r\n                }}\r\n              />\r\n              <LibraryComponents.Form.InputFile\r\n                label=\"File\"\r\n                id=\"file\"\r\n                placeholder=\"File\"\r\n                //value={rootStore.bannerStore.banner?.image}\r\n                onChange={(e) => {\r\n                  const image = e.target.files[0]\r\n                  rootStore.bannerStore.updateBanner({\r\n                    ...rootStore.bannerStore.banner,\r\n                    image,\r\n                  })\r\n                }}\r\n              />\r\n            </LibraryComponents.List>\r\n          </LibraryComponents.Grid>\r\n          <br />\r\n\r\n          <LibraryComponents.List direction=\"row\" space={3} align=\"center\">\r\n            <LibraryComponents.Button\r\n              size=\"medium\"\r\n              type=\"solid\"\r\n              icon={LibraryComponents.Icons.Save}\r\n              onClick={() => {\r\n                rootStore.setProcessLoading(true)\r\n                Services.addBanner(rootStore.bannerStore.banner).then((res) => {\r\n                  if (res.status === LibraryModels.StatusCode.CREATED) {\r\n                    LibraryComponents.ToastsStore.success(`Banner created.`)\r\n                    setTimeout(() => {\r\n                      window.location.reload()\r\n                    }, 2000)\r\n                  }\r\n                })\r\n              }}\r\n            >\r\n              Save\r\n            </LibraryComponents.Button>\r\n            <LibraryComponents.Button\r\n              size=\"medium\"\r\n              type=\"outline\"\r\n              icon={LibraryComponents.Icons.Remove}\r\n              onClick={() => {\r\n                rootStore.userStore.clear()\r\n              }}\r\n            >\r\n              Clear\r\n            </LibraryComponents.Button>\r\n          </LibraryComponents.List>\r\n        </div>\r\n        <br />\r\n        <div className=\"m-1 p-2 rounded-lg shadow-xl\">\r\n          <table className=\"border-separate border border-green-800 w-full\">\r\n            <thead>\r\n              <tr>\r\n                <th className=\"border border-green-600\">Title</th>\r\n                <th className=\"border border-green-600\">Image</th>\r\n                <th className=\"border border-green-600\">Delete</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {rootStore.bannerStore.listBanner?.map((item, key) => (\r\n                <tr key={key}>\r\n                  <td className=\"border border-green-600 text-center\">\r\n                    {item.title}\r\n                  </td>\r\n                  <td className=\"border border-green-600\">\r\n                    <img src={item.image} className=\"w-60 h-40 ml-6\" alt=\"logo\" />\r\n                  </td>\r\n\r\n                  <td className=\"border border-green-600 text-center p-1\">\r\n                    <LibraryComponents.Button\r\n                      size=\"small\"\r\n                      type=\"outline\"\r\n                      icon={LibraryComponents.Icons.Remove}\r\n                      onClick={() => {\r\n                        setDeleteItem({\r\n                          show: true,\r\n                          id: item._id,\r\n                          title: \"Are you sure?\",\r\n                          body: `Delete ${item.title}!`,\r\n                        })\r\n                      }}\r\n                    >\r\n                      Delete\r\n                    </LibraryComponents.Button>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        <LibraryComponents.Modal.ModalConfirm\r\n          {...deleteItem}\r\n          click={() => {\r\n            Services.deleteBanner(deleteItem.id).then((res: any) => {\r\n              console.log({ res })\r\n\r\n              if (res.status) {\r\n                LibraryComponents.ToastsStore.success(`Banner deleted.`)\r\n                setDeleteItem({ show: false })\r\n                rootStore.bannerStore.fetchListBanner()\r\n              }\r\n            })\r\n          }}\r\n        />\r\n      </div>\r\n    </>\r\n  )\r\n})\r\n\r\nexport default Banner\r\n","import React from \"react\";\r\n\r\ninterface ListProps {\r\n  direction?: \"row\" | \"col\";\r\n  space?: number;\r\n  padding?: boolean;\r\n  background?: boolean;\r\n  align?: \"start\" | \"between\" | \"center\" | \"end\";\r\n  justify?: \"start\" | \"end\" | \"center\" | \"stretch\";\r\n  fill?: boolean;\r\n}\r\n\r\nconst List: React.FunctionComponent<ListProps> = (props) => {\r\n  const spacingClass = props.space\r\n    ? `space-${props.direction === \"col\" ? \"y\" : \"x\"}-${props.space}`\r\n    : \"\";\r\n\r\n  const paddingClass = props.padding ? `p-${props.space}` : \"\";\r\n\r\n  const backgroundClass = props.background ? \"bg-gray-100\" : \"\";\r\n\r\n  const alignClass = props.align ? `justify-${props.align}` : \"\";\r\n  const justifyClass = props.justify ? `items-${props.justify}` : \"items-center\";\r\n\r\n  const fillClass = props.fill ? \"flex-1\" : \"\";\r\n  return (\r\n    <span\r\n      className={`flex flex-${\r\n        props.direction || \"row\"\r\n      } ${spacingClass} ${paddingClass} ${backgroundClass} ${alignClass} ${fillClass} ${justifyClass}`}\r\n    >\r\n      {props.children}\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import React from \"react\"\r\nimport * as LibraryComponents from \"@lp/library/components\"\r\n\r\ninterface LabelProps {\r\n  htmlFor: string\r\n}\r\n\r\nexport const Label: React.FunctionComponent<LabelProps> = (props) => (\r\n  <>\r\n    <label\r\n      htmlFor={props.htmlFor}\r\n      className=\"block text-xs font-medium text-gray-700 mb-1\"\r\n    >\r\n      {props.children}\r\n    </label>\r\n  </>\r\n)\r\n\r\ninterface InputWrapperProps {\r\n  id?: string\r\n  label: string\r\n}\r\n\r\nexport const InputWrapper: React.FunctionComponent<InputWrapperProps> = (props) => (\r\n  <div>\r\n    <Label htmlFor={props.id || \"\"}>{props.label}</Label>\r\n    {props.children}\r\n  </div>\r\n)\r\n\r\ninterface InputProps extends InputWrapperProps {\r\n  value?: any\r\n  name?: string\r\n  placeholder?: string\r\n  type?: string\r\n  required?: boolean\r\n  disabled?: boolean\r\n  onChange?: (e: any) => void\r\n  onBlur?: (e: any) => void\r\n}\r\n\r\nexport const Input = (props: InputProps) => (\r\n  <InputWrapper label={props.label} id={props.id}>\r\n    <input\r\n      type={props.type || \"text\"}\r\n      id={props.id}\r\n      name={props.name}\r\n      placeholder={props.placeholder}\r\n      required={props.required || false}\r\n      disabled={props.disabled || false}\r\n      autoComplete=\"given-name\"\r\n      value={props.value}\r\n      onChange={(e) => props.onChange && props.onChange(e.target.value)}\r\n      className=\"leading-4 p-2 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-base border border-gray-300 rounded-md\"\r\n      onBlur={(e) => props.onBlur && props.onBlur(e.target.value)}\r\n    />\r\n  </InputWrapper>\r\n)\r\n\r\ninterface InputRadioProps extends InputWrapperProps {\r\n  values?: string[]\r\n  value?: string\r\n  name?: string\r\n  required?: boolean\r\n  disabled?: boolean\r\n  onChange?: (e: any) => void\r\n}\r\n\r\nexport const InputRadio = (props: InputRadioProps) => (\r\n  <InputWrapper label={props.label} id={props.id}>\r\n    {props.values?.map((item, key) => (\r\n      <div className=\"ml-4\" key={key}>\r\n        <LibraryComponents.List space={3} direction=\"row\">\r\n          <input\r\n            key={key}\r\n            type=\"radio\"\r\n            id={props.id}\r\n            name={props.name}\r\n            value={props.value}\r\n            checked={item === props.value ? true : false}\r\n            onChange={() => props.onChange && props.onChange(item)}\r\n            className=\"leading-4 p-2 focus:ring-indigo-500 focus:border-indigo-500 block  shadow-sm sm:text-base border border-gray-300 rounded-md\"\r\n          />\r\n          <Label htmlFor={props.id || \"\"}>{item}</Label>\r\n        </LibraryComponents.List>\r\n      </div>\r\n    ))}\r\n  </InputWrapper>\r\n)\r\n\r\ninterface InputDateProps extends InputWrapperProps {\r\n  value?: any\r\n  name?: string\r\n  placeholder?: string\r\n  disabled?: boolean\r\n  onChange?: (e: any) => void\r\n}\r\n\r\nexport const InputDate = (props: InputDateProps) => (\r\n  <InputWrapper label={props.label} id={props.id}>\r\n    <input\r\n      type=\"date\"\r\n      id={props.id}\r\n      name={props.name}\r\n      disabled={props.disabled || false}\r\n      value={props.value}\r\n      onChange={(e) => props.onChange && props.onChange(e)}\r\n      className=\"leading-4 p-2 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-base border border-gray-300 rounded-md\"\r\n    />\r\n  </InputWrapper>\r\n)\r\n\r\ninterface SelectOptionProps extends InputWrapperProps {\r\n  value?: any\r\n  values?: any[]\r\n  name?: string\r\n  key: string\r\n  disabled?: boolean\r\n  onChange?: (e: any) => void\r\n}\r\n\r\nexport const SelectOption = (props: SelectOptionProps) => (\r\n  <InputWrapper label={props.label} id={props.id}>\r\n    <select\r\n      name={props.name}\r\n      className=\"leading-4 p-2 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-base border border-gray-300 rounded-md\"\r\n      onChange={(e) => props.onChange && props.onChange(e.target.value)}\r\n    >\r\n      <option selected>Select</option>\r\n      {props.values?.map((item: any) => (\r\n        <option key={item[props.key]} value={item[props.key]}>\r\n          {item[props.key]}\r\n        </option>\r\n      ))}\r\n    </select>\r\n  </InputWrapper>\r\n)\r\n\r\ninterface InputFileProps extends InputWrapperProps {\r\n  value?: any\r\n  name?: string\r\n  placeholder?: string\r\n  disabled?: boolean\r\n  onChange?: (e: any) => void\r\n}\r\n\r\nexport const InputFile = (props: InputFileProps) => (\r\n  <InputWrapper label={props.label} id={props.id}>\r\n    <input\r\n      type=\"file\"\r\n      id={props.id}\r\n      name={props.name}\r\n      disabled={props.disabled || false}\r\n      value={props.value}\r\n      onChange={(e) => props.onChange && props.onChange(e)}\r\n      className=\"leading-4 p-2 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-base border border-gray-300 rounded-md\"\r\n    />\r\n  </InputWrapper>\r\n)\r\n\r\nexport const MultilineInput = (props: InputProps) => (\r\n  <InputWrapper label={props.label} id={props.id}>\r\n    <textarea\r\n      id={props.id}\r\n      autoComplete=\"given-name\"\r\n      value={props.value}\r\n      rows={5}\r\n      onChange={(e) => props.onChange && props.onChange(e.target.value)}\r\n      className=\"leading-4 p-2 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-base border border-gray-300 rounded-md\"\r\n    />\r\n  </InputWrapper>\r\n)\r\n\r\ninterface TagInputProps extends InputWrapperProps {\r\n  value?: string[]\r\n  onChange: (tags: string[]) => void\r\n}\r\n\r\n// export const TagInput = (props: TagInputProps) => {\r\n//   const [search, setSearch] = React.useState<string>(\"\");\r\n//   return (\r\n//     <InputWrapper label={props.label} id={props.id}>\r\n//       <div className=\"p-2 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-base border border-gray-300 rounded-md flex flex-wrap\">\r\n//         {props.value?.map((tag, index) => (\r\n//           <div className=\"my-0.5 mr-1\">\r\n//             <Button\r\n//               pill={true}\r\n//               size=\"small\"\r\n//               type=\"solid\"\r\n//               icon={Icons.Remove}\r\n//               onClick={() => {\r\n//                 let newArray = [...(props.value || [])];\r\n//                 newArray.splice(index, 1);\r\n//                 props.onChange(newArray);\r\n//               }}\r\n//             >\r\n//               {tag}\r\n//             </Button>\r\n//           </div>\r\n//         ))}\r\n//         <div className=\"self-stretch flex items-center\">\r\n//           <input\r\n//             type=\"search\"\r\n//             value={search}\r\n//             onChange={({ target: { value: search } }) => setSearch(search)}\r\n//             className={`text-sm min-w-0 outline-none ring-0 ${\r\n//               props.value?.length ? \"w-16\" : \"w-full\"\r\n//             } my-0.5`}\r\n//             onKeyDown={(e) => {\r\n//               if (e.key === \"Enter\") {\r\n//                 props.onChange(\r\n//                   Array.from(new Set([...(props.value || []), search]))\r\n//                 );\r\n//                 setSearch(\"\");\r\n//               }\r\n//             }}\r\n//           />\r\n//         </div>\r\n//       </div>\r\n//     </InputWrapper>\r\n//   );\r\n// };\r\n","import React from \"react\";\r\nimport { IconProps } from \"./icon\";\r\n\r\ninterface ButtonProps {\r\n  type?: \"solid\" | \"outline\";\r\n  onClick?: () => void;\r\n  size?: \"small\" | \"medium\" | \"large\";\r\n  icon?: React.FunctionComponent<IconProps>;\r\n  pill?: boolean;\r\n  disabled?: string;\r\n}\r\n\r\nconst Button: React.FunctionComponent<ButtonProps> = (props) => {\r\n  const buttonSizeClass =\r\n    props.size === \"small\"\r\n      ? `px-2 py-1 text-xs`\r\n      : props.size === \"large\"\r\n      ? `px-4 py-2 text-base`\r\n      : \"px-3 py-2 text-sm\";\r\n\r\n  const buttonColorClass =\r\n    props.type === \"solid\"\r\n      ? \"text-white bg-indigo-600 hover:bg-indigo-700 hover:shadow-lg\"\r\n      : \"text-gray-600 border border-gray-400 hover:shadow-lg\";\r\n\r\n  const roundedClass = props.pill ? \"rounded-full\" : \"rounded-lg\";\r\n\r\n  const Icon = props.icon;\r\n\r\n  return (\r\n    <button\r\n      onClick={props.onClick}\r\n      type=\"button\"\r\n      disabled={!!props.disabled}\r\n      title={props.disabled}\r\n      className={`inline-flex items-center ${buttonSizeClass} ${roundedClass} shadow-sm  font-medium ${buttonColorClass} disabled:opacity-50 disabled:cursor-not-allowed text-center`}\r\n    >\r\n      {Icon && (\r\n        <Icon\r\n          size={props.size}\r\n          type={props.type === \"solid\" ? \"inverse\" : \"solid\"}\r\n          buttonOffset\r\n        />\r\n      )}\r\n      {props.children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\n\r\nexport interface IconProps {\r\n  type?: \"solid\" | \"inverse\";\r\n  size?: \"small\" | \"medium\" | \"large\";\r\n  buttonOffset?: boolean;\r\n  small?: boolean;\r\n}\r\n\r\nconst getIconClass = (props: IconProps) => {\r\n  const iconSizeClass =\r\n    props.size === \"small\"\r\n      ? `h-3 w-3`\r\n      : props.size === \"large\"\r\n      ? `h-6 h-6`\r\n      : \"h-5 w-5\";\r\n\r\n  const iconColorClass =\r\n    props.type === \"solid\" ? \"text-gray-600\" : \"text-white\";\r\n\r\n  return `${\r\n    props.buttonOffset && \"-ml-1 -mt-1 mr-2\"\r\n  } ${iconSizeClass} ${iconColorClass}`;\r\n};\r\n\r\nexport const Save: React.FunctionComponent<IconProps> = (props: IconProps) => {\r\n  return (\r\n    <svg\r\n      className={getIconClass(props)}\r\n      fill=\"none\"\r\n      stroke=\"currentColor\"\r\n      viewBox=\"0 0 24 24\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n    >\r\n      <path\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n        strokeWidth={2}\r\n        d=\"M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V4\"\r\n      />\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport const Add: React.FunctionComponent<IconProps> = (props: IconProps) => {\r\n  return (\r\n    <svg\r\n      className={getIconClass(props)}\r\n      fill=\"none\"\r\n      stroke=\"currentColor\"\r\n      viewBox=\"0 0 24 24\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n    >\r\n      <path\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n        strokeWidth={2}\r\n        d=\"M14.613,10c0,0.23-0.188,0.419-0.419,0.419H10.42v3.774c0,0.23-0.189,0.42-0.42,0.42s-0.419-0.189-0.419-0.42v-3.774H5.806c-0.23,0-0.419-0.189-0.419-0.419s0.189-0.419,0.419-0.419h3.775V5.806c0-0.23,0.189-0.419,0.419-0.419s0.42,0.189,0.42,0.419v3.775h3.774C14.425,9.581,14.613,9.77,14.613,10 M17.969,10c0,4.401-3.567,7.969-7.969,7.969c-4.402,0-7.969-3.567-7.969-7.969c0-4.402,3.567-7.969,7.969-7.969C14.401,2.031,17.969,5.598,17.969,10 M17.13,10c0-3.932-3.198-7.13-7.13-7.13S2.87,6.068,2.87,10c0,3.933,3.198,7.13,7.13,7.13S17.13,13.933,17.13,10\"\r\n      ></path>\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport const Remove: React.FunctionComponent<IconProps> = (\r\n  props: IconProps\r\n) => {\r\n  return (\r\n    <svg\r\n      className={`${getIconClass({ ...props, buttonOffset: false })} ${\r\n        props.buttonOffset ? \"-ml-1 mr-2\" : \"\"\r\n      }`}\r\n      fill=\"none\"\r\n      stroke=\"currentColor\"\r\n      viewBox=\"0 0 24 24\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n    >\r\n      <path\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n        strokeWidth={2}\r\n        d=\"M6 18L18 6M6 6l12 13\"\r\n      />\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport const Check: React.FunctionComponent<IconProps> = (props: IconProps) => {\r\n  return (\r\n    <svg\r\n      className={`${getIconClass({ ...props, buttonOffset: false })} ${\r\n        props.buttonOffset ? \"-ml-1 mr-2\" : \"\"\r\n      }`}\r\n      fill=\"none\"\r\n      stroke=\"currentColor\"\r\n      viewBox=\"0 0 24 24\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n    >\r\n      <path\r\n        fill=\"none\"\r\n        d=\"M7.197,16.963H7.195c-0.204,0-0.399-0.083-0.544-0.227l-6.039-6.082c-0.3-0.302-0.297-0.788,0.003-1.087\r\n\t\t\t\t\t\t\tC0.919,9.266,1.404,9.269,1.702,9.57l5.495,5.536L18.221,4.083c0.301-0.301,0.787-0.301,1.087,0c0.301,0.3,0.301,0.787,0,1.087\r\n\t\t\t\t\t\t\tL7.741,16.738C7.596,16.882,7.401,16.963,7.197,16.963z\"\r\n      ></path>\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport const Plus: React.FunctionComponent<IconProps> = (props: IconProps) => (\r\n  <svg\r\n    className={getIconClass(props)}\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    viewBox=\"0 0 20 20\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth={2}\r\n    aria-hidden=\"true\"\r\n  >\r\n    <path d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\r\n  </svg>\r\n);\r\n\r\nexport const Spinner: React.FunctionComponent<IconProps> = (\r\n  props: IconProps\r\n) => (\r\n  <svg\r\n    className={`animate-spin ${getIconClass(props)}`}\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    fill=\"none\"\r\n    viewBox=\"0 0 24 24\"\r\n  >\r\n    <circle\r\n      className=\"opacity-25\"\r\n      cx=\"12\"\r\n      cy=\"12\"\r\n      r=\"10\"\r\n      stroke=\"currentColor\"\r\n      stroke-width=\"4\"\r\n    ></circle>\r\n    <path\r\n      className=\"opacity-75\"\r\n      fill=\"currentColor\"\r\n      d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\r\n    ></path>\r\n  </svg>\r\n);\r\n\r\nexport const Tick: React.FunctionComponent<IconProps> = (props) => (\r\n  <svg\r\n    className={`${getIconClass(props)} ${props.small && \"w-3 h-3\"}`}\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    viewBox=\"0 0 24 24\"\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n  >\r\n    <path\r\n      strokeLinecap=\"round\"\r\n      strokeLinejoin=\"round\"\r\n      strokeWidth={3}\r\n      d=\"M5 13l4 4L19 7\"\r\n    />\r\n  </svg>\r\n);\r\n","import React from \"react\";\r\n\r\ninterface GridProps {\r\n  cols?: number;\r\n}\r\n\r\nconst Grid: React.FunctionComponent<GridProps> = (props) => (\r\n  <div className={`grid grid-cols-${props.cols || 1} gap-3 flex-1`}>\r\n    {props.children}\r\n  </div>\r\n);\r\n\r\nexport default Grid;\r\n","import React, { useState } from \"react\"\r\nimport * as LibraryComponents from \"@lp/library/components\"\r\nimport * as Models from \"@lp/features/users/models\"\r\nimport * as Utils from \"@lp/library/utils\"\r\nimport Contexts from \"@lp/library/stores\"\r\n\r\ninterface ModalProps {\r\n  title?: string\r\n  click: () => void\r\n  close: () => void\r\n}\r\n\r\nexport default function ModalChangePassword(props: ModalProps) {\r\n  const rootStore = React.useContext(Contexts.rootStore)\r\n  const [errors, setErrors] = useState<Models.ChangePassword>()\r\n\r\n  // useEffect(() => {\r\n  //   setShowModal(props.show);\r\n  // }, [props]);\r\n\r\n  return (\r\n    <>\r\n      <>\r\n        <div className=\"justify-center items-center flex overflow-x-hidden overflow-y-auto fixed inset-0 z-50 outline-none focus:outline-none\">\r\n          <div className=\"relative w-full my-6 mx-auto max-w-3xl\">\r\n            {/*content*/}\r\n            <div className=\"border-0 rounded-lg shadow-lg relative flex flex-col w-full bg-white outline-none focus:outline-none\">\r\n              {/*header*/}\r\n              <div className=\"flex items-start justify-between p-5 border-b border-solid border-gray-300 rounded-t\">\r\n                <h3 className=\"text-3xl font-semibold\">Change Password</h3>\r\n                <button\r\n                  className=\"p-1  border-0 text-black opacity-1 ml-6 float-right text-3xl leading-none font-semibold outline-none focus:outline-none\"\r\n                  onClick={() => props.close()}\r\n                >\r\n                  <span className=\" text-black h-6 w-6 text-2xl block outline-none focus:outline-none\">\r\n                    ×\r\n                  </span>\r\n                </button>\r\n              </div>\r\n              {/*body*/}\r\n              <div className=\"relative p-6 flex-auto\">\r\n                <LibraryComponents.List\r\n                  direction=\"col\"\r\n                  space={4}\r\n                  justify=\"stretch\"\r\n                  fill\r\n                >\r\n                  <LibraryComponents.Form.Input\r\n                    type=\"password\"\r\n                    label=\"Old Password\"\r\n                    name=\"oldPassword\"\r\n                    placeholder=\"Old Password\"\r\n                    value={rootStore.userStore.changePassword?.oldPassword}\r\n                    onChange={(oldPassword) => {\r\n                      setErrors({\r\n                        ...errors,\r\n                        oldPassword: Utils.validate.single(\r\n                          oldPassword,\r\n                          Utils.constraintsChangePassword.oldPassword\r\n                        ),\r\n                      })\r\n                      rootStore.userStore.updateChangePassword({\r\n                        ...rootStore.userStore.changePassword,\r\n                        oldPassword,\r\n                      })\r\n                    }}\r\n                  />\r\n                  {errors?.oldPassword && (\r\n                    <span className=\"text-red-600 font-medium relative\">\r\n                      {errors.oldPassword}\r\n                    </span>\r\n                  )}\r\n                  <LibraryComponents.Form.Input\r\n                    type=\"password\"\r\n                    label=\"New Password\"\r\n                    name=\"newPassword\"\r\n                    placeholder=\"New Password\"\r\n                    value={rootStore.userStore.changePassword?.newPassword}\r\n                    onChange={(newPassword) => {\r\n                      setErrors({\r\n                        ...errors,\r\n                        newPassword:\r\n                          rootStore.userStore.changePassword?.oldPassword !==\r\n                          newPassword\r\n                            ? Utils.validate.single(\r\n                                newPassword,\r\n                                Utils.constraintsChangePassword.newPassword\r\n                              )\r\n                            : \"Please use diff password!\",\r\n                      })\r\n                      rootStore.userStore.updateChangePassword({\r\n                        ...rootStore.userStore.changePassword,\r\n                        newPassword,\r\n                      })\r\n                    }}\r\n                  />\r\n                  {errors?.newPassword && (\r\n                    <span className=\"text-red-600 font-medium relative\">\r\n                      {errors.newPassword}\r\n                    </span>\r\n                  )}\r\n                  <LibraryComponents.Form.Input\r\n                    type=\"password\"\r\n                    label=\"Confirm Password\"\r\n                    name=\"confirmPassword\"\r\n                    placeholder=\"Confirm Password\"\r\n                    value={rootStore.userStore.changePassword?.confirmPassword}\r\n                    onChange={(confirmPassword) => {\r\n                      setErrors({\r\n                        ...errors,\r\n                        confirmPassword:\r\n                          rootStore.userStore.changePassword?.newPassword !==\r\n                          confirmPassword\r\n                            ? \"Please enter same password!\"\r\n                            : Utils.validate.single(\r\n                                confirmPassword,\r\n                                Utils.constraintsChangePassword.confirmPassword\r\n                              ),\r\n                      })\r\n                      rootStore.userStore.updateChangePassword({\r\n                        ...rootStore.userStore.changePassword,\r\n                        confirmPassword,\r\n                      })\r\n                    }}\r\n                  />\r\n                  {errors?.confirmPassword && (\r\n                    <span className=\"text-red-600 font-medium relative\">\r\n                      {errors.confirmPassword}\r\n                    </span>\r\n                  )}\r\n                </LibraryComponents.List>\r\n              </div>\r\n              {/*footer*/}\r\n              <div className=\"flex items-center justify-end p-6 border-t border-solid border-gray-300 rounded-b\">\r\n                <button\r\n                  className=\"text-red-500 background-transparent font-bold uppercase px-6 py-2 text-sm outline-none focus:outline-none mr-1 mb-1\"\r\n                  type=\"button\"\r\n                  style={{ transition: \"all .15s ease\" }}\r\n                  onClick={() => props.close()}\r\n                >\r\n                  Later\r\n                </button>\r\n                <button\r\n                  className=\"bg-green-500 text-white active:bg-green-600 font-bold uppercase text-sm px-6 py-3 rounded shadow hover:shadow-lg outline-none focus:outline-none mr-1 mb-1\"\r\n                  type=\"button\"\r\n                  style={{ transition: \"all .15s ease\" }}\r\n                  onClick={() => {\r\n                    if (\r\n                      Utils.validate(\r\n                        rootStore.userStore.changePassword,\r\n                        Utils.constraintsChangePassword\r\n                      ) === undefined &&\r\n                      !Utils.checkNotUndefined(errors)\r\n                    ) {\r\n                      props.click()\r\n                    } else {\r\n                      LibraryComponents.ToastsStore.warning(\r\n                        \"Please enter all information!\"\r\n                      )\r\n                    }\r\n                  }}\r\n                >\r\n                  Change\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"opacity-25 fixed inset-0 z-40 bg-black\"></div>\r\n      </>\r\n    </>\r\n  )\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport { Container } from \"reactstrap\";\r\n\r\ninterface ModalProps {\r\n  show?: boolean;\r\n  title?: string;\r\n  body?: string;\r\n  click: () => void;\r\n}\r\n\r\nexport default function ModalConfirm(props: ModalProps) {\r\n  const [showModal, setShowModal] = React.useState(props.show);\r\n  useEffect(() => {\r\n    setShowModal(props.show);\r\n  }, [props]);\r\n\r\n  return (\r\n    <Container>\r\n      {showModal && (\r\n        <>\r\n          <div\r\n            className=\"justify-center items-center  overflow-x-hidden overflow-y-auto fixed inset-0 z-50 outline-none focus:outline-none\"\r\n            onClick={() => setShowModal(false)}\r\n          >\r\n            <div className=\"relative w-auto my-6 mx-auto max-w-3xl\">\r\n              {/*content*/}\r\n              <div className=\"border-0 rounded-lg shadow-lg relative flex flex-col w-full bg-white outline-none focus:outline-none\">\r\n                {/*header*/}\r\n                <div className=\"flex items-start justify-between p-5 border-b border-solid border-gray-300 rounded-t\">\r\n                  <h3 className=\"text-3xl font-semibold\">{props.title}</h3>\r\n                  <button\r\n                    className=\"p-1  border-0 text-black opacity-1 ml-6 float-right text-3xl leading-none font-semibold outline-none focus:outline-none\"\r\n                    onClick={() => setShowModal(false)}\r\n                  >\r\n                    <span className=\" text-black h-6 w-6 text-2xl block outline-none focus:outline-none\">\r\n                      ×\r\n                    </span>\r\n                  </button>\r\n                </div>\r\n                {/*body*/}\r\n                <div className=\"relative p-6 flex-auto\">\r\n                  <p className=\"my-4 text-gray-600 text-lg leading-relaxed\">\r\n                    {props.body}\r\n                  </p>\r\n                </div>\r\n                {/*footer*/}\r\n                <div className=\"flex items-center justify-end p-6 border-t border-solid border-gray-300 rounded-b\">\r\n                  <button\r\n                    className=\"text-red-500 background-transparent font-bold uppercase px-6 py-2 text-sm outline-none focus:outline-none mr-1 mb-1\"\r\n                    type=\"button\"\r\n                    style={{ transition: \"all .15s ease\" }}\r\n                    onClick={() => setShowModal(false)}\r\n                  >\r\n                    Close\r\n                  </button>\r\n                  <button\r\n                    className=\"bg-green-500 text-white active:bg-green-600 font-bold uppercase text-sm px-6 py-3 rounded shadow hover:shadow-lg outline-none focus:outline-none mr-1 mb-1\"\r\n                    type=\"button\"\r\n                    style={{ transition: \"all .15s ease\" }}\r\n                    onClick={() => {\r\n                      setShowModal(false);\r\n                      props.click();\r\n                    }}\r\n                  >\r\n                    yes\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"opacity-25 fixed inset-0 z-40 bg-black\"></div>\r\n        </>\r\n      )}\r\n    </Container>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nconst Header: React.FunctionComponent<any> = (props) => (\r\n  <div className=\"sticky top-0 z-20 flex justify-between items-center px-4 py-3 border-b border-gray-200 bg-white\">\r\n    {props.children}\r\n  </div>\r\n);\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\ninterface PageHeadingProps {\r\n  title: string;\r\n  subTitle?: string;\r\n}\r\n\r\nconst PageHeading: React.FunctionComponent<PageHeadingProps> = (props) => (\r\n  <div>\r\n    <h2 className=\"text-lg font-bold leading-4 text-gray-900 mt-0\">\r\n      {props.title}\r\n    </h2>\r\n    {props.subTitle && (\r\n      <p className=\"text-xs leading-4 text-gray-500 m-0\">{props.subTitle}</p>\r\n    )}\r\n  </div>\r\n);\r\n\r\nexport default PageHeading;\r\n","import { action, observable } from \"mobx\";\r\nimport { version, ignore } from \"mobx-sync\";\r\nimport * as Clients from \"@lp/library/clients\";\r\n\r\nimport UsersStore from \"@lp/features/users/stores\";\r\nimport LabStore from \"@lp/features/collection/labs/stores\";\r\nimport DeginisationStore from \"@lp/features/collection/deginisation/stores\";\r\nimport DepartmentStore from \"@lp/features/collection/department/stores\";\r\nimport RoleStore from \"@lp/features/collection/roles/stores\";\r\nimport BannerStore from \"@lp/features/banner/stores\";\r\n\r\n@version(1.0)\r\nclass RootStore {\r\n  @ignore @observable processLoading: boolean = false;\r\n  @observable isLogin = Clients.storageClient.getItem(\"isLogin\");\r\n\r\n  @observable userStore = new UsersStore();\r\n  @observable labStore = new LabStore();\r\n  @observable deginisationStore = new DeginisationStore();\r\n  @observable departmentStore = new DepartmentStore();\r\n  @observable roleStore = new RoleStore();\r\n  @observable bannerStore = new BannerStore();\r\n\r\n  @action setProcessLoading(processLoading: boolean) {\r\n    this.processLoading = processLoading;\r\n  }\r\n\r\n  @observable themes = {\r\n    corporate: {\r\n      primary: \"#3B82EC\",\r\n      secondary: \"#495057\",\r\n      tertiary: \"#0069fc\",\r\n      success: \"#4BBF73\",\r\n      info: \"#1F9BCF\",\r\n      warning: \"#f0ad4e\",\r\n      danger: \"#d9534f\",\r\n    },\r\n    modern: {\r\n      primary: \"#2c7be5\",\r\n      secondary: \"#9d7bd8\",\r\n      tertiary: \"#5997eb\",\r\n      success: \"#4caf50\",\r\n      info: \"#47bac1\",\r\n      warning: \"#ff9800\",\r\n      danger: \"#e51c23\",\r\n    },\r\n    classic: {\r\n      primary: \"#47bac1\",\r\n      secondary: \"#a180da\",\r\n      tertiary: \"#5fc27e\",\r\n      success: \"#5fc27e\",\r\n      info: \"#5b7dff\",\r\n      warning: \"#fcc100\",\r\n      danger: \"#f44455\",\r\n    },\r\n  };\r\n}\r\nconst store = new RootStore();\r\nexport default store;\r\n","import React from \"react\";\r\nimport RootStore from \"./rootStore\";\r\nimport { AsyncTrunk } from \"mobx-sync\";\r\n\r\nconst trunk = new AsyncTrunk(RootStore, {\r\n  storage: localStorage,\r\n  storageKey: \"__persist_mobx_stores__\",\r\n  delay: 1e3,\r\n});\r\n\r\ntrunk.init().then(() => {\r\n  RootStore.labStore.fetchListLab();\r\n  RootStore.bannerStore.fetchListBanner();\r\n  RootStore.deginisationStore.fetchListDeginisation();\r\n  RootStore.departmentStore.fetchListDepartment();\r\n  RootStore.roleStore.fetchListRole();\r\n});\r\n\r\nconst Contexts = {\r\n  rootStore: React.createContext(RootStore),\r\n  userStore: React.createContext(RootStore.userStore),\r\n  labStore: React.createContext(RootStore.labStore),\r\n  deginisationStore: React.createContext(RootStore.deginisationStore),\r\n  departmentStore: React.createContext(RootStore.departmentStore),\r\n  roleStore: React.createContext(RootStore.roleStore),\r\n  bannerStore: React.createContext(RootStore.bannerStore),\r\n};\r\n\r\nexport default Contexts;\r\n","import * as Clients from \"@lp/library/clients\"\nimport * as Models from \"@lp/features/users/models\"\n\nconst RELATIVE_PATH = \"/auth\"\n\nexport const onLogin = (user: Models.Login) =>\n  new Promise<Models.Login>((resolve, reject) => {\n    const client = Clients.createLimsPlusClient()\n    client\n      .post(`${RELATIVE_PATH}/login`, user)\n      .then((res) => {\n        resolve(res as Models.Login)\n      })\n      .catch((error) => {\n        reject({ error })\n      })\n  })\n\nexport const addUser = (user: Models.Users) =>\n  new Promise<Models.Users>((resolve, reject) => {\n    const client = Clients.createLimsPlusClient()\n    client\n      .post(`${RELATIVE_PATH}/addUser`, user)\n      .then((res) => {\n        resolve(res.data.data as Models.Users)\n      })\n      .catch((error) => {\n        reject({ error })\n      })\n  })\n\nexport const userList = () =>\n  new Promise<Models.Users[]>((resolve, reject) => {\n    const client = Clients.createLimsPlusClient()\n    client\n      .get(`${RELATIVE_PATH}/listUser`)\n      .then((res) => {\n        resolve(res.data.data)\n      })\n      .catch((error) => {\n        reject({ error })\n      })\n  })\n\nexport const deleteUser = (id: string) =>\n  new Promise<Models.Users[]>((resolve, reject) => {\n    const client = Clients.createLimsPlusClient()\n    client\n      .delete(`${RELATIVE_PATH}/deleteUser/${id}`)\n      .then((res) => {\n        resolve(res.data)\n      })\n      .catch((error) => {\n        reject({ error })\n      })\n  })\n\nexport const changePassword = (body: any) =>\n  new Promise<any>((resolve, reject) => {\n    const client = Clients.createLimsPlusClient()\n    client\n      .post(`${RELATIVE_PATH}/changePassword`, body)\n      .then((res) => {\n        resolve(res)\n      })\n      .catch((error) => {\n        reject({ error })\n      })\n  })\n\nexport const checkExitsUserId = (userId: string) =>\n  new Promise<any>((resolve, reject) => {\n    const client = Clients.createLimsPlusClient()\n    client\n      .post(`${RELATIVE_PATH}/checkExitsUserId`, { userId })\n      .then((res) => {\n        resolve(res.data.data)\n      })\n      .catch((error) => {\n        reject({ error })\n      })\n  })\n\nexport const updateUserSingleFiled = (userInfo: any) =>\n  new Promise<any>((resolve, reject) => {\n    const client = Clients.createLimsPlusClient()\n    client\n      .post(`${RELATIVE_PATH}/updateUserSingleFiled`, userInfo)\n      .then((res) => {\n        resolve(res)\n      })\n      .catch((error) => {\n        reject({ error })\n      })\n  })\n","import * as types from \"../constants\";\r\n\r\nconst initialState = {\r\n  isOpen: true,\r\n  isSticky: false\r\n};\r\n\r\nexport default function reducer(state = initialState, actions) {\r\n  switch (actions.type) {\r\n    case types.SIDEBAR_VISIBILITY_TOGGLE:\r\n      return {\r\n        ...state,\r\n        isOpen: !state.isOpen\r\n      };\r\n    case types.SIDEBAR_VISIBILITY_SHOW:\r\n      return {\r\n        ...state,\r\n        isOpen: true\r\n      };\r\n    case types.SIDEBAR_VISIBILITY_HIDE:\r\n      return {\r\n        ...state,\r\n        isOpen: false\r\n      };\r\n\r\n    case types.SIDEBAR_STICKY_TOGGLE:\r\n      return {\r\n        ...state,\r\n        isSticky: !state.isSticky\r\n      };\r\n    case types.SIDEBAR_STICKY_ENABLE:\r\n      return {\r\n        ...state,\r\n        isSticky: true\r\n      };\r\n    case types.LAYOUT_BOXED_ENABLE:\r\n    case types.LAYOUT_BOXED_TOGGLE:\r\n    case types.SIDEBAR_STICKY_DISABLE:\r\n      return {\r\n        ...state,\r\n        isSticky: false\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import * as types from \"../constants\";\r\n\r\nconst initialState = {\r\n  isBoxed: false\r\n};\r\n\r\nexport default function reducer(state = initialState, actions) {\r\n  switch (actions.type) {\r\n    case types.LAYOUT_BOXED_TOGGLE:\r\n      return {\r\n        ...state,\r\n        isBoxed: !state.isBoxed\r\n      };\r\n    case types.LAYOUT_BOXED_ENABLE:\r\n      return {\r\n        ...state,\r\n        isBoxed: true\r\n      };\r\n    case types.SIDEBAR_STICKY_ENABLE:\r\n    case types.SIDEBAR_STICKY_TOGGLE:\r\n    case types.LAYOUT_BOXED_DISABLE:\r\n      return {\r\n        ...state,\r\n        isBoxed: false\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import * as types from \"../constants\";\r\n\r\nconst themes = {\r\n  corporate: {\r\n    primary: \"#3B82EC\",\r\n    secondary: \"#495057\",\r\n    tertiary: \"#0069fc\",\r\n    success: \"#4BBF73\",\r\n    info: \"#1F9BCF\",\r\n    warning: \"#f0ad4e\",\r\n    danger: \"#d9534f\"\r\n  },\r\n  modern: {\r\n    primary: \"#2c7be5\",\r\n    secondary: \"#9d7bd8\",\r\n    tertiary: \"#5997eb\",\r\n    success: \"#4caf50\",\r\n    info: \"#47bac1\",\r\n    warning: \"#ff9800\",\r\n    danger: \"#e51c23\"\r\n  },\r\n  classic: {\r\n    primary: \"#47bac1\",\r\n    secondary: \"#a180da\",\r\n    tertiary: \"#5fc27e\",\r\n    success: \"#5fc27e\",\r\n    info: \"#5b7dff\",\r\n    warning: \"#fcc100\",\r\n    danger: \"#f44455\"\r\n  }\r\n};\r\n\r\nconst initialState = {\r\n  currentTheme: themes.corporate,\r\n  themes: themes\r\n};\r\n\r\nexport default function reducer(state = initialState, actions) {\r\n  switch (actions.type) {\r\n    case types.THEME_TOGGLE:\r\n      return {\r\n        ...state,\r\n        currentTheme: state.themes[actions.payload]\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport sidebar from \"./sidebarReducers\";\r\nimport layout from \"./layoutReducer\";\r\nimport theme from \"./themeReducer\";\r\n\r\nimport { reducer as toastr } from \"react-redux-toastr\";\r\n\r\nexport default combineReducers({\r\n  sidebar,\r\n  layout,\r\n  theme,\r\n  toastr\r\n});\r\n","// Sidebar\r\nexport const SIDEBAR_VISIBILITY_TOGGLE = \"SIDEBAR_VISIBILITY_TOGGLE\";\r\nexport const SIDEBAR_VISIBILITY_SHOW = \"SIDEBAR_VISIBILITY_SHOW\";\r\nexport const SIDEBAR_VISIBILITY_HIDE = \"SIDEBAR_VISIBILITY_HIDE\";\r\nexport const SIDEBAR_STICKY_TOGGLE = \"SIDEBAR_STICKY_TOGGLE\";\r\nexport const SIDEBAR_STICKY_ENABLE = \"SIDEBAR_STICKY_ENABLE\";\r\nexport const SIDEBAR_STICKY_DISABLE = \"SIDEBAR_STICKY_DISABLE\";\r\n\r\n// Layout\r\nexport const LAYOUT_BOXED_TOGGLE = \"LAYOUT_BOXED_TOGGLE\";\r\nexport const LAYOUT_BOXED_ENABLE = \"LAYOUT_BOXED_ENABLE\";\r\nexport const LAYOUT_BOXED_DISABLE = \"LAYOUT_BOXED_DISABLE\";\r\n\r\n// Theme\r\nexport const THEME_TOGGLE = \"THEME_TOGGLE\";\r\n","import { createStore } from \"redux\";\r\nimport rootReducer from \"../reducers/index\";\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport { Container, Row, Spinner } from \"reactstrap\";\r\n\r\nconst Loader = () => (\r\n  <Container fluid className=\"vh-50 d-flex\">\r\n    <Row className=\"justify-content-center align-self-center w-100 text-center\">\r\n      <Spinner color=\"primary\" />\r\n    </Row>\r\n  </Container>\r\n);\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\n\r\nimport Loader from \"./Loader\";\r\n\r\ntype Props = {};\r\ntype State = { component: any };\r\n\r\nexport default function asyncComponent(importComponent) {\r\n  class AsyncComponent extends React.Component<Props, State> {\r\n    constructor(props) {\r\n      super(props);\r\n\r\n      this.state = {\r\n        component: null,\r\n      };\r\n    }\r\n\r\n    async componentDidMount() {\r\n      const { default: component } = await importComponent();\r\n      this.setState({\r\n        component: component,\r\n      });\r\n    }\r\n\r\n    render() {\r\n      const { component } = this.state;\r\n\r\n      const C = component;\r\n\r\n      return C ? <C {...this.props} /> : <Loader />;\r\n    }\r\n  }\r\n\r\n  return AsyncComponent;\r\n}\r\n","import async from \"../layouts/components/Async\"\r\n\r\nimport { Layout as LayoutIcon, Sliders as SlidersIcon } from \"react-feather\"\r\n\r\n// Landing\r\nimport login from \"@lp/features/login/scenes/login\"\r\n\r\n// Dashboards\r\nconst defaultDashboard = async(() => import(\"@lp/features/Default\"))\r\n\r\n// Banner\r\nconst banner = async(() => import(\"@lp/features/banner/scenes/banner\"))\r\n\r\n// Collection\r\nconst collection_Lab = async(() => import(\"@lp/features/collection/labs/scenes/Lab\"))\r\nconst collection_Deginisation = async(\r\n  () => import(\"@lp/features/collection/deginisation/scenes/deginisation\")\r\n)\r\nconst collection_Department = async(\r\n  () => import(\"@lp/features/collection/department/scenes/department\")\r\n)\r\nconst collection_Role = async(\r\n  () => import(\"@lp/features/collection/labs/scenes/Lab\")\r\n)\r\n\r\n// User\r\nconst user = async(() => import(\"@lp/features/users/scenes/user\"))\r\nconst changePassword = async(\r\n  () => import(\"@lp/features/changePassword/scenes/changePassword\")\r\n)\r\n\r\n// Routes\r\nconst loginRoutes = {\r\n  path: \"/\",\r\n  name: \"Login\",\r\n  component: login,\r\n  children: null,\r\n}\r\n\r\nconst dashboardRoutes = {\r\n  path: \"/dashboard\",\r\n  name: \"Dashboard\",\r\n  header: \"Dashboard\",\r\n  icon: SlidersIcon,\r\n  children: [\r\n    {\r\n      path: \"/dashboard/default\",\r\n      name: \"Default\",\r\n      component: defaultDashboard,\r\n    },\r\n  ],\r\n}\r\n\r\nconst bannerRoutes = {\r\n  path: \"/banner\",\r\n  name: \"Banner\",\r\n  icon: LayoutIcon,\r\n  children: [\r\n    {\r\n      path: \"/banner/banner\",\r\n      name: \"Banner\",\r\n      component: banner,\r\n    },\r\n  ],\r\n}\r\n\r\nconst collectionRoutes = {\r\n  path: \"/collection\",\r\n  name: \"Collection\",\r\n  icon: LayoutIcon,\r\n  children: [\r\n    {\r\n      path: \"/collection/lab\",\r\n      name: \"Lab\",\r\n      component: collection_Lab,\r\n    },\r\n    {\r\n      path: \"/collection/deginisation\",\r\n      name: \"Deginisation\",\r\n      component: collection_Deginisation,\r\n    },\r\n    {\r\n      path: \"/collection/department\",\r\n      name: \"Department\",\r\n      component: collection_Department,\r\n    },\r\n    {\r\n      path: \"/collection/role\",\r\n      name: \"Role\",\r\n      component: collection_Role,\r\n    },\r\n  ],\r\n}\r\n\r\nconst userRoutes = {\r\n  path: \"/user\",\r\n  name: \"User\",\r\n  icon: LayoutIcon,\r\n  children: [\r\n    {\r\n      path: \"/user/user\",\r\n      name: \"User\",\r\n      component: user,\r\n    },\r\n    {\r\n      path: \"/user/changePassword\",\r\n      name: \"Change Password\",\r\n      component: changePassword,\r\n    },\r\n  ],\r\n}\r\n\r\n// Dashboard specific routes\r\nexport const dashboardRouter = [\r\n  dashboardRoutes,\r\n  bannerRoutes,\r\n  collectionRoutes,\r\n  userRoutes,\r\n]\r\n\r\n// Landing specific routes\r\nexport const loginRouter = [loginRoutes]\r\n\r\n// All routes\r\nexport default [dashboardRoutes, bannerRoutes, collectionRoutes, userRoutes]\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nconst Wrapper = ({ layout, children }) => (\r\n  <div className={\"wrapper \" + (layout.isBoxed ? \"wrapper-boxed\" : \"\")}>\r\n    {children}\r\n  </div>\r\n);\r\n\r\nexport default connect((store) => ({\r\n  layout: store.layout,\r\n}))(Wrapper);\r\n","import React, { useState } from \"react\";\r\nimport { NavLink, withRouter } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { observer } from \"mobx-react\";\r\nimport Contexts from \"@lp/library/stores\";\r\n\r\nimport { Badge, Collapse } from \"reactstrap\";\r\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\r\n\r\nimport { Box } from \"react-feather\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCircle } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport routes from \"../../routes/index\";\r\n\r\nconst initOpenRoutes = (location) => {\r\n  /* Open collapse element that matches current url */\r\n  const pathName = location.pathname;\r\n\r\n  let _routes = {};\r\n\r\n  routes.forEach((route: any, index) => {\r\n    const isActive = pathName.indexOf(route.path) === 0;\r\n    const isOpen = route.open;\r\n    const isHome = route.containsHome && pathName === \"/\" ? true : false;\r\n\r\n    _routes = Object.assign({}, _routes, {\r\n      [index]: isActive || isOpen || isHome,\r\n    });\r\n  });\r\n\r\n  return _routes;\r\n};\r\n\r\nconst SidebarCategory = withRouter(\r\n  ({\r\n    name,\r\n    badgeColor,\r\n    badgeText,\r\n    isOpen,\r\n    children,\r\n    onClick,\r\n    location,\r\n    to,\r\n  }) => {\r\n    const getSidebarItemClass = (path) => {\r\n      return location.pathname.indexOf(path) !== -1 ||\r\n        (location.pathname === \"/\" && path === \"/dashboard\")\r\n        ? \"active\"\r\n        : \"\";\r\n    };\r\n\r\n    return (\r\n      <li className={\"sidebar-item \" + getSidebarItemClass(to)}>\r\n        <span\r\n          data-toggle=\"collapse\"\r\n          className={\"sidebar-link \" + (!isOpen ? \"collapsed\" : \"\")}\r\n          onClick={onClick}\r\n          aria-expanded={isOpen ? \"true\" : \"false\"}\r\n        >\r\n          <span className=\"align-middle\">{name}</span>\r\n          {badgeColor && badgeText ? (\r\n            <Badge color={badgeColor} size={18} className=\"sidebar-badge\">\r\n              {badgeText}\r\n            </Badge>\r\n          ) : null}\r\n        </span>\r\n        <Collapse isOpen={isOpen}>\r\n          <ul id=\"item\" className={\"sidebar-dropdown list-unstyled\"}>\r\n            {children}\r\n          </ul>\r\n        </Collapse>\r\n      </li>\r\n    );\r\n  }\r\n);\r\n\r\nconst SidebarItem = withRouter(\r\n  ({ name, badgeColor, badgeText, icon: Icon, location, to }) => {\r\n    const getSidebarItemClass = (path) => {\r\n      return location.pathname === path ? \"active\" : \"\";\r\n    };\r\n\r\n    return (\r\n      <li className={\"sidebar-item \" + getSidebarItemClass(to)}>\r\n        <NavLink to={to} className=\"sidebar-link\" activeClassName=\"active\">\r\n          {Icon ? <Icon size={18} className=\"align-middle mr-3\" /> : null}\r\n          {name}\r\n          {badgeColor && badgeText ? (\r\n            <Badge color={badgeColor} size={18} className=\"sidebar-badge\">\r\n              {badgeText}\r\n            </Badge>\r\n          ) : null}\r\n        </NavLink>\r\n      </li>\r\n    );\r\n  }\r\n);\r\n\r\nconst Sidebar = observer(({ location, sidebar, layout }) => {\r\n  const rootStore = React.useContext(Contexts.rootStore);\r\n  const [openRoutes, setOpenRoutes] = useState(() => initOpenRoutes(location));\r\n\r\n  const toggle = (index) => {\r\n    // Collapse all elements\r\n    Object.keys(openRoutes).forEach(\r\n      (item) =>\r\n        openRoutes[index] ||\r\n        setOpenRoutes((openRoutes) =>\r\n          Object.assign({}, openRoutes, { [item]: false })\r\n        )\r\n    );\r\n\r\n    // Toggle selected element\r\n    setOpenRoutes((openRoutes) =>\r\n      Object.assign({}, openRoutes, { [index]: !openRoutes[index] })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <nav\r\n      className={\r\n        \"sidebar\" +\r\n        (!sidebar.isOpen ? \" toggled\" : \"\") +\r\n        (sidebar.isSticky ? \" sidebar-sticky\" : \"\")\r\n      }\r\n    >\r\n      <div className=\"sidebar-content\">\r\n        <PerfectScrollbar>\r\n          <a className=\"sidebar-brand\" href=\"/\">\r\n            <Box className=\"align-middle text-primary\" size={24} />{\" \"}\r\n            <span className=\"align-middle\">Lims Plus</span>\r\n          </a>\r\n\r\n          <ul className=\"sidebar-nav\">\r\n            {routes.map((category: any, index) => {\r\n              return (\r\n                <React.Fragment key={index}>\r\n                  {/* {category.header ? (\r\n                    <li className=\"sidebar-header\">{category.header}</li>\r\n                  ) : null} */}\r\n\r\n                  {category.children ? (\r\n                    <SidebarCategory\r\n                      name={category.name}\r\n                      badgeColor={category.badgeColor}\r\n                      badgeText={category.badgeText}\r\n                      icon={category.icon}\r\n                      to={category.path}\r\n                      isOpen={openRoutes[index]}\r\n                      onClick={() => toggle(index)}\r\n                    >\r\n                      {category.children.map((route, index) => (\r\n                        <SidebarItem\r\n                          key={index}\r\n                          name={route.name}\r\n                          to={route.path}\r\n                          badgeColor={route.badgeColor}\r\n                          badgeText={route.badgeText}\r\n                        />\r\n                      ))}\r\n                    </SidebarCategory>\r\n                  ) : (\r\n                    <SidebarItem\r\n                      name={category.name}\r\n                      to={category.path}\r\n                      icon={category.icon}\r\n                      badgeColor={category.badgeColor}\r\n                      badgeText={category.badgeText}\r\n                    />\r\n                  )}\r\n                </React.Fragment>\r\n              );\r\n            })}\r\n          </ul>\r\n\r\n          {!layout.isBoxed && !sidebar.isSticky ? (\r\n            <div className=\"sidebar-bottom d-none d-lg-block\">\r\n              <div className=\"media\">\r\n                {/* <img\r\n                  className=\"rounded-circle mr-3\"\r\n                  src={avatar}\r\n                  alt=\"Chris Wood\"\r\n                  width=\"40\"\r\n                  height=\"40\"\r\n                /> */}\r\n                <div className=\"media-body\">\r\n                  <h5 className=\"mb-1\">\r\n                    {rootStore.userStore.inputLogin.userId}\r\n                  </h5>\r\n                  <div>\r\n                    <FontAwesomeIcon icon={faCircle} className=\"text-success\" />{\" \"}\r\n                    Online\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ) : null}\r\n        </PerfectScrollbar>\r\n      </div>\r\n    </nav>\r\n  );\r\n});\r\n\r\nexport default withRouter(\r\n  connect((store) => ({\r\n    sidebar: store.sidebar,\r\n    layout: store.layout,\r\n  }))(Sidebar)\r\n);\r\n","import React from \"react\";\r\nimport classNames from \"classnames\";\r\n\r\nconst Main = ({ className, children }) => (\r\n  <div className={classNames(\"main\", className)}>{children}</div>\r\n);\r\n\r\nexport default Main;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { toggleSidebar } from \"../../redux/actions/sidebarActions\";\r\nimport * as Clients from \"@lp/library/clients\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Contexts from \"@lp/library/stores\";\r\n\r\nimport {\r\n  Row,\r\n  Col,\r\n  Collapse,\r\n  Navbar,\r\n  Nav,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  ListGroup,\r\n  ListGroupItem,\r\n  Form,\r\n  Input,\r\n} from \"reactstrap\";\r\n\r\nimport {\r\n  AlertCircle,\r\n  Bell,\r\n  BellOff,\r\n  Home,\r\n  MessageCircle,\r\n  PieChart,\r\n  Settings,\r\n  UserPlus,\r\n} from \"react-feather\";\r\n\r\nconst notifications = [\r\n  {\r\n    type: \"important\",\r\n    title: \"Update completed\",\r\n    description: \"Restart server 12 to complete the update.\",\r\n    time: \"2h ago\",\r\n  },\r\n  {\r\n    type: \"default\",\r\n    title: \"Lorem ipsum\",\r\n    description: \"Aliquam ex eros, imperdiet vulputate hendrerit et.\",\r\n    time: \"6h ago\",\r\n  },\r\n  {\r\n    type: \"login\",\r\n    title: \"Login from 192.186.1.1\",\r\n    description: \"\",\r\n    time: \"6h ago\",\r\n  },\r\n  {\r\n    type: \"request\",\r\n    title: \"New connection\",\r\n    description: \"Anna accepted your request.\",\r\n    time: \"12h ago\",\r\n  },\r\n];\r\n\r\nconst messages = [\r\n  {\r\n    name: \"Ashley Briggs\",\r\n    avatar: \"\",\r\n    description: \"Nam pretium turpis et arcu. Duis arcu tortor.\",\r\n    time: \"15m ago\",\r\n  },\r\n  {\r\n    name: \"Chris Wood\",\r\n    avatar: \"\",\r\n    description: \"Curabitur ligula sapien euismod vitae.\",\r\n    time: \"2h ago\",\r\n  },\r\n  {\r\n    name: \"Stacie Hall\",\r\n    avatar: \"\",\r\n    description: \"Pellentesque auctor neque nec urna.\",\r\n    time: \"4h ago\",\r\n  },\r\n  {\r\n    name: \"Bertha Martin\",\r\n    avatar: \"\",\r\n    description: \"Aenean tellus metus, bibendum sed, posuere ac, mattis non.\",\r\n    time: \"5h ago\",\r\n  },\r\n];\r\n\r\ninterface InputProps {\r\n  children: any;\r\n  count?: any;\r\n  showBadge?: any;\r\n  header?: any;\r\n  footer?: any;\r\n  icon?: any;\r\n}\r\n\r\nconst NavbarDropdown: React.FunctionComponent<InputProps> = ({\r\n  children,\r\n  count,\r\n  showBadge,\r\n  header,\r\n  footer,\r\n  icon: Icon,\r\n}) => (\r\n  <UncontrolledDropdown nav inNavbar className=\"mr-2\">\r\n    <DropdownToggle nav className=\"nav-icon dropdown-toggle\">\r\n      <div className=\"position-relative\">\r\n        <Icon className=\"align-middle\" size={18} />\r\n        {showBadge ? <span className=\"indicator\">{count}</span> : null}\r\n      </div>\r\n    </DropdownToggle>\r\n    <DropdownMenu right className=\"dropdown-menu-lg py-0\">\r\n      <div className=\"dropdown-menu-header position-relative\">\r\n        {count} {header}\r\n      </div>\r\n      <ListGroup>{children}</ListGroup>\r\n      <DropdownItem header className=\"dropdown-menu-footer\">\r\n        <span className=\"text-muted\">{footer}</span>\r\n      </DropdownItem>\r\n    </DropdownMenu>\r\n  </UncontrolledDropdown>\r\n);\r\n\r\ninterface NavbarItemProps {\r\n  icon: any;\r\n  title?: any;\r\n  description?: any;\r\n  time?: any;\r\n  spacing?: any;\r\n}\r\n\r\nconst NavbarDropdownItem: React.FunctionComponent<NavbarItemProps> = ({\r\n  icon,\r\n  title,\r\n  description,\r\n  time,\r\n}) => (\r\n  <ListGroupItem>\r\n    <Row noGutters className=\"align-items-center\">\r\n      <Col xs={2}>{icon}</Col>\r\n      <Col xs={10} className=\"pl-2\">\r\n        <div className=\"text-dark\">{title}</div>\r\n        <div className=\"text-muted small mt-1\">{description}</div>\r\n        <div className=\"text-muted small mt-1\">{time}</div>\r\n      </Col>\r\n    </Row>\r\n  </ListGroupItem>\r\n);\r\n\r\nconst NavbarComponent = ({ dispatch }) => {\r\n  const history = useHistory();\r\n  const rootStore = React.useContext(Contexts.rootStore);\r\n  return (\r\n    <Navbar color=\"white\" light expand>\r\n      <span\r\n        className=\"sidebar-toggle d-flex mr-2\"\r\n        onClick={() => {\r\n          dispatch(toggleSidebar());\r\n        }}\r\n      >\r\n        <i className=\"hamburger align-self-center\" />\r\n      </span>\r\n\r\n      <Form inline>\r\n        <Input\r\n          type=\"text\"\r\n          placeholder=\"Search projects...\"\r\n          aria-label=\"Search\"\r\n          className=\"form-control-no-border mr-sm-2\"\r\n        />\r\n      </Form>\r\n\r\n      <Collapse navbar>\r\n        <Nav className=\"ml-auto\" navbar>\r\n          <NavbarDropdown\r\n            header=\"New Messages\"\r\n            footer=\"Show all messages\"\r\n            icon={MessageCircle}\r\n            count={messages.length}\r\n            showBadge\r\n          >\r\n            {messages.map((item, key) => {\r\n              return (\r\n                <NavbarDropdownItem\r\n                  key={key}\r\n                  icon={\r\n                    <img\r\n                      className=\"avatar img-fluid rounded-circle\"\r\n                      src={item.avatar}\r\n                      alt={item.name}\r\n                    />\r\n                  }\r\n                  title={item.name}\r\n                  description={item.description}\r\n                  time={item.time}\r\n                  spacing\r\n                />\r\n              );\r\n            })}\r\n          </NavbarDropdown>\r\n\r\n          <NavbarDropdown\r\n            header=\"New Notifications\"\r\n            footer=\"Show all notifications\"\r\n            icon={BellOff}\r\n            count={notifications.length}\r\n          >\r\n            {notifications.map((item, key) => {\r\n              let icon = <Bell size={18} className=\"text-warning\" />;\r\n\r\n              if (item.type === \"important\") {\r\n                icon = <AlertCircle size={18} className=\"text-danger\" />;\r\n              }\r\n\r\n              if (item.type === \"login\") {\r\n                icon = <Home size={18} className=\"text-primary\" />;\r\n              }\r\n\r\n              if (item.type === \"request\") {\r\n                icon = <UserPlus size={18} className=\"text-success\" />;\r\n              }\r\n\r\n              return (\r\n                <NavbarDropdownItem\r\n                  key={key}\r\n                  icon={icon}\r\n                  title={item.title}\r\n                  description={item.description}\r\n                  time={item.time}\r\n                />\r\n              );\r\n            })}\r\n          </NavbarDropdown>\r\n\r\n          <UncontrolledDropdown nav inNavbar>\r\n            <span className=\"d-inline-block d-sm-none\">\r\n              <DropdownToggle nav caret>\r\n                <Settings size={18} className=\"align-middle\" />\r\n              </DropdownToggle>\r\n            </span>\r\n            <span className=\"d-none d-sm-inline-block\">\r\n              <DropdownToggle nav caret>\r\n                <span className=\"text-dark\">Profile</span>\r\n              </DropdownToggle>\r\n            </span>\r\n            <DropdownMenu right>\r\n              {/* <DropdownItem>\r\n                <User size={18} className=\"align-middle mr-2\" />\r\n                Profile\r\n              </DropdownItem> */}\r\n              <DropdownItem>\r\n                <PieChart size={18} className=\"align-middle mr-2\" />\r\n                Analytics\r\n              </DropdownItem>\r\n              <DropdownItem divider />\r\n              <DropdownItem>Settings & Privacy</DropdownItem>\r\n              <DropdownItem>Help</DropdownItem>\r\n              <DropdownItem\r\n                onClick={() => {\r\n                  Clients.storageClient.setItem(\"isLogin\", null);\r\n                  rootStore.userStore.clearLogin();\r\n                  history.push(\"/\");\r\n                }}\r\n              >\r\n                Sign out\r\n              </DropdownItem>\r\n            </DropdownMenu>\r\n          </UncontrolledDropdown>\r\n        </Nav>\r\n      </Collapse>\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nexport default connect((store) => ({\r\n  app: store.app,\r\n}))(NavbarComponent);\r\n","import * as types from \"../constants\";\r\n\r\nexport function toggleSidebar() {\r\n  return {\r\n    type: types.SIDEBAR_VISIBILITY_TOGGLE\r\n  };\r\n}\r\n\r\nexport function showSidebar() {\r\n  return {\r\n    type: types.SIDEBAR_VISIBILITY_SHOW\r\n  };\r\n}\r\n\r\nexport function hideSidebar() {\r\n  return {\r\n    type: types.SIDEBAR_VISIBILITY_HIDE\r\n  };\r\n}\r\n\r\nexport function toggleStickySidebar() {\r\n  return {\r\n    type: types.SIDEBAR_STICKY_TOGGLE\r\n  };\r\n}\r\n\r\nexport function enableStickySidebar() {\r\n  return {\r\n    type: types.SIDEBAR_STICKY_ENABLE\r\n  };\r\n}\r\n\r\nexport function disableStickySidebar() {\r\n  return {\r\n    type: types.SIDEBAR_STICKY_DISABLE\r\n  };\r\n}\r\n","import React from \"react\";\r\n\r\nconst Content = ({ children }) => <div className=\"content\">{children}</div>;\r\n\r\nexport default Content;\r\n","import React from \"react\";\r\nimport { Container, Row, Col } from \"reactstrap\";\r\n\r\nconst Footer = () => (\r\n  <footer className=\"footer\">\r\n    <Container fluid>\r\n      <Row className=\"text-muted\">\r\n        <Col xs=\"6\" className=\"text-left\">\r\n          <ul className=\"list-inline\">\r\n            <li className=\"list-inline-item\">\r\n              <span className=\"text-muted\">Support</span>\r\n            </li>\r\n            <li className=\"list-inline-item\">\r\n              <span className=\"text-muted\">Help Center</span>\r\n            </li>\r\n            <li className=\"list-inline-item\">\r\n              <span className=\"text-muted\">Privacy</span>\r\n            </li>\r\n            <li className=\"list-inline-item\">\r\n              <span className=\"text-muted\">Terms of Service</span>\r\n            </li>\r\n          </ul>\r\n        </Col>\r\n        <Col xs=\"6\" className=\"text-right\">\r\n          <p className=\"mb-0\">\r\n            &copy; {new Date().getFullYear()} -{\" \"}\r\n            <span className=\"text-muted\">Lims Plus</span>\r\n          </p>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  </footer>\r\n);\r\n\r\nexport default Footer;\r\n","import React from \"react\"\r\nimport { connect } from \"react-redux\"\r\n\r\nimport { toggleBoxedLayout } from \"../../redux/actions/layoutActions\"\r\nimport { toggleStickySidebar } from \"../../redux/actions/sidebarActions\"\r\nimport { toggleSidebar } from \"../../redux/actions/sidebarActions\"\r\n\r\nimport { Badge, Button } from \"reactstrap\"\r\nimport PerfectScrollbar from \"react-perfect-scrollbar\"\r\n\r\nimport { Settings as SettingsIcon } from \"react-feather\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { faAngleRight } from \"@fortawesome/free-solid-svg-icons\"\r\n\r\ntype Props = { layout; sidebar; dispatch }\r\ntype State = { isOpen: boolean }\r\n\r\nclass Settings extends React.Component<Props, State> {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      isOpen: false,\r\n    }\r\n\r\n    this.setWrapperRef = this.setWrapperRef.bind(this)\r\n    this.handleClickOutside = this.handleClickOutside.bind(this)\r\n  }\r\n\r\n  toggleSidebar() {\r\n    this.setState({ isOpen: !this.state.isOpen })\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.addEventListener(\"mousedown\", this.handleClickOutside)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener(\"mousedown\", this.handleClickOutside)\r\n  }\r\n\r\n  setWrapperRef(node) {\r\n    //  this.wrapperRef = node;\r\n    console.log({ node })\r\n  }\r\n\r\n  handleClickOutside(event) {\r\n    console.log({ event })\r\n    // if (this.wrapperRef && !this.wrapperRef.contains(event.target)) {\r\n    //   this.setState({ isOpen: false });\r\n    // }\r\n  }\r\n\r\n  render() {\r\n    const { isOpen } = this.state\r\n    const { layout, sidebar, dispatch } = this.props\r\n\r\n    return (\r\n      <div ref={this.setWrapperRef} className={\"settings \" + (isOpen ? \"open\" : \"\")}>\r\n        <div className=\"settings-toggle\" onClick={() => this.toggleSidebar()}>\r\n          <SettingsIcon />\r\n        </div>\r\n\r\n        <div className=\"settings-panel\">\r\n          <div className=\"settings-content\">\r\n            <PerfectScrollbar>\r\n              <div className=\"settings-title\">\r\n                <Button close onClick={() => this.toggleSidebar()} />\r\n\r\n                <h4>Settings</h4>\r\n              </div>\r\n\r\n              <div className=\"settings-section\">\r\n                <small className=\"d-block text-uppercase font-weight-bold text-muted mb-2\">\r\n                  Layouts\r\n                </small>\r\n\r\n                <ul className=\"settings-layouts\">\r\n                  <li>\r\n                    <span\r\n                      className=\"settings-layouts-item\"\r\n                      onClick={() =>\r\n                        dispatch(toggleStickySidebar(), this.toggleSidebar())\r\n                      }\r\n                    >\r\n                      {sidebar.isSticky ? \"Static Sidebar\" : \"Sticky Sidebar\"}\r\n                      <Badge tag=\"small\" className=\"float-right mt-1\">\r\n                        <FontAwesomeIcon icon={faAngleRight} />\r\n                      </Badge>\r\n                    </span>\r\n                  </li>\r\n                  <li>\r\n                    <span\r\n                      className=\"settings-layouts-item\"\r\n                      onClick={() => dispatch(toggleSidebar(), this.toggleSidebar())}\r\n                    >\r\n                      {sidebar.isOpen ? \"Collapsed Sidebar\" : \"Visible Sidebar\"}\r\n                      <Badge tag=\"small\" className=\"float-right mt-1\">\r\n                        <FontAwesomeIcon icon={faAngleRight} />\r\n                      </Badge>\r\n                    </span>\r\n                  </li>\r\n                  <li>\r\n                    <span\r\n                      className=\"settings-layouts-item\"\r\n                      onClick={() =>\r\n                        dispatch(toggleBoxedLayout(), this.toggleSidebar())\r\n                      }\r\n                    >\r\n                      {layout.isBoxed ? \"Full Layout\" : \"Boxed Layout\"}\r\n                      <Badge tag=\"small\" className=\"float-right mt-1\">\r\n                        <FontAwesomeIcon icon={faAngleRight} />\r\n                      </Badge>\r\n                    </span>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n            </PerfectScrollbar>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect((store) => ({\r\n  layout: store.layout,\r\n  sidebar: store.sidebar,\r\n}))(Settings)\r\n","import * as types from \"../constants\";\r\n\r\nexport function toggleBoxedLayout() {\r\n  return {\r\n    type: types.LAYOUT_BOXED_TOGGLE\r\n  };\r\n}\r\n\r\nexport function enableBoxedLayout() {\r\n  return {\r\n    type: types.LAYOUT_BOXED_ENABLE\r\n  };\r\n}\r\n\r\nexport function disableBoxedLayout() {\r\n  return {\r\n    type: types.LAYOUT_BOXED_DISABLE\r\n  };\r\n}\r\n","import React, { useEffect } from \"react\"\r\n\r\nimport Wrapper from \"./components/Wrapper\"\r\nimport Sidebar from \"./components/Sidebar\"\r\nimport Main from \"./components/Main\"\r\nimport Navbar from \"./components/Navbar\"\r\nimport Content from \"./components/Content\"\r\nimport Footer from \"./components/Footer\"\r\nimport Settings from \"./components/Settings\"\r\nimport * as Clients from \"@lp/library/clients\"\r\nimport { useHistory } from \"react-router-dom\"\r\n\r\nconst Dashboard = ({ children }) => {\r\n  const history: any = useHistory()\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      await Clients.storageClient\r\n        .getItem(\"isLogin\")\r\n        .then((isLogin) => {\r\n          if (!isLogin) {\r\n            history.push(\"/\")\r\n          }\r\n        })\r\n        .catch(() => {\r\n          history.push(\"/\")\r\n        })\r\n    }\r\n    fetchData()\r\n  }, [history])\r\n  return (\r\n    <React.Fragment>\r\n      <Wrapper>\r\n        <Sidebar />\r\n        <Main className={null}>\r\n          <Navbar />\r\n          <Content>{children}</Content>\r\n          <Footer />\r\n        </Main>\r\n      </Wrapper>\r\n      <Settings />\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default Dashboard\r\n","import React from \"react\";\r\n\r\n\r\nconst Landing = ({ children }) => <div>{children}</div>;\r\n\r\nexport default Landing;\r\n","import React from \"react\";\r\n\r\nimport { Col, Container, Row } from \"reactstrap\";\r\n\r\nimport Main from \"./components/Main\";\r\nimport Settings from \"./components/Settings\";\r\n\r\nconst Auth = ({ children }) => (\r\n  <React.Fragment>\r\n    <Main className=\"d-flex w-100 justify-content-center\">\r\n      <Container className=\"d-flex flex-column\">\r\n        <Row className=\"h-100\">\r\n          <Col sm=\"10\" md=\"8\" lg=\"6\" className=\"mx-auto d-table h-100\">\r\n            <div className=\"d-table-cell align-middle\">{children}</div>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </Main>\r\n    <Settings  />\r\n  </React.Fragment>\r\n);\r\n\r\nexport default Auth;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { Button } from \"reactstrap\";\r\n\r\nconst Page404 = () => (\r\n  <div className=\"text-center\">\r\n    <h1 className=\"display-1 font-weight-bold\">404</h1>\r\n    <p className=\"h1\">Page not found</p>\r\n    <p className=\"h2 font-weight-normal mt-3 mb-4\">\r\n      The page you are looking for might have been removed.\r\n    </p>\r\n    <Link to=\"/dashboard\">\r\n      <Button color=\"primary\" size=\"lg\">\r\n        Return to website\r\n      </Button>\r\n    </Link>\r\n  </div>\r\n);\r\n\r\nexport default Page404;\r\n","import React from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\ntype Props = { location: any };\r\n\r\nclass ScrollToTop extends React.Component<Props> {\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.location !== prevProps.location) {\r\n      window.scrollTo(0, 0);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default withRouter(ScrollToTop);\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport { loginRouter as loginRouters, dashboardRouter as dashboardRoutes } from \"./index\";\r\n\r\nimport DashboardLayout from \"../layouts/Dashboard\";\r\nimport LandingLayout from \"../layouts/Landing\";\r\nimport AuthLayout from \"../layouts/Auth\";\r\nimport Page404 from \"@lp/features/login/scenes/Page404\";\r\n\r\nimport ScrollToTop from \"@lp/layouts/components/ScrollToTop\";\r\n\r\nconst childRoutes = (Layout, routes) =>\r\n  routes.map(({ children, path, component: Component }, index) =>\r\n    children ? (\r\n      // Route item with children\r\n      children.map(({ path, component: Component }, index) => (\r\n        <Route\r\n          key={index}\r\n          path={path}\r\n          exact\r\n          render={(props) => (\r\n            <Layout>\r\n              <Component {...props} />\r\n            </Layout>\r\n          )}\r\n        />\r\n      ))\r\n    ) : (\r\n      // Route item without children\r\n      <Route\r\n        key={index}\r\n        path={path}\r\n        exact\r\n        render={(props) => (\r\n          <Layout>\r\n            <Component {...props} />\r\n          </Layout>\r\n        )}\r\n      />\r\n    )\r\n  );\r\n\r\nconst Routes = () => (\r\n  <Router>\r\n    <ScrollToTop>\r\n      <Switch>\r\n        {childRoutes(LandingLayout, loginRouters)}\r\n        {childRoutes(DashboardLayout, dashboardRoutes)}\r\n        <Route\r\n          render={() => (\r\n            <AuthLayout>\r\n              <Page404 />\r\n            </AuthLayout>\r\n          )}\r\n        />\r\n      </Switch>\r\n    </ScrollToTop>\r\n  </Router>\r\n);\r\n\r\nexport default Routes;\r\n","import React from \"react\"\r\nimport { observer } from \"mobx-react\"\r\nimport * as LibraryComponents from \"@lp/library/components\"\r\nimport { Provider } from \"react-redux\"\r\nimport ReduxToastr from \"react-redux-toastr\"\r\nimport store from \"./redux/store/index\"\r\nimport Routes from \"./routes/Routes\"\r\n\r\n// interface LoginPageProps extends RouteComponentProps {\r\n//   definitions: Models.Definition[]\r\n// }\r\n\r\n// const LoginPage: React.FunctionComponent<LoginPageProps> = observer((props) => {\r\n//   const rootStore = React.useContext(Contexts.rootStore)\r\n//   const [errors, setErrors] = useState<ModelsUser.Login>()\r\n\r\n//   return (\r\n//     <>\r\n//       <div className=\"h-screen w-screen fixed left-0 top-0 bg-gray-600 flex flex-col justify-center\">\r\n//         <div className=\"grid grid-cols-2\">\r\n//           <div className=\"flex flex-col justify-center items-center md:w-32 lg:w-48\">\r\n//             <img src={Assets.logo} className=\"w-20 h-15\" alt=\"logo\" />\r\n//             <div className=\"mt-2 mb-2\">\r\n//               <Bootstrap.Carousel>\r\n//                 {rootStore.bannerStore.listBanner.map((item, index) => (\r\n//                   <Bootstrap.Carousel.Item interval={5000}>\r\n//                     <img\r\n//                       src={item.image}\r\n//                       style={{\r\n//                         width: window.innerWidth / 3,\r\n//                         height: window.innerHeight / 2,\r\n//                       }}\r\n//                       alt=\"First slide\"\r\n//                     />\r\n//                     <Bootstrap.Carousel.Caption>\r\n//                       <h3 className=\"text-black\">{item.title}</h3>\r\n//                     </Bootstrap.Carousel.Caption>\r\n//                   </Bootstrap.Carousel.Item>\r\n//                 ))}\r\n//               </Bootstrap.Carousel>\r\n//             </div>\r\n//             <h2 className=\"text-2xl text-white font-bold\">Lims Plus</h2>\r\n//           </div>\r\n\r\n//           <div className=\"bg-white p-6 rounded-md max-w-md\">\r\n//             <LibraryComponents.List direction=\"col\" space={4} justify=\"stretch\" fill>\r\n//               <LibraryComponents.Form.InputWrapper label=\"Lab\" id=\"lab\">\r\n//                 <select\r\n//                   name=\"lab\"\r\n//                   className=\"leading-4 p-2 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-base border border-gray-300 rounded-md\"\r\n//                   onChange={(e) => {\r\n//                     const lab = e.target.value\r\n//                     setErrors({\r\n//                       ...errors,\r\n//                       lab: Utils.validate.single(lab, Utils.constraintsLogin.lab),\r\n//                     })\r\n//                     rootStore.userStore.updateInputUser({\r\n//                       ...rootStore.userStore.inputLogin,\r\n//                       lab,\r\n//                     })\r\n//                   }}\r\n//                 >\r\n//                   <option selected>Select</option>\r\n//                   {rootStore.labStore.listLabs.map((item: any, index: number) => (\r\n//                     <option key={item.name} value={item.name}>\r\n//                       {item.name}\r\n//                     </option>\r\n//                   ))}\r\n//                 </select>\r\n//               </LibraryComponents.Form.InputWrapper>\r\n//               {errors?.lab && (\r\n//                 <span className=\"text-red-600 font-medium relative\">\r\n//                   {errors.lab}\r\n//                 </span>\r\n//               )}\r\n//               <LibraryComponents.Form.Input\r\n//                 label=\"User Id\"\r\n//                 id=\"userId\"\r\n//                 placeholder=\"User Id\"\r\n//                 value={rootStore.userStore.inputLogin.userId}\r\n//                 onChange={(userId) => {\r\n//                   setErrors({\r\n//                     ...errors,\r\n//                     userId: Utils.validate.single(\r\n//                       userId,\r\n//                       Utils.constraintsLogin.userId\r\n//                     ),\r\n//                   })\r\n//                   rootStore.userStore.updateInputUser({\r\n//                     ...rootStore.userStore.inputLogin,\r\n//                     userId,\r\n//                   })\r\n//                 }}\r\n//               />\r\n//               {errors?.userId && (\r\n//                 <span className=\"text-red-600 font-medium relative\">\r\n//                   {errors.userId}\r\n//                 </span>\r\n//               )}\r\n//               <LibraryComponents.Form.Input\r\n//                 type=\"password\"\r\n//                 label=\"Password\"\r\n//                 id=\"password\"\r\n//                 placeholder=\"Password\"\r\n//                 value={rootStore.userStore.inputLogin.password}\r\n//                 onChange={(password) => {\r\n//                   setErrors({\r\n//                     ...errors,\r\n//                     password: Utils.validate.single(\r\n//                       password,\r\n//                       Utils.constraintsLogin.password\r\n//                     ),\r\n//                   })\r\n//                   rootStore.userStore.updateInputUser({\r\n//                     ...rootStore.userStore.inputLogin,\r\n//                     password,\r\n//                   })\r\n//                 }}\r\n//               />\r\n//               {errors?.password && (\r\n//                 <span className=\"text-red-600 font-medium relative\">\r\n//                   {errors.password}\r\n//                 </span>\r\n//               )}\r\n//             </LibraryComponents.List>\r\n//             <br />\r\n//             <LibraryComponents.List direction=\"row\" space={3} align=\"center\">\r\n//               <LibraryComponents.Button\r\n//                 size=\"medium\"\r\n//                 type=\"solid\"\r\n//                 icon={LibraryComponents.Icons.Check}\r\n//                 onClick={() => {\r\n//                   if (\r\n//                     Utils.validate(\r\n//                       rootStore.userStore.inputLogin,\r\n//                       Utils.constraintsLogin\r\n//                     ) === undefined\r\n//                   ) {\r\n//                     rootStore.setProcessLoading(true)\r\n//                     Features.Users.Pipes.onLogin(rootStore.userStore.inputLogin)\r\n//                       .then((res) => {\r\n//                         rootStore.setProcessLoading(false)\r\n//                         if (res.length <= 0) {\r\n//                           LibraryComponents.ToastsStore.error(\r\n//                             \"User not found. Please enter correct information!\"\r\n//                           )\r\n//                         } else {\r\n//                           LibraryComponents.ToastsStore.success(\r\n//                             `Welcome ${res[0].userId}`\r\n//                           )\r\n//                           Clients.storageClient.setItem(\"isLogin\", res[0])\r\n//                           navigate(\"/dashbord\")\r\n//                         }\r\n//                       })\r\n//                       .catch(() => {\r\n//                         LibraryComponents.ToastsStore.error(\r\n//                           \"User not found. Please enter correct information!\"\r\n//                         )\r\n//                       })\r\n//                   } else {\r\n//                     LibraryComponents.ToastsStore.warning(\r\n//                       \"Please enter all information!\"\r\n//                     )\r\n//                   }\r\n//                 }}\r\n//               >\r\n//                 Login\r\n//               </LibraryComponents.Button>\r\n//               <LibraryComponents.Button\r\n//                 size=\"medium\"\r\n//                 type=\"outline\"\r\n//                 icon={LibraryComponents.Icons.Remove}\r\n//                 onClick={() => {\r\n//                   rootStore.userStore.clearLogin()\r\n//                 }}\r\n//               >\r\n//                 Clear\r\n//               </LibraryComponents.Button>\r\n//             </LibraryComponents.List>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//       ;\r\n//     </>\r\n//   )\r\n// })\r\n\r\nconst App = observer(() => {\r\n  // const moduleKeys = Object.keys(Features);\r\n  // const moduleFeatures = (Features as any) as Models.Modules;\r\n  // const modulesArray = moduleKeys.map((moduleKey) => moduleFeatures[moduleKey]);\r\n  // const sceneMap = new Map<string, React.FunctionComponent>();\r\n\r\n  // Clients.storageClient.getItem(\"isLogin\").then((isLogin) => {\r\n  //   console.log({ isLogin });\r\n  //   if (isLogin) {\r\n  //     const path = window.location.pathname;\r\n  //     if (path !== \"/\") navigate(window.location.pathname);\r\n  //     else navigate(\"/dashbord\");\r\n  //   } else {\r\n  //     navigate(\"/\");\r\n  //   }\r\n  // });\r\n\r\n  // modulesArray.forEach((moduleObject) => {\r\n  //   Object.keys(moduleObject.Scenes).forEach((sceneKey) => {\r\n  //     sceneMap.set(sceneKey, moduleObject.Scenes[sceneKey]);\r\n  //   });\r\n  // });\r\n\r\n  // const featuresArray = Utils.flatten(\r\n  //   modulesArray.map((module) => module.Definition)\r\n  // );\r\n\r\n  // const featureGroups = Utils.unique(\r\n  //   featuresArray.map((feature) => feature.category)\r\n  // );\r\n\r\n  // const groups = featureGroups.map((group) => ({\r\n  //   label: group,\r\n  //   items: featuresArray.filter((feature) => feature.category === group),\r\n  // }));\r\n\r\n  return (\r\n    <>\r\n      {/* <div className=\"fixed w-52 bg-gray-800 h-screen\">\r\n        <div className=\"px-4 py-3 flex flex-row justify-start items-center mb-3\">\r\n          <div className=\"flex-1 mt-1\">\r\n            <p className=\"m-0 flex-1 text-lg font-bold text-white leading-4\">\r\n              Lims Plus\r\n            </p>\r\n            <p className=\"m-0 mt-2 flex-1 text-xs text-indigo-300 leading-4\">\r\n              Administration\r\n            </p>\r\n          </div>\r\n        </div>\r\n        {groups.map((group) => (\r\n          <div className=\"py-3 px-2\">\r\n            <p className=\"px-2 m-0 text-xs text-indigo-300 leading-4 mb-2\">\r\n              {group.label}\r\n            </p>\r\n            {group.items.map((item) => (\r\n              <Link\r\n                to={item.path.replace(\"/*\", \"\")}\r\n                onClick={() => {\r\n                  if (item.category === \"Login Out\") {\r\n                    Clients.storageClient.setItem(\"isLogin\", null);\r\n                    window.location.reload();\r\n                  }\r\n                }}\r\n                getProps={({ isCurrent }) => {\r\n                  return {\r\n                    className: isCurrent\r\n                      ? \"block hover:bg-indigo-800 bg-indigo-800 rounded-lg\"\r\n                      : \"block hover:bg-indigo-800 rounded-lg\",\r\n                  };\r\n                }}\r\n              >\r\n                <div className=\"px-2 py-2 flex flex-row items-center justify-start\">\r\n                  <svg\r\n                    className=\"w-6 h-6 text-indigo-300\"\r\n                    fill=\"none\"\r\n                    stroke=\"currentColor\"\r\n                    viewBox=\"0 0 24 24\"\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                  >\r\n                    <path\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                      strokeWidth={2}\r\n                      d={item.icon}\r\n                    />\r\n                  </svg>\r\n                  <p className=\"block text-white text-sm ml-3\">{item.label}</p>\r\n                </div>\r\n              </Link>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div> */}\r\n\r\n      {/* <div className=\"ml-52 bg-gray-100 min-h-screen\">\r\n         {rootStore.processLoading && <LibraryComponents.Loader />}\r\n        <Router>\r\n          <LoginPage\r\n            path=\"/\"\r\n            definitions={Utils.flatten(groups.map((g) => g.items))}\r\n          />\r\n          {featuresArray.map((feature) => {\r\n            const Component = sceneMap.get(\r\n              feature.component\r\n            ) as React.FunctionComponent<RouteComponentProps>;\r\n            return <Component path={feature.path} />;\r\n          })}\r\n        </Router>\r\n        \r\n      </div> */}\r\n      <Provider store={store}>\r\n        <Routes />\r\n        <ReduxToastr\r\n          timeOut={5000}\r\n          newestOnTop={true}\r\n          position=\"top-right\"\r\n          transitionIn=\"fadeIn\"\r\n          transitionOut=\"fadeOut\"\r\n          progressBar\r\n          closeOnToastrClick\r\n        />\r\n      </Provider>\r\n      <LibraryComponents.ToastsContainer\r\n        position={LibraryComponents.ToastsContainerPosition.BOTTOM_RIGHT}\r\n        store={LibraryComponents.ToastsStore}\r\n        className=\"h-20\"\r\n      />\r\n    </>\r\n  )\r\n})\r\n\r\nexport default App\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n","import * as Clients from \"@lp/library/clients\";\nimport * as Models from \"../models\";\n\nconst RELATIVE_PATH = \"/lab\";\n\nexport const listLabs = () =>\n  new Promise<Models.Labs[]>((resolve, reject) => {\n    const client = Clients.createLimsPlusClient();\n    client\n      .get(`${RELATIVE_PATH}/listlabs`)\n      .then((res) => {\n        resolve(res.data.data);\n      })\n      .catch((error) => {\n        reject({ error });\n      });\n  });\n\nexport const addLab = (lab?: Models.Labs) =>\n  new Promise<any>((resolve, reject) => {\n    const client = Clients.createLimsPlusClient();\n    client\n      .post(`${RELATIVE_PATH}/addLab`, lab)\n      .then((res) => {\n        resolve(res.data);\n      })\n      .catch((error) => {\n        reject({ error });\n      });\n  });\n\nexport const deleteLab = (id: string) =>\n  new Promise<Models.Labs[]>((resolve, reject) => {\n    const client = Clients.createLimsPlusClient();\n    client\n      .delete(`${RELATIVE_PATH}/deleteLab/${id}`)\n      .then((res) => {\n        resolve(res.data);\n      })\n      .catch((error) => {\n        reject({ error });\n      });\n  });\n","import * as Clients from \"@lp/library/clients\";\r\nimport * as Models from \"../models\";\r\n\r\nconst RELATIVE_PATH = \"/deginisation\";\r\n\r\nexport const listDeginisation = () =>\r\n  new Promise<Models.IDeginisation[]>((resolve, reject) => {\r\n    const client = Clients.createLimsPlusClient();\r\n    client\r\n      .get(`${RELATIVE_PATH}/listDeginisation`)\r\n      .then((res) => {\r\n        resolve(res.data.data);\r\n      })\r\n      .catch((error) => {\r\n        reject({ error });\r\n      });\r\n  });\r\n\r\nexport const addDeginisation = (deginisation?: Models.IDeginisation) =>\r\n  new Promise<any>((resolve, reject) => {\r\n    const client = Clients.createLimsPlusClient();\r\n    client\r\n      .post(`${RELATIVE_PATH}/addDeginisation`, deginisation)\r\n      .then((res) => {\r\n        resolve(res.data);\r\n      })\r\n      .catch((error) => {\r\n        reject({ error });\r\n      });\r\n  });\r\n\r\nexport const deleteDeginisation = (id: string) =>\r\n  new Promise<Models.IDeginisation[]>((resolve, reject) => {\r\n    const client = Clients.createLimsPlusClient();\r\n    client\r\n      .delete(`${RELATIVE_PATH}/deleteDeginisation/${id}`)\r\n      .then((res) => {\r\n        resolve(res.data);\r\n      })\r\n      .catch((error) => {\r\n        reject({ error });\r\n      });\r\n  });\r\n","import * as Clients from \"@lp/library/clients\";\r\nimport * as Models from \"../models\";\r\n\r\nconst RELATIVE_PATH = \"/department\";\r\n\r\nexport const listDepartment = () =>\r\n  new Promise<Models.IDepartment[]>((resolve, reject) => {\r\n    const client = Clients.createLimsPlusClient();\r\n    client\r\n      .get(`${RELATIVE_PATH}/listDepartment`)\r\n      .then((res) => {\r\n        resolve(res.data.data);\r\n      })\r\n      .catch((error) => {\r\n        reject({ error });\r\n      });\r\n  });\r\nexport const adddepartment = (department?: Models.IDepartment) =>\r\n  new Promise<any>((resolve, reject) => {\r\n    const client = Clients.createLimsPlusClient();\r\n    client\r\n      .post(`${RELATIVE_PATH}/addDepartment`, department)\r\n      .then((res) => {\r\n        resolve(res.data);\r\n      })\r\n      .catch((error) => {\r\n        reject({ error });\r\n      });\r\n  });\r\n\r\nexport const deletedepartment = (id: string) =>\r\n  new Promise<Models.IDepartment[]>((resolve, reject) => {\r\n    const client = Clients.createLimsPlusClient();\r\n    client\r\n      .delete(`${RELATIVE_PATH}/deleteDepartment/${id}`)\r\n      .then((res) => {\r\n        resolve(res.data);\r\n      })\r\n      .catch((error) => {\r\n        reject({ error });\r\n      });\r\n  });\r\n","import * as Clients from \"@lp/library/clients\";\r\nimport * as Models from \"../models\";\r\n\r\nconst RELATIVE_PATH = \"/role\";\r\n\r\nexport const listRole = () =>\r\n  new Promise<Models.IRole[]>((resolve, reject) => {\r\n    const client = Clients.createLimsPlusClient();\r\n    client\r\n      .get(`${RELATIVE_PATH}/listRole`)\r\n      .then((res) => {\r\n        resolve(res.data.data);\r\n      })\r\n      .catch((error) => {\r\n        reject({ error });\r\n      });\r\n  });\r\nexport const addrole = (lab?: Models.IRole) =>\r\n  new Promise<any>((resolve, reject) => {\r\n    const client = Clients.createLimsPlusClient();\r\n    client\r\n      .post(`${RELATIVE_PATH}/addRole`, lab)\r\n      .then((res) => {\r\n        resolve(res.data);\r\n      })\r\n      .catch((error) => {\r\n        reject({ error });\r\n      });\r\n  });\r\n\r\nexport const deleterole = (id: string) =>\r\n  new Promise<Models.IRole[]>((resolve, reject) => {\r\n    const client = Clients.createLimsPlusClient();\r\n    client\r\n      .delete(`${RELATIVE_PATH}/deleteRole/${id}`)\r\n      .then((res) => {\r\n        resolve(res.data);\r\n      })\r\n      .catch((error) => {\r\n        reject({ error });\r\n      });\r\n  });\r\n","import * as Clients from \"@lp/library/clients\";\r\nimport * as Models from \"../models\";\r\n\r\nconst RELATIVE_PATH = \"/banner\";\r\n\r\nexport const addBanner = (banner: any) =>\r\n  new Promise<any>((resolve, reject) => {\r\n    const form = new FormData();\r\n    form.append(\"title\", banner.title);\r\n    form.append(\"file\", banner.image);\r\n    form.append(\"folder\", \"banner\");\r\n    form.append(\"name\", banner.image.name);\r\n    form.append(\r\n      \"image\",\r\n      `https://limsplus.blob.core.windows.net/banner/${banner.image.name}`\r\n    );\r\n    const client = Clients.createLimsPlusClient();\r\n    client\r\n      .post(`${RELATIVE_PATH}/addBanner`, form, {\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      })\r\n      .then((res) => {\r\n        resolve(res as Models.IBanner);\r\n      })\r\n      .catch((error) => {\r\n        reject({ error });\r\n      });\r\n  });\r\n\r\nexport const listBanner = () =>\r\n  new Promise<Models.IBanner[]>((resolve, reject) => {\r\n    const client = Clients.createLimsPlusClient();\r\n    client\r\n      .get(`${RELATIVE_PATH}/listBanner`)\r\n      .then((res) => {\r\n        resolve(res.data.data);\r\n      })\r\n      .catch((error) => {\r\n        reject({ error });\r\n      });\r\n  });\r\nexport const deleteBanner = (id: string) =>\r\n  new Promise<Models.IBanner[]>((resolve, reject) => {\r\n    const client = Clients.createLimsPlusClient();\r\n    client\r\n      .delete(`${RELATIVE_PATH}/deleteBanner/${id}`)\r\n      .then((res) => {\r\n        resolve(res.data);\r\n      })\r\n      .catch((error) => {\r\n        reject({ error });\r\n      });\r\n  });\r\n","import React, { useState, useEffect } from \"react\"\r\nimport { observer } from \"mobx-react\"\r\nimport * as LibraryComponents from \"@lp/library/components\"\r\nimport { Col, Container, Row } from \"reactstrap\"\r\nimport * as Assets from \"@lp/library/assets\"\r\nimport * as Bootstrap from \"react-bootstrap\"\r\nimport Contexts from \"@lp/library/stores\"\r\nimport * as Utils from \"@lp/library/utils\"\r\nimport * as ModelsUser from \"@lp/features/users/models\"\r\nimport * as Features from \"@lp/features\"\r\nimport * as Clients from \"@lp/library/clients\"\r\nimport { useHistory } from \"react-router-dom\"\r\n\r\nconst Login = observer(() => {\r\n  const history = useHistory()\r\n  const rootStore = React.useContext(Contexts.rootStore)\r\n  const [errors, setErrors] = useState<ModelsUser.Login>()\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      try {\r\n        await Clients.storageClient\r\n          .getItem(\"isLogin\")\r\n          .then((isLogin) => {\r\n            if (isLogin) {\r\n              history.push(\"/dashboard/default\")\r\n            } else {\r\n              history.push(\"/\")\r\n            }\r\n          })\r\n          .catch(() => {\r\n            history.push(\"/\")\r\n          })\r\n      } catch (e) {\r\n        console.error(e)\r\n      }\r\n    }\r\n    fetchData()\r\n  }, [history])\r\n\r\n  return (\r\n    <>\r\n      <Container fluid className=\"bg-gray-600\">\r\n        <Row className=\"h-screen items-center\">\r\n          <Col md=\"7\">\r\n            <div className=\"flex flex-col justify-center items-center\">\r\n              <img src={Assets.logo} className=\"w-20 h-15\" alt=\"logo\" />\r\n              <div className=\"mt-2 mb-2\">\r\n                <Bootstrap.Carousel>\r\n                  {rootStore.bannerStore.listBanner.map((item, key) => (\r\n                    <Bootstrap.Carousel.Item interval={5000} key={key}>\r\n                      <img\r\n                        key={key}\r\n                        src={item.image}\r\n                        className=\"img-thumbnail img-fluid\"\r\n                        style={{\r\n                          maxWidth: 600,\r\n                          maxHeight: 400,\r\n                          minWidth: 600,\r\n                          minHeight: 400,\r\n                        }}\r\n                        alt=\"First slide\"\r\n                      />\r\n                    </Bootstrap.Carousel.Item>\r\n                  ))}\r\n                </Bootstrap.Carousel>\r\n              </div>\r\n              <h2 className=\"text-2xl text-white font-bold\">Lims Plus</h2>\r\n            </div>\r\n          </Col>\r\n          <Col md=\"5\">\r\n            <div className=\"bg-white p-6 flex flex-col rounded-md\">\r\n              <LibraryComponents.List\r\n                direction=\"col\"\r\n                space={4}\r\n                justify=\"stretch\"\r\n                fill\r\n              >\r\n                <LibraryComponents.Form.InputWrapper label=\"Lab\" id=\"lab\">\r\n                  <select\r\n                    name=\"lab\"\r\n                    className=\"leading-4 p-2 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-base border border-gray-300 rounded-md\"\r\n                    onChange={(e) => {\r\n                      const lab = e.target.value\r\n                      setErrors({\r\n                        ...errors,\r\n                        lab: Utils.validate.single(lab, Utils.constraintsLogin.lab),\r\n                      })\r\n                      rootStore.userStore.updateInputUser({\r\n                        ...rootStore.userStore.inputLogin,\r\n                        lab,\r\n                      })\r\n                    }}\r\n                  >\r\n                    <option selected>Select</option>\r\n                    {rootStore.labStore.listLabs.map((item: any) => (\r\n                      <option key={item.code} value={item.code}>\r\n                        {item.name}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </LibraryComponents.Form.InputWrapper>\r\n                {errors?.lab && (\r\n                  <span className=\"text-red-600 font-medium relative\">\r\n                    {errors.lab}\r\n                  </span>\r\n                )}\r\n                <LibraryComponents.Form.Input\r\n                  label=\"User Id\"\r\n                  id=\"userId\"\r\n                  placeholder=\"User Id\"\r\n                  value={rootStore.userStore.inputLogin.userId}\r\n                  onChange={(userId) => {\r\n                    setErrors({\r\n                      ...errors,\r\n                      userId: Utils.validate.single(\r\n                        userId,\r\n                        Utils.constraintsLogin.userId\r\n                      ),\r\n                    })\r\n                    rootStore.userStore.updateInputUser({\r\n                      ...rootStore.userStore.inputLogin,\r\n                      userId,\r\n                    })\r\n                  }}\r\n                />\r\n                {errors?.userId && (\r\n                  <span className=\"text-red-600 font-medium relative\">\r\n                    {errors.userId}\r\n                  </span>\r\n                )}\r\n                <LibraryComponents.Form.Input\r\n                  type=\"password\"\r\n                  label=\"Password\"\r\n                  id=\"password\"\r\n                  placeholder=\"Password\"\r\n                  value={rootStore.userStore.inputLogin.password}\r\n                  onChange={(password) => {\r\n                    setErrors({\r\n                      ...errors,\r\n                      password: Utils.validate.single(\r\n                        password,\r\n                        Utils.constraintsLogin.password\r\n                      ),\r\n                    })\r\n                    rootStore.userStore.updateInputUser({\r\n                      ...rootStore.userStore.inputLogin,\r\n                      password,\r\n                    })\r\n                  }}\r\n                />\r\n                {errors?.password && (\r\n                  <span className=\"text-red-600 font-medium relative\">\r\n                    {errors.password}\r\n                  </span>\r\n                )}\r\n              </LibraryComponents.List>\r\n              <br />\r\n              <LibraryComponents.List direction=\"row\" space={3} align=\"center\">\r\n                <LibraryComponents.Button\r\n                  size=\"medium\"\r\n                  type=\"solid\"\r\n                  icon={LibraryComponents.Icons.Check}\r\n                  onClick={() => {\r\n                    if (\r\n                      Utils.validate(\r\n                        rootStore.userStore.inputLogin,\r\n                        Utils.constraintsLogin\r\n                      ) === undefined\r\n                    ) {\r\n                      rootStore.setProcessLoading(true)\r\n                      Features.Users.Pipes.onLogin(rootStore.userStore.inputLogin)\r\n                        .then((res) => {\r\n                          console.log({ res })\r\n\r\n                          rootStore.setProcessLoading(false)\r\n                          if (res.status === 200) {\r\n                            LibraryComponents.ToastsStore.success(\r\n                              `Welcome ${res.data.data.userId}`\r\n                            )\r\n                            Clients.storageClient.setItem(\"isLogin\", res.data.data)\r\n                            history.push(\"/dashboard/default\")\r\n                          } else if (res.status === 203) {\r\n                            LibraryComponents.ToastsStore.error(\r\n                              \"User not found. Please enter correct information!\"\r\n                            )\r\n                          }\r\n                        })\r\n                        .catch(() => {\r\n                          LibraryComponents.ToastsStore.error(\r\n                            \"User not found. Please enter correct information!\"\r\n                          )\r\n                        })\r\n                    } else {\r\n                      LibraryComponents.ToastsStore.warning(\r\n                        \"Please enter all information!\"\r\n                      )\r\n                    }\r\n                  }}\r\n                >\r\n                  Login\r\n                </LibraryComponents.Button>\r\n                <LibraryComponents.Button\r\n                  size=\"medium\"\r\n                  type=\"outline\"\r\n                  icon={LibraryComponents.Icons.Remove}\r\n                  onClick={() => {\r\n                    rootStore.userStore.clearLogin()\r\n                  }}\r\n                >\r\n                  Clear\r\n                </LibraryComponents.Button>\r\n              </LibraryComponents.List>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  )\r\n})\r\n\r\nexport default Login\r\n","import { version, ignore } from \"mobx-sync\";\r\nimport { action, observable } from \"mobx\";\r\nimport * as Models from \"../models\";\r\nimport moment from \"moment\";\r\nimport * as Services from \"../services\";\r\n\r\n@version(0.1)\r\nclass UsersStore {\r\n  @observable inputLogin: Models.Login;\r\n  @ignore @observable user: Models.Users;\r\n  @observable userList?: Models.Users[];\r\n  @ignore @observable changePassword?: Models.ChangePassword;\r\n\r\n  @observable checkExitsUserId: boolean = false;\r\n\r\n  constructor() {\r\n    this.user = this.initUser();\r\n    this.inputLogin = this.initLogin();\r\n  }\r\n  private initLogin() {\r\n    return {\r\n      lab: \"\",\r\n      userId: \"\",\r\n      password: \"\",\r\n    };\r\n  }\r\n\r\n  private initUser() {\r\n    let date: Date = new Date();\r\n    date = new Date(moment(date).add(30, \"days\").format(\"YYYY-MM-DD HH:mm:ss\"));\r\n    return {\r\n      userId: \"\",\r\n      lab: \"\",\r\n      password: \"\",\r\n      deginisation: \"\",\r\n      status: \"Active\",\r\n      fullName: \"\",\r\n      department: \"\",\r\n      exipreDate: new Date(date),\r\n      exipreDays: 30,\r\n      role: \"\",\r\n    };\r\n  }\r\n\r\n  @action updateInputUser(user: Models.Login) {\r\n    this.inputLogin = user;\r\n  }\r\n\r\n  @action clearLogin() {\r\n    this.inputLogin = this.initLogin();\r\n  }\r\n\r\n  @action loadUser() {\r\n    Services.userList().then((user) => {\r\n      console.log({ user });\r\n      this.userList = user;\r\n    });\r\n  }\r\n\r\n  @action updateUser(user: Models.Users) {\r\n    this.user = user;\r\n  }\r\n\r\n  @action updateChangePassword(password: Models.ChangePassword) {\r\n    this.changePassword = password;\r\n  }\r\n\r\n  @action clear() {\r\n    this.user = this.initUser();\r\n  }\r\n\r\n  @action setExitsUserId(status: boolean) {\r\n    this.checkExitsUserId = status;\r\n  }\r\n}\r\n\r\nexport default UsersStore;\r\n","import { version, ignore } from \"mobx-sync\";\r\nimport { action, observable } from \"mobx\";\r\nimport * as Models from \"../models\";\r\nimport * as Services from \"../services\";\r\n\r\n@version(0.1)\r\nclass LabStore {\r\n  @observable listLabs: Models.Labs[] = [];\r\n  @ignore @observable labs?: Models.Labs;\r\n\r\n  private initLab() {\r\n    return {\r\n      code: \"\",\r\n      name: \"\",\r\n    };\r\n  }\r\n\r\n  fetchListLab() {\r\n    Services.listLabs().then((res) => {\r\n      console.log({ lab: res });\r\n      this.listLabs = res;\r\n    });\r\n  }\r\n\r\n  @action updateLabs = (labs: Models.Labs) => {\r\n    this.labs = labs;\r\n  };\r\n\r\n  @action clear() {\r\n    this.labs = this.initLab();\r\n  }\r\n}\r\n\r\nexport default LabStore;\r\n","import { version, ignore } from \"mobx-sync\";\r\nimport { action, observable } from \"mobx\";\r\nimport * as Models from \"../models\";\r\nimport * as Services from \"../services\";\r\n\r\n@version(0.1)\r\nclass DeginisationStore {\r\n  @observable listDeginisation: Models.IDeginisation[] = [];\r\n  @ignore @observable deginisation?: Models.IDeginisation;\r\n\r\n  private init() {\r\n    return {\r\n      code: \"\",\r\n      description: \"\",\r\n    };\r\n  }\r\n\r\n  fetchListDeginisation() {\r\n    Services.listDeginisation().then((res) => {\r\n      console.log({ deginisation: res });\r\n      this.listDeginisation = res;\r\n    });\r\n  }\r\n\r\n  @action updateDescription = (deginisation: Models.IDeginisation) => {\r\n    this.deginisation = deginisation;\r\n  };\r\n\r\n  @action clear() {\r\n    this.deginisation = this.init();\r\n  }\r\n}\r\n\r\nexport default DeginisationStore;\r\n","import { version, ignore } from \"mobx-sync\";\r\nimport { action, observable } from \"mobx\";\r\nimport * as Models from \"../models\";\r\nimport * as Services from \"../services\";\r\n\r\n@version(0.1)\r\nclass DepartmentStore {\r\n  @observable listDepartment: Models.IDepartment[] = [];\r\n  @ignore @observable department?: Models.IDepartment;\r\n\r\n  private init() {\r\n    return {\r\n      lab: \"\",\r\n      code: \"\",\r\n      name: \"\",\r\n    };\r\n  }\r\n\r\n  fetchListDepartment() {\r\n    Services.listDepartment().then((res) => {\r\n      console.log({ department: res });\r\n      this.listDepartment = res;\r\n    });\r\n  }\r\n\r\n  @action updateDepartment = (department: Models.IDepartment) => {\r\n    this.department = department;\r\n  };\r\n\r\n  @action clear() {\r\n    this.department = this.init();\r\n  }\r\n}\r\n\r\nexport default DepartmentStore;\r\n","import { version, ignore } from \"mobx-sync\";\r\nimport { action, observable } from \"mobx\";\r\nimport * as Models from \"../models\";\r\nimport * as Services from \"../services\";\r\n\r\n@version(0.1)\r\nclass RoleStore {\r\n  @observable listRole: Models.IRole[] = [];\r\n  @ignore @observable role?: Models.IRole;\r\n\r\n  private init() {\r\n    return {\r\n      code: \"\",\r\n      name: \"\",\r\n    };\r\n  }\r\n\r\n  fetchListRole() {\r\n    Services.listRole().then((res) => {\r\n      console.log({ role: res });\r\n      this.listRole = res;\r\n    });\r\n  }\r\n\r\n  @action updateRole = (role: Models.IRole) => {\r\n    this.role = role;\r\n  };\r\n\r\n  @action clear() {\r\n    this.role = this.init();\r\n  }\r\n}\r\n\r\nexport default RoleStore;\r\n","import { version, ignore } from \"mobx-sync\";\nimport { action, observable } from \"mobx\";\nimport * as Models from \"../models\";\nimport * as Services from \"../services\";\n\n@version(0.1)\nclass BannerStore {\n  @ignore @observable banner?: Models.IBanner;  \n  @observable listBanner: Models.IBanner[] = [];\n  @action fetchListBanner() {\n    Services.listBanner().then((banner) => {   \n      console.log({ banner });\n      this.listBanner = banner;\n    });\n  }\n  @action updateBanner = (banner: Models.IBanner) => {\n    this.banner = banner;\n  };\n}\nexport default BannerStore;\n"],"sourceRoot":""}